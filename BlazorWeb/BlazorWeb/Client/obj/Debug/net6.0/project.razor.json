{"SerializedFilePath":"C:\\Users\\MONSTER\\source\\repos\\BlazorWeb\\BlazorWeb\\Client\\obj\\Debug\\net6.0\\project.razor.json","FilePath":"C:\\Users\\MONSTER\\source\\repos\\BlazorWeb\\BlazorWeb\\Client\\BlazorWeb.Client.csproj","Configuration":{"ConfigurationName":"Default","LanguageVersion":"6.0","Extensions":[]},"ProjectWorkspaceState":{"TagHelpers":[{"HashCode":636853052,"Kind":"Components.Component","Name":"BlazorWeb.Client.App","AssemblyName":"BlazorWeb.Client","CaseSensitive":true,"TagMatchingRules":[{"TagName":"App"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BlazorWeb.Client.App"}},{"HashCode":-1792448827,"Kind":"Components.Component","Name":"BlazorWeb.Client.App","AssemblyName":"BlazorWeb.Client","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BlazorWeb.Client.App"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BlazorWeb.Client.App","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1114813034,"Kind":"Components.Component","Name":"BlazorWeb.Client.Pages.Counter","AssemblyName":"BlazorWeb.Client","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Counter"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BlazorWeb.Client.Pages.Counter"}},{"HashCode":1818694873,"Kind":"Components.Component","Name":"BlazorWeb.Client.Pages.Counter","AssemblyName":"BlazorWeb.Client","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BlazorWeb.Client.Pages.Counter"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BlazorWeb.Client.Pages.Counter","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1784630994,"Kind":"Components.Component","Name":"BlazorWeb.Client.Pages.Index","AssemblyName":"BlazorWeb.Client","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Index"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BlazorWeb.Client.Pages.Index"}},{"HashCode":426550789,"Kind":"Components.Component","Name":"BlazorWeb.Client.Pages.Index","AssemblyName":"BlazorWeb.Client","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BlazorWeb.Client.Pages.Index"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BlazorWeb.Client.Pages.Index","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1068393459,"Kind":"Components.Component","Name":"BlazorWeb.Client.Pages.FetchData","AssemblyName":"BlazorWeb.Client","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FetchData"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BlazorWeb.Client.Pages.FetchData"}},{"HashCode":-1891471495,"Kind":"Components.Component","Name":"BlazorWeb.Client.Pages.FetchData","AssemblyName":"BlazorWeb.Client","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BlazorWeb.Client.Pages.FetchData"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BlazorWeb.Client.Pages.FetchData","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1955205001,"Kind":"Components.Component","Name":"BlazorWeb.Client.Shared.MainLayout","AssemblyName":"BlazorWeb.Client","CaseSensitive":true,"TagMatchingRules":[{"TagName":"MainLayout"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Body","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets the content to be rendered inside the layout.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Body","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BlazorWeb.Client.Shared.MainLayout"}},{"HashCode":-2137682912,"Kind":"Components.Component","Name":"BlazorWeb.Client.Shared.MainLayout","AssemblyName":"BlazorWeb.Client","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BlazorWeb.Client.Shared.MainLayout"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Body","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets the content to be rendered inside the layout.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Body","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BlazorWeb.Client.Shared.MainLayout","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-650952663,"Kind":"Components.ChildContent","Name":"BlazorWeb.Client.Shared.MainLayout.Body","AssemblyName":"BlazorWeb.Client","Documentation":"\n            <summary>\n            Gets the content to be rendered inside the layout.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Body","ParentTag":"MainLayout"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"BlazorWeb.Client.Shared.MainLayout.Body","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-201425202,"Kind":"Components.ChildContent","Name":"BlazorWeb.Client.Shared.MainLayout.Body","AssemblyName":"BlazorWeb.Client","Documentation":"\n            <summary>\n            Gets the content to be rendered inside the layout.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Body","ParentTag":"BlazorWeb.Client.Shared.MainLayout"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"BlazorWeb.Client.Shared.MainLayout.Body","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1493187093,"Kind":"Components.Component","Name":"BlazorWeb.Client.Shared.NavMenu","AssemblyName":"BlazorWeb.Client","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NavMenu"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BlazorWeb.Client.Shared.NavMenu"}},{"HashCode":1692549742,"Kind":"Components.Component","Name":"BlazorWeb.Client.Shared.NavMenu","AssemblyName":"BlazorWeb.Client","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BlazorWeb.Client.Shared.NavMenu"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BlazorWeb.Client.Shared.NavMenu","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1769331001,"Kind":"Components.Component","Name":"BlazorWeb.Client.Shared.SurveyPrompt","AssemblyName":"BlazorWeb.Client","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SurveyPrompt"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Metadata":{"Common.PropertyName":"Title"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BlazorWeb.Client.Shared.SurveyPrompt"}},{"HashCode":-640861951,"Kind":"Components.Component","Name":"BlazorWeb.Client.Shared.SurveyPrompt","AssemblyName":"BlazorWeb.Client","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BlazorWeb.Client.Shared.SurveyPrompt"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Metadata":{"Common.PropertyName":"Title"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"BlazorWeb.Client.Shared.SurveyPrompt","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1369837174,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Button Group Button component is creates a button component which is a graphical user interface that helps to triggers an event on its click action. \n            It can contain a text, an icon, svg or both. \n            </summary> \n            <remarks> \n            The button content is either by specifying <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Content\" /> property or by specifying content within <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> tag directive. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ButtonGroupButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a value that indicates the child content for the button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of button. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to include an icon or image for the button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the button is disabled or not. \n            </summary> \n            <value> \n            <c>true</c>, if the button component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the component is selected or not. \n            </summary> \n            <value> \n            <c>true</c>, if the component is selected. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Selected"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the name of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Name\" /> property is used to set the name attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Name"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the value of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Value\" /> property is used to set the value attribute of input element. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of button. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> tag directive, to render as HTML content. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Content"}},{"Kind":"Components.Component","Name":"IsToggle","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the toggle option is enabled for button component. \n            </summary> \n            <value> \n            <c>true</c>, if the toggle option is enabled for button component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsToggle"}},{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the primary style is enabled for button component. \n            </summary> \n            <value> \n            <c>true</c>, if the primary style is enabled for button component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsPrimary"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the button component. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.IconPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconPosition.Left\" /> \n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the button. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the button. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the button. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"IconPosition"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive. \n            <code><![CDATA[ \n            <SfButtonGroup> \n            <ButtonGroupButton style=\"width:200px\">Left</ButtonGroupButton> \n            <ButtonGroupButton>Center</ButtonGroupButton> \n            <ButtonGroupButton>Right</ButtonGroupButton> \n            </SfButtonGroup> \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"SelectedChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"SelectedChanged","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton"}},{"HashCode":1613544948,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Button Group Button component is creates a button component which is a graphical user interface that helps to triggers an event on its click action. \n            It can contain a text, an icon, svg or both. \n            </summary> \n            <remarks> \n            The button content is either by specifying <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Content\" /> property or by specifying content within <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> tag directive. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a value that indicates the child content for the button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of button. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to include an icon or image for the button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the button is disabled or not. \n            </summary> \n            <value> \n            <c>true</c>, if the button component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the component is selected or not. \n            </summary> \n            <value> \n            <c>true</c>, if the component is selected. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Selected"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the name of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Name\" /> property is used to set the name attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Name"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the value of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Value\" /> property is used to set the value attribute of input element. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of button. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> tag directive, to render as HTML content. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Content"}},{"Kind":"Components.Component","Name":"IsToggle","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the toggle option is enabled for button component. \n            </summary> \n            <value> \n            <c>true</c>, if the toggle option is enabled for button component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsToggle"}},{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the primary style is enabled for button component. \n            </summary> \n            <value> \n            <c>true</c>, if the primary style is enabled for button component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsPrimary"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the button component. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.IconPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconPosition.Left\" /> \n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the button. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the button. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the button. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"IconPosition"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive. \n            <code><![CDATA[ \n            <SfButtonGroup> \n            <ButtonGroupButton style=\"width:200px\">Left</ButtonGroupButton> \n            <ButtonGroupButton>Center</ButtonGroupButton> \n            <ButtonGroupButton>Right</ButtonGroupButton> \n            </SfButtonGroup> \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"SelectedChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"SelectedChanged","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1385338354,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a value that indicates the child content for the button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"ButtonGroupButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1038707939,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a value that indicates the child content for the button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.ButtonGroupButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1078997277,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.SfButtonGroup","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            ButtonGroup is a container that groups a series of buttons on a single line. It has an optional radio button (single selection) and checkbox (multiple selection) behavior. \n            It may contain DropDownButton or SplitButton component. \n            </summary> \n            <example> \n            In the below code example, a basic button group is initialized with <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> property. \n            <code><![CDATA[ \n            <SfButtonGroup> \n            <ButtonGroupButton>Left</ButtonGroupButton> \n            <ButtonGroupButton>Center</ButtonGroupButton> \n            <ButtonGroupButton>Right</ButtonGroupButton> \n            </SfButtonGroup> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfButtonGroup"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a value that indicates the child content for button group including HTML element. If the child content is not specified, button is rendered using <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfButtonGroup\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates CSS class string to customize the appearance of button group. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of button group. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a collection of additional attributes that will applied to the button group container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, button group width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfButtonGroup\" /> tag directive. \n            <code><![CDATA[ \n            <SfButtonGroup style=\"width:200px\"> \n            <ButtonGroupButton>Left</ButtonGroupButton> \n            <ButtonGroupButton>Center</ButtonGroupButton> \n            <ButtonGroupButton>Right</ButtonGroupButton> \n            </SfButtonGroup> \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.SplitButtons.SelectionMode","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates the selection mode of the button group component. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SelectionMode\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.SplitButtons.SelectionMode.Default\" /> \n            </value> \n            <remarks> \n            If the <c>Mode</c> is <c>Default</c>, it allows default selection in the button group component. \n            If the <c>Mode</c> is <c>Single</c>, it allows single selection in the button group component. \n            If the <c>Mode</c> is <c>Multiple</c>, it allows multiple selection in the button group component. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Mode"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfButtonGroup\" /> rendering is completed.  \n            </summary> \n            <example> \n            <code><![CDATA[ \n            <SfButtonGroup Created=\"@Created\"> \n            <ButtonGroupButton>Left</ButtonGroupButton> \n            <ButtonGroupButton>Center</ButtonGroupButton> \n            <ButtonGroupButton>Right</ButtonGroupButton> \n            </SfButtonGroup> \n            @code { \n                private void Created() { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfButtonGroup"}},{"HashCode":1359877951,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.SfButtonGroup","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            ButtonGroup is a container that groups a series of buttons on a single line. It has an optional radio button (single selection) and checkbox (multiple selection) behavior. \n            It may contain DropDownButton or SplitButton component. \n            </summary> \n            <example> \n            In the below code example, a basic button group is initialized with <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> property. \n            <code><![CDATA[ \n            <SfButtonGroup> \n            <ButtonGroupButton>Left</ButtonGroupButton> \n            <ButtonGroupButton>Center</ButtonGroupButton> \n            <ButtonGroupButton>Right</ButtonGroupButton> \n            </SfButtonGroup> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.SfButtonGroup"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a value that indicates the child content for button group including HTML element. If the child content is not specified, button is rendered using <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfButtonGroup\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates CSS class string to customize the appearance of button group. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of button group. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a collection of additional attributes that will applied to the button group container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, button group width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfButtonGroup\" /> tag directive. \n            <code><![CDATA[ \n            <SfButtonGroup style=\"width:200px\"> \n            <ButtonGroupButton>Left</ButtonGroupButton> \n            <ButtonGroupButton>Center</ButtonGroupButton> \n            <ButtonGroupButton>Right</ButtonGroupButton> \n            </SfButtonGroup> \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.SplitButtons.SelectionMode","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates the selection mode of the button group component. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SelectionMode\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.SplitButtons.SelectionMode.Default\" /> \n            </value> \n            <remarks> \n            If the <c>Mode</c> is <c>Default</c>, it allows default selection in the button group component. \n            If the <c>Mode</c> is <c>Single</c>, it allows single selection in the button group component. \n            If the <c>Mode</c> is <c>Multiple</c>, it allows multiple selection in the button group component. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Mode"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfButtonGroup\" /> rendering is completed.  \n            </summary> \n            <example> \n            <code><![CDATA[ \n            <SfButtonGroup Created=\"@Created\"> \n            <ButtonGroupButton>Left</ButtonGroupButton> \n            <ButtonGroupButton>Center</ButtonGroupButton> \n            <ButtonGroupButton>Right</ButtonGroupButton> \n            </SfButtonGroup> \n            @code { \n                private void Created() { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfButtonGroup","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1723890691,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.SfButtonGroup.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a value that indicates the child content for button group including HTML element. If the child content is not specified, button is rendered using <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfButtonGroup\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfButtonGroup"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfButtonGroup.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-129756389,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.SfButtonGroup.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a value that indicates the child content for button group including HTML element. If the child content is not specified, button is rendered using <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfButtonGroup\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"T:Syncfusion.Blazor.SplitButtons.ButtonGroupButton\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.SplitButtons.SfButtonGroup"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfButtonGroup.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":516112764,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.DropDownButtonEvents","AssemblyName":"Syncfusion.Blazor.SplitButtons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DropDownButtonEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> popup is closing.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. And you can access the DropDownButton popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfDropDownButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <DropDownButtonEvents OnClose=\"@OnClose\"></DropDownButtonEvents> \n            </SfDropDownButton> \n            @code { \n                private void OnClose(BeforeOpenCloseMenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClose","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnItemRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> rendering is completed.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. And you can customize the DropDownButton items rendering using <see cref=\"T:Syncfusion.Blazor.SplitButtons.MenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfDropDownButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <DropDownButtonEvents OnItemRender=\"@OnItemRender\"></DropDownButtonEvents> \n            </SfDropDownButton> \n            @code { \n                private void OnItemRender(MenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnItemRender","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> popup is opening.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. And you can access the DropDownButton popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs\" />. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> popup is closed.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. And you can access the DropDownButton popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfDropDownButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <DropDownButtonEvents Closed=\"@Closed\"></DropDownButtonEvents> \n            </SfDropDownButton> \n            @code { \n                private void Closed(OpenCloseMenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Closed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> rendering is completed.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> popup is opened.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. And you can access the DropDownButton popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs\" />. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Opened","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> item is clicked.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. And you can access the DropDownButton item related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.MenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfDropDownButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <DropDownButtonEvents ItemSelected=\"@ItemSelected\"></DropDownButtonEvents> \n            </SfDropDownButton> \n            @code { \n                private void ItemSelected(MenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"ItemSelected","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.DropDownButtonEvents"}},{"HashCode":-1471074445,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.DropDownButtonEvents","AssemblyName":"Syncfusion.Blazor.SplitButtons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.DropDownButtonEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> popup is closing.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. And you can access the DropDownButton popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfDropDownButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <DropDownButtonEvents OnClose=\"@OnClose\"></DropDownButtonEvents> \n            </SfDropDownButton> \n            @code { \n                private void OnClose(BeforeOpenCloseMenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClose","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnItemRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> rendering is completed.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. And you can customize the DropDownButton items rendering using <see cref=\"T:Syncfusion.Blazor.SplitButtons.MenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfDropDownButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <DropDownButtonEvents OnItemRender=\"@OnItemRender\"></DropDownButtonEvents> \n            </SfDropDownButton> \n            @code { \n                private void OnItemRender(MenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnItemRender","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> popup is opening.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. And you can access the DropDownButton popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs\" />. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> popup is closed.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. And you can access the DropDownButton popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfDropDownButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <DropDownButtonEvents Closed=\"@Closed\"></DropDownButtonEvents> \n            </SfDropDownButton> \n            @code { \n                private void Closed(OpenCloseMenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Closed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> rendering is completed.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> popup is opened.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. And you can access the DropDownButton popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs\" />. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Opened","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> item is clicked.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownButtonEvents\" /> tag directive. And you can access the DropDownButton item related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.MenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfDropDownButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <DropDownButtonEvents ItemSelected=\"@ItemSelected\"></DropDownButtonEvents> \n            </SfDropDownButton> \n            @code { \n                private void ItemSelected(MenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"ItemSelected","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.DropDownButtonEvents","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-842161371,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.SfDropDownButton","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary>\n            DropDownButton component is used to toggle contextual overlays for displaying list of action items.\n            It can contain both text and images.\n            </summary>\n            <summary>\n            DropDownButton component is used to toggle contextual overlays for displaying list of action items.\n            It can contain both text and images.\n            </summary>\n            <summary>\n            DropDownButton component is used to toggle contextual overlays for displaying list of action items.\n            It can contain both text and images.\n            </summary>\n             <summary> \n            The DropDownButton component is used to toggle contextual overlays for displaying list of action items. \n             It can contain a text, an icon, svg or both. \n             </summary> \n             <example> \n             In the below code example, a basic DropDownButton component initialized with <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItem\" />  tag directives. \n             <code><![CDATA[ \n             <SfDropDownButton> \n                <DropDownMenuItems> \n                   <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                   <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                   <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                   <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n                </DropDownMenuItems> \n             </SfDropDownButton> \n             ]]></code> \n             </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDropDownButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the dropdown button including HTML element. If the child content is not specified, Dropdown button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of dropdown button.\n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> tag directive, to render as HTML content. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Content"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of dropdown button. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of dropdown button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a a value that indicates the CSS class string to include an icon or image for the dropdown button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the dropdown button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.SplitButtons.SplitButtonIconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the dropdown button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.IconPosition\" /> enumeration. The default value is <c>Left</c>.\n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the dropdown button. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the dropdown button. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the dropdown button. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the dropdown button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"IconPosition"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.SplitButtons.DropDownMenuItem>","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the the action items with its properties which will be rendered in dropdown button popup.  \n            </summary> \n            <value> \n            Accepts a collection of <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItem\" /> object. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            If the <c>Items</c> property is not specified, the dropdown button component is populated using <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItem\" /> tag directives. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Items"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the dropdown button is disabled or not. \n            </summary> \n            <value> \n            <c>true</c>, if the dropdown button component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the right to left direction is enabled for dropdown button. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for dropdown button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"PopupContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the custom element as action items which will be rendered in DropDownButton popup.  \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            If the <c>Items</c> property and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> tag directive is not specified, the DropDownButton component is populated using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent\" />. \n            </remarks>\n            <example>\n            In the below code example, a dropdown button component rendered with <c>ListView</c> component as <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent\" />. \n            <code><![CDATA[ \n            <SfDropDownButton CssClass=\"e-caret-hide\" IconCss=\"e-icons e-down\"> \n            <PopupContent>  \n            <SfListView ID=\"listview\" DataSource=\"@Data\" ShowCheckBox=\"true\"> \n            <ListViewFieldSettings Text=\"Text\" TValue=\"ListData\"></ListViewFieldSettings> \n            </SfListView> \n            </PopupContent>  \n            </SfDropDownButton>  \n            @code { \n            public List<ListData> Data = new List<ListData>{  \n            new ListData{ Class = \"data\", Text = \"Print\", Id = \"data1\" },  \n            new ListData{ Class = \"data\", Text = \"Save As\", Id = \"data2\" },  \n            new ListData{ Class = \"data\", Text = \"Update Folder\", Id = \"data3\" }, \n            new ListData{ Class = \"data\", Text = \"Reply\", Id = \"data4\" }  \n            };  \n            public class ListData {  \n            public string Text { get; set; }  \n            public string Id { get; set; }  \n            public string Class { get; set; }  \n            } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"PopupContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary> \n            Gets or sets a collection of additional attributes such as id, title etc. that will applied to the dropdown button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, dropdown button width has been specified as style attribute in <c>SfButton</c> tag directive. \n            <code><![CDATA[ \n            <SfDropDownButton style=\"width:200px\"> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n            </SfDropDownButton> \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfDropDownButton"}},{"HashCode":-1141034920,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.SfDropDownButton","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary>\n            DropDownButton component is used to toggle contextual overlays for displaying list of action items.\n            It can contain both text and images.\n            </summary>\n            <summary>\n            DropDownButton component is used to toggle contextual overlays for displaying list of action items.\n            It can contain both text and images.\n            </summary>\n            <summary>\n            DropDownButton component is used to toggle contextual overlays for displaying list of action items.\n            It can contain both text and images.\n            </summary>\n             <summary> \n            The DropDownButton component is used to toggle contextual overlays for displaying list of action items. \n             It can contain a text, an icon, svg or both. \n             </summary> \n             <example> \n             In the below code example, a basic DropDownButton component initialized with <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItem\" />  tag directives. \n             <code><![CDATA[ \n             <SfDropDownButton> \n                <DropDownMenuItems> \n                   <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                   <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                   <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                   <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n                </DropDownMenuItems> \n             </SfDropDownButton> \n             ]]></code> \n             </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.SfDropDownButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the dropdown button including HTML element. If the child content is not specified, Dropdown button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of dropdown button.\n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> tag directive, to render as HTML content. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Content"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of dropdown button. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of dropdown button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a a value that indicates the CSS class string to include an icon or image for the dropdown button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the dropdown button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.SplitButtons.SplitButtonIconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the dropdown button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.IconPosition\" /> enumeration. The default value is <c>Left</c>.\n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the dropdown button. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the dropdown button. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the dropdown button. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the dropdown button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"IconPosition"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.SplitButtons.DropDownMenuItem>","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the the action items with its properties which will be rendered in dropdown button popup.  \n            </summary> \n            <value> \n            Accepts a collection of <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItem\" /> object. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            If the <c>Items</c> property is not specified, the dropdown button component is populated using <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItem\" /> tag directives. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Items"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the dropdown button is disabled or not. \n            </summary> \n            <value> \n            <c>true</c>, if the dropdown button component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the right to left direction is enabled for dropdown button. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for dropdown button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"PopupContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the custom element as action items which will be rendered in DropDownButton popup.  \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            If the <c>Items</c> property and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> tag directive is not specified, the DropDownButton component is populated using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent\" />. \n            </remarks>\n            <example>\n            In the below code example, a dropdown button component rendered with <c>ListView</c> component as <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent\" />. \n            <code><![CDATA[ \n            <SfDropDownButton CssClass=\"e-caret-hide\" IconCss=\"e-icons e-down\"> \n            <PopupContent>  \n            <SfListView ID=\"listview\" DataSource=\"@Data\" ShowCheckBox=\"true\"> \n            <ListViewFieldSettings Text=\"Text\" TValue=\"ListData\"></ListViewFieldSettings> \n            </SfListView> \n            </PopupContent>  \n            </SfDropDownButton>  \n            @code { \n            public List<ListData> Data = new List<ListData>{  \n            new ListData{ Class = \"data\", Text = \"Print\", Id = \"data1\" },  \n            new ListData{ Class = \"data\", Text = \"Save As\", Id = \"data2\" },  \n            new ListData{ Class = \"data\", Text = \"Update Folder\", Id = \"data3\" }, \n            new ListData{ Class = \"data\", Text = \"Reply\", Id = \"data4\" }  \n            };  \n            public class ListData {  \n            public string Text { get; set; }  \n            public string Id { get; set; }  \n            public string Class { get; set; }  \n            } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"PopupContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary> \n            Gets or sets a collection of additional attributes such as id, title etc. that will applied to the dropdown button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, dropdown button width has been specified as style attribute in <c>SfButton</c> tag directive. \n            <code><![CDATA[ \n            <SfDropDownButton style=\"width:200px\"> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n            </SfDropDownButton> \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfDropDownButton","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1404461336,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.SfDropDownButton.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the dropdown button including HTML element. If the child content is not specified, Dropdown button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfDropDownButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfDropDownButton.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-505318425,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.SfDropDownButton.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the dropdown button including HTML element. If the child content is not specified, Dropdown button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.SplitButtons.SfDropDownButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfDropDownButton.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-179913143,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the custom element as action items which will be rendered in DropDownButton popup.  \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            If the <c>Items</c> property and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> tag directive is not specified, the DropDownButton component is populated using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent\" />. \n            </remarks>\n            <example>\n            In the below code example, a dropdown button component rendered with <c>ListView</c> component as <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent\" />. \n            <code><![CDATA[ \n            <SfDropDownButton CssClass=\"e-caret-hide\" IconCss=\"e-icons e-down\"> \n            <PopupContent>  \n            <SfListView ID=\"listview\" DataSource=\"@Data\" ShowCheckBox=\"true\"> \n            <ListViewFieldSettings Text=\"Text\" TValue=\"ListData\"></ListViewFieldSettings> \n            </SfListView> \n            </PopupContent>  \n            </SfDropDownButton>  \n            @code { \n            public List<ListData> Data = new List<ListData>{  \n            new ListData{ Class = \"data\", Text = \"Print\", Id = \"data1\" },  \n            new ListData{ Class = \"data\", Text = \"Save As\", Id = \"data2\" },  \n            new ListData{ Class = \"data\", Text = \"Update Folder\", Id = \"data3\" }, \n            new ListData{ Class = \"data\", Text = \"Reply\", Id = \"data4\" }  \n            };  \n            public class ListData {  \n            public string Text { get; set; }  \n            public string Id { get; set; }  \n            public string Class { get; set; }  \n            } \n            } \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PopupContent","ParentTag":"SfDropDownButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1394426578,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the custom element as action items which will be rendered in DropDownButton popup.  \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            If the <c>Items</c> property and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> tag directive is not specified, the DropDownButton component is populated using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent\" />. \n            </remarks>\n            <example>\n            In the below code example, a dropdown button component rendered with <c>ListView</c> component as <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent\" />. \n            <code><![CDATA[ \n            <SfDropDownButton CssClass=\"e-caret-hide\" IconCss=\"e-icons e-down\"> \n            <PopupContent>  \n            <SfListView ID=\"listview\" DataSource=\"@Data\" ShowCheckBox=\"true\"> \n            <ListViewFieldSettings Text=\"Text\" TValue=\"ListData\"></ListViewFieldSettings> \n            </SfListView> \n            </PopupContent>  \n            </SfDropDownButton>  \n            @code { \n            public List<ListData> Data = new List<ListData>{  \n            new ListData{ Class = \"data\", Text = \"Print\", Id = \"data1\" },  \n            new ListData{ Class = \"data\", Text = \"Save As\", Id = \"data2\" },  \n            new ListData{ Class = \"data\", Text = \"Update Folder\", Id = \"data3\" }, \n            new ListData{ Class = \"data\", Text = \"Reply\", Id = \"data4\" }  \n            };  \n            public class ListData {  \n            public string Text { get; set; }  \n            public string Id { get; set; }  \n            public string Class { get; set; }  \n            } \n            } \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PopupContent","ParentTag":"Syncfusion.Blazor.SplitButtons.SfDropDownButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfDropDownButton.PopupContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-109854629,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.SfProgressButton","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary>\n            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation.\n            </summary>\n            <summary>\n            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation.\n            </summary>\n            <summary>\n            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation.\n            </summary>\n            <summary>\n            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation.\n            </summary>\n            <summary> \n            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation. \n            It can contain a text, an icon, svg or both. \n            </summary> \n            <remarks> \n            Progress Button content is either by specifying <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content\" /> property or by specifying content within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> tag directive. \n            </remarks> \n            <example> \n            In the below code example, a basic button initialized with <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content\" /> property. \n            <code><![CDATA[ \n            <SfProgressButton Content=\"Click\"> \n            </SfProgressButton> \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfProgressButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Gets or sets a event callback when button element is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClick","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the progress button including HTML element. If the child content is not specified, progress button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of progress button. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> tag directive, to render as HTML content. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Content"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of progress button. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of progress button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the progress button is disabled or not. \n            </summary> \n            <value> \n            <c>true</c>, if the button is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Double","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the duration of the progression in the progress. \n            </summary> \n            <value> \n            Accepts a double value to set the duration of progress button. The default value is <c>2000</c> milliseconds. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Duration"}},{"Kind":"Components.Component","Name":"EnableProgress","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the progress UI is enabled or not in progress button. \n            </summary> \n            <value> \n            <c>true</c>, if the progress UI is enabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableProgress"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the right to left direction is enabled for progress button. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for progress button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary> \n            Gets or sets a collection of additional attributes that will applied to the progress button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, progress button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> tag directive. \n            <code><![CDATA[ \n            <SfProgressButton style=\"width:200px\"> \n            </SfProgressButton> \n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to include an icon or image for the progress button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the progress button ==. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.IconPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconPosition.Left\" /> \n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the progress button. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the progress button. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the progress button. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the progress button. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"IconPosition"}},{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the primary style is enabled for progress button. \n            </summary> \n            <value> \n            <c>true</c>, if the primary style is enabled for progress button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsPrimary"}},{"Kind":"Components.Component","Name":"IsToggle","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the toggle option is enabled for progress button. \n            </summary> \n            <value> \n            <c>true</c>, if the toggle option is enabled for progress button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsToggle"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfProgressButton"}},{"HashCode":-194760597,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.SfProgressButton","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary>\n            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation.\n            </summary>\n            <summary>\n            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation.\n            </summary>\n            <summary>\n            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation.\n            </summary>\n            <summary>\n            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation.\n            </summary>\n            <summary> \n            ProgressButton visualizes the progression of an operation to indicate the user that a process is happening in the background with visual representation. \n            It can contain a text, an icon, svg or both. \n            </summary> \n            <remarks> \n            Progress Button content is either by specifying <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content\" /> property or by specifying content within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> tag directive. \n            </remarks> \n            <example> \n            In the below code example, a basic button initialized with <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content\" /> property. \n            <code><![CDATA[ \n            <SfProgressButton Content=\"Click\"> \n            </SfProgressButton> \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.SfProgressButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Gets or sets a event callback when button element is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClick","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the progress button including HTML element. If the child content is not specified, progress button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of progress button. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> tag directive, to render as HTML content. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Content"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of progress button. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of progress button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the progress button is disabled or not. \n            </summary> \n            <value> \n            <c>true</c>, if the button is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Double","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the duration of the progression in the progress. \n            </summary> \n            <value> \n            Accepts a double value to set the duration of progress button. The default value is <c>2000</c> milliseconds. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Duration"}},{"Kind":"Components.Component","Name":"EnableProgress","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the progress UI is enabled or not in progress button. \n            </summary> \n            <value> \n            <c>true</c>, if the progress UI is enabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableProgress"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the right to left direction is enabled for progress button. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for progress button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary> \n            Gets or sets a collection of additional attributes that will applied to the progress button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, progress button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> tag directive. \n            <code><![CDATA[ \n            <SfProgressButton style=\"width:200px\"> \n            </SfProgressButton> \n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to include an icon or image for the progress button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the progress button ==. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.IconPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconPosition.Left\" /> \n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the progress button. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the progress button. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the progress button. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the progress button. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"IconPosition"}},{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the primary style is enabled for progress button. \n            </summary> \n            <value> \n            <c>true</c>, if the primary style is enabled for progress button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsPrimary"}},{"Kind":"Components.Component","Name":"IsToggle","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the toggle option is enabled for progress button. \n            </summary> \n            <value> \n            <c>true</c>, if the toggle option is enabled for progress button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsToggle"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfProgressButton","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-64804753,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.SfProgressButton.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the progress button including HTML element. If the child content is not specified, progress button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfProgressButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfProgressButton.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-804795023,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.SfProgressButton.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the progress button including HTML element. If the child content is not specified, progress button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfProgressButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.SplitButtons.SfProgressButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfProgressButton.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1228817861,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.ProgressButtonAnimationSettings","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary>\n            Specifies the animation settings for the progress button.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ProgressButtonAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Double","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the duration of the animation done in the progress button. \n            </summary> \n            <value> \n            Accepts a double value to set the duration of the animation of progress button. The default value is <c>400</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Duration"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the animation timing function of the progress button component. \n            </summary> \n            <value> \n            <c>true</c>, if the progress UI is enabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Easing"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.SplitButtons.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets the animation effect of the progress button component. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.SplitButtons.AnimationEffect\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.SplitButtons.AnimationEffect.None\" /> \n            </value> \n            <remarks> \n            If the <c>AnimationEffect</c> is <c>SlideLeft</c>, the content will be moved with slide left  animation. \n            If the <c>AnimationEffect</c> is <c>SlideRight</c>, the content will be moved with slide right animation. \n            If the <c>AnimationEffect</c> is <c>SlideUp</c>, the content will be moved with slide up animation. \n            If the <c>AnimationEffect</c> is <c>SlideDown</c>, the content will be moved with slide down animation. \n            If the <c>AnimationEffect</c> is <c>ZoomIn</c>, the content will be moved with zoom in  animation. \n            If the <c>AnimationEffect</c> is <c>ZoomOut</c>, the content will be moved with zoom out  animation \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Effect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ProgressButtonAnimationSettings"}},{"HashCode":1773275389,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.ProgressButtonAnimationSettings","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary>\n            Specifies the animation settings for the progress button.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.ProgressButtonAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Double","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the duration of the animation done in the progress button. \n            </summary> \n            <value> \n            Accepts a double value to set the duration of the animation of progress button. The default value is <c>400</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Duration"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the animation timing function of the progress button component. \n            </summary> \n            <value> \n            <c>true</c>, if the progress UI is enabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Easing"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.SplitButtons.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets the animation effect of the progress button component. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.SplitButtons.AnimationEffect\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.SplitButtons.AnimationEffect.None\" /> \n            </value> \n            <remarks> \n            If the <c>AnimationEffect</c> is <c>SlideLeft</c>, the content will be moved with slide left  animation. \n            If the <c>AnimationEffect</c> is <c>SlideRight</c>, the content will be moved with slide right animation. \n            If the <c>AnimationEffect</c> is <c>SlideUp</c>, the content will be moved with slide up animation. \n            If the <c>AnimationEffect</c> is <c>SlideDown</c>, the content will be moved with slide down animation. \n            If the <c>AnimationEffect</c> is <c>ZoomIn</c>, the content will be moved with zoom in  animation. \n            If the <c>AnimationEffect</c> is <c>ZoomOut</c>, the content will be moved with zoom out  animation \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Effect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ProgressButtonAnimationSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1209039821,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.ProgressButtonEvents","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary>\n            Used to configure the progress button events.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ProgressButtonEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.ProgressEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the progress is started in the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" />.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"OnBegin","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <c>SfButton</c> rendering is completed.  \n            </summary> \n            <example> \n            <code><![CDATA[ \n            <SfProgressButton> \n                 <ProgressButtonEvents Created=\"@Created\"></ProgressButtonEvents> \n            </SfProgressButton > \n            @code { \n                private void Created() { \n                // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnEnd","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.ProgressEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the progress is completed in the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" />.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"OnEnd","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Exception>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the progress is uncompleted in the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" />.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"OnFailure","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Progressing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.ProgressEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback in a specific interval that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> is progressing.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"Progressing","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ProgressButtonEvents"}},{"HashCode":-192520300,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.ProgressButtonEvents","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary>\n            Used to configure the progress button events.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.ProgressButtonEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.ProgressEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the progress is started in the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" />.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"OnBegin","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <c>SfButton</c> rendering is completed.  \n            </summary> \n            <example> \n            <code><![CDATA[ \n            <SfProgressButton> \n                 <ProgressButtonEvents Created=\"@Created\"></ProgressButtonEvents> \n            </SfProgressButton > \n            @code { \n                private void Created() { \n                // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnEnd","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.ProgressEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the progress is completed in the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" />.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"OnEnd","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Exception>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the progress is uncompleted in the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" />.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"OnFailure","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Progressing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.ProgressEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback in a specific interval that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> is progressing.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"Progressing","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ProgressButtonEvents","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":536315065,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary>\n            Specifies the spin settings for the progress button.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ProgressButtonSpinSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Position","TypeName":"Syncfusion.Blazor.SplitButtons.SpinPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates the spinner position of the progress button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings.Position\" /> enumeration. The default value is <c>Left</c>. \n            </value> \n            <remarks> \n            If the <c>Position</c> is <c>Left</c>, the spinner will be placed left to the content of the progress button. \n            If the <c>Position</c> is <c>Right</c>, the spinner will be placed right to the content of the progress button. \n            If the <c>Position</c> is <c>Top</c>, the spinner will be placed above the content of the progress button. \n            If the <c>Position</c> is <c>Bottom</c>, spinner icon will be placed below the content of the progress button. \n            If the <c>Position</c> is <c>Center</c>, spinner icon will be placed below the content of the progress button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Position"}},{"Kind":"Components.Component","Name":"SpinTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a template content to be displayed in the progress button.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"SpinTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a width of the spinner in the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> component.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"Width"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings"}},{"HashCode":-313717014,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary>\n            Specifies the spin settings for the progress button.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Position","TypeName":"Syncfusion.Blazor.SplitButtons.SpinPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates the spinner position of the progress button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings.Position\" /> enumeration. The default value is <c>Left</c>. \n            </value> \n            <remarks> \n            If the <c>Position</c> is <c>Left</c>, the spinner will be placed left to the content of the progress button. \n            If the <c>Position</c> is <c>Right</c>, the spinner will be placed right to the content of the progress button. \n            If the <c>Position</c> is <c>Top</c>, the spinner will be placed above the content of the progress button. \n            If the <c>Position</c> is <c>Bottom</c>, spinner icon will be placed below the content of the progress button. \n            If the <c>Position</c> is <c>Center</c>, spinner icon will be placed below the content of the progress button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Position"}},{"Kind":"Components.Component","Name":"SpinTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a template content to be displayed in the progress button.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"SpinTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a width of the spinner in the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfProgressButton\" /> component.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"Width"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":927865093,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings.SpinTemplate","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Gets or sets a template content to be displayed in the progress button.  \n            </summary> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SpinTemplate","ParentTag":"ProgressButtonSpinSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings.SpinTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1955391441,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings.SpinTemplate","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Gets or sets a template content to be displayed in the progress button.  \n            </summary> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SpinTemplate","ParentTag":"Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ProgressButtonSpinSettings.SpinTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1271313498,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.SfSplitButton","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary>\n            SplitButton component has primary and secondary button. Primary button is used to select \n            default action and secondary button is used to toggle contextual overlays for displaying list of \n            action items. It can contain both text and images.\n            </summary>\n            <summary>\n            SplitButton component has primary and secondary button. Primary button is used to select \n            default action and secondary button is used to toggle contextual overlays for displaying list of \n            action items. It can contain both text and images.\n            </summary>\n            <summary>\n            SplitButton component has primary and secondary button. Primary button is used to select \n            default action and secondary button is used to toggle contextual overlays for displaying list of \n            action items. It can contain both text and images.\n            </summary>\n            <summary> \n            SplitButton component has primary and secondary button. Primary button is used to select  \n            default action and secondary button is used to toggle contextual overlays for displaying list of  \n            action items. It can contain both text and images. \n            </summary> \n            <example> \n            In the below code example, a basic SplitButton component initialized with <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItem\" />  tag directives. \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n            </SfSplitButton> \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSplitButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the primary button element including HTML element. If the child content is not specified, primary button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of split button component's primary button. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> tag directive, to render as HTML content. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Content"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of split button component. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of split button component. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the split button is disabled or not. \n            </summary> \n            <value> \n            <c>true</c>, if the split button is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the right to left direction is enabled for split button. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for split button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to include an icon or image for the split button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the split button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.SplitButtons.SplitButtonIconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the split button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.IconPosition\" /> enumeration. The default value is <c>Left</c>/&gt; \n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the split button component. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the split button component. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the split button component. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the split button component. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"IconPosition"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.SplitButtons.DropDownMenuItem>","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the action items with its properties which will be rendered as split button's secondary button.  \n            </summary> \n            <value> \n            Accepts a collection of <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItem\" /> object. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            If the <c>Items</c> property is not specified, the split button component's secondary button is populated using <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItem\" /> tag directives. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Items"}},{"Kind":"Components.Component","Name":"PopupContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the custom element as action items which will be rendered in split button popup.  \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            If the <c>Items</c> property and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> tag directive is not specified, the dropdown button is populated using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent\" />. \n            </remarks>\n            <example>\n            In the below code example, a DropDownButton component rendered with ListView component as <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent\" />.\n            <code><![CDATA[ \n            <SfSplitButton CssClass=\"e-caret-hide\" IconCss=\"e-icons e-down\"> \n            <PopupContent>  \n            <SfListView ID=\"listview\" DataSource=\"@Data\" ShowCheckBox=\"true\"> \n            <ListViewFieldSettings Text=\"Text\" TValue=\"ListData\"></ListViewFieldSettings> \n            </SfListView> \n            </PopupContent>  \n            </SfSplitButton>  \n            @code { \n            public List<ListData> Data = new List<ListData>{  \n            new ListData{ Class = \"data\", Text = \"Print\", Id = \"data1\" },  \n            new ListData{ Class = \"data\", Text = \"Save As\", Id = \"data2\" },  \n            new ListData{ Class = \"data\", Text = \"Update Folder\", Id = \"data3\" }, \n            new ListData{ Class = \"data\", Text = \"Reply\", Id = \"data4\" }  \n            };  \n            public class ListData {  \n            public string Text { get; set; }  \n            public string Id { get; set; }  \n            public string Class { get; set; }  \n            } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"PopupContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary> \n            Gets or sets a collection of additional attributes such as id, title etc. that will applied to the split button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, split button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> tag directive. \n            <code><![CDATA[ \n            <SfSplitButton style=\"width:200px\"> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n            </SfSplitButton> \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfSplitButton"}},{"HashCode":-555279967,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.SfSplitButton","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary>\n            SplitButton component has primary and secondary button. Primary button is used to select \n            default action and secondary button is used to toggle contextual overlays for displaying list of \n            action items. It can contain both text and images.\n            </summary>\n            <summary>\n            SplitButton component has primary and secondary button. Primary button is used to select \n            default action and secondary button is used to toggle contextual overlays for displaying list of \n            action items. It can contain both text and images.\n            </summary>\n            <summary>\n            SplitButton component has primary and secondary button. Primary button is used to select \n            default action and secondary button is used to toggle contextual overlays for displaying list of \n            action items. It can contain both text and images.\n            </summary>\n            <summary> \n            SplitButton component has primary and secondary button. Primary button is used to select  \n            default action and secondary button is used to toggle contextual overlays for displaying list of  \n            action items. It can contain both text and images. \n            </summary> \n            <example> \n            In the below code example, a basic SplitButton component initialized with <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItem\" />  tag directives. \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n            </SfSplitButton> \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.SfSplitButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the primary button element including HTML element. If the child content is not specified, primary button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of split button component's primary button. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfDropDownButton\" /> tag directive, to render as HTML content. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Content"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of split button component. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of split button component. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the split button is disabled or not. \n            </summary> \n            <value> \n            <c>true</c>, if the split button is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the right to left direction is enabled for split button. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for split button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to include an icon or image for the split button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the split button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.SplitButtons.SplitButtonIconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the split button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.IconPosition\" /> enumeration. The default value is <c>Left</c>/&gt; \n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the split button component. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the split button component. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the split button component. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the split button component. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"IconPosition"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.SplitButtons.DropDownMenuItem>","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the action items with its properties which will be rendered as split button's secondary button.  \n            </summary> \n            <value> \n            Accepts a collection of <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItem\" /> object. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            If the <c>Items</c> property is not specified, the split button component's secondary button is populated using <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItem\" /> tag directives. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Items"}},{"Kind":"Components.Component","Name":"PopupContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the custom element as action items which will be rendered in split button popup.  \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            If the <c>Items</c> property and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> tag directive is not specified, the dropdown button is populated using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent\" />. \n            </remarks>\n            <example>\n            In the below code example, a DropDownButton component rendered with ListView component as <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent\" />.\n            <code><![CDATA[ \n            <SfSplitButton CssClass=\"e-caret-hide\" IconCss=\"e-icons e-down\"> \n            <PopupContent>  \n            <SfListView ID=\"listview\" DataSource=\"@Data\" ShowCheckBox=\"true\"> \n            <ListViewFieldSettings Text=\"Text\" TValue=\"ListData\"></ListViewFieldSettings> \n            </SfListView> \n            </PopupContent>  \n            </SfSplitButton>  \n            @code { \n            public List<ListData> Data = new List<ListData>{  \n            new ListData{ Class = \"data\", Text = \"Print\", Id = \"data1\" },  \n            new ListData{ Class = \"data\", Text = \"Save As\", Id = \"data2\" },  \n            new ListData{ Class = \"data\", Text = \"Update Folder\", Id = \"data3\" }, \n            new ListData{ Class = \"data\", Text = \"Reply\", Id = \"data4\" }  \n            };  \n            public class ListData {  \n            public string Text { get; set; }  \n            public string Id { get; set; }  \n            public string Class { get; set; }  \n            } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"PopupContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary> \n            Gets or sets a collection of additional attributes such as id, title etc. that will applied to the split button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, split button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> tag directive. \n            <code><![CDATA[ \n            <SfSplitButton style=\"width:200px\"> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n            </SfSplitButton> \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfSplitButton","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1095496880,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.SfSplitButton.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the primary button element including HTML element. If the child content is not specified, primary button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfSplitButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfSplitButton.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-786352630,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.SfSplitButton.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the primary button element including HTML element. If the child content is not specified, primary button is rendered using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.SplitButtons.SfSplitButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfSplitButton.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1844897211,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the custom element as action items which will be rendered in split button popup.  \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            If the <c>Items</c> property and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> tag directive is not specified, the dropdown button is populated using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent\" />. \n            </remarks>\n            <example>\n            In the below code example, a DropDownButton component rendered with ListView component as <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent\" />.\n            <code><![CDATA[ \n            <SfSplitButton CssClass=\"e-caret-hide\" IconCss=\"e-icons e-down\"> \n            <PopupContent>  \n            <SfListView ID=\"listview\" DataSource=\"@Data\" ShowCheckBox=\"true\"> \n            <ListViewFieldSettings Text=\"Text\" TValue=\"ListData\"></ListViewFieldSettings> \n            </SfListView> \n            </PopupContent>  \n            </SfSplitButton>  \n            @code { \n            public List<ListData> Data = new List<ListData>{  \n            new ListData{ Class = \"data\", Text = \"Print\", Id = \"data1\" },  \n            new ListData{ Class = \"data\", Text = \"Save As\", Id = \"data2\" },  \n            new ListData{ Class = \"data\", Text = \"Update Folder\", Id = \"data3\" }, \n            new ListData{ Class = \"data\", Text = \"Reply\", Id = \"data4\" }  \n            };  \n            public class ListData {  \n            public string Text { get; set; }  \n            public string Id { get; set; }  \n            public string Class { get; set; }  \n            } \n            } \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PopupContent","ParentTag":"SfSplitButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1028217199,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the custom element as action items which will be rendered in split button popup.  \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            If the <c>Items</c> property and <see cref=\"T:Syncfusion.Blazor.SplitButtons.DropDownMenuItems\" /> tag directive is not specified, the dropdown button is populated using <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent\" />. \n            </remarks>\n            <example>\n            In the below code example, a DropDownButton component rendered with ListView component as <see cref=\"P:Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent\" />.\n            <code><![CDATA[ \n            <SfSplitButton CssClass=\"e-caret-hide\" IconCss=\"e-icons e-down\"> \n            <PopupContent>  \n            <SfListView ID=\"listview\" DataSource=\"@Data\" ShowCheckBox=\"true\"> \n            <ListViewFieldSettings Text=\"Text\" TValue=\"ListData\"></ListViewFieldSettings> \n            </SfListView> \n            </PopupContent>  \n            </SfSplitButton>  \n            @code { \n            public List<ListData> Data = new List<ListData>{  \n            new ListData{ Class = \"data\", Text = \"Print\", Id = \"data1\" },  \n            new ListData{ Class = \"data\", Text = \"Save As\", Id = \"data2\" },  \n            new ListData{ Class = \"data\", Text = \"Update Folder\", Id = \"data3\" }, \n            new ListData{ Class = \"data\", Text = \"Reply\", Id = \"data4\" }  \n            };  \n            public class ListData {  \n            public string Text { get; set; }  \n            public string Id { get; set; }  \n            public string Class { get; set; }  \n            } \n            } \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PopupContent","ParentTag":"Syncfusion.Blazor.SplitButtons.SfSplitButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SfSplitButton.PopupContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-569085735,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.SplitButtonEvents","AssemblyName":"Syncfusion.Blazor.SplitButtons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SplitButtonEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> popup is closing.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. And you can access the split button popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <SplitButtonEvents OnClose=\"@OnClose\"></SplitButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void OnClose(BeforeOpenCloseMenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"OnClose","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnItemRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> rendering is completed.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. And you can customize the DropDownButton items rendering using <see cref=\"T:Syncfusion.Blazor.SplitButtons.MenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <SplitButtonEvents OnItemRender=\"@OnItemRender\"></SplitButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void OnItemRender(MenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnItemRender","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> popup is opening.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. And you can access the split button popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <SplitButtonEvents OnOpen=\"@OnOpen\"></SplitButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void OnOpen(BeforeOpenCloseMenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Clicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.ClickEventArgs>","Documentation":"\n            <summary>\n            Triggers when the primary button of split button has been clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Clicked","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> popup is closed.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. And you can access the split button popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n               <SpliButtonEvents Closed=\"@Closed\"></DropDownButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void Closed(OpenCloseMenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"Closed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> rendering is completed.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <SplitButtonEvents Created=\"@Created\"></SplitButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void Created() { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> popup is opened.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. And you can access the split button popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <SplitButtonEvents Opened=\"@Opened\"></SplitButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void Opened(OpenCloseMenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"Opened","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> item is clicked.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. And you can access the split button item related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.MenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <SplitButtonEvents ItemSelected=\"@ItemSelected\"></SplitButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void ItemSelected(MenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"ItemSelected","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SplitButtonEvents"}},{"HashCode":-2048278365,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.SplitButtonEvents","AssemblyName":"Syncfusion.Blazor.SplitButtons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.SplitButtonEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> popup is closing.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. And you can access the split button popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <SplitButtonEvents OnClose=\"@OnClose\"></SplitButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void OnClose(BeforeOpenCloseMenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"OnClose","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnItemRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> rendering is completed.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. And you can customize the DropDownButton items rendering using <see cref=\"T:Syncfusion.Blazor.SplitButtons.MenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <SplitButtonEvents OnItemRender=\"@OnItemRender\"></SplitButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void OnItemRender(MenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnItemRender","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> popup is opening.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. And you can access the split button popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.BeforeOpenCloseMenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <SplitButtonEvents OnOpen=\"@OnOpen\"></SplitButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void OnOpen(BeforeOpenCloseMenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Clicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.ClickEventArgs>","Documentation":"\n            <summary>\n            Triggers when the primary button of split button has been clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Clicked","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> popup is closed.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. And you can access the split button popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n               <SpliButtonEvents Closed=\"@Closed\"></DropDownButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void Closed(OpenCloseMenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"Closed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> rendering is completed.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <SplitButtonEvents Created=\"@Created\"></SplitButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void Created() { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> popup is opened.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. And you can access the split button popup related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.OpenCloseMenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <SplitButtonEvents Opened=\"@Opened\"></SplitButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void Opened(OpenCloseMenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"Opened","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.SplitButtons.MenuEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.SplitButtons.SfSplitButton\" /> item is clicked.  \n            </summary> \n            <remarks> \n            The events were specified in <see cref=\"T:Syncfusion.Blazor.SplitButtons.SplitButtonEvents\" /> tag directive. And you can access the split button item related values using <see cref=\"T:Syncfusion.Blazor.SplitButtons.MenuEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSplitButton> \n               <DropDownMenuItems> \n                  <DropDownMenuItem Text=\"Dashboard\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Notifications\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"User Settings\"></DropDownMenuItem> \n                  <DropDownMenuItem Text=\"Log Out\"></DropDownMenuItem> \n               </DropDownMenuItems> \n                <SplitButtonEvents ItemSelected=\"@ItemSelected\"></SplitButtonEvents> \n            </SfSplitButton> \n            @code { \n                private void ItemSelected(MenuEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"ItemSelected","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.SplitButtonEvents","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1741799018,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.DropDownMenuItem","AssemblyName":"Syncfusion.Blazor.SplitButtons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DropDownMenuItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Set custom content for items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines class/multiple classes separated by a space for the item that is used to include an icon.\n            Action item can include font icon and sprite image.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"Separator","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies separator between the items. Separator are horizontal lines used to group action items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Separator"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Used to enable or disable the action items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies text for item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Url","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies url for item that creates the anchor link to navigate to the url provided.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Url"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies unique id for item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional HTML attributes such as style, title etc., to the item\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.DropDownMenuItem"}},{"HashCode":1886108979,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.DropDownMenuItem","AssemblyName":"Syncfusion.Blazor.SplitButtons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.DropDownMenuItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Set custom content for items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines class/multiple classes separated by a space for the item that is used to include an icon.\n            Action item can include font icon and sprite image.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"Separator","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies separator between the items. Separator are horizontal lines used to group action items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Separator"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Used to enable or disable the action items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies text for item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Url","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies url for item that creates the anchor link to navigate to the url provided.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Url"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies unique id for item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional HTML attributes such as style, title etc., to the item\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.DropDownMenuItem","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-818719374,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.DropDownMenuItem.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary>\n            Set custom content for items.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"DropDownMenuItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.DropDownMenuItem.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-501411314,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.DropDownMenuItem.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <summary>\n            Set custom content for items.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.SplitButtons.DropDownMenuItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.DropDownMenuItem.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":617337462,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.DropDownMenuItems","AssemblyName":"Syncfusion.Blazor.SplitButtons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DropDownMenuItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.DropDownMenuItems"}},{"HashCode":-1475089062,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.DropDownMenuItems","AssemblyName":"Syncfusion.Blazor.SplitButtons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.DropDownMenuItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.DropDownMenuItems","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1040285199,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.DropDownMenuItems.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"DropDownMenuItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.DropDownMenuItems.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1566986446,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.SplitButtons.DropDownMenuItems.ChildContent","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.SplitButtons.DropDownMenuItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.SplitButtons.DropDownMenuItems.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1583472670,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons._Imports","AssemblyName":"Syncfusion.Blazor.SplitButtons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"_Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons._Imports"}},{"HashCode":-675043969,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons._Imports","AssemblyName":"Syncfusion.Blazor.SplitButtons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons._Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons._Imports","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-47561262,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.Internal.DropDownMenu","AssemblyName":"Syncfusion.Blazor.SplitButtons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DropDownMenu"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.Internal.DropDownMenu"}},{"HashCode":361678774,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SplitButtons.Internal.DropDownMenu","AssemblyName":"Syncfusion.Blazor.SplitButtons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.Internal.DropDownMenu"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SplitButtons.Internal.DropDownMenu","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1142201129,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.DialogAnimationSettings","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            The class provides data for the animation to Dialog.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DialogAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Delay","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the delay in milliseconds to start the animation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Delay"}},{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the duration in milliseconds that the animation takes to open or close the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.Popups.DialogEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation name that should be applied on while opening and closing the dialog.\n            If the user sets Fade animation, the dialog will open with the `FadeIn` effect and close with the `FadeOut` effect.\n            The following are the list of animation effects available to configure to the dialog:\n            1. Fade\n            2. FadeZoom\n            3. FlipLeftDown\n            4. FlipLeftUp\n            5. FlipRightDown\n            6. FlipRightUp\n            7. FlipXDown\n            8. FlipXUp\n            9. FlipYLeft\n            10. FlipYRight\n            11. SlideBottom\n            12. SlideLeft\n            13. SlideRight\n            14. SlideTop\n            15. Zoom\n            16. None.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.DialogAnimationSettings"}},{"HashCode":1815500902,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.DialogAnimationSettings","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            The class provides data for the animation to Dialog.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Popups.DialogAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Delay","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the delay in milliseconds to start the animation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Delay"}},{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the duration in milliseconds that the animation takes to open or close the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.Popups.DialogEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation name that should be applied on while opening and closing the dialog.\n            If the user sets Fade animation, the dialog will open with the `FadeIn` effect and close with the `FadeOut` effect.\n            The following are the list of animation effects available to configure to the dialog:\n            1. Fade\n            2. FadeZoom\n            3. FlipLeftDown\n            4. FlipLeftUp\n            5. FlipRightDown\n            6. FlipRightUp\n            7. FlipXDown\n            8. FlipXUp\n            9. FlipYLeft\n            10. FlipYRight\n            11. SlideBottom\n            12. SlideLeft\n            13. SlideRight\n            14. SlideTop\n            15. Zoom\n            16. None.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.DialogAnimationSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":548422639,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.DialogButton","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Provides data to configure the Dialog button properties.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DialogButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the text `content` of the Button element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the class/multiple classes separated by a space in the Button element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a value that indicates whether the Button is `disabled`.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left (RTL) direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the class/multiple classes separated by a space for the Button that is used to include an icon.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Positions the icon before or after the text content in the Button.\n            The possible values are: Left: The icon will be positioned to the left of the text content.\n            Right: The icon will be positioned to the right of the text content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconPosition"}},{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Allows the appearance of the Button to be enhanced and visually appealing when set to `true`.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsPrimary"}},{"Kind":"Components.Component","Name":"IsToggle","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Makes the Button toggle, when set to `true`.\n            When you click it, the state changes from normal to active.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsToggle"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Event triggers when `click` the dialog button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClick","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Popups.ButtonType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the type of the button.\n            Possible values are Button, Submit, and Reset.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"IsFlat","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the Flat appearance of the dialog buttons.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsFlat"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary>\n            You can add the additional html attributes such as id, title etc., to the button element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.DialogButton"}},{"HashCode":-982011966,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.DialogButton","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Provides data to configure the Dialog button properties.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Popups.DialogButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the text `content` of the Button element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the class/multiple classes separated by a space in the Button element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a value that indicates whether the Button is `disabled`.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left (RTL) direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the class/multiple classes separated by a space for the Button that is used to include an icon.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Positions the icon before or after the text content in the Button.\n            The possible values are: Left: The icon will be positioned to the left of the text content.\n            Right: The icon will be positioned to the right of the text content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconPosition"}},{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Allows the appearance of the Button to be enhanced and visually appealing when set to `true`.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsPrimary"}},{"Kind":"Components.Component","Name":"IsToggle","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Makes the Button toggle, when set to `true`.\n            When you click it, the state changes from normal to active.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsToggle"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Event triggers when `click` the dialog button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClick","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Popups.ButtonType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the type of the button.\n            Possible values are Button, Submit, and Reset.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"IsFlat","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the Flat appearance of the dialog buttons.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsFlat"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary>\n            You can add the additional html attributes such as id, title etc., to the button element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.DialogButton","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1536346244,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.DialogButton.ChildContent","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"DialogButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.DialogButton.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1913679428,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.DialogButton.ChildContent","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Gets or sets the content of the Spinner element.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Popups.DialogButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.DialogButton.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-101221264,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.DialogButtons","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            A list of buttons that are used to configure the Dialog buttons.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DialogButtons"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content of the Dialog Button element.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.DialogButtons"}},{"HashCode":1017554639,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.DialogButtons","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            A list of buttons that are used to configure the Dialog buttons.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Popups.DialogButtons"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content of the Dialog Button element.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.DialogButtons","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1344232544,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.DialogButtons.ChildContent","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Gets or sets the content of the Dialog Button element.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"DialogButtons"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.DialogButtons.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":884045878,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.DialogButtons.ChildContent","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Gets or sets the content of the Dialog Button element.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Popups.DialogButtons"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.DialogButtons.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-572659348,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.DialogEvents","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Configure handlers to handle the events with the Dialog component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DialogEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.CloseEventArgs>","Documentation":"\n            <summary>\n            Event triggers after the dialog has been closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Event triggers when the dialog is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Event triggers when the dialog is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.BeforeCloseEventArgs>","Documentation":"\n            <summary>\n            Event triggers before the dialog is closed.\n            If you cancel this event, the dialog remains opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnDrag","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.DragEventArgs>","Documentation":"\n            <summary>\n            Event triggers when the user drags the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnDrag","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnDragStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.DragStartEventArgs>","Documentation":"\n            <summary>\n            Event triggers when the user begins dragging the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnDragStart","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnDragStop","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.DragStopEventArgs>","Documentation":"\n            <summary>\n            Event triggers when the user stops dragging the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnDragStop","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.BeforeOpenEventArgs>","Documentation":"\n            <summary>\n            Event triggers when the dialog is being opened.\n            If you cancel this event, the dialog remains closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOverlayModalClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.OverlayModalClickEventArgs>","Documentation":"\n            <summary>\n            Event triggers when the overlay of the dialog is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOverlayModalClick","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnResizeStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Event triggers when the user begins to resize a dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnResizeStart","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnResizeStop","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Event triggers when the user stops to resize a dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnResizeStop","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.OpenEventArgs>","Documentation":"\n            <summary>\n            Event triggers when a dialog is opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Resizing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Event triggers when the user resizes the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Resizing","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.DialogEvents"}},{"HashCode":1304426329,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.DialogEvents","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Configure handlers to handle the events with the Dialog component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Popups.DialogEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.CloseEventArgs>","Documentation":"\n            <summary>\n            Event triggers after the dialog has been closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Event triggers when the dialog is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Event triggers when the dialog is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.BeforeCloseEventArgs>","Documentation":"\n            <summary>\n            Event triggers before the dialog is closed.\n            If you cancel this event, the dialog remains opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnDrag","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.DragEventArgs>","Documentation":"\n            <summary>\n            Event triggers when the user drags the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnDrag","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnDragStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.DragStartEventArgs>","Documentation":"\n            <summary>\n            Event triggers when the user begins dragging the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnDragStart","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnDragStop","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.DragStopEventArgs>","Documentation":"\n            <summary>\n            Event triggers when the user stops dragging the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnDragStop","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.BeforeOpenEventArgs>","Documentation":"\n            <summary>\n            Event triggers when the dialog is being opened.\n            If you cancel this event, the dialog remains closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOverlayModalClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.OverlayModalClickEventArgs>","Documentation":"\n            <summary>\n            Event triggers when the overlay of the dialog is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOverlayModalClick","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnResizeStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Event triggers when the user begins to resize a dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnResizeStart","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnResizeStop","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Event triggers when the user stops to resize a dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnResizeStop","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.OpenEventArgs>","Documentation":"\n            <summary>\n            Event triggers when a dialog is opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Resizing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Event triggers when the user resizes the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Resizing","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.DialogEvents","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1359613743,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.DialogPositionData","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Configures to display a dialog in the custom position within the document or target.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DialogPositionData"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"X","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the offset left value to position the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"X"}},{"Kind":"Components.Component","Name":"Y","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the offset top value to position the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Y"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.DialogPositionData"}},{"HashCode":255384508,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.DialogPositionData","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Configures to display a dialog in the custom position within the document or target.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Popups.DialogPositionData"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"X","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the offset left value to position the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"X"}},{"Kind":"Components.Component","Name":"Y","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the offset top value to position the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Y"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.DialogPositionData","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1179605760,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.DialogTemplates","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Configure templates to display within a header, content, and footer section of Dialog.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DialogTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Header","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the value that can be displayed in the dialog's title area that can be configured with a plain text.\n            The dialog will be displayed without the header if the header property is null.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Header","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the value that can be displayed in the dialog's content section.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the footer template of the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.DialogTemplates"}},{"HashCode":-1271410543,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.DialogTemplates","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Configure templates to display within a header, content, and footer section of Dialog.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Popups.DialogTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Header","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the value that can be displayed in the dialog's title area that can be configured with a plain text.\n            The dialog will be displayed without the header if the header property is null.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Header","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the value that can be displayed in the dialog's content section.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the footer template of the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.DialogTemplates","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1674208606,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.DialogTemplates.Header","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Specifies the value that can be displayed in the dialog's title area that can be configured with a plain text.\n            The dialog will be displayed without the header if the header property is null.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Header","ParentTag":"DialogTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.DialogTemplates.Header","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1833888484,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.DialogTemplates.Header","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Specifies the value that can be displayed in the dialog's title area that can be configured with a plain text.\n            The dialog will be displayed without the header if the header property is null.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Header","ParentTag":"Syncfusion.Blazor.Popups.DialogTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.DialogTemplates.Header","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":788528970,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.DialogTemplates.Content","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Specifies the value that can be displayed in the dialog's content section.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Content","ParentTag":"DialogTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.DialogTemplates.Content","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-969865434,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.DialogTemplates.Content","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Specifies the value that can be displayed in the dialog's content section.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Content","ParentTag":"Syncfusion.Blazor.Popups.DialogTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.DialogTemplates.Content","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":561626899,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.DialogTemplates.FooterTemplate","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Defines the footer template of the dialog.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"DialogTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.DialogTemplates.FooterTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-989131086,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.DialogTemplates.FooterTemplate","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Defines the footer template of the dialog.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Syncfusion.Blazor.Popups.DialogTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.DialogTemplates.FooterTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":340452306,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.SfDialog","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Represents the dialog component that displays the information and gets input from the user.\n            Two types of dialog components are `Modal and Modeless(non-modal)` depending on their interaction with the parent application.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDialog"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the unique identifier.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Sets content for the Dialog element including HTML support and its customizations.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowDragging","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the value whether the dialog component can be dragged by the end-user.\n            The dialog allows a user to drag by selecting the header and dragging it for re-positioning the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowDragging"}},{"Kind":"Components.Component","Name":"CloseOnEscape","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the Boolean value whether the dialog can be closed on pressing the escape (ESC) key.\n            that is used to control the dialog's closing behavior.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CloseOnEscape"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the value that can be displayed in the dialog's content section.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the dialog.\n            One or more custom CSS classes can be added to a dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnableResize","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the value whether the dialog component can be resized by the end-user.\n            If the enableResize is true, the dialog component creates a grip to resize it in a diagonal direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableResize"}},{"Kind":"Components.Component","Name":"ResizeHandles","TypeName":"Syncfusion.Blazor.Popups.ResizeDirection[]","Documentation":"\n            <summary>\n            Specifies the resize handles direction in the dialog component that can be resized by the end-user.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ResizeHandles"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left (RTL) direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the template value that can be displayed with the dialog's footer area.\n            This is an optional property and can be used only when the footer is occupied with information or custom components.\n            By default, the footer is configured with the action buttons.\n            If the footer template is configured to the dialog, the buttons property will be disabled.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate"}},{"Kind":"Components.Component","Name":"Header","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the value that can be displayed in the dialog's title area that can be configured with a plain text.\n            The dialog will be displayed without the header if the header property is null.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Header"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the height of the dialog component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Height"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional Html attributes such as id, title, etc., to the dialog element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"IsModal","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the Boolean value whether the dialog can be displayed as modal or non-modal.\n            `Modal`: It creates an overlay that disables interaction with the parent application and\n             the user who should respond with modal before continuing with other applications.\n            `Modeless`: It does not prevent user interaction with the parent application.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsModal"}},{"Kind":"Components.Component","Name":"MinHeight","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the min-height of the dialog component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinHeight"}},{"Kind":"Components.Component","Name":"ShowCloseIcon","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the value that represents whether the close icon can be shown in the dialog’s title section.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowCloseIcon"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the target element in which the dialog should be displayed.\n            The default value is null, which refers to the `Document.body` element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Target"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the value that represents whether the dialog component is visible.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Visible"}},{"Kind":"Components.Component","Name":"VisibleChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <summary>\n            Gets or sets a callback of the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VisibleChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the z-order for rendering that determines whether the dialog is displayed\n            in front or behind of another component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex"}},{"Kind":"Components.Component","Name":"AllowPrerender","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the Dialog element re-render or not when the Dialog gets open.\n            </summary>\n            <value>\n            <c>true</c>, if dialog component elements are maintained on the DOM when closing and opening it; otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Disabling this property, the Dialog component DOM element will be destroyed when closing and re-rendered the dialog DOM element while opening it. Otherwise, the dialog will be shown when opening it and remain hidden while closing it when enabled.\n            </remarks>\n            <seealso cref=\"P:Syncfusion.Blazor.Popups.SfDialog.Visible\" />\n        ","Metadata":{"Common.PropertyName":"AllowPrerender"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.SfDialog"}},{"HashCode":-1882476882,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.SfDialog","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Represents the dialog component that displays the information and gets input from the user.\n            Two types of dialog components are `Modal and Modeless(non-modal)` depending on their interaction with the parent application.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Popups.SfDialog"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the unique identifier.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Sets content for the Dialog element including HTML support and its customizations.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowDragging","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the value whether the dialog component can be dragged by the end-user.\n            The dialog allows a user to drag by selecting the header and dragging it for re-positioning the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowDragging"}},{"Kind":"Components.Component","Name":"CloseOnEscape","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the Boolean value whether the dialog can be closed on pressing the escape (ESC) key.\n            that is used to control the dialog's closing behavior.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CloseOnEscape"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the value that can be displayed in the dialog's content section.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the dialog.\n            One or more custom CSS classes can be added to a dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnableResize","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the value whether the dialog component can be resized by the end-user.\n            If the enableResize is true, the dialog component creates a grip to resize it in a diagonal direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableResize"}},{"Kind":"Components.Component","Name":"ResizeHandles","TypeName":"Syncfusion.Blazor.Popups.ResizeDirection[]","Documentation":"\n            <summary>\n            Specifies the resize handles direction in the dialog component that can be resized by the end-user.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ResizeHandles"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left (RTL) direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the template value that can be displayed with the dialog's footer area.\n            This is an optional property and can be used only when the footer is occupied with information or custom components.\n            By default, the footer is configured with the action buttons.\n            If the footer template is configured to the dialog, the buttons property will be disabled.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate"}},{"Kind":"Components.Component","Name":"Header","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the value that can be displayed in the dialog's title area that can be configured with a plain text.\n            The dialog will be displayed without the header if the header property is null.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Header"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the height of the dialog component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Height"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional Html attributes such as id, title, etc., to the dialog element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"IsModal","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the Boolean value whether the dialog can be displayed as modal or non-modal.\n            `Modal`: It creates an overlay that disables interaction with the parent application and\n             the user who should respond with modal before continuing with other applications.\n            `Modeless`: It does not prevent user interaction with the parent application.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsModal"}},{"Kind":"Components.Component","Name":"MinHeight","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the min-height of the dialog component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinHeight"}},{"Kind":"Components.Component","Name":"ShowCloseIcon","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the value that represents whether the close icon can be shown in the dialog’s title section.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowCloseIcon"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the target element in which the dialog should be displayed.\n            The default value is null, which refers to the `Document.body` element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Target"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the value that represents whether the dialog component is visible.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Visible"}},{"Kind":"Components.Component","Name":"VisibleChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <summary>\n            Gets or sets a callback of the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VisibleChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the dialog.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the z-order for rendering that determines whether the dialog is displayed\n            in front or behind of another component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex"}},{"Kind":"Components.Component","Name":"AllowPrerender","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the Dialog element re-render or not when the Dialog gets open.\n            </summary>\n            <value>\n            <c>true</c>, if dialog component elements are maintained on the DOM when closing and opening it; otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Disabling this property, the Dialog component DOM element will be destroyed when closing and re-rendered the dialog DOM element while opening it. Otherwise, the dialog will be shown when opening it and remain hidden while closing it when enabled.\n            </remarks>\n            <seealso cref=\"P:Syncfusion.Blazor.Popups.SfDialog.Visible\" />\n        ","Metadata":{"Common.PropertyName":"AllowPrerender"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.SfDialog","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1001835325,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.SfDialog.ChildContent","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Sets content for the Dialog element including HTML support and its customizations.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfDialog"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.SfDialog.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1470687798,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.SfDialog.ChildContent","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Sets content for the Dialog element including HTML support and its customizations.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Popups.SfDialog"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.SfDialog.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":287291867,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.SfDialogProvider","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            DialogProvider is a target element where the built-in dialogs are shown using <see cref=\"M:Syncfusion.Blazor.Popups.SfDialogService.ConfirmAsync(System.String,System.String,Syncfusion.Blazor.Popups.DialogOptions)\" />,\n            <see cref=\"M:Syncfusion.Blazor.Popups.SfDialogService.AlertAsync(System.String,System.String,Syncfusion.Blazor.Popups.DialogOptions)\" /> and <see cref=\"M:Syncfusion.Blazor.Popups.SfDialogService.PromptAsync(System.String,System.String,Syncfusion.Blazor.Popups.DialogOptions)\" /> \n            methods that are appended to this element. \n            </summary>\n            <remarks>\n            It is recommended to add this component in `MainLayout.razor` to show utility dialogs from anywhere in the application.\n            If you add this to any particular page, the utility dialogs can then be displayed only for that page.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDialogProvider"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.SfDialogProvider"}},{"HashCode":-1350186968,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.SfDialogProvider","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            DialogProvider is a target element where the built-in dialogs are shown using <see cref=\"M:Syncfusion.Blazor.Popups.SfDialogService.ConfirmAsync(System.String,System.String,Syncfusion.Blazor.Popups.DialogOptions)\" />,\n            <see cref=\"M:Syncfusion.Blazor.Popups.SfDialogService.AlertAsync(System.String,System.String,Syncfusion.Blazor.Popups.DialogOptions)\" /> and <see cref=\"M:Syncfusion.Blazor.Popups.SfDialogService.PromptAsync(System.String,System.String,Syncfusion.Blazor.Popups.DialogOptions)\" /> \n            methods that are appended to this element. \n            </summary>\n            <remarks>\n            It is recommended to add this component in `MainLayout.razor` to show utility dialogs from anywhere in the application.\n            If you add this to any particular page, the utility dialogs can then be displayed only for that page.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Popups.SfDialogProvider"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.SfDialogProvider","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1793464685,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.SfTooltip","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.\n            </summary>\n            <summary>\n            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.\n            </summary>\n            <summary>\n            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.\n            </summary>\n            <summary>\n            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.\n            </summary>\n            <summary>\n            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfTooltip"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.TooltipEventArgs>","Documentation":"\n            <summary>\n            The event `Closed` will be fired when the Tooltip component gets closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.TooltipEventArgs>","Documentation":"\n            <summary>\n            The event `Opened` will be fired after the Tooltip component gets opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.TooltipEventArgs>","Documentation":"\n            <summary>\n            The event `OnClose` will be fired before the Tooltip hides from the screen.\n            The Tooltip close can be prevented by setting the cancel argument value to true.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnCollision","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.TooltipEventArgs>","Documentation":"\n            <summary>\n            The event `OnCollision` will be fired for every collision fit calculation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnCollision","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.TooltipEventArgs>","Documentation":"\n            <summary>\n            The event `OnOpen` will be fired before the Tooltip is displayed over the target element.\n            When one of its arguments `cancel` is set to true, the Tooltip display can be prevented.\n            This event is mainly used to refresh the Tooltip positions dynamically or to set customized styles in it and so on.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.TooltipEventArgs>","Documentation":"\n            <summary>\n            The event `OnRender` will be fired before the Tooltip and its contents will be added to the DOM.\n            When one of its arguments `cancel` is set to true, the Tooltip can be prevented from rendering on the page.\n            This event is mainly used to customize the Tooltip before it shows up on the screen.\n            For example, to load the AJAX content or to set new animation effects on the Tooltip, this event can be opted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnRender","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            The event `Created` will be fired after the Tooltip component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            The event `Destroyed` will be fired when the Tooltip component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Defines the content which has to be passed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <exclude />\n            <summary>\n            Defines the Id of the Tooltip component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"Animation","TypeName":"Syncfusion.Blazor.Popups.AnimationModel","Documentation":"\n            <summary>\n            It is used to customize the animation of the Tooltip while opening and closing.\n            The animation property also allows you to set delay, duration, and various other effects of your choice.\n            You can set the same or different animation options to the Tooltip when it is in the open or close state.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Animation"}},{"Kind":"Components.Component","Name":"CloseDelay","TypeName":"System.Double","Documentation":"\n            <summary>\n            To close the Tooltip after a specified delay in millisecond.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CloseDelay"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary>\n            To display the content of the Tooltip which can be a string element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            To customize the Tooltip which accepts the custom CSS class names that define specific\n            user-defined styles and themes to be applied to the Tooltip element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnableHtmlSanitizer","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            This property has been deprecated as we achieve this behavior by using ChildContent of render fragment type and and Content as a string value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableHtmlSanitizer"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            As there are no properties required to persist in tooltip component, this property is deprecated.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            To enable or disable the rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"WindowCollision","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It is used to set the collision target element as page viewport (window) or Tooltip element, when using the target.\n            If this property is enabled, tooltip will perform the collision calculation between the target elements.\n            and viewport(window) instead of Tooltip element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WindowCollision"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            To set the height of the Tooltip component which accepts the string values.\n            When the Tooltip content gets overflowed due to the height value, then the scroll mode will be enabled.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Height"}},{"Kind":"Components.Component","Name":"IsSticky","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            To display the Tooltip in an open state until it is closed manually.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsSticky"}},{"Kind":"Components.Component","Name":"MouseTrail","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It allows the Tooltip to follow the mouse pointer moves over the specified target element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MouseTrail"}},{"Kind":"Components.Component","Name":"OffsetX","TypeName":"System.Double","Documentation":"\n            <summary>\n            It sets the space between the target and Tooltip element in X-axis.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OffsetX"}},{"Kind":"Components.Component","Name":"OffsetY","TypeName":"System.Double","Documentation":"\n            <summary>\n            It sets the space between the target and Tooltip element in Y-axis.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OffsetY"}},{"Kind":"Components.Component","Name":"OpenDelay","TypeName":"System.Double","Documentation":"\n            <summary>\n            To open the Tooltip after a specified delay in millisecond.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OpenDelay"}},{"Kind":"Components.Component","Name":"OpensOn","TypeName":"System.String","Documentation":"\n            <summary>\n            To determine the type of open mode to display the Tooltip content.\n            The available open modes are Auto, Hover, Click, Focus, and Custom.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OpensOn"}},{"Kind":"Components.Component","Name":"Position","TypeName":"Syncfusion.Blazor.Popups.Position","IsEnum":true,"Documentation":"\n            <summary>\n            To set the position of the Tooltip element with respect to the Target element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Position"}},{"Kind":"Components.Component","Name":"ShowTipPointer","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            To show or hide the tip pointer of the Tooltip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTipPointer"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary>\n            To denote the target selector where the Tooltip needs to be displayed.\n            The target element is considered as the parent container.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Target"}},{"Kind":"Components.Component","Name":"Container","TypeName":"System.String","Documentation":"\n            <summary>\n            It is used to set the container element in which the Tooltip’s pop-up will be appended.\n            It's default value is `body`, in which the Tooltip’s pop-up will be appended.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Container"}},{"Kind":"Components.Component","Name":"TipPointerPosition","TypeName":"Syncfusion.Blazor.Popups.TipPointerPosition","IsEnum":true,"Documentation":"\n            <summary>\n            It is used to customize the position of the tip pointer on the tooltip. The available options are Auto, Start, Middle, and End.\n            When set to auto, the tip pointer gets auto adjusted within the space of the target's length and does not point outside.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TipPointerPosition"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            To set the width of the Tooltip component which accepts a string value.\n            When set to auto, the Tooltip width gets auto adjusted to display its content within the viewable screen.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.SfTooltip"}},{"HashCode":329979590,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.SfTooltip","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.\n            </summary>\n            <summary>\n            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.\n            </summary>\n            <summary>\n            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.\n            </summary>\n            <summary>\n            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.\n            </summary>\n            <summary>\n            The SfTooltip component displays a pop-up containing information or a message when you hover, click, focus, or touch an element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Popups.SfTooltip"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.TooltipEventArgs>","Documentation":"\n            <summary>\n            The event `Closed` will be fired when the Tooltip component gets closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.TooltipEventArgs>","Documentation":"\n            <summary>\n            The event `Opened` will be fired after the Tooltip component gets opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.TooltipEventArgs>","Documentation":"\n            <summary>\n            The event `OnClose` will be fired before the Tooltip hides from the screen.\n            The Tooltip close can be prevented by setting the cancel argument value to true.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnCollision","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.TooltipEventArgs>","Documentation":"\n            <summary>\n            The event `OnCollision` will be fired for every collision fit calculation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnCollision","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.TooltipEventArgs>","Documentation":"\n            <summary>\n            The event `OnOpen` will be fired before the Tooltip is displayed over the target element.\n            When one of its arguments `cancel` is set to true, the Tooltip display can be prevented.\n            This event is mainly used to refresh the Tooltip positions dynamically or to set customized styles in it and so on.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Popups.TooltipEventArgs>","Documentation":"\n            <summary>\n            The event `OnRender` will be fired before the Tooltip and its contents will be added to the DOM.\n            When one of its arguments `cancel` is set to true, the Tooltip can be prevented from rendering on the page.\n            This event is mainly used to customize the Tooltip before it shows up on the screen.\n            For example, to load the AJAX content or to set new animation effects on the Tooltip, this event can be opted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnRender","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            The event `Created` will be fired after the Tooltip component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            The event `Destroyed` will be fired when the Tooltip component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Defines the content which has to be passed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <exclude />\n            <summary>\n            Defines the Id of the Tooltip component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"Animation","TypeName":"Syncfusion.Blazor.Popups.AnimationModel","Documentation":"\n            <summary>\n            It is used to customize the animation of the Tooltip while opening and closing.\n            The animation property also allows you to set delay, duration, and various other effects of your choice.\n            You can set the same or different animation options to the Tooltip when it is in the open or close state.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Animation"}},{"Kind":"Components.Component","Name":"CloseDelay","TypeName":"System.Double","Documentation":"\n            <summary>\n            To close the Tooltip after a specified delay in millisecond.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CloseDelay"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary>\n            To display the content of the Tooltip which can be a string element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            To customize the Tooltip which accepts the custom CSS class names that define specific\n            user-defined styles and themes to be applied to the Tooltip element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnableHtmlSanitizer","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            This property has been deprecated as we achieve this behavior by using ChildContent of render fragment type and and Content as a string value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableHtmlSanitizer"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            As there are no properties required to persist in tooltip component, this property is deprecated.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            To enable or disable the rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"WindowCollision","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It is used to set the collision target element as page viewport (window) or Tooltip element, when using the target.\n            If this property is enabled, tooltip will perform the collision calculation between the target elements.\n            and viewport(window) instead of Tooltip element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WindowCollision"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            To set the height of the Tooltip component which accepts the string values.\n            When the Tooltip content gets overflowed due to the height value, then the scroll mode will be enabled.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Height"}},{"Kind":"Components.Component","Name":"IsSticky","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            To display the Tooltip in an open state until it is closed manually.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsSticky"}},{"Kind":"Components.Component","Name":"MouseTrail","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It allows the Tooltip to follow the mouse pointer moves over the specified target element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MouseTrail"}},{"Kind":"Components.Component","Name":"OffsetX","TypeName":"System.Double","Documentation":"\n            <summary>\n            It sets the space between the target and Tooltip element in X-axis.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OffsetX"}},{"Kind":"Components.Component","Name":"OffsetY","TypeName":"System.Double","Documentation":"\n            <summary>\n            It sets the space between the target and Tooltip element in Y-axis.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OffsetY"}},{"Kind":"Components.Component","Name":"OpenDelay","TypeName":"System.Double","Documentation":"\n            <summary>\n            To open the Tooltip after a specified delay in millisecond.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OpenDelay"}},{"Kind":"Components.Component","Name":"OpensOn","TypeName":"System.String","Documentation":"\n            <summary>\n            To determine the type of open mode to display the Tooltip content.\n            The available open modes are Auto, Hover, Click, Focus, and Custom.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OpensOn"}},{"Kind":"Components.Component","Name":"Position","TypeName":"Syncfusion.Blazor.Popups.Position","IsEnum":true,"Documentation":"\n            <summary>\n            To set the position of the Tooltip element with respect to the Target element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Position"}},{"Kind":"Components.Component","Name":"ShowTipPointer","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            To show or hide the tip pointer of the Tooltip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTipPointer"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary>\n            To denote the target selector where the Tooltip needs to be displayed.\n            The target element is considered as the parent container.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Target"}},{"Kind":"Components.Component","Name":"Container","TypeName":"System.String","Documentation":"\n            <summary>\n            It is used to set the container element in which the Tooltip’s pop-up will be appended.\n            It's default value is `body`, in which the Tooltip’s pop-up will be appended.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Container"}},{"Kind":"Components.Component","Name":"TipPointerPosition","TypeName":"Syncfusion.Blazor.Popups.TipPointerPosition","IsEnum":true,"Documentation":"\n            <summary>\n            It is used to customize the position of the tip pointer on the tooltip. The available options are Auto, Start, Middle, and End.\n            When set to auto, the tip pointer gets auto adjusted within the space of the target's length and does not point outside.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TipPointerPosition"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            To set the width of the Tooltip component which accepts a string value.\n            When set to auto, the Tooltip width gets auto adjusted to display its content within the viewable screen.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.SfTooltip","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1553304512,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.SfTooltip.ChildContent","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <exclude />\n            <summary>\n            Defines the content which has to be passed.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfTooltip"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.SfTooltip.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-933362720,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.SfTooltip.ChildContent","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <exclude />\n            <summary>\n            Defines the content which has to be passed.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Popups.SfTooltip"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.SfTooltip.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1389293179,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.TooltipTemplates","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Configure templates to display content within the tooltip component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TooltipTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Defines the content which has to be passed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Defines the content to be passed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.TooltipTemplates"}},{"HashCode":1333782189,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups.TooltipTemplates","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <summary>\n            Configure templates to display content within the tooltip component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Popups.TooltipTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Defines the content which has to be passed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Defines the content to be passed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups.TooltipTemplates","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":622348077,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.TooltipTemplates.ChildContent","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <exclude />\n            <summary>\n            Defines the content which has to be passed.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"TooltipTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.TooltipTemplates.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":899972295,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.TooltipTemplates.ChildContent","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <exclude />\n            <summary>\n            Defines the content which has to be passed.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Popups.TooltipTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.TooltipTemplates.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":482810088,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.TooltipTemplates.Content","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <exclude />\n            <summary>\n            Defines the content to be passed.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Content","ParentTag":"TooltipTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.TooltipTemplates.Content","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-77946554,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Popups.TooltipTemplates.Content","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"\n            <exclude />\n            <summary>\n            Defines the content to be passed.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Content","ParentTag":"Syncfusion.Blazor.Popups.TooltipTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Popups.TooltipTemplates.Content","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-377097211,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups._Imports","AssemblyName":"Syncfusion.Blazor.Popups","CaseSensitive":true,"TagMatchingRules":[{"TagName":"_Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups._Imports"}},{"HashCode":-1620228734,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Popups._Imports","AssemblyName":"Syncfusion.Blazor.Popups","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Popups._Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Popups._Imports","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1733716401,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.CalendarBase<T>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The Calendar is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <typeparam name=\"T\">Specifies the type of CalendarBase.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CalendarBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Calendars.CalendarBase<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a maximum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"Value","TypeName":"T","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<T>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<T>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.CalendarBase<T>","Components.GenericTyped":"True"}},{"HashCode":-154336868,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.CalendarBase<T>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The Calendar is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <typeparam name=\"T\">Specifies the type of CalendarBase.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.CalendarBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Calendars.CalendarBase<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a maximum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"Value","TypeName":"T","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<T>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<T>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.CalendarBase<T>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1895782286,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.MaskPlaceholder","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The <see cref=\"T:Syncfusion.Blazor.Calendars.MaskPlaceholder\" /> property is used to set the text that is shown as a hint or placeholder in an input field until the user enters a value. \n            It can be used to provide additional context or instructions to the user about the format that is expected for the input.\n            </summary>\n            <remarks>\n             The <c>MaskPlaceholder</c> class properties will work when enabling the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.EnableMask\" /> property.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"MaskPlaceholder"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Day","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the day segment of the date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the day segment being the <c>dd</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Day\" /> property might be set to <c>dd</c> to indicate to the user the expected format of the day that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Day"}},{"Kind":"Components.Component","Name":"Month","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the month segment of date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the month segment being the <c>mm</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Month\" /> property might be set to <c>mm</c> to indicate to the user the expected format of the month that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Month"}},{"Kind":"Components.Component","Name":"Year","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the year segment of date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the year segment being the <c>yyyy</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Year\" /> property might be set to <c>yyyy</c> to indicate to the user the expected format of the year that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Year"}},{"Kind":"Components.Component","Name":"Hour","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the hour segment of datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm</c>, with the hour segment being the <c>hh</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Hour\" /> property might be set to <c>hh</c> to indicate to the user the expected format of the hour that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Hour"}},{"Kind":"Components.Component","Name":"Minute","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the minute segment of the datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm</c>, with the minute segment being the <c>mm</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Minute\" /> property might be set to <c>mm</c> to indicate to the user the expected format of the minute that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Minute"}},{"Kind":"Components.Component","Name":"Second","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the second segment of the datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm:ss</c>, with the second segment being the <c>ss</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Second\" /> property might be set to <c>ss</c> to indicate to the user the expected format of the second that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Second"}},{"Kind":"Components.Component","Name":"DayOfWeek","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the day of week segment of the datetime input .\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n             <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>dddd,dd/mm/yyyy</c>, with the day of week segment being the <c>dddd</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Second\" /> property might be set to <c>dddd</c> to indicate to the user the expected format of the day of week that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DayOfWeek"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.MaskPlaceholder"}},{"HashCode":-1126021631,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.MaskPlaceholder","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The <see cref=\"T:Syncfusion.Blazor.Calendars.MaskPlaceholder\" /> property is used to set the text that is shown as a hint or placeholder in an input field until the user enters a value. \n            It can be used to provide additional context or instructions to the user about the format that is expected for the input.\n            </summary>\n            <remarks>\n             The <c>MaskPlaceholder</c> class properties will work when enabling the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.EnableMask\" /> property.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.MaskPlaceholder"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Day","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the day segment of the date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the day segment being the <c>dd</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Day\" /> property might be set to <c>dd</c> to indicate to the user the expected format of the day that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Day"}},{"Kind":"Components.Component","Name":"Month","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the month segment of date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the month segment being the <c>mm</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Month\" /> property might be set to <c>mm</c> to indicate to the user the expected format of the month that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Month"}},{"Kind":"Components.Component","Name":"Year","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the year segment of date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the year segment being the <c>yyyy</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Year\" /> property might be set to <c>yyyy</c> to indicate to the user the expected format of the year that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Year"}},{"Kind":"Components.Component","Name":"Hour","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the hour segment of datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm</c>, with the hour segment being the <c>hh</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Hour\" /> property might be set to <c>hh</c> to indicate to the user the expected format of the hour that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Hour"}},{"Kind":"Components.Component","Name":"Minute","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the minute segment of the datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm</c>, with the minute segment being the <c>mm</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Minute\" /> property might be set to <c>mm</c> to indicate to the user the expected format of the minute that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Minute"}},{"Kind":"Components.Component","Name":"Second","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the second segment of the datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm:ss</c>, with the second segment being the <c>ss</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Second\" /> property might be set to <c>ss</c> to indicate to the user the expected format of the second that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Second"}},{"Kind":"Components.Component","Name":"DayOfWeek","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the day of week segment of the datetime input .\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n             <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>dddd,dd/mm/yyyy</c>, with the day of week segment being the <c>dddd</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Second\" /> property might be set to <c>dddd</c> to indicate to the user the expected format of the day of week that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DayOfWeek"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.MaskPlaceholder","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1361465693,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.CalendarEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the Calendar Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of CalendarEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CalendarEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.CalendarEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ChangedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the Calendar value is changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers after selecting the value from Calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selected","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DeSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.DeSelectedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers after deselecting the value from Calendar. This event will trigger when enable the multiple date selection.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DeSelected","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when Calendar is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when Calendar is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Navigated","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Documentation":"\n            <summary>\n            Triggers when the Calendar is navigated to another level or within the same level of view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Navigated","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnRenderDayCell","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Documentation":"\n            <summary>\n            Triggers when each day cell of the Calendar is rendered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnRenderDayCell","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.CalendarEvents<TValue>","Components.GenericTyped":"True"}},{"HashCode":1858509222,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.CalendarEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the Calendar Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of CalendarEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.CalendarEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.CalendarEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ChangedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the Calendar value is changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers after selecting the value from Calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selected","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DeSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.DeSelectedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers after deselecting the value from Calendar. This event will trigger when enable the multiple date selection.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DeSelected","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when Calendar is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when Calendar is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Navigated","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Documentation":"\n            <summary>\n            Triggers when the Calendar is navigated to another level or within the same level of view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Navigated","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnRenderDayCell","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Documentation":"\n            <summary>\n            Triggers when each day cell of the Calendar is rendered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnRenderDayCell","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.CalendarEvents<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-152967568,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The Calendar is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <summary>\n            The Calendar is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <summary>\n            The Calendar is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfCalendar"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.SfCalendar<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValuesExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.DateTime[]>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the values of the bound.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValuesExpression"}},{"Kind":"Components.Component","Name":"IsMultiSelection","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the calendar allows the user to select the multiple dates.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsMultiSelection"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex"}},{"Kind":"Components.Component","Name":"Values","TypeName":"System.DateTime[]","Documentation":"\n            <summary>\n            Sets multiple selected dates of the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Values"}},{"Kind":"Components.Component","Name":"ValuesChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.DateTime[]>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the values changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValuesChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class etc., to the root element.\n            <para>If you configured both property and equivalent html attribute, then the component considers the property value.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a maximum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>","Components.GenericTyped":"True"}},{"HashCode":-1025758691,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The Calendar is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <summary>\n            The Calendar is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <summary>\n            The Calendar is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.SfCalendar"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.SfCalendar<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValuesExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.DateTime[]>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the values of the bound.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValuesExpression"}},{"Kind":"Components.Component","Name":"IsMultiSelection","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the calendar allows the user to select the multiple dates.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsMultiSelection"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex"}},{"Kind":"Components.Component","Name":"Values","TypeName":"System.DateTime[]","Documentation":"\n            <summary>\n            Sets multiple selected dates of the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Values"}},{"Kind":"Components.Component","Name":"ValuesChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.DateTime[]>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the values changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValuesChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class etc., to the root element.\n            <para>If you configured both property and equivalent html attribute, then the component considers the property value.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a maximum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":656426323,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfCalendar"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":164650272,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Calendars.SfCalendar"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-655930573,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.SfDatePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The DatePicker is a graphical user interface component that allows the user to select or enter a date value.\n            </summary>\n            <summary>\n            The DatePicker is a graphical user interface component that allows the user to select or enter a date value.\n            </summary>\n            <summary>\n            Defines the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" />.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of SfDatePicker.</typeparam>\n            <summary>\n            The DatePicker is a graphical user interface component that allows the user to select or enter a date value.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDatePicker"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.SfDatePicker<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowEdit","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.AllowEdit\" /> whether the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> allows user to change the value via typing. \n            </summary>\n            <value>\n            <c>true</c>, if the DatePicker allows user to change the value via typing; otherwise, <c>false</c>  user to change the value via picker only. The default value is <c>true</c>.        \n            </value>\n        ","Metadata":{"Common.PropertyName":"AllowEdit"}},{"Kind":"Components.Component","Name":"EnableMask","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets mask rendering in the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> component.\n            </summary>\n            <value>\n            <c>true</c>, if the component render with mask format; otherwise, <c>false</c>. The default value is <c>false</c>.        \n            </value>\n            <remarks>\n            The Enable mask property restricts the user to type the unwanted characters in the text area. It allows only eligible characters to type.        \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableMask"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.FloatLabelType\" /> behavior of the DatePicker that the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Placeholder\" /> text floats above the DatePicker based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the DatePicker when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the DatePicker.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the DatePicker after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> of the value that to be displayed in component.\n            <para>By default, the format is based on the culture.</para>\n            <para>You can set the format to \"format:'dd/MM/yyyy hh:mm'\".</para>\n            </summary>\n            <value>\n            Accepts format value in string type. The default culture format is <c>M/d/yyyy</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Format"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets the additional <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.HtmlAttributes\" /> such as styles, class, and more to the root element.\n            </summary>\n            <remarks>\n            Additional attributes can be added by specifying an inline attribute or by specifying @attributes directive.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets the additional <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.InputAttributes\" /> such as disabled, value, and more to the root element.\n            </summary>\n            <remarks>       \n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"InputAttributes"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Placeholder\" /> until the user focuses or enter a value in DatePicker.\n            </summary>\n            <value>\n             Accepts a string value. The default value is <c>string.Empty</c>\n            </value>\n            <remarks> \n             The property is depending on the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.FloatLabelType\" /> property.        \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Readonly\" /> whether the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> allows the user to change the text.\n            </summary>\n            <value>\n            <c>true</c>, if the DatePicker value cannot be edited; otherwise, <c>false</c>. The default value is <c>true</c>.  \n            </value>\n            <remark>\n            If the read-only is enabled, the popup cannot open.\n            </remark>\n        ","Metadata":{"Common.PropertyName":"Readonly"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.ShowClearButton\" /> this indicates whether the clear button is displayed in <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> component.\n            </summary>\n            <value>\n            <c>true</c>, if the clear icon was shown; otherwise, <c>false</c>. The default value is <c>false</c>.        \n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton"}},{"Kind":"Components.Component","Name":"StrictMode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the component to act as strict So that it allows to enter of only a valid date value within a specified range, or else it will reset to the previous value.\n            </summary>\n            <value>\n            <c>true</c>, if this property won't allow to enter an invalid date; otherwise, <c>false</c> It allows invalid or out-of-range date value with highlighted error class. The default value is <c>false</c>.        \n            </value>\n        ","Metadata":{"Common.PropertyName":"StrictMode"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Width\" /> of the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> component.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>null</c>\n            </value>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.ZIndex\" /> value of the DatePicker popup element.\n            </summary>\n            <value>\n            Accepts integer value. The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.TabIndex\" /> order of the DatePicker component.\n            </summary>\n            <value>\n            Accepts integer value. The default value is <c>0</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TabIndex"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a maximum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDatePicker<TValue>","Components.GenericTyped":"True"}},{"HashCode":626304861,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.SfDatePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The DatePicker is a graphical user interface component that allows the user to select or enter a date value.\n            </summary>\n            <summary>\n            The DatePicker is a graphical user interface component that allows the user to select or enter a date value.\n            </summary>\n            <summary>\n            Defines the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" />.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of SfDatePicker.</typeparam>\n            <summary>\n            The DatePicker is a graphical user interface component that allows the user to select or enter a date value.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.SfDatePicker"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.SfDatePicker<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowEdit","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.AllowEdit\" /> whether the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> allows user to change the value via typing. \n            </summary>\n            <value>\n            <c>true</c>, if the DatePicker allows user to change the value via typing; otherwise, <c>false</c>  user to change the value via picker only. The default value is <c>true</c>.        \n            </value>\n        ","Metadata":{"Common.PropertyName":"AllowEdit"}},{"Kind":"Components.Component","Name":"EnableMask","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets mask rendering in the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> component.\n            </summary>\n            <value>\n            <c>true</c>, if the component render with mask format; otherwise, <c>false</c>. The default value is <c>false</c>.        \n            </value>\n            <remarks>\n            The Enable mask property restricts the user to type the unwanted characters in the text area. It allows only eligible characters to type.        \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableMask"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.FloatLabelType\" /> behavior of the DatePicker that the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Placeholder\" /> text floats above the DatePicker based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the DatePicker when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the DatePicker.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the DatePicker after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> of the value that to be displayed in component.\n            <para>By default, the format is based on the culture.</para>\n            <para>You can set the format to \"format:'dd/MM/yyyy hh:mm'\".</para>\n            </summary>\n            <value>\n            Accepts format value in string type. The default culture format is <c>M/d/yyyy</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Format"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets the additional <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.HtmlAttributes\" /> such as styles, class, and more to the root element.\n            </summary>\n            <remarks>\n            Additional attributes can be added by specifying an inline attribute or by specifying @attributes directive.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets the additional <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.InputAttributes\" /> such as disabled, value, and more to the root element.\n            </summary>\n            <remarks>       \n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"InputAttributes"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Placeholder\" /> until the user focuses or enter a value in DatePicker.\n            </summary>\n            <value>\n             Accepts a string value. The default value is <c>string.Empty</c>\n            </value>\n            <remarks> \n             The property is depending on the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.FloatLabelType\" /> property.        \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Readonly\" /> whether the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> allows the user to change the text.\n            </summary>\n            <value>\n            <c>true</c>, if the DatePicker value cannot be edited; otherwise, <c>false</c>. The default value is <c>true</c>.  \n            </value>\n            <remark>\n            If the read-only is enabled, the popup cannot open.\n            </remark>\n        ","Metadata":{"Common.PropertyName":"Readonly"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.ShowClearButton\" /> this indicates whether the clear button is displayed in <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> component.\n            </summary>\n            <value>\n            <c>true</c>, if the clear icon was shown; otherwise, <c>false</c>. The default value is <c>false</c>.        \n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton"}},{"Kind":"Components.Component","Name":"StrictMode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the component to act as strict So that it allows to enter of only a valid date value within a specified range, or else it will reset to the previous value.\n            </summary>\n            <value>\n            <c>true</c>, if this property won't allow to enter an invalid date; otherwise, <c>false</c> It allows invalid or out-of-range date value with highlighted error class. The default value is <c>false</c>.        \n            </value>\n        ","Metadata":{"Common.PropertyName":"StrictMode"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Width\" /> of the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> component.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>null</c>\n            </value>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.ZIndex\" /> value of the DatePicker popup element.\n            </summary>\n            <value>\n            Accepts integer value. The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.TabIndex\" /> order of the DatePicker component.\n            </summary>\n            <value>\n            Accepts integer value. The default value is <c>0</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TabIndex"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a maximum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDatePicker<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":531848753,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.SfDatePicker<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Gets or sets the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfDatePicker"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDatePicker<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1404114287,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.SfDatePicker<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Gets or sets the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Calendars.SfDatePicker"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDatePicker<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":532148076,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DatePickerEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the DatePicker Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of DatePickerEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DatePickerEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.DatePickerEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.BlurEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input loses the focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ChangedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the Calendar value is changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers after selecting the value from DatePicker.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selected","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Cleared","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ClearedEventArgs>","Documentation":"\n            <summary>\n            Triggers when datepicker value is cleared using clear button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Cleared","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.PopupObjectArgs>","Documentation":"\n            <summary>\n            Triggers when the popup is closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Navigated","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Documentation":"\n            <summary>\n            Triggers when the Calendar is navigated to another level or within the same level of view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Navigated","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.PopupObjectArgs>","Documentation":"\n            <summary>\n            Triggers when the popup is opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnRenderDayCell","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Documentation":"\n            <summary>\n            Triggers when each day cell of the Calendar is rendered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnRenderDayCell","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DatePickerEvents<TValue>","Components.GenericTyped":"True"}},{"HashCode":788027413,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DatePickerEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the DatePicker Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of DatePickerEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.DatePickerEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.DatePickerEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.BlurEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input loses the focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ChangedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the Calendar value is changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers after selecting the value from DatePicker.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selected","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Cleared","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ClearedEventArgs>","Documentation":"\n            <summary>\n            Triggers when datepicker value is cleared using clear button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Cleared","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.PopupObjectArgs>","Documentation":"\n            <summary>\n            Triggers when the popup is closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Navigated","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Documentation":"\n            <summary>\n            Triggers when the Calendar is navigated to another level or within the same level of view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Navigated","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.PopupObjectArgs>","Documentation":"\n            <summary>\n            Triggers when the popup is opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnRenderDayCell","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Documentation":"\n            <summary>\n            Triggers when each day cell of the Calendar is rendered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnRenderDayCell","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DatePickerEvents<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-27826680,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DatePickerMaskPlaceholder","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder based on the specified <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> until the user enters a value in the <see cref=\"T:Syncfusion.Blazor.Calendars.DatePickerMaskPlaceholder\" />\n            </summary>\n            <remarks>\n            The <c>DatePickerMaskPlaceholder</c> class properties will work when enabling the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.EnableMask\" /> property. \n             <see cref=\"T:Syncfusion.Blazor.Calendars.MaskPlaceholder\" />\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDatePicker TValue=\"DateTime\" EnableMask=true >\n                <DatePickerMaskPlaceholder Day=\"day\" Month= \"month\" Year= \"year\"></DatePickerMaskPlaceholder>\n            </SfDatePicker>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DatePickerMaskPlaceholder"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Day","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the day segment of the date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the day segment being the <c>dd</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Day\" /> property might be set to <c>dd</c> to indicate to the user the expected format of the day that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Day"}},{"Kind":"Components.Component","Name":"Month","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the month segment of date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the month segment being the <c>mm</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Month\" /> property might be set to <c>mm</c> to indicate to the user the expected format of the month that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Month"}},{"Kind":"Components.Component","Name":"Year","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the year segment of date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the year segment being the <c>yyyy</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Year\" /> property might be set to <c>yyyy</c> to indicate to the user the expected format of the year that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Year"}},{"Kind":"Components.Component","Name":"Hour","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the hour segment of datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm</c>, with the hour segment being the <c>hh</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Hour\" /> property might be set to <c>hh</c> to indicate to the user the expected format of the hour that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Hour"}},{"Kind":"Components.Component","Name":"Minute","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the minute segment of the datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm</c>, with the minute segment being the <c>mm</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Minute\" /> property might be set to <c>mm</c> to indicate to the user the expected format of the minute that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Minute"}},{"Kind":"Components.Component","Name":"Second","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the second segment of the datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm:ss</c>, with the second segment being the <c>ss</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Second\" /> property might be set to <c>ss</c> to indicate to the user the expected format of the second that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Second"}},{"Kind":"Components.Component","Name":"DayOfWeek","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the day of week segment of the datetime input .\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n             <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>dddd,dd/mm/yyyy</c>, with the day of week segment being the <c>dddd</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Second\" /> property might be set to <c>dddd</c> to indicate to the user the expected format of the day of week that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DayOfWeek"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DatePickerMaskPlaceholder"}},{"HashCode":-1611877106,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DatePickerMaskPlaceholder","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder based on the specified <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> until the user enters a value in the <see cref=\"T:Syncfusion.Blazor.Calendars.DatePickerMaskPlaceholder\" />\n            </summary>\n            <remarks>\n            The <c>DatePickerMaskPlaceholder</c> class properties will work when enabling the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.EnableMask\" /> property. \n             <see cref=\"T:Syncfusion.Blazor.Calendars.MaskPlaceholder\" />\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDatePicker TValue=\"DateTime\" EnableMask=true >\n                <DatePickerMaskPlaceholder Day=\"day\" Month= \"month\" Year= \"year\"></DatePickerMaskPlaceholder>\n            </SfDatePicker>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.DatePickerMaskPlaceholder"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Day","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the day segment of the date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the day segment being the <c>dd</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Day\" /> property might be set to <c>dd</c> to indicate to the user the expected format of the day that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Day"}},{"Kind":"Components.Component","Name":"Month","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the month segment of date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the month segment being the <c>mm</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Month\" /> property might be set to <c>mm</c> to indicate to the user the expected format of the month that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Month"}},{"Kind":"Components.Component","Name":"Year","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the year segment of date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the year segment being the <c>yyyy</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Year\" /> property might be set to <c>yyyy</c> to indicate to the user the expected format of the year that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Year"}},{"Kind":"Components.Component","Name":"Hour","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the hour segment of datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm</c>, with the hour segment being the <c>hh</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Hour\" /> property might be set to <c>hh</c> to indicate to the user the expected format of the hour that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Hour"}},{"Kind":"Components.Component","Name":"Minute","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the minute segment of the datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm</c>, with the minute segment being the <c>mm</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Minute\" /> property might be set to <c>mm</c> to indicate to the user the expected format of the minute that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Minute"}},{"Kind":"Components.Component","Name":"Second","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the second segment of the datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm:ss</c>, with the second segment being the <c>ss</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Second\" /> property might be set to <c>ss</c> to indicate to the user the expected format of the second that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Second"}},{"Kind":"Components.Component","Name":"DayOfWeek","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the day of week segment of the datetime input .\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n             <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>dddd,dd/mm/yyyy</c>, with the day of week segment being the <c>dddd</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Second\" /> property might be set to <c>dddd</c> to indicate to the user the expected format of the day of week that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DayOfWeek"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DatePickerMaskPlaceholder","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":963191699,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The DateRangePicker is a graphical user interface component that allows user to select the date range from the calendar.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of SfDateRangePicker.</typeparam>\n            <summary>\n            The DateRangePicker is a graphical user interface component that allows the user to select or enter a date value.\n            </summary>\n            <summary>\n            The DateRangePicker is a graphical user interface component that allows the user to select or enter a date value.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDateRangePicker"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"EndDateExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the end date of the bound.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndDateExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"StartDateExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the start date of the bound.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartDateExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"AllowEdit","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value whether the DateRangePicker allows user to change the value via typing. When set as false, the DateRangePicker allows user to change the value via picker only.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowEdit"}},{"Kind":"Components.Component","Name":"EndDate","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the end date of the date range selection.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndDate","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"EndDateChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Triggers when end date of the DateRangePicker is changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndDateChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the floating label behavior of the DateRangePicker that the placeholder text floats above the DateRangePicker based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the DateRangePicker when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the DateRangePicker.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the DateRangePicker after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the required date format to the start and end date string.\n            <para>By default, the format is based on the culture.</para>\n            <para>You can set the format to \"format:'dd/MM/yyyy hh:mm'\".</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the root element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes"}},{"Kind":"Components.Component","Name":"MaxDays","TypeName":"System.Int32?","Documentation":"\n            <summary>\n             Gets or sets the maximum span of days that can be allowed in a date range selection.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaxDays"}},{"Kind":"Components.Component","Name":"MinDays","TypeName":"System.Int32?","Documentation":"\n            <summary>\n             Gets or sets the minimum span of days that can be allowed in date range selection.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinDays"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user focuses or enter a value in DateRangePicker. The property is depending on the FloatLabelType property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value whether the DateRangePicker allows the user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly"}},{"Kind":"Components.Component","Name":"Separator","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets or gets the string that used between the start and end date string.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Separator"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether to show or hide the clear icon in DateRangePicker.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton"}},{"Kind":"Components.Component","Name":"StartDate","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the start date of the date range selection.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartDate","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"StartDateChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Triggers when start date of the DateRangePicker is changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"StartDateChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"StrictMode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the DateRangePicker to act as strict. So that, it allows to enter only a valid date value within a specified range or else it will resets to previous value.\n            <para> By default, StrictMode is in false. It allows invalid or out-of-range date value with highlighted error class.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StrictMode"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the DateRangePicker component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            specifies the z-index value of the DateRangePicker popup element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex"}},{"Kind":"Components.Component","Name":"Presets","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Calendars.Presets>","Documentation":"\n            <summary>\n            Specifies the Presets of the dateRangePicker popup element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Presets"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a maximum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>","Components.GenericTyped":"True"}},{"HashCode":1857745197,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The DateRangePicker is a graphical user interface component that allows user to select the date range from the calendar.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of SfDateRangePicker.</typeparam>\n            <summary>\n            The DateRangePicker is a graphical user interface component that allows the user to select or enter a date value.\n            </summary>\n            <summary>\n            The DateRangePicker is a graphical user interface component that allows the user to select or enter a date value.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.SfDateRangePicker"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"EndDateExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the end date of the bound.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndDateExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"StartDateExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the start date of the bound.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartDateExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"AllowEdit","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value whether the DateRangePicker allows user to change the value via typing. When set as false, the DateRangePicker allows user to change the value via picker only.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowEdit"}},{"Kind":"Components.Component","Name":"EndDate","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the end date of the date range selection.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndDate","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"EndDateChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Triggers when end date of the DateRangePicker is changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndDateChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the floating label behavior of the DateRangePicker that the placeholder text floats above the DateRangePicker based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the DateRangePicker when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the DateRangePicker.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the DateRangePicker after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the required date format to the start and end date string.\n            <para>By default, the format is based on the culture.</para>\n            <para>You can set the format to \"format:'dd/MM/yyyy hh:mm'\".</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the root element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes"}},{"Kind":"Components.Component","Name":"MaxDays","TypeName":"System.Int32?","Documentation":"\n            <summary>\n             Gets or sets the maximum span of days that can be allowed in a date range selection.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaxDays"}},{"Kind":"Components.Component","Name":"MinDays","TypeName":"System.Int32?","Documentation":"\n            <summary>\n             Gets or sets the minimum span of days that can be allowed in date range selection.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinDays"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user focuses or enter a value in DateRangePicker. The property is depending on the FloatLabelType property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value whether the DateRangePicker allows the user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly"}},{"Kind":"Components.Component","Name":"Separator","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets or gets the string that used between the start and end date string.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Separator"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether to show or hide the clear icon in DateRangePicker.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton"}},{"Kind":"Components.Component","Name":"StartDate","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the start date of the date range selection.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartDate","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"StartDateChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Triggers when start date of the DateRangePicker is changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"StartDateChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"StrictMode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the DateRangePicker to act as strict. So that, it allows to enter only a valid date value within a specified range or else it will resets to previous value.\n            <para> By default, StrictMode is in false. It allows invalid or out-of-range date value with highlighted error class.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StrictMode"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the DateRangePicker component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            specifies the z-index value of the DateRangePicker popup element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex"}},{"Kind":"Components.Component","Name":"Presets","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Calendars.Presets>","Documentation":"\n            <summary>\n            Specifies the Presets of the dateRangePicker popup element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Presets"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a maximum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1385885812,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfDateRangePicker"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":11746598,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Calendars.SfDateRangePicker"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1380454514,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DateRangePickerEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the DateRangePicker Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of DateRangePickerEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DateRangePickerEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.DateRangePickerEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.BlurEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input loses the focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RangePickerEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the Calendar value is changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Cleared","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ClearedEventArgs>","Documentation":"\n            <summary>\n            Triggers when daterangepicker value is cleared using clear button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Cleared","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RangePopupEventArgs>","Documentation":"\n            <summary>\n            Triggers when the popup is closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when DateRangePicker is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when DateRangePicker is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.FocusEventArgs>","Documentation":"\n            <summary>\n             Triggers when the input gets focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Navigated","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Documentation":"\n            <summary>\n            Triggers when the Calendar is navigated to another view or within the same level of view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Navigated","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RangePopupEventArgs>","Documentation":"\n            <summary>\n            Triggers when the popup is opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnRenderDayCell","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Documentation":"\n            <summary>\n            Triggers when each day cell of the Calendar is rendered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnRenderDayCell","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"RangeSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RangePickerEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers on selecting the start and end date.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RangeSelected","Components.EventCallback":"True","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DateRangePickerEvents<TValue>","Components.GenericTyped":"True"}},{"HashCode":622787373,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DateRangePickerEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the DateRangePicker Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of DateRangePickerEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.DateRangePickerEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.DateRangePickerEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.BlurEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input loses the focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RangePickerEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the Calendar value is changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Cleared","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ClearedEventArgs>","Documentation":"\n            <summary>\n            Triggers when daterangepicker value is cleared using clear button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Cleared","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RangePopupEventArgs>","Documentation":"\n            <summary>\n            Triggers when the popup is closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when DateRangePicker is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when DateRangePicker is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.FocusEventArgs>","Documentation":"\n            <summary>\n             Triggers when the input gets focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Navigated","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Documentation":"\n            <summary>\n            Triggers when the Calendar is navigated to another view or within the same level of view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Navigated","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RangePopupEventArgs>","Documentation":"\n            <summary>\n            Triggers when the popup is opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnRenderDayCell","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Documentation":"\n            <summary>\n            Triggers when each day cell of the Calendar is rendered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnRenderDayCell","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"RangeSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RangePickerEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers on selecting the start and end date.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RangeSelected","Components.EventCallback":"True","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DateRangePickerEvents<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1921651734,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DateTimePickerEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the DateTimePicker Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of DateTimePickerEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DateTimePickerEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.DateTimePickerEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.BlurEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input loses the focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ChangedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the Calendar value is changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers after selecting the value from DatePicker and TimePicker.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selected","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Cleared","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ClearedEventArgs>","Documentation":"\n            <summary>\n            Triggers when dateptimeicker value is cleared using clear button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Cleared","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.PopupObjectArgs>","Documentation":"\n            <summary>\n            Triggers when the popup is closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Navigated","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Documentation":"\n            <summary>\n            Triggers when the Calendar is navigated to another level or within the same level of view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Navigated","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.PopupObjectArgs>","Documentation":"\n            <summary>\n            Triggers when the popup is opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnRenderDayCell","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Documentation":"\n            <summary>\n            Triggers when each day cell of the Calendar is rendered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnRenderDayCell","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DateTimePickerEvents<TValue>","Components.GenericTyped":"True"}},{"HashCode":1728273312,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DateTimePickerEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the DateTimePicker Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of DateTimePickerEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.DateTimePickerEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.DateTimePickerEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.BlurEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input loses the focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ChangedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the Calendar value is changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers after selecting the value from DatePicker and TimePicker.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selected","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Cleared","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ClearedEventArgs>","Documentation":"\n            <summary>\n            Triggers when dateptimeicker value is cleared using clear button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Cleared","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.PopupObjectArgs>","Documentation":"\n            <summary>\n            Triggers when the popup is closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Navigated","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.NavigatedEventArgs>","Documentation":"\n            <summary>\n            Triggers when the Calendar is navigated to another level or within the same level of view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Navigated","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.PopupObjectArgs>","Documentation":"\n            <summary>\n            Triggers when the popup is opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnRenderDayCell","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.RenderDayCellEventArgs>","Documentation":"\n            <summary>\n            Triggers when each day cell of the Calendar is rendered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnRenderDayCell","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DateTimePickerEvents<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1711258959,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DateTimePickerMaskPlaceholder","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder based on the specified format until the user enters a value in the <see cref=\"T:Syncfusion.Blazor.Calendars.DateTimePickerMaskPlaceholder\" />\n            </summary>\n            <remarks>\n            The <c>DateTimePickerMaskPlaceholder</c> class properties will work when enabling the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.EnableMask\" /> property. \n             <see cref=\"T:Syncfusion.Blazor.Calendars.MaskPlaceholder\" />\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDateTimePicker TValue=\"DateTime\" EnableMask=true >\n                <DateTimePickerMaskPlaceholder Day=\"day\" Month= \"month\" Year= \"year\" Hour= \"hour\" Minute= \"minute\" Second=\"second\" DayOfWeek=\"dayofweek\" ></DateTimePickerMaskPlaceholder>\n            </SfDateTimePicker>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DateTimePickerMaskPlaceholder"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Day","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the day segment of the date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the day segment being the <c>dd</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Day\" /> property might be set to <c>dd</c> to indicate to the user the expected format of the day that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Day"}},{"Kind":"Components.Component","Name":"Month","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the month segment of date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the month segment being the <c>mm</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Month\" /> property might be set to <c>mm</c> to indicate to the user the expected format of the month that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Month"}},{"Kind":"Components.Component","Name":"Year","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the year segment of date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the year segment being the <c>yyyy</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Year\" /> property might be set to <c>yyyy</c> to indicate to the user the expected format of the year that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Year"}},{"Kind":"Components.Component","Name":"Hour","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the hour segment of datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm</c>, with the hour segment being the <c>hh</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Hour\" /> property might be set to <c>hh</c> to indicate to the user the expected format of the hour that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Hour"}},{"Kind":"Components.Component","Name":"Minute","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the minute segment of the datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm</c>, with the minute segment being the <c>mm</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Minute\" /> property might be set to <c>mm</c> to indicate to the user the expected format of the minute that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Minute"}},{"Kind":"Components.Component","Name":"Second","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the second segment of the datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm:ss</c>, with the second segment being the <c>ss</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Second\" /> property might be set to <c>ss</c> to indicate to the user the expected format of the second that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Second"}},{"Kind":"Components.Component","Name":"DayOfWeek","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the day of week segment of the datetime input .\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n             <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>dddd,dd/mm/yyyy</c>, with the day of week segment being the <c>dddd</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Second\" /> property might be set to <c>dddd</c> to indicate to the user the expected format of the day of week that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DayOfWeek"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DateTimePickerMaskPlaceholder"}},{"HashCode":-201779329,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DateTimePickerMaskPlaceholder","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder based on the specified format until the user enters a value in the <see cref=\"T:Syncfusion.Blazor.Calendars.DateTimePickerMaskPlaceholder\" />\n            </summary>\n            <remarks>\n            The <c>DateTimePickerMaskPlaceholder</c> class properties will work when enabling the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.EnableMask\" /> property. \n             <see cref=\"T:Syncfusion.Blazor.Calendars.MaskPlaceholder\" />\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDateTimePicker TValue=\"DateTime\" EnableMask=true >\n                <DateTimePickerMaskPlaceholder Day=\"day\" Month= \"month\" Year= \"year\" Hour= \"hour\" Minute= \"minute\" Second=\"second\" DayOfWeek=\"dayofweek\" ></DateTimePickerMaskPlaceholder>\n            </SfDateTimePicker>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.DateTimePickerMaskPlaceholder"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Day","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the day segment of the date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the day segment being the <c>dd</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Day\" /> property might be set to <c>dd</c> to indicate to the user the expected format of the day that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Day"}},{"Kind":"Components.Component","Name":"Month","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the month segment of date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the month segment being the <c>mm</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Month\" /> property might be set to <c>mm</c> to indicate to the user the expected format of the month that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Month"}},{"Kind":"Components.Component","Name":"Year","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the year segment of date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the year segment being the <c>yyyy</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Year\" /> property might be set to <c>yyyy</c> to indicate to the user the expected format of the year that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Year"}},{"Kind":"Components.Component","Name":"Hour","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the hour segment of datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm</c>, with the hour segment being the <c>hh</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Hour\" /> property might be set to <c>hh</c> to indicate to the user the expected format of the hour that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Hour"}},{"Kind":"Components.Component","Name":"Minute","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the minute segment of the datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm</c>, with the minute segment being the <c>mm</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Minute\" /> property might be set to <c>mm</c> to indicate to the user the expected format of the minute that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Minute"}},{"Kind":"Components.Component","Name":"Second","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the second segment of the datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm:ss</c>, with the second segment being the <c>ss</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Second\" /> property might be set to <c>ss</c> to indicate to the user the expected format of the second that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Second"}},{"Kind":"Components.Component","Name":"DayOfWeek","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the day of week segment of the datetime input .\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n             <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>dddd,dd/mm/yyyy</c>, with the day of week segment being the <c>dddd</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Second\" /> property might be set to <c>dddd</c> to indicate to the user the expected format of the day of week that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DayOfWeek"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DateTimePickerMaskPlaceholder","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":501034793,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The DateTimePicker is a graphical user interface component that allows the user to select or enter a date value.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of SfDateTimePicker.</typeparam>\n            <summary>\n            The DateTimePicker is a graphical user interface component that allows to select a date and time value.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDateTimePicker"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ScrollTo","TypeName":"System.DateTime?","Documentation":"\n            <summary>\n            Specifies the scroll bar position, if there is no value is selected in the DateTimePicker popup list or\n            the given value is not present in the DateTimePicker popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ScrollTo"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the maximum time value that can be allowed to select in DateTimePicker.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the minimum time value that can be allowed to select in DateTimePicker.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min"}},{"Kind":"Components.Component","Name":"Step","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time interval between the two adjacent time values in the time popup list .\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Step"}},{"Kind":"Components.Component","Name":"TimeFormat","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the format of the time value that to be displayed in time popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TimeFormat"}},{"Kind":"Components.Component","Name":"OnKeyDown","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets keydown.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnKeyDown","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowEdit","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.AllowEdit\" /> whether the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> allows user to change the value via typing. \n            </summary>\n            <value>\n            <c>true</c>, if the DatePicker allows user to change the value via typing; otherwise, <c>false</c>  user to change the value via picker only. The default value is <c>true</c>.        \n            </value>\n        ","Metadata":{"Common.PropertyName":"AllowEdit"}},{"Kind":"Components.Component","Name":"EnableMask","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets mask rendering in the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> component.\n            </summary>\n            <value>\n            <c>true</c>, if the component render with mask format; otherwise, <c>false</c>. The default value is <c>false</c>.        \n            </value>\n            <remarks>\n            The Enable mask property restricts the user to type the unwanted characters in the text area. It allows only eligible characters to type.        \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableMask"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.FloatLabelType\" /> behavior of the DatePicker that the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Placeholder\" /> text floats above the DatePicker based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the DatePicker when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the DatePicker.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the DatePicker after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> of the value that to be displayed in component.\n            <para>By default, the format is based on the culture.</para>\n            <para>You can set the format to \"format:'dd/MM/yyyy hh:mm'\".</para>\n            </summary>\n            <value>\n            Accepts format value in string type. The default culture format is <c>M/d/yyyy</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Format"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets the additional <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.HtmlAttributes\" /> such as styles, class, and more to the root element.\n            </summary>\n            <remarks>\n            Additional attributes can be added by specifying an inline attribute or by specifying @attributes directive.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets the additional <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.InputAttributes\" /> such as disabled, value, and more to the root element.\n            </summary>\n            <remarks>       \n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"InputAttributes"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Placeholder\" /> until the user focuses or enter a value in DatePicker.\n            </summary>\n            <value>\n             Accepts a string value. The default value is <c>string.Empty</c>\n            </value>\n            <remarks> \n             The property is depending on the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.FloatLabelType\" /> property.        \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Readonly\" /> whether the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> allows the user to change the text.\n            </summary>\n            <value>\n            <c>true</c>, if the DatePicker value cannot be edited; otherwise, <c>false</c>. The default value is <c>true</c>.  \n            </value>\n            <remark>\n            If the read-only is enabled, the popup cannot open.\n            </remark>\n        ","Metadata":{"Common.PropertyName":"Readonly"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.ShowClearButton\" /> this indicates whether the clear button is displayed in <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> component.\n            </summary>\n            <value>\n            <c>true</c>, if the clear icon was shown; otherwise, <c>false</c>. The default value is <c>false</c>.        \n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton"}},{"Kind":"Components.Component","Name":"StrictMode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the component to act as strict So that it allows to enter of only a valid date value within a specified range, or else it will reset to the previous value.\n            </summary>\n            <value>\n            <c>true</c>, if this property won't allow to enter an invalid date; otherwise, <c>false</c> It allows invalid or out-of-range date value with highlighted error class. The default value is <c>false</c>.        \n            </value>\n        ","Metadata":{"Common.PropertyName":"StrictMode"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Width\" /> of the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> component.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>null</c>\n            </value>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.ZIndex\" /> value of the DatePicker popup element.\n            </summary>\n            <value>\n            Accepts integer value. The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.TabIndex\" /> order of the DatePicker component.\n            </summary>\n            <value>\n            Accepts integer value. The default value is <c>0</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TabIndex"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue>","Components.GenericTyped":"True"}},{"HashCode":1885149917,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The DateTimePicker is a graphical user interface component that allows the user to select or enter a date value.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of SfDateTimePicker.</typeparam>\n            <summary>\n            The DateTimePicker is a graphical user interface component that allows to select a date and time value.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.SfDateTimePicker"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ScrollTo","TypeName":"System.DateTime?","Documentation":"\n            <summary>\n            Specifies the scroll bar position, if there is no value is selected in the DateTimePicker popup list or\n            the given value is not present in the DateTimePicker popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ScrollTo"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the maximum time value that can be allowed to select in DateTimePicker.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the minimum time value that can be allowed to select in DateTimePicker.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min"}},{"Kind":"Components.Component","Name":"Step","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time interval between the two adjacent time values in the time popup list .\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Step"}},{"Kind":"Components.Component","Name":"TimeFormat","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the format of the time value that to be displayed in time popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TimeFormat"}},{"Kind":"Components.Component","Name":"OnKeyDown","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets keydown.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnKeyDown","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowEdit","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.AllowEdit\" /> whether the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> allows user to change the value via typing. \n            </summary>\n            <value>\n            <c>true</c>, if the DatePicker allows user to change the value via typing; otherwise, <c>false</c>  user to change the value via picker only. The default value is <c>true</c>.        \n            </value>\n        ","Metadata":{"Common.PropertyName":"AllowEdit"}},{"Kind":"Components.Component","Name":"EnableMask","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets mask rendering in the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> component.\n            </summary>\n            <value>\n            <c>true</c>, if the component render with mask format; otherwise, <c>false</c>. The default value is <c>false</c>.        \n            </value>\n            <remarks>\n            The Enable mask property restricts the user to type the unwanted characters in the text area. It allows only eligible characters to type.        \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableMask"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.FloatLabelType\" /> behavior of the DatePicker that the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Placeholder\" /> text floats above the DatePicker based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the DatePicker when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the DatePicker.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the DatePicker after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> of the value that to be displayed in component.\n            <para>By default, the format is based on the culture.</para>\n            <para>You can set the format to \"format:'dd/MM/yyyy hh:mm'\".</para>\n            </summary>\n            <value>\n            Accepts format value in string type. The default culture format is <c>M/d/yyyy</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Format"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets the additional <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.HtmlAttributes\" /> such as styles, class, and more to the root element.\n            </summary>\n            <remarks>\n            Additional attributes can be added by specifying an inline attribute or by specifying @attributes directive.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets the additional <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.InputAttributes\" /> such as disabled, value, and more to the root element.\n            </summary>\n            <remarks>       \n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"InputAttributes"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Placeholder\" /> until the user focuses or enter a value in DatePicker.\n            </summary>\n            <value>\n             Accepts a string value. The default value is <c>string.Empty</c>\n            </value>\n            <remarks> \n             The property is depending on the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.FloatLabelType\" /> property.        \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Readonly\" /> whether the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> allows the user to change the text.\n            </summary>\n            <value>\n            <c>true</c>, if the DatePicker value cannot be edited; otherwise, <c>false</c>. The default value is <c>true</c>.  \n            </value>\n            <remark>\n            If the read-only is enabled, the popup cannot open.\n            </remark>\n        ","Metadata":{"Common.PropertyName":"Readonly"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.ShowClearButton\" /> this indicates whether the clear button is displayed in <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> component.\n            </summary>\n            <value>\n            <c>true</c>, if the clear icon was shown; otherwise, <c>false</c>. The default value is <c>false</c>.        \n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton"}},{"Kind":"Components.Component","Name":"StrictMode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the component to act as strict So that it allows to enter of only a valid date value within a specified range, or else it will reset to the previous value.\n            </summary>\n            <value>\n            <c>true</c>, if this property won't allow to enter an invalid date; otherwise, <c>false</c> It allows invalid or out-of-range date value with highlighted error class. The default value is <c>false</c>.        \n            </value>\n        ","Metadata":{"Common.PropertyName":"StrictMode"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Width\" /> of the <see cref=\"T:Syncfusion.Blazor.Calendars.SfDatePicker`1\" /> component.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>null</c>\n            </value>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.ZIndex\" /> value of the DatePicker popup element.\n            </summary>\n            <value>\n            Accepts integer value. The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.TabIndex\" /> order of the DatePicker component.\n            </summary>\n            <value>\n            Accepts integer value. The default value is <c>0</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TabIndex"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":964167859,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Gets or sets the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfDateTimePicker"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1265445486,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Gets or sets the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Calendars.SfDateTimePicker"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1106946538,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.SfTimePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            TimePicker is an intuitive component which provides an options to select a time value from popup list or to set a desired time value.\n            </summary>\n            <summary>\n            TimePicker is an intuitive component which provides an options to select a time value from popup list or to set a desired time value.\n            </summary>\n            <summary>\n            TimePicker is an intuitive component which provides an options to select a time value from popup list or to set a desired time value.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfTimePicker"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.SfTimePicker<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowEdit","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.AllowEdit\" /> whether the <see cref=\"T:Syncfusion.Blazor.Calendars.SfTimePicker`1\" /> allows user to change the value via typing. \n            </summary>\n            <value>\n            <c>true</c>, if the TimePicker allows user to change the value via typing; otherwise, <c>false</c> user to change the value via picker only. The default value is <c>true</c>.        \n            </value>\n        ","Metadata":{"Common.PropertyName":"AllowEdit"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.FloatLabelType\" /> behavior of the TextBox that the <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.Placeholder\" /> text floats above the TextBox based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the TextBox when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the TextBox.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the TextBox after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.Placeholder\" /> until the user focuses or enter a value in TimePicker.\n            </summary>\n            <value>\n             Accepts a string value. The default value is <c>string.Empty</c>\n            </value>\n            <remarks> \n             The property is depending on the <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.FloatLabelType\" /> property.        \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.Readonly\" /> whether the <see cref=\"T:Syncfusion.Blazor.Calendars.SfTimePicker`1\" /> allows the user to change the text.\n            </summary>\n            <value>\n            <c>true</c>, if the TimePicker value cannot be edited; otherwise, <c>false</c>. The default value is <c>true</c>.  \n            </value>\n            <remark>\n            If the read-only is enabled, the popup cannot open.\n            </remark>\n        ","Metadata":{"Common.PropertyName":"Readonly"}},{"Kind":"Components.Component","Name":"EnableMask","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets mask rendering in the <see cref=\"T:Syncfusion.Blazor.Calendars.SfTimePicker`1\" /> component.\n            </summary>\n            <value>\n            <c>true</c>, if the component render with mask format; otherwise, <c>false</c>. The default value is <c>false</c>.        \n            </value>\n            <remarks>\n            The Enable mask property restricts the user to type the unwanted characters in the text area. It allows only eligible characters to type.        \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableMask"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.ShowClearButton\" /> this indicates whether the clear button is displayed in <see cref=\"T:Syncfusion.Blazor.Calendars.SfTimePicker`1\" /> component.\n            </summary>\n            <value>\n            <c>true</c>, if the clear icon was shown; otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets the additional <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.HtmlAttributes\" /> such as styles, class, and more to the root element.\n            </summary>\n            <remarks>\n            Additional attributes can be added by specifying an inline attribute or by specifying @attributes directive.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets the additional <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.InputAttributes\" /> such as disabled, value, and more to the root element.\n            </summary>\n            <remarks>       \n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"InputAttributes"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.Width\" /> of the <see cref=\"T:Syncfusion.Blazor.Calendars.SfTimePicker`1\" /> component.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>null</c>\n            </value>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.TabIndex\" /> order of the TimePicker component.\n            </summary>\n            <value>\n            Accepts integer value. The default value is <c>0</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TabIndex"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the required time <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.Format\" /> of value that is to be displayed in component.\n            <para>By default, the format is based on the culture.</para>\n            </summary>\n            <value>\n            Accepts format value in string type. The default culture format is <c>h:mm tt</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Format"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.KeyConfigs\" /> in <see cref=\"T:Syncfusion.Blazor.Calendars.SfTimePicker`1\" /> component. \n            </summary>\n            <remarks>\n            When using German keyboard, the key actions can be customized using these shortcuts.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the maximum time value that can be allowed to select in TimePicker.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the minimum time value that can be allowed to select in TimePicker.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min"}},{"Kind":"Components.Component","Name":"ScrollTo","TypeName":"System.DateTime?","Documentation":"\n            <summary>\n            Gets or sets the scroll bar position.\n            </summary>\n            <value>\n            A Datetime value is set to <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.ScrollTo\" /> property. If there is no value is selected in the popup list or the given value is not present in the popup list.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ScrollTo"}},{"Kind":"Components.Component","Name":"Step","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the time interval. This time interval between the two adjacent time values in the popup list.\n            </summary>\n            <value>\n            Accepts a integer value. The default value is <c>30</c>.        \n            </value>\n        ","Metadata":{"Common.PropertyName":"Step"}},{"Kind":"Components.Component","Name":"StrictMode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the component to act as strict So that it allows to enter of only a valid date value within a specified range, or else it will reset to the previous value.\n            </summary>\n            <value>\n            <c>true</c>, if this property won't allow to enter an invalid date; otherwise, <c>false</c> It allows invalid or out-of-range date value with highlighted error class. The default value is <c>false</c>.        \n            </value>\n        ","Metadata":{"Common.PropertyName":"StrictMode"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.ZIndex\" /> value of the TimePicker popup element.\n            </summary>\n            <value>\n            Accepts integer value. The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.SfTimePicker<TValue>","Components.GenericTyped":"True"}},{"HashCode":1741989592,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.SfTimePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            TimePicker is an intuitive component which provides an options to select a time value from popup list or to set a desired time value.\n            </summary>\n            <summary>\n            TimePicker is an intuitive component which provides an options to select a time value from popup list or to set a desired time value.\n            </summary>\n            <summary>\n            TimePicker is an intuitive component which provides an options to select a time value from popup list or to set a desired time value.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.SfTimePicker"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.SfTimePicker<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowEdit","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.AllowEdit\" /> whether the <see cref=\"T:Syncfusion.Blazor.Calendars.SfTimePicker`1\" /> allows user to change the value via typing. \n            </summary>\n            <value>\n            <c>true</c>, if the TimePicker allows user to change the value via typing; otherwise, <c>false</c> user to change the value via picker only. The default value is <c>true</c>.        \n            </value>\n        ","Metadata":{"Common.PropertyName":"AllowEdit"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.FloatLabelType\" /> behavior of the TextBox that the <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.Placeholder\" /> text floats above the TextBox based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the TextBox when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the TextBox.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the TextBox after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.Placeholder\" /> until the user focuses or enter a value in TimePicker.\n            </summary>\n            <value>\n             Accepts a string value. The default value is <c>string.Empty</c>\n            </value>\n            <remarks> \n             The property is depending on the <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.FloatLabelType\" /> property.        \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.Readonly\" /> whether the <see cref=\"T:Syncfusion.Blazor.Calendars.SfTimePicker`1\" /> allows the user to change the text.\n            </summary>\n            <value>\n            <c>true</c>, if the TimePicker value cannot be edited; otherwise, <c>false</c>. The default value is <c>true</c>.  \n            </value>\n            <remark>\n            If the read-only is enabled, the popup cannot open.\n            </remark>\n        ","Metadata":{"Common.PropertyName":"Readonly"}},{"Kind":"Components.Component","Name":"EnableMask","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets mask rendering in the <see cref=\"T:Syncfusion.Blazor.Calendars.SfTimePicker`1\" /> component.\n            </summary>\n            <value>\n            <c>true</c>, if the component render with mask format; otherwise, <c>false</c>. The default value is <c>false</c>.        \n            </value>\n            <remarks>\n            The Enable mask property restricts the user to type the unwanted characters in the text area. It allows only eligible characters to type.        \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableMask"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a boolean value to <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.ShowClearButton\" /> this indicates whether the clear button is displayed in <see cref=\"T:Syncfusion.Blazor.Calendars.SfTimePicker`1\" /> component.\n            </summary>\n            <value>\n            <c>true</c>, if the clear icon was shown; otherwise, <c>false</c>. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets the additional <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.HtmlAttributes\" /> such as styles, class, and more to the root element.\n            </summary>\n            <remarks>\n            Additional attributes can be added by specifying an inline attribute or by specifying @attributes directive.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets the additional <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.InputAttributes\" /> such as disabled, value, and more to the root element.\n            </summary>\n            <remarks>       \n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"InputAttributes"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.Width\" /> of the <see cref=\"T:Syncfusion.Blazor.Calendars.SfTimePicker`1\" /> component.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>null</c>\n            </value>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.TabIndex\" /> order of the TimePicker component.\n            </summary>\n            <value>\n            Accepts integer value. The default value is <c>0</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TabIndex"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the required time <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.Format\" /> of value that is to be displayed in component.\n            <para>By default, the format is based on the culture.</para>\n            </summary>\n            <value>\n            Accepts format value in string type. The default culture format is <c>h:mm tt</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Format"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.KeyConfigs\" /> in <see cref=\"T:Syncfusion.Blazor.Calendars.SfTimePicker`1\" /> component. \n            </summary>\n            <remarks>\n            When using German keyboard, the key actions can be customized using these shortcuts.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the maximum time value that can be allowed to select in TimePicker.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Gets or sets the minimum time value that can be allowed to select in TimePicker.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min"}},{"Kind":"Components.Component","Name":"ScrollTo","TypeName":"System.DateTime?","Documentation":"\n            <summary>\n            Gets or sets the scroll bar position.\n            </summary>\n            <value>\n            A Datetime value is set to <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.ScrollTo\" /> property. If there is no value is selected in the popup list or the given value is not present in the popup list.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ScrollTo"}},{"Kind":"Components.Component","Name":"Step","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the time interval. This time interval between the two adjacent time values in the popup list.\n            </summary>\n            <value>\n            Accepts a integer value. The default value is <c>30</c>.        \n            </value>\n        ","Metadata":{"Common.PropertyName":"Step"}},{"Kind":"Components.Component","Name":"StrictMode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the component to act as strict So that it allows to enter of only a valid date value within a specified range, or else it will reset to the previous value.\n            </summary>\n            <value>\n            <c>true</c>, if this property won't allow to enter an invalid date; otherwise, <c>false</c> It allows invalid or out-of-range date value with highlighted error class. The default value is <c>false</c>.        \n            </value>\n        ","Metadata":{"Common.PropertyName":"StrictMode"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.ZIndex\" /> value of the TimePicker popup element.\n            </summary>\n            <value>\n            Accepts integer value. The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.SfTimePicker<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":767825677,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.SfTimePicker<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Gets or sets the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfTimePicker"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.SfTimePicker<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-508126345,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.SfTimePicker<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Gets or sets the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Calendars.SfTimePicker"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.SfTimePicker<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2078995015,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.TimePickerEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the TimePicker Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of TimePickerEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TimePickerEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.TimePickerEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.BlurEventArgs>","Documentation":"\n            <summary>\n            Triggers when the control loses the focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ChangeEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the value is changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers after selecting the value from TimePicker.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selected","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Cleared","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ClearedEventArgs>","Documentation":"\n            <summary>\n            Triggers when timepicker value is cleared using clear button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Cleared","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.PopupEventArgs>","Documentation":"\n            <summary>\n            Triggers when the popup is closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the control gets focused.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnItemRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ItemEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers while rendering the each popup list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnItemRender","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.PopupEventArgs>","Documentation":"\n            <summary>\n            Triggers when the popup is opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.TimePickerEvents<TValue>","Components.GenericTyped":"True"}},{"HashCode":893379295,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.TimePickerEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the TimePicker Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of TimePickerEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.TimePickerEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.TimePickerEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.BlurEventArgs>","Documentation":"\n            <summary>\n            Triggers when the control loses the focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ChangeEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the value is changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.SelectedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers after selecting the value from TimePicker.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selected","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Cleared","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ClearedEventArgs>","Documentation":"\n            <summary>\n            Triggers when timepicker value is cleared using clear button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Cleared","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.PopupEventArgs>","Documentation":"\n            <summary>\n            Triggers when the popup is closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the control gets focused.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnItemRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.ItemEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers while rendering the each popup list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnItemRender","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.PopupEventArgs>","Documentation":"\n            <summary>\n            Triggers when the popup is opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.TimePickerEvents<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":535137582,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.TimePickerMaskPlaceholder","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder based on the specified format until the user enters a value in the <see cref=\"T:Syncfusion.Blazor.Calendars.TimePickerMaskPlaceholder\" />\n            </summary>\n            <remarks>\n            The <c>TimePickerMaskPlaceholder</c> class properties will work when enabling the <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.EnableMask\" /> property. \n             <see cref=\"T:Syncfusion.Blazor.Calendars.MaskPlaceholder\" />\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfTimePicker TValue=\"DateTime\" EnableMask=true >\n                <TimePickerMaskPlaceholder Hour= \"hour\" Minute= \"minute\" Second=\"second\"></TimePickerMaskPlaceholder>\n            </SfTimePicker>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TimePickerMaskPlaceholder"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Day","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the day segment of the date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the day segment being the <c>dd</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Day\" /> property might be set to <c>dd</c> to indicate to the user the expected format of the day that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Day"}},{"Kind":"Components.Component","Name":"Month","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the month segment of date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the month segment being the <c>mm</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Month\" /> property might be set to <c>mm</c> to indicate to the user the expected format of the month that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Month"}},{"Kind":"Components.Component","Name":"Year","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the year segment of date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the year segment being the <c>yyyy</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Year\" /> property might be set to <c>yyyy</c> to indicate to the user the expected format of the year that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Year"}},{"Kind":"Components.Component","Name":"Hour","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the hour segment of datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm</c>, with the hour segment being the <c>hh</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Hour\" /> property might be set to <c>hh</c> to indicate to the user the expected format of the hour that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Hour"}},{"Kind":"Components.Component","Name":"Minute","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the minute segment of the datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm</c>, with the minute segment being the <c>mm</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Minute\" /> property might be set to <c>mm</c> to indicate to the user the expected format of the minute that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Minute"}},{"Kind":"Components.Component","Name":"Second","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the second segment of the datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm:ss</c>, with the second segment being the <c>ss</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Second\" /> property might be set to <c>ss</c> to indicate to the user the expected format of the second that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Second"}},{"Kind":"Components.Component","Name":"DayOfWeek","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the day of week segment of the datetime input .\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n             <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>dddd,dd/mm/yyyy</c>, with the day of week segment being the <c>dddd</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Second\" /> property might be set to <c>dddd</c> to indicate to the user the expected format of the day of week that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DayOfWeek"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.TimePickerMaskPlaceholder"}},{"HashCode":-1484521983,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.TimePickerMaskPlaceholder","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder based on the specified format until the user enters a value in the <see cref=\"T:Syncfusion.Blazor.Calendars.TimePickerMaskPlaceholder\" />\n            </summary>\n            <remarks>\n            The <c>TimePickerMaskPlaceholder</c> class properties will work when enabling the <see cref=\"P:Syncfusion.Blazor.Calendars.SfTimePicker`1.EnableMask\" /> property. \n             <see cref=\"T:Syncfusion.Blazor.Calendars.MaskPlaceholder\" />\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfTimePicker TValue=\"DateTime\" EnableMask=true >\n                <TimePickerMaskPlaceholder Hour= \"hour\" Minute= \"minute\" Second=\"second\"></TimePickerMaskPlaceholder>\n            </SfTimePicker>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.TimePickerMaskPlaceholder"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Day","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the day segment of the date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the day segment being the <c>dd</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Day\" /> property might be set to <c>dd</c> to indicate to the user the expected format of the day that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Day"}},{"Kind":"Components.Component","Name":"Month","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the month segment of date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the month segment being the <c>mm</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Month\" /> property might be set to <c>mm</c> to indicate to the user the expected format of the month that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Month"}},{"Kind":"Components.Component","Name":"Year","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the year segment of date input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy</c>, with the year segment being the <c>yyyy</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Year\" /> property might be set to <c>yyyy</c> to indicate to the user the expected format of the year that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Year"}},{"Kind":"Components.Component","Name":"Hour","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the hour segment of datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm</c>, with the hour segment being the <c>hh</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Hour\" /> property might be set to <c>hh</c> to indicate to the user the expected format of the hour that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Hour"}},{"Kind":"Components.Component","Name":"Minute","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the minute segment of the datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm</c>, with the minute segment being the <c>mm</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Minute\" /> property might be set to <c>mm</c> to indicate to the user the expected format of the minute that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Minute"}},{"Kind":"Components.Component","Name":"Second","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the second segment of the datetime input.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n            <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>mm/dd/yyyy hh:mm:ss</c>, with the second segment being the <c>ss</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Second\" /> property might be set to <c>ss</c> to indicate to the user the expected format of the second that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Second"}},{"Kind":"Components.Component","Name":"DayOfWeek","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is shown as a hint or placeholder until the user enters a value in the day of week segment of the datetime input .\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>Null</c>.\n            </value>\n             <remarks>\n            This property is typically used with input fields that have a date mask, which is a predefined <see cref=\"P:Syncfusion.Blazor.Calendars.SfDatePicker`1.Format\" /> that constrains the user's input. \n            For example, a date mask might require that the user enter a date in the format <c>dddd,dd/mm/yyyy</c>, with the day of week segment being the <c>dddd</c> part of the format. \n            In this case, the <see cref=\"P:Syncfusion.Blazor.Calendars.MaskPlaceholder.Second\" /> property might be set to <c>dddd</c> to indicate to the user the expected format of the day of week that they should enter.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DayOfWeek"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.TimePickerMaskPlaceholder","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1550875191,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DateRangePickerPreset","AssemblyName":"Syncfusion.Blazor.Calendars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DateRangePickerPreset"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"End","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Defines the end date of the preset range\n            </summary>\n        ","Metadata":{"Common.PropertyName":"End"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the label string of the preset range.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"Start","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Defines the start date of the preset range.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DateRangePickerPreset"}},{"HashCode":1320338464,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DateRangePickerPreset","AssemblyName":"Syncfusion.Blazor.Calendars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.DateRangePickerPreset"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"End","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Defines the end date of the preset range\n            </summary>\n        ","Metadata":{"Common.PropertyName":"End"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the label string of the preset range.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"Start","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Defines the start date of the preset range.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DateRangePickerPreset","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":43414143,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.DateRangePickerPreset.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"DateRangePickerPreset"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.DateRangePickerPreset.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-604947411,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.DateRangePickerPreset.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Calendars.DateRangePickerPreset"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.DateRangePickerPreset.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2041579974,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DateRangePickerPresets","AssemblyName":"Syncfusion.Blazor.Calendars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DateRangePickerPresets"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DateRangePickerPresets"}},{"HashCode":-173136159,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.DateRangePickerPresets","AssemblyName":"Syncfusion.Blazor.Calendars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.DateRangePickerPresets"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.DateRangePickerPresets","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1899727237,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.DateRangePickerPresets.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"DateRangePickerPresets"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.DateRangePickerPresets.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1477186264,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Calendars.DateRangePickerPresets.ChildContent","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Calendars.DateRangePickerPresets"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Calendars.DateRangePickerPresets.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1467113256,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars._Imports","AssemblyName":"Syncfusion.Blazor.Calendars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"_Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars._Imports"}},{"HashCode":2013432894,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars._Imports","AssemblyName":"Syncfusion.Blazor.Calendars","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars._Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars._Imports","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2075498911,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The Calendar base is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <summary>\n            The Calendar base is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <summary>\n            The Calendar base is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <typeparam name=\"TValue\">Soecifies the type of CalendarBaseRender.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CalendarBaseRender"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"MultiSelection","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the option to enable the multiple dates selection of the calendar.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MultiSelection"}},{"Kind":"Components.Component","Name":"CellClickHandler","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.CellDetails>","Documentation":"\n            <summary>\n            Specifies the cell click event.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CellClickHandler","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"IsFocusTodayCell","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the current day is focused or not.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsFocusTodayCell"}},{"Kind":"Components.Component","Name":"CurrentDateValue","TypeName":"TValue","Documentation":"\n            <summary>\n            Specifies current date value.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CurrentDateValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"MultiValues","TypeName":"System.DateTime[]","Documentation":"\n            <summary>\n            Gets or sets multiple selected dates of the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MultiValues"}},{"Kind":"Components.Component","Name":"MultiValuesChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.DateTime[]>","Documentation":"\n            <summary>\n            Gets or sets a callback of value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MultiValuesChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"PrevIconClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a previous icon state.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PrevIconClass"}},{"Kind":"Components.Component","Name":"NextIconClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a next icon state.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NextIconClass"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a maximum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue>","Components.GenericTyped":"True"}},{"HashCode":582880510,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The Calendar base is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <summary>\n            The Calendar base is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <summary>\n            The Calendar base is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <typeparam name=\"TValue\">Soecifies the type of CalendarBaseRender.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"MultiSelection","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the option to enable the multiple dates selection of the calendar.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MultiSelection"}},{"Kind":"Components.Component","Name":"CellClickHandler","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.CellDetails>","Documentation":"\n            <summary>\n            Specifies the cell click event.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CellClickHandler","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"IsFocusTodayCell","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the current day is focused or not.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsFocusTodayCell"}},{"Kind":"Components.Component","Name":"CurrentDateValue","TypeName":"TValue","Documentation":"\n            <summary>\n            Specifies current date value.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CurrentDateValue","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"MultiValues","TypeName":"System.DateTime[]","Documentation":"\n            <summary>\n            Gets or sets multiple selected dates of the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MultiValues"}},{"Kind":"Components.Component","Name":"MultiValuesChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.DateTime[]>","Documentation":"\n            <summary>\n            Gets or sets a callback of value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MultiValuesChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"PrevIconClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a previous icon state.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PrevIconClass"}},{"Kind":"Components.Component","Name":"NextIconClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a next icon state.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NextIconClass"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a maximum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":656964569,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarDayCell<TCalendarCell>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The Calendar base is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <typeparam name=\"TCalendarCell\">Specifies the type of CalendarDayCell.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CalendarDayCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCalendarCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCalendarCell for the Syncfusion.Blazor.Calendars.Internal.CalendarDayCell<TCalendarCell> component.","Metadata":{"Common.PropertyName":"TCalendarCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnCellClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.CellDetails>","Documentation":"\n            <summary>\n            Bind the cell click for calendar.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnCellClick","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"CurrentCellDate","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Get or Set the current date.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CurrentCellDate"}},{"Kind":"Components.Component","Name":"LocalDates","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Get or Set the local date.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"LocalDates"}},{"Kind":"Components.Component","Name":"CellClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the class of cell.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CellClass"}},{"Kind":"Components.Component","Name":"IsFocusTodayDate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the current date is focused or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsFocusTodayDate"}},{"Kind":"Components.Component","Name":"Cells","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Get or Set Cell value.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Cells"}},{"Kind":"Components.Component","Name":"TodayCellDate","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Get or Set the today date value.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"TodayCellDate"}},{"Kind":"Components.Component","Name":"IsNavigation","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Get or Set calendar navigation.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsNavigation"}},{"Kind":"Components.Component","Name":"CalendarRenderView","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Get or Set current calendar view.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CalendarRenderView"}},{"Kind":"Components.Component","Name":"IsSelect","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Get or Set the calendar cell selection.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsSelect"}},{"Kind":"Components.Component","Name":"IsMultiSelect","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the option to enable the multiple dates selection of the calendar.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsMultiSelect"}},{"Kind":"Components.Component","Name":"MultiselectValues","TypeName":"System.DateTime[]","Documentation":"\n            <summary>\n            Get or Set calendar values.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MultiselectValues"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a maximum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TCalendarCell","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TCalendarCell>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TCalendarCell>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarDayCell<TCalendarCell>","Components.GenericTyped":"True"}},{"HashCode":782455240,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarDayCell<TCalendarCell>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The Calendar base is a graphical user interface component that displays a Gregorian Calendar, and allows a user to select a date.\n            </summary>\n            <typeparam name=\"TCalendarCell\">Specifies the type of CalendarDayCell.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.Internal.CalendarDayCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCalendarCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCalendarCell for the Syncfusion.Blazor.Calendars.Internal.CalendarDayCell<TCalendarCell> component.","Metadata":{"Common.PropertyName":"TCalendarCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnCellClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Calendars.CellDetails>","Documentation":"\n            <summary>\n            Bind the cell click for calendar.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnCellClick","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"CurrentCellDate","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Get or Set the current date.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CurrentCellDate"}},{"Kind":"Components.Component","Name":"LocalDates","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Get or Set the local date.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"LocalDates"}},{"Kind":"Components.Component","Name":"CellClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the class of cell.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CellClass"}},{"Kind":"Components.Component","Name":"IsFocusTodayDate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the current date is focused or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsFocusTodayDate"}},{"Kind":"Components.Component","Name":"Cells","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Get or Set Cell value.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Cells"}},{"Kind":"Components.Component","Name":"TodayCellDate","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Get or Set the today date value.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"TodayCellDate"}},{"Kind":"Components.Component","Name":"IsNavigation","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Get or Set calendar navigation.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsNavigation"}},{"Kind":"Components.Component","Name":"CalendarRenderView","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Get or Set current calendar view.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CalendarRenderView"}},{"Kind":"Components.Component","Name":"IsSelect","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Get or Set the calendar cell selection.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsSelect"}},{"Kind":"Components.Component","Name":"IsMultiSelect","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the option to enable the multiple dates selection of the calendar.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsMultiSelect"}},{"Kind":"Components.Component","Name":"MultiselectValues","TypeName":"System.DateTime[]","Documentation":"\n            <summary>\n            Get or Set calendar values.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MultiselectValues"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a maximum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TCalendarCell","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TCalendarCell>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TCalendarCell>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarDayCell<TCalendarCell>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1538259808,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarTableHeader<TCalendarHeader>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The Calendar day is show in header.\n            </summary>\n            <typeparam name=\"TCalendarHeader\">Specifies the type of CalendarTableHeader.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CalendarTableHeader"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCalendarHeader","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCalendarHeader for the Syncfusion.Blazor.Calendars.Internal.CalendarTableHeader<TCalendarHeader> component.","Metadata":{"Common.PropertyName":"TCalendarHeader","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"CalendarRenderView","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the calendar view .\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CalendarRenderView"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a maximum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TCalendarHeader","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TCalendarHeader>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TCalendarHeader>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarTableHeader<TCalendarHeader>","Components.GenericTyped":"True"}},{"HashCode":-1297516299,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarTableHeader<TCalendarHeader>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"\n            <summary>\n            The Calendar day is show in header.\n            </summary>\n            <typeparam name=\"TCalendarHeader\">Specifies the type of CalendarTableHeader.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.Internal.CalendarTableHeader"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCalendarHeader","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCalendarHeader for the Syncfusion.Blazor.Calendars.Internal.CalendarTableHeader<TCalendarHeader> component.","Metadata":{"Common.PropertyName":"TCalendarHeader","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"CalendarRenderView","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the calendar view .\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CalendarRenderView"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a maximum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.DateTime","Documentation":"\n            <summary>\n            Specifies a minimum date that is allowed a user can select in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min"}},{"Kind":"Components.Component","Name":"FirstDayOfWeek","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Sets the calendar's first day of the week. By default, the first day of the week will be based on the current culture.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FirstDayOfWeek"}},{"Kind":"Components.Component","Name":"CalendarMode","TypeName":"Syncfusion.Blazor.Calendars.CalendarType","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the calendar's type like Gregorian.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CalendarMode"}},{"Kind":"Components.Component","Name":"DayHeaderFormat","TypeName":"Syncfusion.Blazor.Calendars.DayHeaderFormats","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the format of the day that to be displayed in the header. By default, the format is short.\n            <para>Possible formats are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Short</term>\n            <description>Sets the short format of day name (like Su ) in day header.</description>\n            </item>\n            <item>\n            <term>Narrow</term>\n            <description>Sets the single character of day name (like S ) in day header.</description>\n            </item>\n            <item>\n            <term>Abbreviated</term>\n            <description>Sets the min format of day name (like Sun ) in day header.</description>\n            </item>\n            <item>\n            <term>Wide</term>\n            <description>Sets the long format of day name (like Sunday ) in day header.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DayHeaderFormat"}},{"Kind":"Components.Component","Name":"Depth","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Sets the maximum level of views such as a month, year, and decade in the calendar.\n            <para>The depth view should be smaller than the start view to restrict its view navigation.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Depth"}},{"Kind":"Components.Component","Name":"KeyConfigs","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Customizes the key actions in the calendar.\n            <para>For example, when using a German keyboard, the key actions can be customized using these shortcuts.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeyConfigs"}},{"Kind":"Components.Component","Name":"Start","TypeName":"Syncfusion.Blazor.Calendars.CalendarView","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the initial view of the calendar when it is opened. With the help of this property, the initial view can be changed to the year or decade view.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start"}},{"Kind":"Components.Component","Name":"ServerTimezoneOffset","TypeName":"System.Double","Documentation":"\n            <summary>\n            By default, the date value will be processed based on the system time zone.\n            <para>If you want to process the initial date value using the server time zone then specify the time zone value to the ServerTimezoneOffset property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ServerTimezoneOffset"}},{"Kind":"Components.Component","Name":"ShowTodayButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the today button will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowTodayButton"}},{"Kind":"Components.Component","Name":"WeekNumber","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the week number of the year will be displayed in the calendar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekNumber"}},{"Kind":"Components.Component","Name":"WeekRule","TypeName":"System.Globalization.CalendarWeekRule","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the rule for defining the first week of the year.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WeekRule"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TCalendarHeader","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TCalendarHeader>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TCalendarHeader>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarTableHeader<TCalendarHeader>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2083550177,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfColorPicker","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            ColorPicker component is a user interface to select and adjust color values.\n            It provides supports for various color specification like Red Green Blue, Hue Saturation Value and Hex codes.\n            </summary>\n            <summary>\n            ColorPicker is a user interface to select and adjust color values.\n            It provides supports for various color specification like Red Green Blue, Hue Saturation Value and Hex codes.\n            </summary>\n            <summary>\n            ColorPicker is a user interface to select and adjust color values.\n            It provides supports for various color specification like Red Green Blue, Hue Saturation Value and Hex codes.\n            </summary>\n            <summary> \n            ColorPicker component is a user interface to select and adjust color values. \n            It provides supports for various color specification like Red Green Blue, Hue Saturation Value and Hex codes. \n            </summary> \n            <example> \n            In the below code example, showcases a basic ColorPicker component. \n            <code><![CDATA[ \n            <SfColorPicker> \n            </SfColorPicker> \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfColorPicker"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the color picker container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Double","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the columns to be rendered in palette mode. \n            </summary> \n            <value> \n            Accepts a double value. The default value is <c>10</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Columns"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates CSS class string to customize the appearance of color picker. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of color picker. The default value is <c>String.Empty</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the color picker. \n            </summary> \n            <value> \n            <c>true</c>, if the button component is disabled. The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"EnableOpacity","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the opacity slider. \n            </summary> \n            <value> \n            <c>true</c>, if the opacity slider is enabled. The default value is <c>true</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableOpacity"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Inputs.SfColorPicker.Value\" /> property is persisted. \n            </summary> \n            <value> \n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            Component's <see cref=\"P:Syncfusion.Blazor.Inputs.SfColorPicker.Value\" /> property will be stored in browser local storage to persist component's state when page reloads. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for the component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Inline","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable to disable the inlide mode color picker. \n            </summary> \n            <value> \n            <c>true</c>, if the color picker component is rendered as inline. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Inline"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.Inputs.ColorPickerMode","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates the mode of color picker to be rendered. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.ColorPickerMode\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.ColorPickerMode.Picker\" /> \n            </value> \n            <remarks> \n            If the <c>ColorPickerMode</c> is <c>Picker</c>, the color picker is rendered as a picker. \n            If the <c>ColorPickerMode</c> is <c>Palette</c>, the color picker is rendered as a palette. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Mode"}},{"Kind":"Components.Component","Name":"ModeSwitcher","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the mode switcher option. \n            </summary> \n            <value> \n            <c>true</c>, if the mode switcher option is enabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ModeSwitcher"}},{"Kind":"Components.Component","Name":"NoColor","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the no color option. \n            </summary> \n            <value> \n            <c>true</c>, if the no color option is enabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            No color option is only available in palette mode. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"NoColor"}},{"Kind":"Components.Component","Name":"PresetColors","TypeName":"System.Collections.Generic.Dictionary<System.String, System.String[]>","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the collection of custom color values that will be rendered as color picker element. \n            </summary> \n            <remarks> \n            Preset colors option is only available in palette mode. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"PresetColors"}},{"Kind":"Components.Component","Name":"ShowButtons","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the apply/cancel buttons. \n            </summary> \n            <value> \n            <c>true</c>, if the apply/cancel buttons were enabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowButtons"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the color value for color picker. It should be specified as Hex code. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>#008000ff</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> color value changed.  \n            </summary> \n            <remarks> \n            You can access the Color Picker item related values using <see cref=\"T:Syncfusion.Blazor.Inputs.ColorPickerEventArgs\" />. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> popup is opening.  \n            </summary> \n            <remarks> \n            you can access the ColorPicker popup related values using <see cref=\"T:Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfColorPicker OnOpen=\"@OnOpen\"> \n            </SfColorPicker> \n            @code { \n                private void OnOpen(BeforeOpenCloseEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.OpenEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> popup is opened.  \n            </summary> \n            <remarks> \n            You can access the SplitButton popup related values using <see cref=\"T:Syncfusion.Blazor.Inputs.OpenEventArgs\" />. \n            </remarks>\n            <example> \n            <code><![CDATA[ \n            <SfColorPicker Opened=\"@Opened\"> \n            </SfColorPicker> \n            @code { \n                private void Opened(OpenEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"Opened","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> popup is closing.  \n            </summary> \n            <remarks> \n            You can access the color picker popup related values using <see cref=\"T:Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs\" />. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"OnClose","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnModeSwitch","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ModeSwitchEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised before the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> mode switching is performed.  \n            </summary> \n            <remarks> \n            You can access the Color Picker item related values using <see cref=\"T:Syncfusion.Blazor.Inputs.ModeSwitchEventArgs\" />. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"OnModeSwitch","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ModeSwitched","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ModeSwitchEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> mode switch performed.  \n            </summary> \n            <remarks> \n            You can access the Color Picker item related values using <see cref=\"T:Syncfusion.Blazor.Inputs.ModeSwitchEventArgs\" />. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ModeSwitched","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnTileRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.PaletteTileEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> tile rendering is completed.  \n            </summary> \n            <remarks> \n            You can customize the color picker tile rendering using <see cref=\"T:Syncfusion.Blazor.Inputs.PaletteTileEventArgs\" />. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OnTileRender","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ColorPickerEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised  while changing the colors.\n            </summary>\n            <remarks>\n            It will be triggered based on the <see cref=\"P:Syncfusion.Blazor.Inputs.SfColorPicker.ShowButtons\" /> property.\n            If the property is false, this event will be triggered while selecting the colors.\n            If the property is true, this event will be triggered while apply the selected color.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ColorPickerEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> palette or picker element is clicked.  \n            </summary> \n            <remarks> \n            You can access the Color Picker item related values using <see cref=\"T:Syncfusion.Blazor.Inputs.ColorPickerEventArgs\" />. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Selected","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> rendering is completed.  \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfColorPicker"}},{"HashCode":-355441417,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfColorPicker","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            ColorPicker component is a user interface to select and adjust color values.\n            It provides supports for various color specification like Red Green Blue, Hue Saturation Value and Hex codes.\n            </summary>\n            <summary>\n            ColorPicker is a user interface to select and adjust color values.\n            It provides supports for various color specification like Red Green Blue, Hue Saturation Value and Hex codes.\n            </summary>\n            <summary>\n            ColorPicker is a user interface to select and adjust color values.\n            It provides supports for various color specification like Red Green Blue, Hue Saturation Value and Hex codes.\n            </summary>\n            <summary> \n            ColorPicker component is a user interface to select and adjust color values. \n            It provides supports for various color specification like Red Green Blue, Hue Saturation Value and Hex codes. \n            </summary> \n            <example> \n            In the below code example, showcases a basic ColorPicker component. \n            <code><![CDATA[ \n            <SfColorPicker> \n            </SfColorPicker> \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfColorPicker"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the color picker container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Double","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the columns to be rendered in palette mode. \n            </summary> \n            <value> \n            Accepts a double value. The default value is <c>10</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Columns"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates CSS class string to customize the appearance of color picker. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of color picker. The default value is <c>String.Empty</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the color picker. \n            </summary> \n            <value> \n            <c>true</c>, if the button component is disabled. The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"EnableOpacity","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the opacity slider. \n            </summary> \n            <value> \n            <c>true</c>, if the opacity slider is enabled. The default value is <c>true</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableOpacity"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Inputs.SfColorPicker.Value\" /> property is persisted. \n            </summary> \n            <value> \n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            Component's <see cref=\"P:Syncfusion.Blazor.Inputs.SfColorPicker.Value\" /> property will be stored in browser local storage to persist component's state when page reloads. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for the component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Inline","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable to disable the inlide mode color picker. \n            </summary> \n            <value> \n            <c>true</c>, if the color picker component is rendered as inline. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Inline"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.Inputs.ColorPickerMode","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates the mode of color picker to be rendered. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.ColorPickerMode\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.ColorPickerMode.Picker\" /> \n            </value> \n            <remarks> \n            If the <c>ColorPickerMode</c> is <c>Picker</c>, the color picker is rendered as a picker. \n            If the <c>ColorPickerMode</c> is <c>Palette</c>, the color picker is rendered as a palette. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Mode"}},{"Kind":"Components.Component","Name":"ModeSwitcher","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the mode switcher option. \n            </summary> \n            <value> \n            <c>true</c>, if the mode switcher option is enabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ModeSwitcher"}},{"Kind":"Components.Component","Name":"NoColor","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the no color option. \n            </summary> \n            <value> \n            <c>true</c>, if the no color option is enabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            No color option is only available in palette mode. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"NoColor"}},{"Kind":"Components.Component","Name":"PresetColors","TypeName":"System.Collections.Generic.Dictionary<System.String, System.String[]>","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the collection of custom color values that will be rendered as color picker element. \n            </summary> \n            <remarks> \n            Preset colors option is only available in palette mode. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"PresetColors"}},{"Kind":"Components.Component","Name":"ShowButtons","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the apply/cancel buttons. \n            </summary> \n            <value> \n            <c>true</c>, if the apply/cancel buttons were enabled. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowButtons"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the color value for color picker. It should be specified as Hex code. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>#008000ff</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> color value changed.  \n            </summary> \n            <remarks> \n            You can access the Color Picker item related values using <see cref=\"T:Syncfusion.Blazor.Inputs.ColorPickerEventArgs\" />. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> popup is opening.  \n            </summary> \n            <remarks> \n            you can access the ColorPicker popup related values using <see cref=\"T:Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs\" />. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfColorPicker OnOpen=\"@OnOpen\"> \n            </SfColorPicker> \n            @code { \n                private void OnOpen(BeforeOpenCloseEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.OpenEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> popup is opened.  \n            </summary> \n            <remarks> \n            You can access the SplitButton popup related values using <see cref=\"T:Syncfusion.Blazor.Inputs.OpenEventArgs\" />. \n            </remarks>\n            <example> \n            <code><![CDATA[ \n            <SfColorPicker Opened=\"@Opened\"> \n            </SfColorPicker> \n            @code { \n                private void Opened(OpenEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"Opened","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> popup is closing.  \n            </summary> \n            <remarks> \n            You can access the color picker popup related values using <see cref=\"T:Syncfusion.Blazor.Inputs.BeforeOpenCloseEventArgs\" />. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"OnClose","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnModeSwitch","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ModeSwitchEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised before the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> mode switching is performed.  \n            </summary> \n            <remarks> \n            You can access the Color Picker item related values using <see cref=\"T:Syncfusion.Blazor.Inputs.ModeSwitchEventArgs\" />. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"OnModeSwitch","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ModeSwitched","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ModeSwitchEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> mode switch performed.  \n            </summary> \n            <remarks> \n            You can access the Color Picker item related values using <see cref=\"T:Syncfusion.Blazor.Inputs.ModeSwitchEventArgs\" />. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ModeSwitched","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnTileRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.PaletteTileEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> tile rendering is completed.  \n            </summary> \n            <remarks> \n            You can customize the color picker tile rendering using <see cref=\"T:Syncfusion.Blazor.Inputs.PaletteTileEventArgs\" />. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OnTileRender","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ColorPickerEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised  while changing the colors.\n            </summary>\n            <remarks>\n            It will be triggered based on the <see cref=\"P:Syncfusion.Blazor.Inputs.SfColorPicker.ShowButtons\" /> property.\n            If the property is false, this event will be triggered while selecting the colors.\n            If the property is true, this event will be triggered while apply the selected color.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ColorPickerEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> palette or picker element is clicked.  \n            </summary> \n            <remarks> \n            You can access the Color Picker item related values using <see cref=\"T:Syncfusion.Blazor.Inputs.ColorPickerEventArgs\" />. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Selected","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfColorPicker\" /> rendering is completed.  \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfColorPicker","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":276946958,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfColorPicker.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfColorPicker"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfColorPicker.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1993592317,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfColorPicker.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.SfColorPicker"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfColorPicker.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1627979200,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfMaskedTextBox","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            The MaskedTextBox is an input element that allows to get input from the user.\n            </summary>\n            <summary>\n            The MaskedTextBox is an input element that allows to get input from the user.\n            </summary>\n            <summary>\n            The MaskedTextBox is an input element that allows to get input from the user.\n            </summary>\n            <summary>\n            The MaskedTextBox is an input element that allows to get input from the user.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfMaskedTextBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.MaskBlurEventArgs>","Documentation":"\n            <summary>\n            Triggers when the SfMaskedTextBox has focus-out.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.MaskChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of SfMaskedTextBox has changed and gets focus-out.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the SfMaskedTextBox component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the SfMaskedTextBox component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.MaskFocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the SfMaskedTextBox gets focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the SfMaskedTextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the SfMaskedTextBox. One or more custom CSS classes can be added to a SfMaskedTextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting SfMaskedTextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the SfMaskedTextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the floating label behavior of the SfMaskedTextBox that the placeholder text floats above the SfMaskedTextBox based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the SfMaskedTextBox when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the SfMaskedTextBox.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the SfMaskedTextBox after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the root element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text that is shown as a hint or placeholder until the user focuses or enter a value in SfMaskedTextBox. The property is depending on the FloatLabelType property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the SfMaskedTextBox allows user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly"}},{"Kind":"Components.Component","Name":"EnableLiterals","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to include the literals or not in the value.\n            </summary>\n             <c>true</c>\n             To include the literals in the value; otherwise,\n             <b>false</b>\n             The default value is\n             <c>false</c>\n             <value>\n            <remarks>\n            You can get the masked value using GetMaksedValue method also. \n            </remarks>\n            <seealso cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Value\" />\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableLiterals"}},{"Kind":"Components.Component","Name":"PromptPlaceholder","TypeName":"System.Char?","Documentation":"\n             <summary>\n             Gets or set character that is replace the blank spaces in the Value property.The default value is a space.\n             </summary>\n            <remarks>\n            You can use this option when you enable the EnableLiterals property: Otherwise, this option will not work\n            </remarks>\n             <seealso cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.EnableLiterals\" />\n        ","Metadata":{"Common.PropertyName":"PromptPlaceholder"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the clear button is displayed in SfMaskedTextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets the content of the SfMaskedTextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the SfMaskedTextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the SfMaskedTextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex"}},{"Kind":"Components.Component","Name":"Mask","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets a value that masks the MaskedTextBox to allow/validate the user input.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Mask"}},{"Kind":"Components.Component","Name":"PromptChar","TypeName":"System.Char","Documentation":"\n            <summary>\n            Gets or sets a value that will be shown as a prompting symbol for the masked value.\n            The symbol used to show input positions in the MaskedTextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PromptChar"}},{"Kind":"Components.Component","Name":"CustomCharacters","TypeName":"System.Collections.Generic.Dictionary<System.String, System.String>","Documentation":"\n            <summary>\n            Sets the collection of values to be mapped for non-mask elements(literals)\n            which have been set in the mask of MaskedTextBox.\n             <para>In the below example, non-mask elements \"P\" accepts values\n            \"P\" , \"A\" , \"p\" , \"a\" and \"M\" accepts values \"M\", \"m\" mentioned in the custom characters collection.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CustomCharacters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfMaskedTextBox"}},{"HashCode":-1483807800,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfMaskedTextBox","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            The MaskedTextBox is an input element that allows to get input from the user.\n            </summary>\n            <summary>\n            The MaskedTextBox is an input element that allows to get input from the user.\n            </summary>\n            <summary>\n            The MaskedTextBox is an input element that allows to get input from the user.\n            </summary>\n            <summary>\n            The MaskedTextBox is an input element that allows to get input from the user.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfMaskedTextBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.MaskBlurEventArgs>","Documentation":"\n            <summary>\n            Triggers when the SfMaskedTextBox has focus-out.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.MaskChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of SfMaskedTextBox has changed and gets focus-out.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the SfMaskedTextBox component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the SfMaskedTextBox component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.MaskFocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the SfMaskedTextBox gets focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the SfMaskedTextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the SfMaskedTextBox. One or more custom CSS classes can be added to a SfMaskedTextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting SfMaskedTextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the SfMaskedTextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the floating label behavior of the SfMaskedTextBox that the placeholder text floats above the SfMaskedTextBox based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the SfMaskedTextBox when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the SfMaskedTextBox.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the SfMaskedTextBox after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the root element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text that is shown as a hint or placeholder until the user focuses or enter a value in SfMaskedTextBox. The property is depending on the FloatLabelType property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the SfMaskedTextBox allows user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly"}},{"Kind":"Components.Component","Name":"EnableLiterals","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to include the literals or not in the value.\n            </summary>\n             <c>true</c>\n             To include the literals in the value; otherwise,\n             <b>false</b>\n             The default value is\n             <c>false</c>\n             <value>\n            <remarks>\n            You can get the masked value using GetMaksedValue method also. \n            </remarks>\n            <seealso cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.Value\" />\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableLiterals"}},{"Kind":"Components.Component","Name":"PromptPlaceholder","TypeName":"System.Char?","Documentation":"\n             <summary>\n             Gets or set character that is replace the blank spaces in the Value property.The default value is a space.\n             </summary>\n            <remarks>\n            You can use this option when you enable the EnableLiterals property: Otherwise, this option will not work\n            </remarks>\n             <seealso cref=\"P:Syncfusion.Blazor.Inputs.SfMaskedTextBox.EnableLiterals\" />\n        ","Metadata":{"Common.PropertyName":"PromptPlaceholder"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the clear button is displayed in SfMaskedTextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets the content of the SfMaskedTextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the SfMaskedTextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the SfMaskedTextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex"}},{"Kind":"Components.Component","Name":"Mask","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets a value that masks the MaskedTextBox to allow/validate the user input.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Mask"}},{"Kind":"Components.Component","Name":"PromptChar","TypeName":"System.Char","Documentation":"\n            <summary>\n            Gets or sets a value that will be shown as a prompting symbol for the masked value.\n            The symbol used to show input positions in the MaskedTextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PromptChar"}},{"Kind":"Components.Component","Name":"CustomCharacters","TypeName":"System.Collections.Generic.Dictionary<System.String, System.String>","Documentation":"\n            <summary>\n            Sets the collection of values to be mapped for non-mask elements(literals)\n            which have been set in the mask of MaskedTextBox.\n             <para>In the below example, non-mask elements \"P\" accepts values\n            \"P\" , \"A\" , \"p\" , \"a\" and \"M\" accepts values \"M\", \"m\" mentioned in the custom characters collection.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CustomCharacters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfMaskedTextBox","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":86159503,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfMaskedTextBox.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfMaskedTextBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfMaskedTextBox.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-2053684922,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfMaskedTextBox.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.SfMaskedTextBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfMaskedTextBox.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1481708291,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            The NumericTextBox is used to get the number inputs from the user. The input values can be incremented or decremented by a predefined step value.\n            </summary>\n            <summary>\n            The NumericTextBox is used to get the number inputs from the user. The input values can be incremented or decremented by a predefined step value.\n            </summary>\n            <summary>\n            The NumericTextBox is used to get the number inputs from the user. The input values can be incremented or decremented by a predefined step value.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of SfNumericTextBox.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfNumericTextBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Currency","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the currency code to use in currency formatting. Possible values are the ISO 4217 currency codes, such as 'USD' for the US dollar and 'EUR' for the euro.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Currency"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the floating label behavior of the TextBox that the placeholder text floats above the TextBox based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the TextBox when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the TextBox.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the TextBox after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the boolean value whether the TextBox allows user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the TextBox allows user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the clear button is displayed in TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the root element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes"}},{"Kind":"Components.Component","Name":"Decimals","TypeName":"System.Int32?","Documentation":"\n            <summary>\n            Specifies the number precision applied to the textbox value when the NumericTextBox is focused.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Decimals"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the number format that indicates the display format for the value of the NumericTextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format"}},{"Kind":"Components.Component","Name":"ShowSpinButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the up and down spin buttons will be displayed in NumericTextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowSpinButton"}},{"Kind":"Components.Component","Name":"Step","TypeName":"TValue","Documentation":"\n            <summary>\n            Specifies the incremental or decremental step size for the NumericTextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Step","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"StrictMode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a value that indicates whether the NumericTextBox component allows the value for the specified range.\n            <para>True - the input value will be restricted between the min and max range. The typed value gets modified to fit the range on a focused out state.</para>\n            <para>Else, it allows any value even out of range value, at that time of wrong value entered, the error class will be added to the component to highlight the error.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StrictMode"}},{"Kind":"Components.Component","Name":"ValidateDecimalOnType","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the length of the decimal should be restricted during typing.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValidateDecimalOnType"}},{"Kind":"Components.Component","Name":"Max","TypeName":"TValue","Documentation":"\n            <summary>\n            Specifies a maximum value that is allowed a user can enter.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Min","TypeName":"TValue","Documentation":"\n            <summary>\n            Specifies a minimum value that is allowed a user can enter.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue>","Components.GenericTyped":"True"}},{"HashCode":-1999741756,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            The NumericTextBox is used to get the number inputs from the user. The input values can be incremented or decremented by a predefined step value.\n            </summary>\n            <summary>\n            The NumericTextBox is used to get the number inputs from the user. The input values can be incremented or decremented by a predefined step value.\n            </summary>\n            <summary>\n            The NumericTextBox is used to get the number inputs from the user. The input values can be incremented or decremented by a predefined step value.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of SfNumericTextBox.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfNumericTextBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Currency","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the currency code to use in currency formatting. Possible values are the ISO 4217 currency codes, such as 'USD' for the US dollar and 'EUR' for the euro.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Currency"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the floating label behavior of the TextBox that the placeholder text floats above the TextBox based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the TextBox when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the TextBox.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the TextBox after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the boolean value whether the TextBox allows user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the TextBox allows user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the clear button is displayed in TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the root element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes"}},{"Kind":"Components.Component","Name":"Decimals","TypeName":"System.Int32?","Documentation":"\n            <summary>\n            Specifies the number precision applied to the textbox value when the NumericTextBox is focused.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Decimals"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the number format that indicates the display format for the value of the NumericTextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format"}},{"Kind":"Components.Component","Name":"ShowSpinButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the up and down spin buttons will be displayed in NumericTextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowSpinButton"}},{"Kind":"Components.Component","Name":"Step","TypeName":"TValue","Documentation":"\n            <summary>\n            Specifies the incremental or decremental step size for the NumericTextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Step","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"StrictMode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a value that indicates whether the NumericTextBox component allows the value for the specified range.\n            <para>True - the input value will be restricted between the min and max range. The typed value gets modified to fit the range on a focused out state.</para>\n            <para>Else, it allows any value even out of range value, at that time of wrong value entered, the error class will be added to the component to highlight the error.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StrictMode"}},{"Kind":"Components.Component","Name":"ValidateDecimalOnType","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the length of the decimal should be restricted during typing.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValidateDecimalOnType"}},{"Kind":"Components.Component","Name":"Max","TypeName":"TValue","Documentation":"\n            <summary>\n            Specifies a maximum value that is allowed a user can enter.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Min","TypeName":"TValue","Documentation":"\n            <summary>\n            Specifies a minimum value that is allowed a user can enter.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":962278745,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfNumericTextBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1884683329,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.SfNumericTextBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":148051488,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.NumericTextBoxEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            The NumericTextBox is used to get the number inputs from the user. The input values can be incremented or decremented by a predefined step value.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of SfNumericTextBox.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NumericTextBoxEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Inputs.NumericTextBoxEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.NumericBlurEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the NumericTextBox got focus out.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ChangeEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the value of the NumericTextBox changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the NumericTextBox component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the NumericTextBox component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.NumericFocusEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the NumericTextBox got focus in.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.NumericTextBoxEvents<TValue>","Components.GenericTyped":"True"}},{"HashCode":734077440,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.NumericTextBoxEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            The NumericTextBox is used to get the number inputs from the user. The input values can be incremented or decremented by a predefined step value.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the type of SfNumericTextBox.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.NumericTextBoxEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Inputs.NumericTextBoxEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.NumericBlurEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the NumericTextBox got focus out.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ChangeEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the value of the NumericTextBox changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the NumericTextBox component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the NumericTextBox component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.NumericFocusEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the NumericTextBox got focus in.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.NumericTextBoxEvents<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1918656323,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfRating","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary> \n            The Blazor Rating component allows the user to rate something by clicking on a set of symbols on numeric scale. \n            This allow users to provide feedback or ratings for products, services, or content.\n            </summary> \n            <example> \n            A simple Blazor Rating component with value.\n            <code><![CDATA[ \n            <SfRating Value=3 />\n            ]]></code> \n            A Blazor Rating component with label.\n            <code><![CDATA[ \n            <SfRating ShowLabel=true /> \n            ]]></code>\n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfRating"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AllowReset","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that specifies whether to show or hide the reset button in a rating component.\n            </summary>\n            <value> \n            <c>true</c>, the reset button will be visible to the user and they will be able to click it to reset the rating value to its default. \n            The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"AllowReset"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets one or more CSS classes that can be used to customize the appearance of a rating component.\n            </summary> \n            <value> \n            One or more CSS classes to customize the appearance of the rating component, such as by changing its colors, fonts, sizes, or other visual aspects.\n            The default value is <c>String.Empty</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that specifies whether a rating component is enabled or disabled.\n            A disabled rating component may have a different visual appearance than an enabled one.\n            </summary> \n            <value> \n            <c>true</c>, the rating component will be disabled and the user will not be able to interact with it. The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"EmptyTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Inputs.RatingItemContext>","Documentation":"\n            <summary> \n            Gets or sets a template that defines the appearance of each un-rated item in a rating component. \n            The <see cref=\"T:Syncfusion.Blazor.Inputs.RatingItemContext\" /> is passed as a context to the template, allowing it to access information about the un-rated item, such as its <see cref=\"P:Syncfusion.Blazor.Inputs.RatingItemContext.Value\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.RatingItemContext.Index\" />.\n            </summary>   \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            Rating with empty template.\n            <code><![CDATA[ \n            <SfRating> \n               <EmptyTemplate>\n                    <span class=\"e-rating-icon e-icons e-star\"></span>\n               </EmptyTemplate>\n            </SfRating>\n            ]]></code> \n            </example>   \n        ","Metadata":{"Common.PropertyName":"EmptyTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"EnableAnimation","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that specifies whether to add animation (to provide visual feedback to the user) when an item in a rating component is hovered.\n            </summary>\n            <value> \n            <c>true</c>, an animation will be added when the user hovers their cursor over an item in the rating component.\n            The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableAnimation"}},{"Kind":"Components.Component","Name":"EnableSingleSelection","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that specifies whether to select all the items before the selected item should be in selected state in a rating component.\n            </summary>\n            <value> \n            <c>true</c>, only the selected item will be in the selected state, and all other items will be un-selected.\n            <c>false</c>, all items before the selected one will be in the selected state.\n            The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableSingleSelection"}},{"Kind":"Components.Component","Name":"FullTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Inputs.RatingItemContext>","Documentation":"\n            <summary> \n            Gets or sets a template that defines the appearance of each rated item in a rating component. \n            The <see cref=\"T:Syncfusion.Blazor.Inputs.RatingItemContext\" /> is passed as a context to the template, allowing it to access information about the rated item, such as its <see cref=\"P:Syncfusion.Blazor.Inputs.RatingItemContext.Value\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.RatingItemContext.Index\" />.\n            </summary>   \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            Rating with full template.\n            <code><![CDATA[ \n            <SfRating> \n               <FullTemplate>\n                    <span class=\"e-rating-icon e-icons e-star\"></span>\n               </FullTemplate>\n            </SfRating>\n            ]]></code> \n            </example>   \n        ","Metadata":{"Common.PropertyName":"FullTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets id attribute for the rating element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"ItemsCount","TypeName":"System.Int32","Documentation":"\n            <summary> \n            Gets or sets a value that specifies the number of items (symbols) in rating component.\n            The rating component typically consists of a number of items, such as stars or other symbols, that represent the rating value. \n            </summary>\n            <value>\n            An int that specifies the number of items (symbols) displayed in rating component\n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemsCount"}},{"Kind":"Components.Component","Name":"LabelPosition","TypeName":"Syncfusion.Blazor.Inputs.LabelPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets the the position of the label in rating component. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.LabelPosition\" /> enumeration that specifies the position of the label. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.LabelPosition.Right\" />.\n            </value>\n            <remarks>\n            You can use this property to customize the position of the label within the rating component to suit the needs of your application. \n            For example, you can set the <c>LabelPosition</c> property to ,<c>Top</c> to position the label at the top center of the rating component, \n            or set it to <c>Left</c> to position the label at the left side of the component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"LabelPosition"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Double>","Documentation":"\n            <summary> \n            Gets or sets a template that used as label over default label of the rating. The current value of rating passed as context to build the content.\n            </summary>   \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            Rating with label template.\n            <code><![CDATA[ \n            <SfRating> \n               <LabelTemplate>\n                    <span>@context Out Of 5</span>\n               </LabelTemplate>\n            </SfRating>\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"LabelTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.Double","Documentation":"\n            <summary> \n            Gets or sets the value that specifies minimum rating that a user can select.\n            </summary>\n            <value>\n            By default, the <c>Min</c> property is set to 0, which means that the minimum possible rating is 0.\n            </value>\n            <remarks>\n            You can use the <c>Min</c> property to customize the minimum possible rating in the <c>SfRating</c> component. \n            For example, if you want to allow users to provide ratings from 1 to 5, you can set the <c>Min</c> property to 1 and <c>ItemsCount</c> to 5.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Min"}},{"Kind":"Components.Component","Name":"Precision","TypeName":"Syncfusion.Blazor.Inputs.PrecisionType","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets the precision type of the rating which used to component the granularity of the rating, allowing users to provide ratings with varying levels of precision.\n            </summary>\n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.PrecisionType\" /> enumeration that specifies the precision type. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.PrecisionType.Full\" />.\n            </value>\n            <remarks>\n            The <code>Precision</code> property can be set to one of the following values:\n            * Full: The rating is increased in whole number increments. For example, if the current rating is 3, the next possible ratings are 4, 5, and so on.\n            * Half: The rating is increased in increments of 0.5 (half). For example, if the current rating is 3.5, the next possible ratings are 4, 4.5, 5, and so on.\n            * Quarter: The rating is increased in increments of 0.25 (quarter). For example, if the current rating is 3.75, the next possible ratings are 4, 4.25, 4.5, and so on.\n            * Exact: The rating is increased in increments of 0.1. For example, if the current rating is 3.9, the next possible ratings are 4, 4.1, 4.2, and so on.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Precision"}},{"Kind":"Components.Component","Name":"ReadOnly","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a boolean value that specifies whether the read-only mode is enabled for a rating component, \n            which means that the user will be able to interact with it and change the rating value. \n            </summary>\n            <value> \n            <c>true</c>,the rating component will be in read-only mode, which means that the user will not be able to interact with it and change the rating value. \n            The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ReadOnly"}},{"Kind":"Components.Component","Name":"ShowLabel","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that specifies whether to display a label that shows the current value of a rating.\n            </summary>\n            <value> \n            <c>true</c>, a label will be displayed that shows the current value of the rating; otherwise false. The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowLabel"}},{"Kind":"Components.Component","Name":"ShowTooltip","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that defines whether to show tooltip for the items.\n            </summary>\n            <value> \n            <c>true</c>, show tooltip for the items. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowTooltip"}},{"Kind":"Components.Component","Name":"TooltipTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Double>","Documentation":"\n            <summary> \n            Gets or sets a template that used as tooltip content over default tooltip content of the rating. The current value of rating passed as context to build the content. \n            </summary>   \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            Rating with tooltip template.\n            <code><![CDATA[ \n            <SfRating> \n               <TooltipTemplate>\n                    <div>@context Star</div>\n               </TooltipTemplate>\n            </SfRating>\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"TooltipTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Double","Documentation":"\n            <summary> \n            Gets or sets the current rating value which used to display and update the rating selected by the user. \n            Based on <see cref=\"T:Syncfusion.Blazor.Inputs.PrecisionType\" />, users can select ratings with varying levels of precision\n            </summary>\n            <value>\n            The <code>Value</code> property is a decimal value that ranges from the <see cref=\"P:Syncfusion.Blazor.Inputs.SfRating.Min\" /> to the <see cref=\"P:Syncfusion.Blazor.Inputs.SfRating.ItemsCount\" />, \n            as specified by the <c>Min</c> and <c>ItemsCount</c> properties of the rating.\n            </value>\n            <remarks>\n            You can use the <code>Value</code> property to initialize the rating component with a specific rating value, or to get the current rating value selected by the user. \n            For example, if you want to initialize the rating component with a rating of 3.5, you can set the <c>Value</c> property to 3.5.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether the rating component is visible or hidden\n            </summary> \n            <value> \n            <c>true</c>, if the rating component is visible. The default value is <c>true</c>. \n            </value>          \n        ","Metadata":{"Common.PropertyName":"Visible"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfRating\" /> rendering is completed.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnItemHover","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.RatingHoverEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when a user hovers over an item.   \n            </summary> \n        ","Metadata":{"Common.PropertyName":"OnItemHover","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Double>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"P:Syncfusion.Blazor.Inputs.SfRating.Value\" /> property is changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfRating"}},{"HashCode":1999334044,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfRating","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary> \n            The Blazor Rating component allows the user to rate something by clicking on a set of symbols on numeric scale. \n            This allow users to provide feedback or ratings for products, services, or content.\n            </summary> \n            <example> \n            A simple Blazor Rating component with value.\n            <code><![CDATA[ \n            <SfRating Value=3 />\n            ]]></code> \n            A Blazor Rating component with label.\n            <code><![CDATA[ \n            <SfRating ShowLabel=true /> \n            ]]></code>\n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfRating"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AllowReset","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that specifies whether to show or hide the reset button in a rating component.\n            </summary>\n            <value> \n            <c>true</c>, the reset button will be visible to the user and they will be able to click it to reset the rating value to its default. \n            The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"AllowReset"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets one or more CSS classes that can be used to customize the appearance of a rating component.\n            </summary> \n            <value> \n            One or more CSS classes to customize the appearance of the rating component, such as by changing its colors, fonts, sizes, or other visual aspects.\n            The default value is <c>String.Empty</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that specifies whether a rating component is enabled or disabled.\n            A disabled rating component may have a different visual appearance than an enabled one.\n            </summary> \n            <value> \n            <c>true</c>, the rating component will be disabled and the user will not be able to interact with it. The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"EmptyTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Inputs.RatingItemContext>","Documentation":"\n            <summary> \n            Gets or sets a template that defines the appearance of each un-rated item in a rating component. \n            The <see cref=\"T:Syncfusion.Blazor.Inputs.RatingItemContext\" /> is passed as a context to the template, allowing it to access information about the un-rated item, such as its <see cref=\"P:Syncfusion.Blazor.Inputs.RatingItemContext.Value\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.RatingItemContext.Index\" />.\n            </summary>   \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            Rating with empty template.\n            <code><![CDATA[ \n            <SfRating> \n               <EmptyTemplate>\n                    <span class=\"e-rating-icon e-icons e-star\"></span>\n               </EmptyTemplate>\n            </SfRating>\n            ]]></code> \n            </example>   \n        ","Metadata":{"Common.PropertyName":"EmptyTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"EnableAnimation","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that specifies whether to add animation (to provide visual feedback to the user) when an item in a rating component is hovered.\n            </summary>\n            <value> \n            <c>true</c>, an animation will be added when the user hovers their cursor over an item in the rating component.\n            The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableAnimation"}},{"Kind":"Components.Component","Name":"EnableSingleSelection","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that specifies whether to select all the items before the selected item should be in selected state in a rating component.\n            </summary>\n            <value> \n            <c>true</c>, only the selected item will be in the selected state, and all other items will be un-selected.\n            <c>false</c>, all items before the selected one will be in the selected state.\n            The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableSingleSelection"}},{"Kind":"Components.Component","Name":"FullTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Inputs.RatingItemContext>","Documentation":"\n            <summary> \n            Gets or sets a template that defines the appearance of each rated item in a rating component. \n            The <see cref=\"T:Syncfusion.Blazor.Inputs.RatingItemContext\" /> is passed as a context to the template, allowing it to access information about the rated item, such as its <see cref=\"P:Syncfusion.Blazor.Inputs.RatingItemContext.Value\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.RatingItemContext.Index\" />.\n            </summary>   \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            Rating with full template.\n            <code><![CDATA[ \n            <SfRating> \n               <FullTemplate>\n                    <span class=\"e-rating-icon e-icons e-star\"></span>\n               </FullTemplate>\n            </SfRating>\n            ]]></code> \n            </example>   \n        ","Metadata":{"Common.PropertyName":"FullTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets id attribute for the rating element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"ItemsCount","TypeName":"System.Int32","Documentation":"\n            <summary> \n            Gets or sets a value that specifies the number of items (symbols) in rating component.\n            The rating component typically consists of a number of items, such as stars or other symbols, that represent the rating value. \n            </summary>\n            <value>\n            An int that specifies the number of items (symbols) displayed in rating component\n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemsCount"}},{"Kind":"Components.Component","Name":"LabelPosition","TypeName":"Syncfusion.Blazor.Inputs.LabelPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets the the position of the label in rating component. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.LabelPosition\" /> enumeration that specifies the position of the label. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.LabelPosition.Right\" />.\n            </value>\n            <remarks>\n            You can use this property to customize the position of the label within the rating component to suit the needs of your application. \n            For example, you can set the <c>LabelPosition</c> property to ,<c>Top</c> to position the label at the top center of the rating component, \n            or set it to <c>Left</c> to position the label at the left side of the component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"LabelPosition"}},{"Kind":"Components.Component","Name":"LabelTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Double>","Documentation":"\n            <summary> \n            Gets or sets a template that used as label over default label of the rating. The current value of rating passed as context to build the content.\n            </summary>   \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            Rating with label template.\n            <code><![CDATA[ \n            <SfRating> \n               <LabelTemplate>\n                    <span>@context Out Of 5</span>\n               </LabelTemplate>\n            </SfRating>\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"LabelTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.Double","Documentation":"\n            <summary> \n            Gets or sets the value that specifies minimum rating that a user can select.\n            </summary>\n            <value>\n            By default, the <c>Min</c> property is set to 0, which means that the minimum possible rating is 0.\n            </value>\n            <remarks>\n            You can use the <c>Min</c> property to customize the minimum possible rating in the <c>SfRating</c> component. \n            For example, if you want to allow users to provide ratings from 1 to 5, you can set the <c>Min</c> property to 1 and <c>ItemsCount</c> to 5.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Min"}},{"Kind":"Components.Component","Name":"Precision","TypeName":"Syncfusion.Blazor.Inputs.PrecisionType","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets the precision type of the rating which used to component the granularity of the rating, allowing users to provide ratings with varying levels of precision.\n            </summary>\n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.PrecisionType\" /> enumeration that specifies the precision type. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.PrecisionType.Full\" />.\n            </value>\n            <remarks>\n            The <code>Precision</code> property can be set to one of the following values:\n            * Full: The rating is increased in whole number increments. For example, if the current rating is 3, the next possible ratings are 4, 5, and so on.\n            * Half: The rating is increased in increments of 0.5 (half). For example, if the current rating is 3.5, the next possible ratings are 4, 4.5, 5, and so on.\n            * Quarter: The rating is increased in increments of 0.25 (quarter). For example, if the current rating is 3.75, the next possible ratings are 4, 4.25, 4.5, and so on.\n            * Exact: The rating is increased in increments of 0.1. For example, if the current rating is 3.9, the next possible ratings are 4, 4.1, 4.2, and so on.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Precision"}},{"Kind":"Components.Component","Name":"ReadOnly","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a boolean value that specifies whether the read-only mode is enabled for a rating component, \n            which means that the user will be able to interact with it and change the rating value. \n            </summary>\n            <value> \n            <c>true</c>,the rating component will be in read-only mode, which means that the user will not be able to interact with it and change the rating value. \n            The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ReadOnly"}},{"Kind":"Components.Component","Name":"ShowLabel","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that specifies whether to display a label that shows the current value of a rating.\n            </summary>\n            <value> \n            <c>true</c>, a label will be displayed that shows the current value of the rating; otherwise false. The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowLabel"}},{"Kind":"Components.Component","Name":"ShowTooltip","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that defines whether to show tooltip for the items.\n            </summary>\n            <value> \n            <c>true</c>, show tooltip for the items. The default value is <c>true</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowTooltip"}},{"Kind":"Components.Component","Name":"TooltipTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Double>","Documentation":"\n            <summary> \n            Gets or sets a template that used as tooltip content over default tooltip content of the rating. The current value of rating passed as context to build the content. \n            </summary>   \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            Rating with tooltip template.\n            <code><![CDATA[ \n            <SfRating> \n               <TooltipTemplate>\n                    <div>@context Star</div>\n               </TooltipTemplate>\n            </SfRating>\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"TooltipTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Double","Documentation":"\n            <summary> \n            Gets or sets the current rating value which used to display and update the rating selected by the user. \n            Based on <see cref=\"T:Syncfusion.Blazor.Inputs.PrecisionType\" />, users can select ratings with varying levels of precision\n            </summary>\n            <value>\n            The <code>Value</code> property is a decimal value that ranges from the <see cref=\"P:Syncfusion.Blazor.Inputs.SfRating.Min\" /> to the <see cref=\"P:Syncfusion.Blazor.Inputs.SfRating.ItemsCount\" />, \n            as specified by the <c>Min</c> and <c>ItemsCount</c> properties of the rating.\n            </value>\n            <remarks>\n            You can use the <code>Value</code> property to initialize the rating component with a specific rating value, or to get the current rating value selected by the user. \n            For example, if you want to initialize the rating component with a rating of 3.5, you can set the <c>Value</c> property to 3.5.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether the rating component is visible or hidden\n            </summary> \n            <value> \n            <c>true</c>, if the rating component is visible. The default value is <c>true</c>. \n            </value>          \n        ","Metadata":{"Common.PropertyName":"Visible"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Inputs.SfRating\" /> rendering is completed.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnItemHover","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.RatingHoverEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when a user hovers over an item.   \n            </summary> \n        ","Metadata":{"Common.PropertyName":"OnItemHover","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Double>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"P:Syncfusion.Blazor.Inputs.SfRating.Value\" /> property is changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfRating","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1435051172,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfRating.EmptyTemplate","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary> \n            Gets or sets a template that defines the appearance of each un-rated item in a rating component. \n            The <see cref=\"T:Syncfusion.Blazor.Inputs.RatingItemContext\" /> is passed as a context to the template, allowing it to access information about the un-rated item, such as its <see cref=\"P:Syncfusion.Blazor.Inputs.RatingItemContext.Value\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.RatingItemContext.Index\" />.\n            </summary>   \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            Rating with empty template.\n            <code><![CDATA[ \n            <SfRating> \n               <EmptyTemplate>\n                    <span class=\"e-rating-icon e-icons e-star\"></span>\n               </EmptyTemplate>\n            </SfRating>\n            ]]></code> \n            </example>   \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EmptyTemplate","ParentTag":"SfRating"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'EmptyTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfRating.EmptyTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1342337228,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfRating.EmptyTemplate","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary> \n            Gets or sets a template that defines the appearance of each un-rated item in a rating component. \n            The <see cref=\"T:Syncfusion.Blazor.Inputs.RatingItemContext\" /> is passed as a context to the template, allowing it to access information about the un-rated item, such as its <see cref=\"P:Syncfusion.Blazor.Inputs.RatingItemContext.Value\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.RatingItemContext.Index\" />.\n            </summary>   \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            Rating with empty template.\n            <code><![CDATA[ \n            <SfRating> \n               <EmptyTemplate>\n                    <span class=\"e-rating-icon e-icons e-star\"></span>\n               </EmptyTemplate>\n            </SfRating>\n            ]]></code> \n            </example>   \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EmptyTemplate","ParentTag":"Syncfusion.Blazor.Inputs.SfRating"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'EmptyTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfRating.EmptyTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1683876963,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfRating.FullTemplate","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary> \n            Gets or sets a template that defines the appearance of each rated item in a rating component. \n            The <see cref=\"T:Syncfusion.Blazor.Inputs.RatingItemContext\" /> is passed as a context to the template, allowing it to access information about the rated item, such as its <see cref=\"P:Syncfusion.Blazor.Inputs.RatingItemContext.Value\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.RatingItemContext.Index\" />.\n            </summary>   \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            Rating with full template.\n            <code><![CDATA[ \n            <SfRating> \n               <FullTemplate>\n                    <span class=\"e-rating-icon e-icons e-star\"></span>\n               </FullTemplate>\n            </SfRating>\n            ]]></code> \n            </example>   \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FullTemplate","ParentTag":"SfRating"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FullTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfRating.FullTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-351703350,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfRating.FullTemplate","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary> \n            Gets or sets a template that defines the appearance of each rated item in a rating component. \n            The <see cref=\"T:Syncfusion.Blazor.Inputs.RatingItemContext\" /> is passed as a context to the template, allowing it to access information about the rated item, such as its <see cref=\"P:Syncfusion.Blazor.Inputs.RatingItemContext.Value\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.RatingItemContext.Index\" />.\n            </summary>   \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            Rating with full template.\n            <code><![CDATA[ \n            <SfRating> \n               <FullTemplate>\n                    <span class=\"e-rating-icon e-icons e-star\"></span>\n               </FullTemplate>\n            </SfRating>\n            ]]></code> \n            </example>   \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FullTemplate","ParentTag":"Syncfusion.Blazor.Inputs.SfRating"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FullTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfRating.FullTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2048754481,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfRating.LabelTemplate","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary> \n            Gets or sets a template that used as label over default label of the rating. The current value of rating passed as context to build the content.\n            </summary>   \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            Rating with label template.\n            <code><![CDATA[ \n            <SfRating> \n               <LabelTemplate>\n                    <span>@context Out Of 5</span>\n               </LabelTemplate>\n            </SfRating>\n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"SfRating"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'LabelTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfRating.LabelTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1848444744,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfRating.LabelTemplate","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary> \n            Gets or sets a template that used as label over default label of the rating. The current value of rating passed as context to build the content.\n            </summary>   \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            Rating with label template.\n            <code><![CDATA[ \n            <SfRating> \n               <LabelTemplate>\n                    <span>@context Out Of 5</span>\n               </LabelTemplate>\n            </SfRating>\n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LabelTemplate","ParentTag":"Syncfusion.Blazor.Inputs.SfRating"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'LabelTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfRating.LabelTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":342932559,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfRating.TooltipTemplate","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary> \n            Gets or sets a template that used as tooltip content over default tooltip content of the rating. The current value of rating passed as context to build the content. \n            </summary>   \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            Rating with tooltip template.\n            <code><![CDATA[ \n            <SfRating> \n               <TooltipTemplate>\n                    <div>@context Star</div>\n               </TooltipTemplate>\n            </SfRating>\n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TooltipTemplate","ParentTag":"SfRating"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'TooltipTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfRating.TooltipTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":36750960,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfRating.TooltipTemplate","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary> \n            Gets or sets a template that used as tooltip content over default tooltip content of the rating. The current value of rating passed as context to build the content. \n            </summary>   \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            Rating with tooltip template.\n            <code><![CDATA[ \n            <SfRating> \n               <TooltipTemplate>\n                    <div>@context Star</div>\n               </TooltipTemplate>\n            </SfRating>\n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TooltipTemplate","ParentTag":"Syncfusion.Blazor.Inputs.SfRating"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'TooltipTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfRating.TooltipTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2015614055,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfSignature","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Signature allows user to draw smooth signatures as vector outline of strokes using variable width Bézier curve interpolation. \n            It allows to save signature as image.\n            You can use your finger, pen, or mouse on a tablet, touchscreen, etc., to draw your own signature on this Signature component.\n            </summary>\n            <remarks>\n            Signature is a user interface to draw the signature or text.\n            It supports stroke color, background color and image.\n            </remarks>\n            <example>\n            In the below code example, a basic Signature initialized with <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> tag directive.\n            <code><![CDATA[ \n            <SfSignature style=\"height: 100%; width: 100%;\"></SfSignature>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSignature"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will applied to the <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component.\n            </summary>\n            <remarks>\n            Additional attributes can be added as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            In the below code example, signature height and width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" />.\n            <code><![CDATA[\n            <SfSignature style=\"height: 100%; width: 100%;\"></SfSignature>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"BackgroundColor","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the background color of the component.\n            </summary>\n            <value>\n            The background color of the component that accepts hex value, rgb and text (like <code>red</code>). The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"BackgroundColor"}},{"Kind":"Components.Component","Name":"BackgroundImage","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the background image for the <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component.\n            </summary>\n            <value>\n            An image that used to fill the background of the component. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"BackgroundImage"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to disable the <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component where the opacity is set to show disabled state. \n            </summary>\n            <value>\n            <c>true</c>, if the signature component is disabled for user interaction. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"IsReadOnly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to prevent the interaction in <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component. \n            </summary>\n            <value>\n            <c>true</c>, if the signature component is read only state where the user interaction is prevented. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IsReadOnly"}},{"Kind":"Components.Component","Name":"SaveWithBackground","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to save the signature along with <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.BackgroundColor\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.BackgroundImage\" /> while saving. \n            </summary>\n            <value>\n            <c>true</c>, if signature component to save with background. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"SaveWithBackground"}},{"Kind":"Components.Component","Name":"StrokeColor","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the stroke color of the signature.\n            </summary>\n            <value>\n            The color of the signature stroke that accepts hex value, rgb and text (like <code>red</code>). The default value is <c>\"#000000\"</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"StrokeColor"}},{"Kind":"Components.Component","Name":"MinStrokeWidth","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the minimum stroke width for signature. \n            The <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component calculates stroke width based on <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.Velocity\" />, <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.MinStrokeWidth\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.MaxStrokeWidth\" />.\n            </summary>\n            <value>\n            The minimum width of stroke. The default value is <c>0.5</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"MinStrokeWidth"}},{"Kind":"Components.Component","Name":"MaxStrokeWidth","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the maximum stroke width for signature.\n            The <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component calculates stroke width based on <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.Velocity\" />, <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.MinStrokeWidth\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.MaxStrokeWidth\" />.\n            </summary>\n            <value>\n            The maximum width of stroke. The default value is <c>2.0</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"MaxStrokeWidth"}},{"Kind":"Components.Component","Name":"Velocity","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the velocity to calculate the stroke thickness based on the pressure of the contact on the digitizer surface.\n            The Signature component calculates stroke thickness based on <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.Velocity\" />, <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.MinStrokeWidth\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.MaxStrokeWidth\" />.\n            </summary>\n            <value>\n            The velocity to calculate the stroke thickness based on the pressure of the contact on the digitizer surface. The default value is <c>0.7</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Velocity"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"Changed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SignatureChangeEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised for the actions like undo, redo, clear and while user complete signing on <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfSignature Changed=\"@changefunc\"></SfSignature>\n            @code \n            {\n                private void changefunc(SignatureChangeEventArgs args) \n                {\n                    if (args.ActionName == \"Clear\")\n                    {\n                        // validation code goes here\n                    }\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Changed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnSave","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SignatureSaveEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised while saving the signature.\n            </summary>\n            <remarks>\n            The file name and the file type(PNG, JPEG, SVG) can be changed using <see cref=\"T:Syncfusion.Blazor.Inputs.SignatureSaveEventArgs\" /> and <see cref=\"T:Syncfusion.Blazor.Inputs.SignatureFileType\" />.\n            The event callback is raised only for the keyboard action (Ctrl + S).\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfSignature Changed=\"@beforesavefunc\"></SfSignature>\n            @code \n            {\n                private void beforesavefunc(SignatureSaveEventArgs args) \n                {        \n                    args.fileType = \"SignatureFileType.Jpeg\";\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnSave","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when component rendering is completed.\n            </summary>\n            <remarks>\n            You can load the pre-drawn signature when the signature component is created.\n            </remarks>\n            <example>\n            In the below code example, the pre-drawn signature is loaded using <c>Created</c> event.\n            <code><![CDATA[\n            <SfSignature Created=\"@Created\">\n            </SfSignature >\n            @code {\n                private void Created() {\n                    var sign = \"\"; // Base 64 or URL of the pre-drawn signature\n                    signature.LoadAsync(sign);\n                }\n            }\n            ]]></code>\n            </example>\n            <summary>\n            Renders the base 64 string as signature on <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component. \n            </summary>\n            <returns>\n            A Task that completes when the component has finished the loading of base 64 string.\n            </returns>\n            <example>\n            In the below code example, the pre-drawn signature is loaded using <c>Created</c> event.\n            <code><![CDATA[\n            <SfSignature @ref=\"signature\" Created=\"@Created\">\n            </SfSignature >\n            @code {\n                private void Created() {\n                    var sign = \"\"; // Base 64 or URL of the pre-drawn signature\n                    signature.LoadAsync(sign, 400, 400);\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfSignature"}},{"HashCode":-2144256795,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfSignature","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Signature allows user to draw smooth signatures as vector outline of strokes using variable width Bézier curve interpolation. \n            It allows to save signature as image.\n            You can use your finger, pen, or mouse on a tablet, touchscreen, etc., to draw your own signature on this Signature component.\n            </summary>\n            <remarks>\n            Signature is a user interface to draw the signature or text.\n            It supports stroke color, background color and image.\n            </remarks>\n            <example>\n            In the below code example, a basic Signature initialized with <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> tag directive.\n            <code><![CDATA[ \n            <SfSignature style=\"height: 100%; width: 100%;\"></SfSignature>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfSignature"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will applied to the <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component.\n            </summary>\n            <remarks>\n            Additional attributes can be added as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            In the below code example, signature height and width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" />.\n            <code><![CDATA[\n            <SfSignature style=\"height: 100%; width: 100%;\"></SfSignature>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"BackgroundColor","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the background color of the component.\n            </summary>\n            <value>\n            The background color of the component that accepts hex value, rgb and text (like <code>red</code>). The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"BackgroundColor"}},{"Kind":"Components.Component","Name":"BackgroundImage","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the background image for the <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component.\n            </summary>\n            <value>\n            An image that used to fill the background of the component. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"BackgroundImage"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to disable the <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component where the opacity is set to show disabled state. \n            </summary>\n            <value>\n            <c>true</c>, if the signature component is disabled for user interaction. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"IsReadOnly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to prevent the interaction in <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component. \n            </summary>\n            <value>\n            <c>true</c>, if the signature component is read only state where the user interaction is prevented. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IsReadOnly"}},{"Kind":"Components.Component","Name":"SaveWithBackground","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to save the signature along with <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.BackgroundColor\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.BackgroundImage\" /> while saving. \n            </summary>\n            <value>\n            <c>true</c>, if signature component to save with background. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"SaveWithBackground"}},{"Kind":"Components.Component","Name":"StrokeColor","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the stroke color of the signature.\n            </summary>\n            <value>\n            The color of the signature stroke that accepts hex value, rgb and text (like <code>red</code>). The default value is <c>\"#000000\"</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"StrokeColor"}},{"Kind":"Components.Component","Name":"MinStrokeWidth","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the minimum stroke width for signature. \n            The <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component calculates stroke width based on <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.Velocity\" />, <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.MinStrokeWidth\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.MaxStrokeWidth\" />.\n            </summary>\n            <value>\n            The minimum width of stroke. The default value is <c>0.5</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"MinStrokeWidth"}},{"Kind":"Components.Component","Name":"MaxStrokeWidth","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the maximum stroke width for signature.\n            The <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component calculates stroke width based on <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.Velocity\" />, <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.MinStrokeWidth\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.MaxStrokeWidth\" />.\n            </summary>\n            <value>\n            The maximum width of stroke. The default value is <c>2.0</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"MaxStrokeWidth"}},{"Kind":"Components.Component","Name":"Velocity","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the velocity to calculate the stroke thickness based on the pressure of the contact on the digitizer surface.\n            The Signature component calculates stroke thickness based on <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.Velocity\" />, <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.MinStrokeWidth\" /> and <see cref=\"P:Syncfusion.Blazor.Inputs.SfSignature.MaxStrokeWidth\" />.\n            </summary>\n            <value>\n            The velocity to calculate the stroke thickness based on the pressure of the contact on the digitizer surface. The default value is <c>0.7</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Velocity"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"Changed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SignatureChangeEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised for the actions like undo, redo, clear and while user complete signing on <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfSignature Changed=\"@changefunc\"></SfSignature>\n            @code \n            {\n                private void changefunc(SignatureChangeEventArgs args) \n                {\n                    if (args.ActionName == \"Clear\")\n                    {\n                        // validation code goes here\n                    }\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Changed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnSave","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SignatureSaveEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised while saving the signature.\n            </summary>\n            <remarks>\n            The file name and the file type(PNG, JPEG, SVG) can be changed using <see cref=\"T:Syncfusion.Blazor.Inputs.SignatureSaveEventArgs\" /> and <see cref=\"T:Syncfusion.Blazor.Inputs.SignatureFileType\" />.\n            The event callback is raised only for the keyboard action (Ctrl + S).\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfSignature Changed=\"@beforesavefunc\"></SfSignature>\n            @code \n            {\n                private void beforesavefunc(SignatureSaveEventArgs args) \n                {        \n                    args.fileType = \"SignatureFileType.Jpeg\";\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnSave","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when component rendering is completed.\n            </summary>\n            <remarks>\n            You can load the pre-drawn signature when the signature component is created.\n            </remarks>\n            <example>\n            In the below code example, the pre-drawn signature is loaded using <c>Created</c> event.\n            <code><![CDATA[\n            <SfSignature Created=\"@Created\">\n            </SfSignature >\n            @code {\n                private void Created() {\n                    var sign = \"\"; // Base 64 or URL of the pre-drawn signature\n                    signature.LoadAsync(sign);\n                }\n            }\n            ]]></code>\n            </example>\n            <summary>\n            Renders the base 64 string as signature on <see cref=\"T:Syncfusion.Blazor.Inputs.SfSignature\" /> component. \n            </summary>\n            <returns>\n            A Task that completes when the component has finished the loading of base 64 string.\n            </returns>\n            <example>\n            In the below code example, the pre-drawn signature is loaded using <c>Created</c> event.\n            <code><![CDATA[\n            <SfSignature @ref=\"signature\" Created=\"@Created\">\n            </SfSignature >\n            @code {\n                private void Created() {\n                    var sign = \"\"; // Base 64 or URL of the pre-drawn signature\n                    signature.LoadAsync(sign, 400, 400);\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfSignature","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":984061750,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.ColorRange","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            This class represent the color, start and end position of slider track.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ColorRange"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Get and set the Slider.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Color","TypeName":"System.String","Documentation":"\n            <summary>\n            Get and set the Color.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Color"}},{"Kind":"Components.Component","Name":"Start","TypeName":"System.Double","Documentation":"\n            <summary>\n            Get and set the start.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start"}},{"Kind":"Components.Component","Name":"End","TypeName":"System.Double","Documentation":"\n            <summary>\n            Get and set the End.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"End"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.ColorRange"}},{"HashCode":-613269383,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.ColorRange","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            This class represent the color, start and end position of slider track.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.ColorRange"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Get and set the Slider.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Color","TypeName":"System.String","Documentation":"\n            <summary>\n            Get and set the Color.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Color"}},{"Kind":"Components.Component","Name":"Start","TypeName":"System.Double","Documentation":"\n            <summary>\n            Get and set the start.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Start"}},{"Kind":"Components.Component","Name":"End","TypeName":"System.Double","Documentation":"\n            <summary>\n            Get and set the End.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"End"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.ColorRange","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":320299476,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.ColorRange.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Get and set the Slider.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"ColorRange"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.ColorRange.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1077263720,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.ColorRange.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Get and set the Slider.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.ColorRange"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.ColorRange.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-580743290,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SliderColorRanges","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the collections of colors to the slider track based on start and end value of each color.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SliderColorRanges"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Get and set the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderColorRanges"}},{"HashCode":221557749,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SliderColorRanges","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the collections of colors to the slider track based on start and end value of each color.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SliderColorRanges"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Get and set the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderColorRanges","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-76522287,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SliderColorRanges.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Get and set the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SliderColorRanges"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderColorRanges.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1929440001,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SliderColorRanges.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Get and set the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.SliderColorRanges"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderColorRanges.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1246792000,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfSlider<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Partial class SfSlider.\n            </summary>\n            <typeparam name=\"TValue\">Generic type parameter.</typeparam>.\n            <summary>\n            The Slider component allows the user to select a value or range of values\n            in-between the min and max range, by dragging the handle over the slider bar.\n            </summary>\n            <summary>\n            Partial class SfSlider.\n            </summary>\n            <summary>\n            Specifies the partial class SfSlider.\n            </summary>\n            <summary>\n            Specifies the partial class SfSlider.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSlider"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Inputs.SfSlider<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets id attribute for the slider element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the custom classes to be added to the element used to customize the slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"CustomValues","TypeName":"System.String[]","Documentation":"\n            <summary>\n            Specifies an array of slider values in number or string type.\n            The min and max step values are not considered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CustomValues"}},{"Kind":"Components.Component","Name":"EnableAnimation","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables/Disables the animation for slider movement.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableAnimation"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable persisting component's state between page reloads.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables or disables the slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the maximum value of the slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the minimum value of the slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min"}},{"Kind":"Components.Component","Name":"Orientation","TypeName":"Syncfusion.Blazor.Inputs.SliderOrientation","IsEnum":true,"Documentation":"\n            <summary>\n             Specifies whether to render the slider in vertical or horizontal orientation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Orientation"}},{"Kind":"Components.Component","Name":"ReadOnly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the render the slider in read-only mode to restrict any user interaction.\n            The slider rendered with user defined values and can’t be interacted with user actions.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ReadOnly"}},{"Kind":"Components.Component","Name":"ShowButtons","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether to show or hide the increase/decrease buttons\n            of Slider to change the slider value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowButtons"}},{"Kind":"Components.Component","Name":"Step","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the step value for each value change when the increase / decrease\n             button is clicked or on arrow keys press or on dragging the thumb.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Step"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Inputs.SliderType","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the type of the Slider. The available options are:\n              Default - Allows to a single value in the Slider.\n              MinRange - Allows to select a single value in the Slider. It display’s a shadow from the start to the current value.\n              Range - Allows to select a range of values in the Slider. It displays shadow in-between the selection range.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            It is used to denote the current value of the Slider.\n            The value should be specified in array of number when render Slider type as range.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback of the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the Slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"IsImmediateValue","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the value need to be updated at the time of dragging slider handle.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsImmediateValue"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfSlider<TValue>","Components.GenericTyped":"True"}},{"HashCode":-177301165,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfSlider<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Partial class SfSlider.\n            </summary>\n            <typeparam name=\"TValue\">Generic type parameter.</typeparam>.\n            <summary>\n            The Slider component allows the user to select a value or range of values\n            in-between the min and max range, by dragging the handle over the slider bar.\n            </summary>\n            <summary>\n            Partial class SfSlider.\n            </summary>\n            <summary>\n            Specifies the partial class SfSlider.\n            </summary>\n            <summary>\n            Specifies the partial class SfSlider.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfSlider"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Inputs.SfSlider<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets id attribute for the slider element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the custom classes to be added to the element used to customize the slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"CustomValues","TypeName":"System.String[]","Documentation":"\n            <summary>\n            Specifies an array of slider values in number or string type.\n            The min and max step values are not considered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CustomValues"}},{"Kind":"Components.Component","Name":"EnableAnimation","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables/Disables the animation for slider movement.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableAnimation"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable persisting component's state between page reloads.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables or disables the slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"Max","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the maximum value of the slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Max"}},{"Kind":"Components.Component","Name":"Min","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the minimum value of the slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Min"}},{"Kind":"Components.Component","Name":"Orientation","TypeName":"Syncfusion.Blazor.Inputs.SliderOrientation","IsEnum":true,"Documentation":"\n            <summary>\n             Specifies whether to render the slider in vertical or horizontal orientation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Orientation"}},{"Kind":"Components.Component","Name":"ReadOnly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the render the slider in read-only mode to restrict any user interaction.\n            The slider rendered with user defined values and can’t be interacted with user actions.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ReadOnly"}},{"Kind":"Components.Component","Name":"ShowButtons","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether to show or hide the increase/decrease buttons\n            of Slider to change the slider value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowButtons"}},{"Kind":"Components.Component","Name":"Step","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the step value for each value change when the increase / decrease\n             button is clicked or on arrow keys press or on dragging the thumb.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Step"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Inputs.SliderType","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the type of the Slider. The available options are:\n              Default - Allows to a single value in the Slider.\n              MinRange - Allows to select a single value in the Slider. It display’s a shadow from the start to the current value.\n              Range - Allows to select a range of values in the Slider. It displays shadow in-between the selection range.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            It is used to denote the current value of the Slider.\n            The value should be specified in array of number when render Slider type as range.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback of the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the Slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"IsImmediateValue","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the value need to be updated at the time of dragging slider handle.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsImmediateValue"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfSlider<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1632985399,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfSlider<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfSlider"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfSlider<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1433521401,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfSlider<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.SfSlider"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfSlider<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-69505140,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SliderEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Configure handlers to handle the events of the Slider component.\n            </summary>\n            <typeparam name=\"TValue\">\"TValue\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SliderEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Inputs.SliderEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SliderChangeEventArgs<TValue>>","Documentation":"\n            <summary>\n            We can trigger change event whenever Slider value is changed.\n             In other term, this event will be triggered while drag the slider thumb.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SliderChangeEventArgs<TValue>>","Documentation":"\n            <summary>\n            Fires whenever the Slider value is changed.\n            In other term, this event will be triggered, while drag the slider thumb completed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the Slider is successfully created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"TicksRendered","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SliderTickRenderedEventArgs>","Documentation":"\n            <summary>\n            Triggers when the ticks are rendered on the Slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TicksRendered","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"TicksRendering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SliderTickEventArgs>","Documentation":"\n            <summary>\n            Triggers on rendering the ticks element in the Slider,\n            which is used to customize the ticks labels dynamically.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TicksRendering","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnTooltipChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SliderTooltipEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the Sider tooltip value is changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnTooltipChange","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderEvents<TValue>","Components.GenericTyped":"True"}},{"HashCode":647418368,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SliderEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Configure handlers to handle the events of the Slider component.\n            </summary>\n            <typeparam name=\"TValue\">\"TValue\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SliderEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Inputs.SliderEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SliderChangeEventArgs<TValue>>","Documentation":"\n            <summary>\n            We can trigger change event whenever Slider value is changed.\n             In other term, this event will be triggered while drag the slider thumb.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SliderChangeEventArgs<TValue>>","Documentation":"\n            <summary>\n            Fires whenever the Slider value is changed.\n            In other term, this event will be triggered, while drag the slider thumb completed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the Slider is successfully created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"TicksRendered","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SliderTickRenderedEventArgs>","Documentation":"\n            <summary>\n            Triggers when the ticks are rendered on the Slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TicksRendered","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"TicksRendering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SliderTickEventArgs>","Documentation":"\n            <summary>\n            Triggers on rendering the ticks element in the Slider,\n            which is used to customize the ticks labels dynamically.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TicksRendering","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnTooltipChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SliderTooltipEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the Sider tooltip value is changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnTooltipChange","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderEvents<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2012625115,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SliderLimits","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            This class is used to set limit bar to slider component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SliderLimits"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It is used to enable the limit in the slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"EndHandleFixed","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It is used to lock the second handle.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndHandleFixed"}},{"Kind":"Components.Component","Name":"MaxEnd","TypeName":"System.Double?","Documentation":"\n            <summary>\n            It is used to set the maximum end limit value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaxEnd"}},{"Kind":"Components.Component","Name":"MaxStart","TypeName":"System.Double?","Documentation":"\n            <summary>\n            It is used to set the maximum start limit value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaxStart"}},{"Kind":"Components.Component","Name":"MinEnd","TypeName":"System.Double?","Documentation":"\n            <summary>\n            It is used to set the minimum end limit value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinEnd"}},{"Kind":"Components.Component","Name":"MinStart","TypeName":"System.Double?","Documentation":"\n            <summary>\n            It is used to set the minimum start limit value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinStart"}},{"Kind":"Components.Component","Name":"StartHandleFixed","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It is used to lock the first handle.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartHandleFixed"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderLimits"}},{"HashCode":2050255794,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SliderLimits","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            This class is used to set limit bar to slider component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SliderLimits"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It is used to enable the limit in the slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"EndHandleFixed","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It is used to lock the second handle.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndHandleFixed"}},{"Kind":"Components.Component","Name":"MaxEnd","TypeName":"System.Double?","Documentation":"\n            <summary>\n            It is used to set the maximum end limit value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaxEnd"}},{"Kind":"Components.Component","Name":"MaxStart","TypeName":"System.Double?","Documentation":"\n            <summary>\n            It is used to set the maximum start limit value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaxStart"}},{"Kind":"Components.Component","Name":"MinEnd","TypeName":"System.Double?","Documentation":"\n            <summary>\n            It is used to set the minimum end limit value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinEnd"}},{"Kind":"Components.Component","Name":"MinStart","TypeName":"System.Double?","Documentation":"\n            <summary>\n            It is used to set the minimum start limit value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinStart"}},{"Kind":"Components.Component","Name":"StartHandleFixed","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It is used to lock the first handle.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartHandleFixed"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderLimits","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-131116542,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SliderLimits.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SliderLimits"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderLimits.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":51798702,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SliderLimits.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.SliderLimits"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderLimits.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-453454683,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SliderTicks","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            This class is used to render ticks to slider component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SliderTicks"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            It is used to customize the Slider scale value to the desired format using Internationalization or events(custom formatting).\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format"}},{"Kind":"Components.Component","Name":"LargeStep","TypeName":"System.Double","Documentation":"\n            <summary>\n            It is used to denote the distance between two major (large) ticks from the scale of the Slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LargeStep"}},{"Kind":"Components.Component","Name":"Placement","TypeName":"Syncfusion.Blazor.Inputs.Placement","IsEnum":true,"Documentation":"\n            <summary>\n            It is used to denote the position of the ticks in the Slider. The available options are:.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placement"}},{"Kind":"Components.Component","Name":"ShowSmallTicks","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            We can show or hide the small ticks in the Slider, which will be appeared in between the largeTicks.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowSmallTicks"}},{"Kind":"Components.Component","Name":"SmallStep","TypeName":"System.Double","Documentation":"\n            <summary>\n            It is used to denote the distance between two minor (small) ticks from the scale of the Slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SmallStep"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderTicks"}},{"HashCode":83032411,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SliderTicks","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            This class is used to render ticks to slider component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SliderTicks"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            It is used to customize the Slider scale value to the desired format using Internationalization or events(custom formatting).\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format"}},{"Kind":"Components.Component","Name":"LargeStep","TypeName":"System.Double","Documentation":"\n            <summary>\n            It is used to denote the distance between two major (large) ticks from the scale of the Slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LargeStep"}},{"Kind":"Components.Component","Name":"Placement","TypeName":"Syncfusion.Blazor.Inputs.Placement","IsEnum":true,"Documentation":"\n            <summary>\n            It is used to denote the position of the ticks in the Slider. The available options are:.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placement"}},{"Kind":"Components.Component","Name":"ShowSmallTicks","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            We can show or hide the small ticks in the Slider, which will be appeared in between the largeTicks.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowSmallTicks"}},{"Kind":"Components.Component","Name":"SmallStep","TypeName":"System.Double","Documentation":"\n            <summary>\n            It is used to denote the distance between two minor (small) ticks from the scale of the Slider.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SmallStep"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderTicks","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1369279464,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SliderTicks.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SliderTicks"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderTicks.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":765727185,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SliderTicks.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.SliderTicks"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderTicks.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1723278539,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SliderTooltip","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            This class is used to set a tooltip for slider component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SliderTooltip"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            It is used to customize the Tooltip which accepts custom CSS class names that define\n             specific user-defined styles and themes to be applied on the Tooltip element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            It is used to customize the Tooltip content to the desired format\n             using internationalization or events (custom formatting).\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format"}},{"Kind":"Components.Component","Name":"IsVisible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It is used to show or hide the Tooltip of Slider Component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsVisible"}},{"Kind":"Components.Component","Name":"Placement","TypeName":"Syncfusion.Blazor.Inputs.TooltipPlacement","IsEnum":true,"Documentation":"\n            <summary>\n            It is used to denote the position for the tooltip element in the Slider. The available options are:\n              Before - Tooltip is shown in the top of the horizontal slider bar or at the left of the vertical slider bar.\n              After - Tooltip is shown in the bottom of the horizontal slider bar or at the right of the vertical slider bar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placement"}},{"Kind":"Components.Component","Name":"ShowOn","TypeName":"Syncfusion.Blazor.Inputs.TooltipShowOn","IsEnum":true,"Documentation":"\n            <summary>\n            It is used to determine the device mode to show the Tooltip.\n            If it is in desktop, it will show the Tooltip content when hovering on the target element.\n            If it is in touch device. It will show the Tooltip content when tap and holding on the target element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowOn"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderTooltip"}},{"HashCode":-236220451,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SliderTooltip","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            This class is used to set a tooltip for slider component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SliderTooltip"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            It is used to customize the Tooltip which accepts custom CSS class names that define\n             specific user-defined styles and themes to be applied on the Tooltip element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            It is used to customize the Tooltip content to the desired format\n             using internationalization or events (custom formatting).\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format"}},{"Kind":"Components.Component","Name":"IsVisible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            It is used to show or hide the Tooltip of Slider Component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsVisible"}},{"Kind":"Components.Component","Name":"Placement","TypeName":"Syncfusion.Blazor.Inputs.TooltipPlacement","IsEnum":true,"Documentation":"\n            <summary>\n            It is used to denote the position for the tooltip element in the Slider. The available options are:\n              Before - Tooltip is shown in the top of the horizontal slider bar or at the left of the vertical slider bar.\n              After - Tooltip is shown in the bottom of the horizontal slider bar or at the right of the vertical slider bar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placement"}},{"Kind":"Components.Component","Name":"ShowOn","TypeName":"Syncfusion.Blazor.Inputs.TooltipShowOn","IsEnum":true,"Documentation":"\n            <summary>\n            It is used to determine the device mode to show the Tooltip.\n            If it is in desktop, it will show the Tooltip content when hovering on the target element.\n            If it is in touch device. It will show the Tooltip content when tap and holding on the target element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowOn"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderTooltip","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1445772696,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SliderTooltip.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SliderTooltip"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderTooltip.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":505872190,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SliderTooltip.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.SliderTooltip"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SliderTooltip.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1280868688,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfTextBox","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            The TextBox is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n            <summary>\n            The TextBox is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n            <summary>\n            The TextBox is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n            <summary>\n            The TextBox is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfTextBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.FocusOutEventArgs>","Documentation":"\n            <summary>\n            Triggers when the TextBox has focus-out.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ChangedEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of TextBox has changed and gets focus-out.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the TextBox component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the TextBox component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.FocusInEventArgs>","Documentation":"\n            <summary>\n            Triggers when the TextBox gets focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Input","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.InputEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of TextBox has changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Input","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Autocomplete","TypeName":"Syncfusion.Blazor.Inputs.AutoComplete","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies whether the browser is allowed to automatically enter or select a value for the TextBox.\n            <para>By default, autocomplete is enabled for TextBox.</para>\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>On</term>\n            <description>Specifies that autocomplete is enabled</description>\n            </item>\n            <item>\n            <term>Off</term>\n            <description>Specifies that autocomplete is disabled.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Autocomplete"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the floating label behavior of the TextBox that the placeholder text floats above the TextBox based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the TextBox when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the TextBox.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the TextBox after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the boolean value whether the TextBox allows user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the TextBox allows user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the clear button is displayed in TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex"}},{"Kind":"Components.Component","Name":"Multiline","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that enables or disables the multiline on the TextBox.\n            The TextBox changes from a single line to multiline when enabling this multiline mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Multiline"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the root element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Inputs.InputType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the behavior of the TextBox such as text, password, email, and more.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfTextBox"}},{"HashCode":735268456,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfTextBox","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            The TextBox is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n            <summary>\n            The TextBox is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n            <summary>\n            The TextBox is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n            <summary>\n            The TextBox is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfTextBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.FocusOutEventArgs>","Documentation":"\n            <summary>\n            Triggers when the TextBox has focus-out.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ChangedEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of TextBox has changed and gets focus-out.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the TextBox component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the TextBox component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.FocusInEventArgs>","Documentation":"\n            <summary>\n            Triggers when the TextBox gets focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Input","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.InputEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of TextBox has changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Input","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Autocomplete","TypeName":"Syncfusion.Blazor.Inputs.AutoComplete","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies whether the browser is allowed to automatically enter or select a value for the TextBox.\n            <para>By default, autocomplete is enabled for TextBox.</para>\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>On</term>\n            <description>Specifies that autocomplete is enabled</description>\n            </item>\n            <item>\n            <term>Off</term>\n            <description>Specifies that autocomplete is disabled.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Autocomplete"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the floating label behavior of the TextBox that the placeholder text floats above the TextBox based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the TextBox when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the TextBox.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the TextBox after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the boolean value whether the TextBox allows user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the TextBox allows user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the clear button is displayed in TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex"}},{"Kind":"Components.Component","Name":"Multiline","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that enables or disables the multiline on the TextBox.\n            The TextBox changes from a single line to multiline when enabling this multiline mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Multiline"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the root element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Inputs.InputType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the behavior of the TextBox such as text, password, email, and more.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfTextBox","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1317638575,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfUploader","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            The uploader component is useful to upload images, documents, and other files to server.\n            The component is the extended version of HTML5 that is uploaded with multiple file selection, auto upload, drag and drop, progress bar, preload files, and validation.\n            </summary>\n            <summary>\n            Specifies the list of files that will be preloaded on rendering of uploader component.\n            </summary>\n            <summary>\n            Specifies the list of files that will be preloaded on rendering of uploader component.\n            </summary>\n            <summary>\n            The uploader component is useful to upload images, documents, and other files to server.\n            The component is the extended version of HTML5 that is uploaded with multiple file selection, auto upload, drag and drop, progress bar, preload files, and validation.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfUploader"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the Uploader component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowedExtensions","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the extensions of the file types allowed in the Uploader component and pass the extensions\n            with comma separators.\n            <para> For example,if you want to upload specific image files, pass `AllowedExtensions` as \".jpg,.png\".</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowedExtensions"}},{"Kind":"Components.Component","Name":"EnableHtmlSanitizer","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to prevent the cross site scripting code in filename or not.\n            </summary>\n            <value>\n            <c>true</c>, if the component prevents the cross site scripting code in filename; otherwise,<c>false</c>. The default value is <c>true</c>.       \n            </value>\n            <remarks>\n            The Enable HtmlSanitizer property removes the cross-site scripting code or functions from the filename and shows the validation error message to the user.\n            </remarks> \n        ","Metadata":{"Common.PropertyName":"EnableHtmlSanitizer"}},{"Kind":"Components.Component","Name":"AutoUpload","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            By default, the Uploader component initiates automatic upload when the files are added in upload queue.\n            <para>If you want to manipulate the files before uploading to server, disable the AutoUpload property.</para>\n            <para>The buttons \"upload\" and \"clear\" will be hided from file list when AutoUpload property is true.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AutoUpload"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with root element of the Uploader.\n            One or more custom CSS classes can be added to a Uploader.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"DirectoryUpload","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the folder of files can be browsed in the Uploader component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DirectoryUpload"}},{"Kind":"Components.Component","Name":"DropArea","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the drop target to handle the drag-and-drop upload.\n            By default, the Uploader creates wrapper around file input that will act as drop target.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DropArea"}},{"Kind":"Components.Component","Name":"DropEffect","TypeName":"Syncfusion.Blazor.Inputs.DropEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the drag operation effect to the Uploader component.\n            <para> Possible values are .</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Copy</term>\n            </item>\n            <item>\n            <term>Move</term>\n            </item>\n            <item>\n            <term>Link</term>\n            </item>\n            <item>\n            <term>None</term>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DropEffect"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable persisting Uploader state between page reloads. If enabled, the `Files` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering Uploader in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the Uploader allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            <para>You can add the additional html attributes such as styles, class, and more to the root element.</para>\n            <para>If you configured both property and equivalent html attributes, then the component considers the property value.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes"}},{"Kind":"Components.Component","Name":"MaxFileSize","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the maximum allowed file size to be uploaded in bytes.\n            The property used to make sure that you cannot upload too large files.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaxFileSize"}},{"Kind":"Components.Component","Name":"MinFileSize","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the minimum file size to be uploaded in bytes.\n            The property used to make sure that you cannot upload empty files and small files.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinFileSize"}},{"Kind":"Components.Component","Name":"AllowMultiple","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the multiple files can be browsed or dropped simultaneously in the Uploader component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowMultiple"}},{"Kind":"Components.Component","Name":"SequentialUpload","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            By default, the file Uploader component is processing the multiple files simultaneously.\n            <para>If SequentialUpload property is enabled, the file upload component performs the upload one after the other.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SequentialUpload"}},{"Kind":"Components.Component","Name":"ShowFileList","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the default file list can be rendered.\n            The property used to prevent default file list and design own template for file list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowFileList"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Inputs.FileInfo>","Documentation":"\n            <summary>\n            Specifies the HTML string that used to customize the content of each file in the list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Template","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfUploader"}},{"HashCode":-176954508,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.SfUploader","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            The uploader component is useful to upload images, documents, and other files to server.\n            The component is the extended version of HTML5 that is uploaded with multiple file selection, auto upload, drag and drop, progress bar, preload files, and validation.\n            </summary>\n            <summary>\n            Specifies the list of files that will be preloaded on rendering of uploader component.\n            </summary>\n            <summary>\n            Specifies the list of files that will be preloaded on rendering of uploader component.\n            </summary>\n            <summary>\n            The uploader component is useful to upload images, documents, and other files to server.\n            The component is the extended version of HTML5 that is uploaded with multiple file selection, auto upload, drag and drop, progress bar, preload files, and validation.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfUploader"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the Uploader component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowedExtensions","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the extensions of the file types allowed in the Uploader component and pass the extensions\n            with comma separators.\n            <para> For example,if you want to upload specific image files, pass `AllowedExtensions` as \".jpg,.png\".</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowedExtensions"}},{"Kind":"Components.Component","Name":"EnableHtmlSanitizer","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to prevent the cross site scripting code in filename or not.\n            </summary>\n            <value>\n            <c>true</c>, if the component prevents the cross site scripting code in filename; otherwise,<c>false</c>. The default value is <c>true</c>.       \n            </value>\n            <remarks>\n            The Enable HtmlSanitizer property removes the cross-site scripting code or functions from the filename and shows the validation error message to the user.\n            </remarks> \n        ","Metadata":{"Common.PropertyName":"EnableHtmlSanitizer"}},{"Kind":"Components.Component","Name":"AutoUpload","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            By default, the Uploader component initiates automatic upload when the files are added in upload queue.\n            <para>If you want to manipulate the files before uploading to server, disable the AutoUpload property.</para>\n            <para>The buttons \"upload\" and \"clear\" will be hided from file list when AutoUpload property is true.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AutoUpload"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with root element of the Uploader.\n            One or more custom CSS classes can be added to a Uploader.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"DirectoryUpload","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the folder of files can be browsed in the Uploader component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DirectoryUpload"}},{"Kind":"Components.Component","Name":"DropArea","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the drop target to handle the drag-and-drop upload.\n            By default, the Uploader creates wrapper around file input that will act as drop target.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DropArea"}},{"Kind":"Components.Component","Name":"DropEffect","TypeName":"Syncfusion.Blazor.Inputs.DropEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the drag operation effect to the Uploader component.\n            <para> Possible values are .</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Copy</term>\n            </item>\n            <item>\n            <term>Move</term>\n            </item>\n            <item>\n            <term>Link</term>\n            </item>\n            <item>\n            <term>None</term>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DropEffect"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable persisting Uploader state between page reloads. If enabled, the `Files` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering Uploader in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the Uploader allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            <para>You can add the additional html attributes such as styles, class, and more to the root element.</para>\n            <para>If you configured both property and equivalent html attributes, then the component considers the property value.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes"}},{"Kind":"Components.Component","Name":"MaxFileSize","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the maximum allowed file size to be uploaded in bytes.\n            The property used to make sure that you cannot upload too large files.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaxFileSize"}},{"Kind":"Components.Component","Name":"MinFileSize","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the minimum file size to be uploaded in bytes.\n            The property used to make sure that you cannot upload empty files and small files.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinFileSize"}},{"Kind":"Components.Component","Name":"AllowMultiple","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the multiple files can be browsed or dropped simultaneously in the Uploader component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowMultiple"}},{"Kind":"Components.Component","Name":"SequentialUpload","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            By default, the file Uploader component is processing the multiple files simultaneously.\n            <para>If SequentialUpload property is enabled, the file upload component performs the upload one after the other.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SequentialUpload"}},{"Kind":"Components.Component","Name":"ShowFileList","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the default file list can be rendered.\n            The property used to prevent default file list and design own template for file list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowFileList"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Inputs.FileInfo>","Documentation":"\n            <summary>\n            Specifies the HTML string that used to customize the content of each file in the list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Template","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.SfUploader","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-455716825,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfUploader.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfUploader"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfUploader.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-16739627,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfUploader.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.SfUploader"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfUploader.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-104267195,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfUploader.Template","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the HTML string that used to customize the content of each file in the list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"SfUploader"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfUploader.Template","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":512366287,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.SfUploader.Template","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the HTML string that used to customize the content of each file in the list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"Syncfusion.Blazor.Inputs.SfUploader"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.SfUploader.Template","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1152165165,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.UploaderAsyncSettings","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the Uploader Events of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"UploaderAsyncSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ChunkSize","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the ChunkSize to split the large file into chunks, and upload it to the server in a sequential order.\n            <para>If the ChunkSize property has value, the Uploader enables the chunk upload by default.\n            It must be specified in bytes value.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChunkSize"}},{"Kind":"Components.Component","Name":"RemoveUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the URL of remove action that receives the file information and handle the remove operation in server.\n            <para>The remove action type must be POST request and define \"RemoveFileNames\" attribute to get file information that will be removed.\n            This property is optional.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RemoveUrl"}},{"Kind":"Components.Component","Name":"RetryAfterDelay","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the delay time in milliseconds that the automatic retry happens after the delay.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RetryAfterDelay"}},{"Kind":"Components.Component","Name":"RetryCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the number of retries that the Uploader can perform on the file failed to upload.\n            By default, the Uploader set 3 as maximum retries. This property must be specified to prevent infinity looping.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RetryCount"}},{"Kind":"Components.Component","Name":"SaveUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the URL of save action that will receive the upload files and save in the server.\n            <para>The save action type must be POST request and define the argument as same input name used to render the component.\n            The upload operations could not perform without this property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SaveUrl"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderAsyncSettings"}},{"HashCode":-1211430215,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.UploaderAsyncSettings","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the Uploader Events of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.UploaderAsyncSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ChunkSize","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the ChunkSize to split the large file into chunks, and upload it to the server in a sequential order.\n            <para>If the ChunkSize property has value, the Uploader enables the chunk upload by default.\n            It must be specified in bytes value.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChunkSize"}},{"Kind":"Components.Component","Name":"RemoveUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the URL of remove action that receives the file information and handle the remove operation in server.\n            <para>The remove action type must be POST request and define \"RemoveFileNames\" attribute to get file information that will be removed.\n            This property is optional.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RemoveUrl"}},{"Kind":"Components.Component","Name":"RetryAfterDelay","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the delay time in milliseconds that the automatic retry happens after the delay.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RetryAfterDelay"}},{"Kind":"Components.Component","Name":"RetryCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the number of retries that the Uploader can perform on the file failed to upload.\n            By default, the Uploader set 3 as maximum retries. This property must be specified to prevent infinity looping.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RetryCount"}},{"Kind":"Components.Component","Name":"SaveUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the URL of save action that will receive the upload files and save in the server.\n            <para>The save action type must be POST request and define the argument as same input name used to render the component.\n            The upload operations could not perform without this property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SaveUrl"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderAsyncSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-611900796,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.UploaderAsyncSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"UploaderAsyncSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderAsyncSettings.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-72713517,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.UploaderAsyncSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.UploaderAsyncSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderAsyncSettings.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1583125172,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.UploaderButtons","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Customize the default text of browse, clear, and upload buttons with plain text.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"UploaderButtons"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Browse","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text or html content to browse button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Browse"}},{"Kind":"Components.Component","Name":"Clear","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text or html content to clear button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Clear"}},{"Kind":"Components.Component","Name":"Upload","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text or html content to upload button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Upload"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderButtons"}},{"HashCode":-1718260419,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.UploaderButtons","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Customize the default text of browse, clear, and upload buttons with plain text.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.UploaderButtons"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Browse","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text or html content to browse button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Browse"}},{"Kind":"Components.Component","Name":"Clear","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text or html content to clear button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Clear"}},{"Kind":"Components.Component","Name":"Upload","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text or html content to upload button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Upload"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderButtons","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-912107300,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.UploaderButtons.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"UploaderButtons"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderButtons.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1945746141,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.UploaderButtons.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.UploaderButtons"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderButtons.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1752990663,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.UploaderEvents","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the Uploader Events of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"UploaderEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ActionCompleteEventArgs>","Documentation":"\n            <summary>\n            Triggers after all the selected files has processed to upload successfully or failed to server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"BeforeRemove","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.BeforeRemoveEventArgs>","Documentation":"\n            <summary>\n            Triggers on remove the uploaded file. The event used to get confirm before remove the file from server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"BeforeRemove","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"BeforeUpload","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.BeforeUploadEventArgs>","Documentation":"\n            <summary>\n            Triggers when the upload process before. This event is used to add additional parameter with upload request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"BeforeUpload","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnCancel","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.CancelEventArgs>","Documentation":"\n            <summary>\n            Fires if cancel the chunk file uploading.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnCancel","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.UploadChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when changes occur in uploaded file list by selecting or dropping files.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnChunkFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.FailureEventArgs>","Documentation":"\n            <summary>\n            Fires if the chunk file failed to upload.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnChunkFailure","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnChunkSuccess","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SuccessEventArgs>","Documentation":"\n            <summary>\n            Fires when the chunk file uploaded successfully.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnChunkSuccess","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnChunkUploadStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.UploadingEventArgs>","Documentation":"\n            <summary>\n            Fires when every chunk upload process gets started. This event is used to add additional parameter with upload request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnChunkUploadStart","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClear","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ClearingEventArgs>","Documentation":"\n            <summary>\n            Triggers before clearing the items in file list when clicking \"clear\".\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClear","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.FailureEventArgs>","Documentation":"\n            <summary>\n            Triggers when the AJAX request fails on uploading or removing files.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnFailure","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFileListRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.FileListRenderingEventArgs>","Documentation":"\n            <summary>\n            Triggers before rendering each file item from the file list in a page.\n            It helps to customize specific file item structure.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnFileListRender","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Paused","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.PauseResumeEventArgs>","Documentation":"\n            <summary>\n            Fires if pause the chunk file uploading.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Paused","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Progressing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ProgressEventArgs>","Documentation":"\n            <summary>\n            Triggers when uploading a file to the server using the AJAX request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Progressing","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnRemove","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.RemovingEventArgs>","Documentation":"\n            <summary>\n            Triggers on removing the uploaded file. The event used to get confirm before removing the file from server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnRemove","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnResume","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.PauseResumeEventArgs>","Documentation":"\n            <summary>\n            Fires if resume the paused chunk file upload.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnResume","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"FileSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SelectedEventArgs>","Documentation":"\n            <summary>\n            Triggers after selecting or dropping the files by adding the files in upload queue.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FileSelected","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Success","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SuccessEventArgs>","Documentation":"\n            <summary>\n            Triggers when the AJAX request gets success on uploading files or removing files.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Success","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnUploadStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.UploadingEventArgs>","Documentation":"\n            <summary>\n            Triggers when the upload process gets started. This event is used to add additional parameter with upload request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnUploadStart","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderEvents"}},{"HashCode":-103419263,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.UploaderEvents","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the Uploader Events of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.UploaderEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ActionCompleteEventArgs>","Documentation":"\n            <summary>\n            Triggers after all the selected files has processed to upload successfully or failed to server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"BeforeRemove","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.BeforeRemoveEventArgs>","Documentation":"\n            <summary>\n            Triggers on remove the uploaded file. The event used to get confirm before remove the file from server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"BeforeRemove","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"BeforeUpload","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.BeforeUploadEventArgs>","Documentation":"\n            <summary>\n            Triggers when the upload process before. This event is used to add additional parameter with upload request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"BeforeUpload","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnCancel","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.CancelEventArgs>","Documentation":"\n            <summary>\n            Fires if cancel the chunk file uploading.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnCancel","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.UploadChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when changes occur in uploaded file list by selecting or dropping files.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnChunkFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.FailureEventArgs>","Documentation":"\n            <summary>\n            Fires if the chunk file failed to upload.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnChunkFailure","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnChunkSuccess","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SuccessEventArgs>","Documentation":"\n            <summary>\n            Fires when the chunk file uploaded successfully.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnChunkSuccess","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnChunkUploadStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.UploadingEventArgs>","Documentation":"\n            <summary>\n            Fires when every chunk upload process gets started. This event is used to add additional parameter with upload request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnChunkUploadStart","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClear","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ClearingEventArgs>","Documentation":"\n            <summary>\n            Triggers before clearing the items in file list when clicking \"clear\".\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClear","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.FailureEventArgs>","Documentation":"\n            <summary>\n            Triggers when the AJAX request fails on uploading or removing files.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnFailure","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFileListRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.FileListRenderingEventArgs>","Documentation":"\n            <summary>\n            Triggers before rendering each file item from the file list in a page.\n            It helps to customize specific file item structure.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnFileListRender","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Paused","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.PauseResumeEventArgs>","Documentation":"\n            <summary>\n            Fires if pause the chunk file uploading.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Paused","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Progressing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.ProgressEventArgs>","Documentation":"\n            <summary>\n            Triggers when uploading a file to the server using the AJAX request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Progressing","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnRemove","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.RemovingEventArgs>","Documentation":"\n            <summary>\n            Triggers on removing the uploaded file. The event used to get confirm before removing the file from server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnRemove","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnResume","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.PauseResumeEventArgs>","Documentation":"\n            <summary>\n            Fires if resume the paused chunk file upload.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnResume","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"FileSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SelectedEventArgs>","Documentation":"\n            <summary>\n            Triggers after selecting or dropping the files by adding the files in upload queue.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FileSelected","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Success","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.SuccessEventArgs>","Documentation":"\n            <summary>\n            Triggers when the AJAX request gets success on uploading files or removing files.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Success","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnUploadStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.UploadingEventArgs>","Documentation":"\n            <summary>\n            Triggers when the upload process gets started. This event is used to add additional parameter with upload request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnUploadStart","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderEvents","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":725463239,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.UploaderFiles","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the list of files that will be preloaded on rendering of uploader component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"UploaderFiles"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderFiles"}},{"HashCode":-1503035440,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.UploaderFiles","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the list of files that will be preloaded on rendering of uploader component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.UploaderFiles"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderFiles","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1719129017,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.UploaderFiles.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"UploaderFiles"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderFiles.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":294684717,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.UploaderFiles.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.UploaderFiles"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderFiles.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":360428907,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.UploaderUploadedFiles","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the list of files that will be preloaded on rendering of uploader component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"UploaderUploadedFiles"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the name of the file.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Name"}},{"Kind":"Components.Component","Name":"Size","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the size of the file.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Size"}},{"Kind":"Components.Component","Name":"Type","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the type of the file.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderUploadedFiles"}},{"HashCode":-1988467770,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.UploaderUploadedFiles","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the list of files that will be preloaded on rendering of uploader component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.UploaderUploadedFiles"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the name of the file.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Name"}},{"Kind":"Components.Component","Name":"Size","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the size of the file.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Size"}},{"Kind":"Components.Component","Name":"Type","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the type of the file.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderUploadedFiles","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2045974733,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.UploaderUploadedFiles.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"UploaderUploadedFiles"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderUploadedFiles.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1088030669,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.UploaderUploadedFiles.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.UploaderUploadedFiles"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderUploadedFiles.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1554001230,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.UploaderTemplates","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"UploaderTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n             <summary>\n             Specifies the content that has to be passed.\n             </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Inputs.FileInfo>","Metadata":{"Common.PropertyName":"Template","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderTemplates"}},{"HashCode":80168541,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.UploaderTemplates","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.UploaderTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n             <summary>\n             Specifies the content that has to be passed.\n             </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Inputs.FileInfo>","Metadata":{"Common.PropertyName":"Template","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderTemplates","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-62529716,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.UploaderTemplates.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n             <summary>\n             Specifies the content that has to be passed.\n             </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"UploaderTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderTemplates.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1510301704,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.UploaderTemplates.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n             <summary>\n             Specifies the content that has to be passed.\n             </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.UploaderTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderTemplates.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":653093715,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.UploaderTemplates.Template","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"UploaderTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderTemplates.Template","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-91636147,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.UploaderTemplates.Template","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"Syncfusion.Blazor.Inputs.UploaderTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.UploaderTemplates.Template","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1092512826,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs._Imports","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"_Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs._Imports"}},{"HashCode":1777854659,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs._Imports","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs._Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs._Imports","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1106374745,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Internal.SfInputBase","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            The SfInputBase is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n            <summary>\n            The SfInputBase is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n            <summary>\n            The SfInputBase is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfInputBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"BindClearBtnEvents","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Triggers when the clear gets clicked.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"BindClearBtnEvents","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"BindClearBtnTouchEvents","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"\n            <summary>\n            Triggers when the clear icon gets touch.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"BindClearBtnTouchEvents","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"MouseDownOnSpinner","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Triggers when the spin down gets click.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MouseDownOnSpinner","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"TouchDownOnSpinner","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"\n            <summary>\n            Triggers when the spin down icon gets touch.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"TouchDownOnSpinner","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"MouseUpOnSpinner","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Triggers when the spin up gets clicked.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MouseUpOnSpinner","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"TouchUpOnSpinner","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"\n            <summary>\n            Triggers when the spin up icon gets touch.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"TouchUpOnSpinner","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"MouseIconHandler","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.Internal.IconHandlerArgs>","Documentation":"\n            <summary>\n            Triggers when the icon gets click.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MouseIconHandler","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"TouchIconHandler","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.Internal.IconHandlerArgs>","Documentation":"\n            <summary>\n            Triggers when the icon get touch.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"TouchIconHandler","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"MouseContainerHandler","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Triggers when the container gets click.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MouseContainerHandler","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnContainerBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the container gets focus out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnContainerBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnContainerFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the container gets focused.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnContainerFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ContainerKeypress","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the container key pressed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ContainerKeypress","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"Autocomplete","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies whether the browser is allowed to automatically enter or select a value for the TextBox.\n            <para>By default, autocomplete is enabled for TextBox.</para>\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>On</term>\n            <description>Specifies that autocomplete is enabled</description>\n            </item>\n            <item>\n            <term>Off</term>\n            <description>Specifies that autocomplete is disabled.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Autocomplete"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the floating label behavior of the TextBox that the placeholder text floats above the TextBox based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the TextBox when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the TextBox.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the TextBox after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the root element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes"}},{"Kind":"Components.Component","Name":"Multiline","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that enables or disables the multiline on the TextBox.\n            The TextBox changes from a single line to multiline when enabling this multiline mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Multiline"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the boolean value whether the TextBox allows user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the TextBox allows user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly"}},{"Kind":"Components.Component","Name":"IsReadOnlyInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value for dropdownlist default readonly property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsReadOnlyInput"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the clear button is displayed in TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton"}},{"Kind":"Components.Component","Name":"Type","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the behavior of the TextBox such as text, password, email, and more.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex"}},{"Kind":"Components.Component","Name":"ContainerAttr","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Specifies the container attrubute of Input.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ContainerAttr"}},{"Kind":"Components.Component","Name":"Buttons","TypeName":"System.Collections.Generic.List<System.String>","Documentation":"\n            <summary>\n            Specifies the icon of the TextBox component.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Buttons"}},{"Kind":"Components.Component","Name":"PrependButtons","TypeName":"System.Collections.Generic.List<System.String>","Documentation":"\n            <summary>\n            Specifies the prepend icon of the TextBox component.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"PrependButtons"}},{"Kind":"Components.Component","Name":"SpinButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that enable or disable the spin button on the component.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"SpinButton"}},{"Kind":"Components.Component","Name":"ContainerClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the class value that is appended to container of TextBox.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ContainerClass"}},{"Kind":"Components.Component","Name":"IsValueTemplate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the value template is displayed in TextBox.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsValueTemplate"}},{"Kind":"Components.Component","Name":"RootClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or Set the component class to element.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"RootClass"}},{"Kind":"Components.Component","Name":"ClickStopPropagation","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the prevents the click actions.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ClickStopPropagation"}},{"Kind":"Components.Component","Name":"MouseDowSpinnerPrevent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the prevents the mouse actions.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MouseDowSpinnerPrevent"}},{"Kind":"Components.Component","Name":"PreventIconHandler","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the prevents the icon actions.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"PreventIconHandler"}},{"Kind":"Components.Component","Name":"PreventTouchIconHandler","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether to prevent the touch action in icon.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"PreventTouchIconHandler"}},{"Kind":"Components.Component","Name":"MousePreventContainer","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the prevents the container actions.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MousePreventContainer"}},{"Kind":"Components.Component","Name":"IsShowSpinnerOnClear","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the spinner show on clear icon.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsShowSpinnerOnClear"}},{"Kind":"Components.Component","Name":"IsShowSpinnerOnIcon","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the spinner show on dropdown icon.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsShowSpinnerOnIcon"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.SfInputBase"}},{"HashCode":-2077388744,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Internal.SfInputBase","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            The SfInputBase is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n            <summary>\n            The SfInputBase is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n            <summary>\n            The SfInputBase is an input element that allows to get input from the user. It allows the user to edit or display the text value.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.Internal.SfInputBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content is paste into an input.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnPaste","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input has focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"BindClearBtnEvents","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Triggers when the clear gets clicked.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"BindClearBtnEvents","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"BindClearBtnTouchEvents","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"\n            <summary>\n            Triggers when the clear icon gets touch.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"BindClearBtnTouchEvents","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"MouseDownOnSpinner","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Triggers when the spin down gets click.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MouseDownOnSpinner","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"TouchDownOnSpinner","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"\n            <summary>\n            Triggers when the spin down icon gets touch.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"TouchDownOnSpinner","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"MouseUpOnSpinner","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Triggers when the spin up gets clicked.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MouseUpOnSpinner","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"TouchUpOnSpinner","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"\n            <summary>\n            Triggers when the spin up icon gets touch.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"TouchUpOnSpinner","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"MouseIconHandler","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.Internal.IconHandlerArgs>","Documentation":"\n            <summary>\n            Triggers when the icon gets click.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MouseIconHandler","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"TouchIconHandler","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.Internal.IconHandlerArgs>","Documentation":"\n            <summary>\n            Triggers when the icon get touch.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"TouchIconHandler","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"MouseContainerHandler","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Triggers when the container gets click.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MouseContainerHandler","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnContainerBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the container gets focus out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnContainerBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnContainerFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the container gets focused.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnContainerFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ContainerKeypress","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the container key pressed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ContainerKeypress","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"Autocomplete","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies whether the browser is allowed to automatically enter or select a value for the TextBox.\n            <para>By default, autocomplete is enabled for TextBox.</para>\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>On</term>\n            <description>Specifies that autocomplete is enabled</description>\n            </item>\n            <item>\n            <term>Off</term>\n            <description>Specifies that autocomplete is disabled.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Autocomplete"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the TextBox. One or more custom CSS classes can be added to a TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting TextBox state between page reloads. If enabled, the `Value` state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the TextBox allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the floating label behavior of the TextBox that the placeholder text floats above the TextBox based on the following values.\n            <para>Possible values are:</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the TextBox when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the TextBox.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the TextBox after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the root element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            If you configured both property and equivalent input attribute, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes"}},{"Kind":"Components.Component","Name":"Multiline","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that enables or disables the multiline on the TextBox.\n            The TextBox changes from a single line to multiline when enabling this multiline mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Multiline"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the boolean value whether the TextBox allows user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the TextBox allows user to change the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly"}},{"Kind":"Components.Component","Name":"IsReadOnlyInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value for dropdownlist default readonly property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsReadOnlyInput"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the clear button is displayed in TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton"}},{"Kind":"Components.Component","Name":"Type","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the behavior of the TextBox such as text, password, email, and more.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets the content of the TextBox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the TextBox component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex"}},{"Kind":"Components.Component","Name":"ContainerAttr","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Specifies the container attrubute of Input.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ContainerAttr"}},{"Kind":"Components.Component","Name":"Buttons","TypeName":"System.Collections.Generic.List<System.String>","Documentation":"\n            <summary>\n            Specifies the icon of the TextBox component.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Buttons"}},{"Kind":"Components.Component","Name":"PrependButtons","TypeName":"System.Collections.Generic.List<System.String>","Documentation":"\n            <summary>\n            Specifies the prepend icon of the TextBox component.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"PrependButtons"}},{"Kind":"Components.Component","Name":"SpinButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that enable or disable the spin button on the component.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"SpinButton"}},{"Kind":"Components.Component","Name":"ContainerClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the class value that is appended to container of TextBox.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ContainerClass"}},{"Kind":"Components.Component","Name":"IsValueTemplate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the value template is displayed in TextBox.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsValueTemplate"}},{"Kind":"Components.Component","Name":"RootClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or Set the component class to element.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"RootClass"}},{"Kind":"Components.Component","Name":"ClickStopPropagation","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the prevents the click actions.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ClickStopPropagation"}},{"Kind":"Components.Component","Name":"MouseDowSpinnerPrevent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the prevents the mouse actions.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MouseDowSpinnerPrevent"}},{"Kind":"Components.Component","Name":"PreventIconHandler","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the prevents the icon actions.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"PreventIconHandler"}},{"Kind":"Components.Component","Name":"PreventTouchIconHandler","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether to prevent the touch action in icon.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"PreventTouchIconHandler"}},{"Kind":"Components.Component","Name":"MousePreventContainer","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the prevents the container actions.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"MousePreventContainer"}},{"Kind":"Components.Component","Name":"IsShowSpinnerOnClear","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the spinner show on clear icon.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsShowSpinnerOnClear"}},{"Kind":"Components.Component","Name":"IsShowSpinnerOnIcon","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the spinner show on dropdown icon.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IsShowSpinnerOnIcon"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.SfInputBase","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1501078910,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.Internal.SfInputBase.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfInputBase"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.SfInputBase.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1306046767,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.Internal.SfInputBase.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.Internal.SfInputBase"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.SfInputBase.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1342733588,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Internal.ColorPickerBase","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ColorPickerBase"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.ColorPickerBase"}},{"HashCode":-1333289265,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Internal.ColorPickerBase","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.Internal.ColorPickerBase"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.ColorPickerBase","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1530620294,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Internal.ColorPicker","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ColorPicker"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.ColorPicker"}},{"HashCode":557382643,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Internal.ColorPicker","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.Internal.ColorPicker"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.ColorPicker","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":635166643,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Internal.ColorPalette","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ColorPalette"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.ColorPalette"}},{"HashCode":-1935446669,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Internal.ColorPalette","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.Internal.ColorPalette"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.ColorPalette","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1228961191,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Internal.ColorPickerTextBox","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ColorPickerTextBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.Internal.InputChange>","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.ColorPickerTextBox"}},{"HashCode":-1996237019,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Internal.ColorPickerTextBox","AssemblyName":"Syncfusion.Blazor.Inputs","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.Internal.ColorPickerTextBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Inputs.Internal.InputChange>","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.ColorPickerTextBox","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-852182139,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            This class is used to render ticks to slider component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SliderTicksRender"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Public fiels ChildContent.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender"}},{"HashCode":-957934746,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            This class is used to render ticks to slider component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Public fiels ChildContent.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1155889312,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <exclude />\n            <summary>\n            Public fiels ChildContent.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SliderTicksRender"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-561415953,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender.ChildContent","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <exclude />\n            <summary>\n            Public fiels ChildContent.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Inputs.Slider.Internal.SliderTicksRender.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-160957173,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Slider.Internal.TickElement","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the Partial class TickElement.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TickElement"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ClassName","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the ClassName.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ClassName"}},{"Kind":"Components.Component","Name":"Styles","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the Styles.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Styles"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the Value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"FormattedValue","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the FormattedValue.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FormattedValue"}},{"Kind":"Components.Component","Name":"IsSmallTick","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the IsSmallTick.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsSmallTick"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Slider.Internal.TickElement"}},{"HashCode":2080413924,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Inputs.Slider.Internal.TickElement","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"\n            <summary>\n            Specifies the Partial class TickElement.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.Slider.Internal.TickElement"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ClassName","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the ClassName.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ClassName"}},{"Kind":"Components.Component","Name":"Styles","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the Styles.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Styles"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the Value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"FormattedValue","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the FormattedValue.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FormattedValue"}},{"Kind":"Components.Component","Name":"IsSmallTick","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the IsSmallTick.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsSmallTick"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Inputs.Slider.Internal.TickElement","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":995926337,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DataManager","AssemblyName":"Syncfusion.Blazor.Data","Documentation":"\n            <summary>\n            The DataManager is a data management component used for performing data operations in applications.\n            It acts as an abstraction for using local data source - IEnumerable and remote data source - web services returning JSON or oData.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DataManager"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"HttpClientInstance","TypeName":"System.Net.Http.HttpClient","Documentation":"\n            <summary>\n            Specifies the HttpClient instance to be used  by DataManager.\n            </summary>\n            <remarks>Use HttpClientInstance property to inject named HttpClient into DataManager.</remarks>\n        ","Metadata":{"Common.PropertyName":"HttpClientInstance"}},{"Kind":"Components.Component","Name":"Url","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the endpoint URL. DataManager requests this URL when data is needed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Url"}},{"Kind":"Components.Component","Name":"AdaptorInstance","TypeName":"System.Type","Documentation":"\n            <summary>\n            Specifies the custom adaptor class type. DataManager uses this type value to instantiate custom adaptor class.\n            </summary>\n            <remarks>DataManager uses Activator.CreateInstance method to create custom adaptor instance.\n            Injecting services into custom adaptor class, is not supported while using this approach.\n            To inject and use services, provide custom adaptor as a Blazor component by extending DataAdaptor class.</remarks>\n        ","Metadata":{"Common.PropertyName":"AdaptorInstance"}},{"Kind":"Components.Component","Name":"Adaptor","TypeName":"Syncfusion.Blazor.Adaptors","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the data adaptor to be used by DataManager.\n            <list type=\"bullet\">\n            <item>\n            <term>BlazorAdaptor</term>\n            <description>Default. BlazorAdaptor is used to process Enumerable data. It contains methods to process the given collection based on the queries.</description>\n            </item>\n            <item>\n            <term>ODataAdaptor</term>\n            <description>\n            OData Adaptor provies ability to consume and manipulate data from OData services.\n            </description>\n            </item>\n            <item>\n            <term>ODataV4Adaptor</term>\n            <description>\n            ODatav4 Adaptor provies ability to consume and manipulate data from OData v4 services\n            </description>\n            </item>\n            <item>\n            <term>WebApiAdaptor</term>\n            <description>\n            WebApi Adaptor provies ability to consume and manipulate data from WebApi services.\n            This adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor\n            </description>\n            </item>\n            <item>\n            <term>UrlAdaptor</term>\n            <description>\n            URL Adaptor is used when you are required to interact with all kind of remote services to retrieve data.\n            </description>\n            </item>\n            <item>\n            <term>RemoteSaveAdaptor</term>\n            <description>\n            Remote Save Adaptor is used for binding JSON data.\n            It interacts with remote services only for CRUD operations.\n            </description>\n            </item>\n            <item>\n            <term>CustomAdaptor</term>\n            <description>\n            CustomAdaptor specifies that own data query and manipulation logic has been provided using custom adaptor component\n            extended from DataAdaptor class.\n            </description>\n            </item>\n            <item>\n            <term>JsonAdaptor</term>\n            <description>\n            JsonAdaptor is used to process JSON data at the client side. It contains methods to process the given JSON data based on the queries.\n            </description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Adaptor"}},{"Kind":"Components.Component","Name":"DataAdaptor","TypeName":"Syncfusion.Blazor.Data.IAdaptor","Documentation":"\n            <summary>\n            Holds adaptor instance.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"DataAdaptor"}},{"Kind":"Components.Component","Name":"InsertUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the insert URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Insert method is called, request will be made to InsertUrl.\n            If InsertUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"InsertUrl"}},{"Kind":"Components.Component","Name":"RemoveUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the remove URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Remove method is called, request will be made to RemoveUrl.\n            If RemoveUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"RemoveUrl"}},{"Kind":"Components.Component","Name":"UpdateUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the update URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Update method is called, request will be made to UpdateUrl.\n            If UpdateUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"UpdateUrl"}},{"Kind":"Components.Component","Name":"CrudUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CRUD URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Insert, Remove or Update method is called, request will be made to CrudUrl.\n            If CrudUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"CrudUrl"}},{"Kind":"Components.Component","Name":"BatchUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the batch url.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When SaveChanges method is called, request will be made to BatchUrl.\n            If BatchUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"BatchUrl"}},{"Kind":"Components.Component","Name":"Json","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Documentation":"\n            <summary>\n            Specifies the IEnumerable collection. This data could be queried and manipulated.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Json"}},{"Kind":"Components.Component","Name":"Headers","TypeName":"System.Collections.Generic.IDictionary<System.String, System.String>","Documentation":"\n            <summary>\n            Specifies the key/value pair of headers.\n            </summary>\n            <remarks>\n            Use Headers to add any custom headers to the request made by DataManager.\n            Users can also send authentication bearer token using Headers property.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Headers"}},{"Kind":"Components.Component","Name":"Accept","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the accept type.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Accept"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Object","Documentation":"\n            <summary>\n            Specifies the IEnumerale data.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Data"}},{"Kind":"Components.Component","Name":"TimeTillExpiration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time limit to clear the cached data.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TimeTillExpiration"}},{"Kind":"Components.Component","Name":"CachingPageSize","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the caching page size.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CachingPageSize"}},{"Kind":"Components.Component","Name":"EnableCaching","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables data caching.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableCaching"}},{"Kind":"Components.Component","Name":"RequestType","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the request type for sending data fetching.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"RequestType"}},{"Kind":"Components.Component","Name":"Key","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the primary key value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Key"}},{"Kind":"Components.Component","Name":"CrossDomain","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            When true, then indicates that the request is a cross-domain request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CrossDomain"}},{"Kind":"Components.Component","Name":"Jsonp","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the jsonp request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Jsonp"}},{"Kind":"Components.Component","Name":"DataType","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the data type.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataType"}},{"Kind":"Components.Component","Name":"Offline","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables offline mode in datamanager.\n            </summary>\n            <remarks>\n            Applicable for remote data source. If offline is true then initial request will be made to fetch\n            data. Further actions will be handled at the in-memory data and no more request will be made to the service.\n            Cached data is stored in the JSON property.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Offline"}},{"Kind":"Components.Component","Name":"RequiresFormat","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Sepcifies requires format.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RequiresFormat"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DataManager"}},{"HashCode":-690500929,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DataManager","AssemblyName":"Syncfusion.Blazor.Data","Documentation":"\n            <summary>\n            The DataManager is a data management component used for performing data operations in applications.\n            It acts as an abstraction for using local data source - IEnumerable and remote data source - web services returning JSON or oData.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DataManager"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"HttpClientInstance","TypeName":"System.Net.Http.HttpClient","Documentation":"\n            <summary>\n            Specifies the HttpClient instance to be used  by DataManager.\n            </summary>\n            <remarks>Use HttpClientInstance property to inject named HttpClient into DataManager.</remarks>\n        ","Metadata":{"Common.PropertyName":"HttpClientInstance"}},{"Kind":"Components.Component","Name":"Url","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the endpoint URL. DataManager requests this URL when data is needed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Url"}},{"Kind":"Components.Component","Name":"AdaptorInstance","TypeName":"System.Type","Documentation":"\n            <summary>\n            Specifies the custom adaptor class type. DataManager uses this type value to instantiate custom adaptor class.\n            </summary>\n            <remarks>DataManager uses Activator.CreateInstance method to create custom adaptor instance.\n            Injecting services into custom adaptor class, is not supported while using this approach.\n            To inject and use services, provide custom adaptor as a Blazor component by extending DataAdaptor class.</remarks>\n        ","Metadata":{"Common.PropertyName":"AdaptorInstance"}},{"Kind":"Components.Component","Name":"Adaptor","TypeName":"Syncfusion.Blazor.Adaptors","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the data adaptor to be used by DataManager.\n            <list type=\"bullet\">\n            <item>\n            <term>BlazorAdaptor</term>\n            <description>Default. BlazorAdaptor is used to process Enumerable data. It contains methods to process the given collection based on the queries.</description>\n            </item>\n            <item>\n            <term>ODataAdaptor</term>\n            <description>\n            OData Adaptor provies ability to consume and manipulate data from OData services.\n            </description>\n            </item>\n            <item>\n            <term>ODataV4Adaptor</term>\n            <description>\n            ODatav4 Adaptor provies ability to consume and manipulate data from OData v4 services\n            </description>\n            </item>\n            <item>\n            <term>WebApiAdaptor</term>\n            <description>\n            WebApi Adaptor provies ability to consume and manipulate data from WebApi services.\n            This adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor\n            </description>\n            </item>\n            <item>\n            <term>UrlAdaptor</term>\n            <description>\n            URL Adaptor is used when you are required to interact with all kind of remote services to retrieve data.\n            </description>\n            </item>\n            <item>\n            <term>RemoteSaveAdaptor</term>\n            <description>\n            Remote Save Adaptor is used for binding JSON data.\n            It interacts with remote services only for CRUD operations.\n            </description>\n            </item>\n            <item>\n            <term>CustomAdaptor</term>\n            <description>\n            CustomAdaptor specifies that own data query and manipulation logic has been provided using custom adaptor component\n            extended from DataAdaptor class.\n            </description>\n            </item>\n            <item>\n            <term>JsonAdaptor</term>\n            <description>\n            JsonAdaptor is used to process JSON data at the client side. It contains methods to process the given JSON data based on the queries.\n            </description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Adaptor"}},{"Kind":"Components.Component","Name":"DataAdaptor","TypeName":"Syncfusion.Blazor.Data.IAdaptor","Documentation":"\n            <summary>\n            Holds adaptor instance.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"DataAdaptor"}},{"Kind":"Components.Component","Name":"InsertUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the insert URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Insert method is called, request will be made to InsertUrl.\n            If InsertUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"InsertUrl"}},{"Kind":"Components.Component","Name":"RemoveUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the remove URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Remove method is called, request will be made to RemoveUrl.\n            If RemoveUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"RemoveUrl"}},{"Kind":"Components.Component","Name":"UpdateUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the update URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Update method is called, request will be made to UpdateUrl.\n            If UpdateUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"UpdateUrl"}},{"Kind":"Components.Component","Name":"CrudUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CRUD URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Insert, Remove or Update method is called, request will be made to CrudUrl.\n            If CrudUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"CrudUrl"}},{"Kind":"Components.Component","Name":"BatchUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the batch url.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When SaveChanges method is called, request will be made to BatchUrl.\n            If BatchUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"BatchUrl"}},{"Kind":"Components.Component","Name":"Json","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Documentation":"\n            <summary>\n            Specifies the IEnumerable collection. This data could be queried and manipulated.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Json"}},{"Kind":"Components.Component","Name":"Headers","TypeName":"System.Collections.Generic.IDictionary<System.String, System.String>","Documentation":"\n            <summary>\n            Specifies the key/value pair of headers.\n            </summary>\n            <remarks>\n            Use Headers to add any custom headers to the request made by DataManager.\n            Users can also send authentication bearer token using Headers property.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Headers"}},{"Kind":"Components.Component","Name":"Accept","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the accept type.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Accept"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Object","Documentation":"\n            <summary>\n            Specifies the IEnumerale data.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Data"}},{"Kind":"Components.Component","Name":"TimeTillExpiration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time limit to clear the cached data.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TimeTillExpiration"}},{"Kind":"Components.Component","Name":"CachingPageSize","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the caching page size.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CachingPageSize"}},{"Kind":"Components.Component","Name":"EnableCaching","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables data caching.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableCaching"}},{"Kind":"Components.Component","Name":"RequestType","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the request type for sending data fetching.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"RequestType"}},{"Kind":"Components.Component","Name":"Key","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the primary key value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Key"}},{"Kind":"Components.Component","Name":"CrossDomain","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            When true, then indicates that the request is a cross-domain request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CrossDomain"}},{"Kind":"Components.Component","Name":"Jsonp","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the jsonp request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Jsonp"}},{"Kind":"Components.Component","Name":"DataType","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the data type.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataType"}},{"Kind":"Components.Component","Name":"Offline","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables offline mode in datamanager.\n            </summary>\n            <remarks>\n            Applicable for remote data source. If offline is true then initial request will be made to fetch\n            data. Further actions will be handled at the in-memory data and no more request will be made to the service.\n            Cached data is stored in the JSON property.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Offline"}},{"Kind":"Components.Component","Name":"RequiresFormat","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Sepcifies requires format.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RequiresFormat"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DataManager","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1471269533,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DataManager.ChildContent","AssemblyName":"Syncfusion.Blazor.Data","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"DataManager"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DataManager.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1484241928,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DataManager.ChildContent","AssemblyName":"Syncfusion.Blazor.Data","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.DataManager"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DataManager.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2083964401,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Data.SfDataManager","AssemblyName":"Syncfusion.Blazor.Data","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDataManager"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"HttpClientInstance","TypeName":"System.Net.Http.HttpClient","Documentation":"\n            <summary>\n            Specifies the HttpClient instance to be used  by DataManager.\n            </summary>\n            <remarks>Use HttpClientInstance property to inject named HttpClient into DataManager.</remarks>\n        ","Metadata":{"Common.PropertyName":"HttpClientInstance"}},{"Kind":"Components.Component","Name":"Url","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the endpoint URL. DataManager requests this URL when data is needed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Url"}},{"Kind":"Components.Component","Name":"AdaptorInstance","TypeName":"System.Type","Documentation":"\n            <summary>\n            Specifies the custom adaptor class type. DataManager uses this type value to instantiate custom adaptor class.\n            </summary>\n            <remarks>DataManager uses Activator.CreateInstance method to create custom adaptor instance.\n            Injecting services into custom adaptor class, is not supported while using this approach.\n            To inject and use services, provide custom adaptor as a Blazor component by extending DataAdaptor class.</remarks>\n        ","Metadata":{"Common.PropertyName":"AdaptorInstance"}},{"Kind":"Components.Component","Name":"Adaptor","TypeName":"Syncfusion.Blazor.Adaptors","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the data adaptor to be used by DataManager.\n            <list type=\"bullet\">\n            <item>\n            <term>BlazorAdaptor</term>\n            <description>Default. BlazorAdaptor is used to process Enumerable data. It contains methods to process the given collection based on the queries.</description>\n            </item>\n            <item>\n            <term>ODataAdaptor</term>\n            <description>\n            OData Adaptor provies ability to consume and manipulate data from OData services.\n            </description>\n            </item>\n            <item>\n            <term>ODataV4Adaptor</term>\n            <description>\n            ODatav4 Adaptor provies ability to consume and manipulate data from OData v4 services\n            </description>\n            </item>\n            <item>\n            <term>WebApiAdaptor</term>\n            <description>\n            WebApi Adaptor provies ability to consume and manipulate data from WebApi services.\n            This adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor\n            </description>\n            </item>\n            <item>\n            <term>UrlAdaptor</term>\n            <description>\n            URL Adaptor is used when you are required to interact with all kind of remote services to retrieve data.\n            </description>\n            </item>\n            <item>\n            <term>RemoteSaveAdaptor</term>\n            <description>\n            Remote Save Adaptor is used for binding JSON data.\n            It interacts with remote services only for CRUD operations.\n            </description>\n            </item>\n            <item>\n            <term>CustomAdaptor</term>\n            <description>\n            CustomAdaptor specifies that own data query and manipulation logic has been provided using custom adaptor component\n            extended from DataAdaptor class.\n            </description>\n            </item>\n            <item>\n            <term>JsonAdaptor</term>\n            <description>\n            JsonAdaptor is used to process JSON data at the client side. It contains methods to process the given JSON data based on the queries.\n            </description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Adaptor"}},{"Kind":"Components.Component","Name":"DataAdaptor","TypeName":"Syncfusion.Blazor.Data.IAdaptor","Documentation":"\n            <summary>\n            Holds adaptor instance.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"DataAdaptor"}},{"Kind":"Components.Component","Name":"InsertUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the insert URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Insert method is called, request will be made to InsertUrl.\n            If InsertUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"InsertUrl"}},{"Kind":"Components.Component","Name":"RemoveUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the remove URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Remove method is called, request will be made to RemoveUrl.\n            If RemoveUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"RemoveUrl"}},{"Kind":"Components.Component","Name":"UpdateUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the update URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Update method is called, request will be made to UpdateUrl.\n            If UpdateUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"UpdateUrl"}},{"Kind":"Components.Component","Name":"CrudUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CRUD URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Insert, Remove or Update method is called, request will be made to CrudUrl.\n            If CrudUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"CrudUrl"}},{"Kind":"Components.Component","Name":"BatchUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the batch url.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When SaveChanges method is called, request will be made to BatchUrl.\n            If BatchUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"BatchUrl"}},{"Kind":"Components.Component","Name":"Json","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Documentation":"\n            <summary>\n            Specifies the IEnumerable collection. This data could be queried and manipulated.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Json"}},{"Kind":"Components.Component","Name":"Headers","TypeName":"System.Collections.Generic.IDictionary<System.String, System.String>","Documentation":"\n            <summary>\n            Specifies the key/value pair of headers.\n            </summary>\n            <remarks>\n            Use Headers to add any custom headers to the request made by DataManager.\n            Users can also send authentication bearer token using Headers property.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Headers"}},{"Kind":"Components.Component","Name":"Accept","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the accept type.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Accept"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Object","Documentation":"\n            <summary>\n            Specifies the IEnumerale data.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Data"}},{"Kind":"Components.Component","Name":"TimeTillExpiration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time limit to clear the cached data.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TimeTillExpiration"}},{"Kind":"Components.Component","Name":"CachingPageSize","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the caching page size.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CachingPageSize"}},{"Kind":"Components.Component","Name":"EnableCaching","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables data caching.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableCaching"}},{"Kind":"Components.Component","Name":"RequestType","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the request type for sending data fetching.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"RequestType"}},{"Kind":"Components.Component","Name":"Key","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the primary key value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Key"}},{"Kind":"Components.Component","Name":"CrossDomain","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            When true, then indicates that the request is a cross-domain request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CrossDomain"}},{"Kind":"Components.Component","Name":"Jsonp","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the jsonp request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Jsonp"}},{"Kind":"Components.Component","Name":"DataType","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the data type.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataType"}},{"Kind":"Components.Component","Name":"Offline","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables offline mode in datamanager.\n            </summary>\n            <remarks>\n            Applicable for remote data source. If offline is true then initial request will be made to fetch\n            data. Further actions will be handled at the in-memory data and no more request will be made to the service.\n            Cached data is stored in the JSON property.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Offline"}},{"Kind":"Components.Component","Name":"RequiresFormat","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Sepcifies requires format.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RequiresFormat"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Data.SfDataManager"}},{"HashCode":-166542936,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Data.SfDataManager","AssemblyName":"Syncfusion.Blazor.Data","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Data.SfDataManager"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"HttpClientInstance","TypeName":"System.Net.Http.HttpClient","Documentation":"\n            <summary>\n            Specifies the HttpClient instance to be used  by DataManager.\n            </summary>\n            <remarks>Use HttpClientInstance property to inject named HttpClient into DataManager.</remarks>\n        ","Metadata":{"Common.PropertyName":"HttpClientInstance"}},{"Kind":"Components.Component","Name":"Url","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the endpoint URL. DataManager requests this URL when data is needed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Url"}},{"Kind":"Components.Component","Name":"AdaptorInstance","TypeName":"System.Type","Documentation":"\n            <summary>\n            Specifies the custom adaptor class type. DataManager uses this type value to instantiate custom adaptor class.\n            </summary>\n            <remarks>DataManager uses Activator.CreateInstance method to create custom adaptor instance.\n            Injecting services into custom adaptor class, is not supported while using this approach.\n            To inject and use services, provide custom adaptor as a Blazor component by extending DataAdaptor class.</remarks>\n        ","Metadata":{"Common.PropertyName":"AdaptorInstance"}},{"Kind":"Components.Component","Name":"Adaptor","TypeName":"Syncfusion.Blazor.Adaptors","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the data adaptor to be used by DataManager.\n            <list type=\"bullet\">\n            <item>\n            <term>BlazorAdaptor</term>\n            <description>Default. BlazorAdaptor is used to process Enumerable data. It contains methods to process the given collection based on the queries.</description>\n            </item>\n            <item>\n            <term>ODataAdaptor</term>\n            <description>\n            OData Adaptor provies ability to consume and manipulate data from OData services.\n            </description>\n            </item>\n            <item>\n            <term>ODataV4Adaptor</term>\n            <description>\n            ODatav4 Adaptor provies ability to consume and manipulate data from OData v4 services\n            </description>\n            </item>\n            <item>\n            <term>WebApiAdaptor</term>\n            <description>\n            WebApi Adaptor provies ability to consume and manipulate data from WebApi services.\n            This adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor\n            </description>\n            </item>\n            <item>\n            <term>UrlAdaptor</term>\n            <description>\n            URL Adaptor is used when you are required to interact with all kind of remote services to retrieve data.\n            </description>\n            </item>\n            <item>\n            <term>RemoteSaveAdaptor</term>\n            <description>\n            Remote Save Adaptor is used for binding JSON data.\n            It interacts with remote services only for CRUD operations.\n            </description>\n            </item>\n            <item>\n            <term>CustomAdaptor</term>\n            <description>\n            CustomAdaptor specifies that own data query and manipulation logic has been provided using custom adaptor component\n            extended from DataAdaptor class.\n            </description>\n            </item>\n            <item>\n            <term>JsonAdaptor</term>\n            <description>\n            JsonAdaptor is used to process JSON data at the client side. It contains methods to process the given JSON data based on the queries.\n            </description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Adaptor"}},{"Kind":"Components.Component","Name":"DataAdaptor","TypeName":"Syncfusion.Blazor.Data.IAdaptor","Documentation":"\n            <summary>\n            Holds adaptor instance.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"DataAdaptor"}},{"Kind":"Components.Component","Name":"InsertUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the insert URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Insert method is called, request will be made to InsertUrl.\n            If InsertUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"InsertUrl"}},{"Kind":"Components.Component","Name":"RemoveUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the remove URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Remove method is called, request will be made to RemoveUrl.\n            If RemoveUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"RemoveUrl"}},{"Kind":"Components.Component","Name":"UpdateUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the update URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Update method is called, request will be made to UpdateUrl.\n            If UpdateUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"UpdateUrl"}},{"Kind":"Components.Component","Name":"CrudUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CRUD URL.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When Insert, Remove or Update method is called, request will be made to CrudUrl.\n            If CrudUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"CrudUrl"}},{"Kind":"Components.Component","Name":"BatchUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the batch url.\n            </summary>\n            <remarks>Applicable for remote adaptors.\n            When SaveChanges method is called, request will be made to BatchUrl.\n            If BatchUrl is not provided, Url is used as fallback.</remarks>\n        ","Metadata":{"Common.PropertyName":"BatchUrl"}},{"Kind":"Components.Component","Name":"Json","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Documentation":"\n            <summary>\n            Specifies the IEnumerable collection. This data could be queried and manipulated.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Json"}},{"Kind":"Components.Component","Name":"Headers","TypeName":"System.Collections.Generic.IDictionary<System.String, System.String>","Documentation":"\n            <summary>\n            Specifies the key/value pair of headers.\n            </summary>\n            <remarks>\n            Use Headers to add any custom headers to the request made by DataManager.\n            Users can also send authentication bearer token using Headers property.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Headers"}},{"Kind":"Components.Component","Name":"Accept","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the accept type.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Accept"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Object","Documentation":"\n            <summary>\n            Specifies the IEnumerale data.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Data"}},{"Kind":"Components.Component","Name":"TimeTillExpiration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time limit to clear the cached data.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TimeTillExpiration"}},{"Kind":"Components.Component","Name":"CachingPageSize","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the caching page size.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CachingPageSize"}},{"Kind":"Components.Component","Name":"EnableCaching","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables data caching.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableCaching"}},{"Kind":"Components.Component","Name":"RequestType","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the request type for sending data fetching.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"RequestType"}},{"Kind":"Components.Component","Name":"Key","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the primary key value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Key"}},{"Kind":"Components.Component","Name":"CrossDomain","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            When true, then indicates that the request is a cross-domain request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CrossDomain"}},{"Kind":"Components.Component","Name":"Jsonp","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the jsonp request.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Jsonp"}},{"Kind":"Components.Component","Name":"DataType","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the data type.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataType"}},{"Kind":"Components.Component","Name":"Offline","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables offline mode in datamanager.\n            </summary>\n            <remarks>\n            Applicable for remote data source. If offline is true then initial request will be made to fetch\n            data. Further actions will be handled at the in-memory data and no more request will be made to the service.\n            Cached data is stored in the JSON property.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Offline"}},{"Kind":"Components.Component","Name":"RequiresFormat","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Sepcifies requires format.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RequiresFormat"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Data.SfDataManager","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-329131016,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Data.SfDataManager.ChildContent","AssemblyName":"Syncfusion.Blazor.Data","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfDataManager"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Data.SfDataManager.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":926201121,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Data.SfDataManager.ChildContent","AssemblyName":"Syncfusion.Blazor.Data","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Data.SfDataManager"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Data.SfDataManager.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":468452146,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Internal.JSInteropAdaptor","AssemblyName":"Syncfusion.Blazor.Data","Documentation":"\n            <summary>\n            Custom handler of JSInterop to invoke the JavaScript methods with DotNetObjectReference.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"JSInteropAdaptor"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Internal.JSInteropAdaptor"}},{"HashCode":1789454602,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Internal.JSInteropAdaptor","AssemblyName":"Syncfusion.Blazor.Data","Documentation":"\n            <summary>\n            Custom handler of JSInterop to invoke the JavaScript methods with DotNetObjectReference.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Internal.JSInteropAdaptor"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Internal.JSInteropAdaptor","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-939804279,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.EditForm","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Renders a form element that cascades an <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> to descendants.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EditForm"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created <c>form</c> element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"EditContext","TypeName":"Microsoft.AspNetCore.Components.Forms.EditContext","Documentation":"\n            <summary>\n            Supplies the edit context explicitly. If using this parameter, do not\n            also supply <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.Model\" />, since the model value will be taken\n            from the <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditContext.Model\" /> property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EditContext"}},{"Kind":"Components.Component","Name":"Model","TypeName":"System.Object","Documentation":"\n            <summary>\n            Specifies the top-level model object for the form. An edit context will\n            be constructed for this model. If using this parameter, do not also supply\n            a value for <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Model"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"\n            <summary>\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"OnSubmit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"\n             <summary>\n             A callback that will be invoked when the form is submitted.\n            \n             If using this parameter, you are responsible for triggering any validation\n             manually, e.g., by calling <see cref=\"M:Microsoft.AspNetCore.Components.Forms.EditContext.Validate\" />.\n             </summary>\n        ","Metadata":{"Common.PropertyName":"OnSubmit","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnValidSubmit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"\n            <summary>\n            A callback that will be invoked when the form is submitted and the\n            <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> is determined to be valid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnValidSubmit","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInvalidSubmit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"\n            <summary>\n            A callback that will be invoked when the form is submitted and the\n            <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> is determined to be invalid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnInvalidSubmit","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.EditForm"}},{"HashCode":707216181,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.EditForm","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Renders a form element that cascades an <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> to descendants.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.EditForm"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created <c>form</c> element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"EditContext","TypeName":"Microsoft.AspNetCore.Components.Forms.EditContext","Documentation":"\n            <summary>\n            Supplies the edit context explicitly. If using this parameter, do not\n            also supply <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.Model\" />, since the model value will be taken\n            from the <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditContext.Model\" /> property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EditContext"}},{"Kind":"Components.Component","Name":"Model","TypeName":"System.Object","Documentation":"\n            <summary>\n            Specifies the top-level model object for the form. An edit context will\n            be constructed for this model. If using this parameter, do not also supply\n            a value for <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Model"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"\n            <summary>\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"OnSubmit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"\n             <summary>\n             A callback that will be invoked when the form is submitted.\n            \n             If using this parameter, you are responsible for triggering any validation\n             manually, e.g., by calling <see cref=\"M:Microsoft.AspNetCore.Components.Forms.EditContext.Validate\" />.\n             </summary>\n        ","Metadata":{"Common.PropertyName":"OnSubmit","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnValidSubmit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"\n            <summary>\n            A callback that will be invoked when the form is submitted and the\n            <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> is determined to be valid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnValidSubmit","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInvalidSubmit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.EditContext>","Documentation":"\n            <summary>\n            A callback that will be invoked when the form is submitted and the\n            <see cref=\"P:Microsoft.AspNetCore.Components.Forms.EditForm.EditContext\" /> is determined to be invalid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnInvalidSubmit","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.EditForm","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-408043690,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"EditForm"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1704917829,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Specifies the content to be rendered inside this <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditForm\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Forms.EditForm"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.EditForm.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1420558410,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component for editing <see cref=\"T:System.Boolean\" /> values.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputCheckbox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.Boolean>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputCheckbox"}},{"HashCode":-1650507943,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component for editing <see cref=\"T:System.Boolean\" /> values.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputCheckbox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.Boolean>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":704578197,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component for editing date values.\n            Supported types are <see cref=\"T:System.DateTime\" /> and <see cref=\"T:System.DateTimeOffset\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputDate"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputDate<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Microsoft.AspNetCore.Components.Forms.InputDateType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the type of HTML input to be rendered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"ParsingErrorMessage","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the error message used when displaying an a parsing error.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ParsingErrorMessage"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","Components.GenericTyped":"True"}},{"HashCode":1915447523,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component for editing date values.\n            Supported types are <see cref=\"T:System.DateTime\" /> and <see cref=\"T:System.DateTimeOffset\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputDate"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputDate<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Microsoft.AspNetCore.Components.Forms.InputDateType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the type of HTML input to be rendered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"ParsingErrorMessage","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the error message used when displaying an a parsing error.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ParsingErrorMessage"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":328771901,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputFile","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            A component that wraps the HTML file input element and supplies a <see cref=\"T:System.IO.Stream\" /> for each file's contents.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputFile"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the collection of selected files changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the input element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputFile"}},{"HashCode":-177543775,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputFile","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            A component that wraps the HTML file input element and supplies a <see cref=\"T:System.IO.Stream\" /> for each file's contents.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputFile"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Forms.InputFileChangeEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the collection of selected files changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the input element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputFile","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":935534115,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component for editing numeric values.\n            Supported numeric types are <see cref=\"T:System.Int32\" />, <see cref=\"T:System.Int64\" />, <see cref=\"T:System.Int16\" />, <see cref=\"T:System.Single\" />, <see cref=\"T:System.Double\" />, <see cref=\"T:System.Decimal\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputNumber"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputNumber<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ParsingErrorMessage","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the error message used when displaying an a parsing error.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ParsingErrorMessage"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","Components.GenericTyped":"True"}},{"HashCode":31892784,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component for editing numeric values.\n            Supported numeric types are <see cref=\"T:System.Int32\" />, <see cref=\"T:System.Int64\" />, <see cref=\"T:System.Int16\" />, <see cref=\"T:System.Single\" />, <see cref=\"T:System.Double\" />, <see cref=\"T:System.Decimal\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputNumber"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputNumber<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ParsingErrorMessage","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the error message used when displaying an a parsing error.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ParsingErrorMessage"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":532414311,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputRadio<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component used for selecting a value from a group of choices.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputRadio"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputRadio<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the input element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of this input.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the name of the parent input radio group.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Name"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadio<TValue>","Components.GenericTyped":"True"}},{"HashCode":-1975191459,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputRadio<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component used for selecting a value from a group of choices.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputRadio"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputRadio<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the input element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of this input.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the name of the parent input radio group.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Name"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadio<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1239896056,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Groups child <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadio`1\" /> components.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputRadioGroup"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content to be rendering inside the <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the name of the group.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Name"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","Components.GenericTyped":"True"}},{"HashCode":1248723515,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Groups child <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadio`1\" /> components.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content to be rendering inside the <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the name of the group.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Name"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-5688087,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the child content to be rendering inside the <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"InputRadioGroup"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-647344956,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the child content to be rendering inside the <see cref=\"T:Microsoft.AspNetCore.Components.Forms.InputRadioGroup`1\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-978423627,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            A dropdown selection component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputSelect"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputSelect<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content to be rendering inside the select element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","Components.GenericTyped":"True"}},{"HashCode":1777691999,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            A dropdown selection component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputSelect"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.InputSelect<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content to be rendering inside the select element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1130157769,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the child content to be rendering inside the select element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"InputSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-662414230,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the child content to be rendering inside the select element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Forms.InputSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-400466067,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputText","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component for editing <see cref=\"T:System.String\" /> values.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputText"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputText"}},{"HashCode":-624435841,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputText","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            An input component for editing <see cref=\"T:System.String\" /> values.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputText"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputText","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1526645893,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputTextArea","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            A multiline input component for editing <see cref=\"T:System.String\" /> values.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputTextArea"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputTextArea"}},{"HashCode":1278722841,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.InputTextArea","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            A multiline input component for editing <see cref=\"T:System.String\" /> values.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputTextArea"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the value of the input. This should be used with two-way binding.\n            </summary>\n            <example>\n            @bind-Value=\"model.PropertyName\"\n            </example>\n        ","Metadata":{"Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Gets or sets a callback that updates the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<System.String>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression"}},{"Kind":"Components.Component","Name":"DisplayName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the display name for this field.\n            <para>This value is used when generating error messages when the input value fails to parse correctly.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayName"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputTextArea","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":49922468,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Displays a list of validation messages for a specified field within a cascaded <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValidationMessage"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created <c>div</c> element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"For","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the field for which validation messages should be displayed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"For","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue>","Components.GenericTyped":"True"}},{"HashCode":1343924420,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Displays a list of validation messages for a specified field within a cascaded <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.ValidationMessage"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created <c>div</c> element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"For","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the field for which validation messages should be displayed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"For","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.ValidationMessage<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1355226858,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.ValidationSummary","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Displays a list of validation messages from a cascaded <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValidationSummary"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Model","TypeName":"System.Object","Documentation":"\n            <summary>\n            Gets or sets the model to produce the list of validation messages for.\n            When specified, this lists all errors that are associated with the model instance.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Model"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created <c>ul</c> element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.ValidationSummary"}},{"HashCode":-1802879813,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.ValidationSummary","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Displays a list of validation messages from a cascaded <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.ValidationSummary"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Model","TypeName":"System.Object","Documentation":"\n            <summary>\n            Gets or sets the model to produce the list of validation messages for.\n            When specified, this lists all errors that are associated with the model instance.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Model"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the created <c>ul</c> element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.ValidationSummary","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1281797782,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Routing.FocusOnNavigate","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            After navigating from one page to another, sets focus to an element\n            matching a CSS selector. This can be used to build an accessible\n            navigation system compatible with screen readers.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FocusOnNavigate"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"RouteData","TypeName":"Microsoft.AspNetCore.Components.RouteData","Documentation":"\n            <summary>\n            Gets or sets the route data. This can be obtained from an enclosing\n            <see cref=\"T:Microsoft.AspNetCore.Components.Routing.Router\" /> component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RouteData"}},{"Kind":"Components.Component","Name":"Selector","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS selector describing the element to be focused after\n            navigation between pages.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selector"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.FocusOnNavigate"}},{"HashCode":-1640124240,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Routing.FocusOnNavigate","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            After navigating from one page to another, sets focus to an element\n            matching a CSS selector. This can be used to build an accessible\n            navigation system compatible with screen readers.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Routing.FocusOnNavigate"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"RouteData","TypeName":"Microsoft.AspNetCore.Components.RouteData","Documentation":"\n            <summary>\n            Gets or sets the route data. This can be obtained from an enclosing\n            <see cref=\"T:Microsoft.AspNetCore.Components.Routing.Router\" /> component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RouteData"}},{"Kind":"Components.Component","Name":"Selector","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS selector describing the element to be focused after\n            navigation between pages.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selector"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.FocusOnNavigate","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1462781705,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Routing.NavLink","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            A component that renders an anchor tag, automatically toggling its 'active'\n            class based on whether its 'href' matches the current URI.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NavLink"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ActiveClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the CSS class name applied to the NavLink when the\n            current route matches the NavLink href.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActiveClass"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be added to the generated\n            <c>a</c> element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Match","TypeName":"Microsoft.AspNetCore.Components.Routing.NavLinkMatch","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value representing the URL matching behavior.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Match"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.NavLink"}},{"HashCode":1481322604,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Routing.NavLink","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            A component that renders an anchor tag, automatically toggling its 'active'\n            class based on whether its 'href' matches the current URI.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Routing.NavLink"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ActiveClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the CSS class name applied to the NavLink when the\n            current route matches the NavLink href.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActiveClass"}},{"Kind":"Components.Component","Name":"AdditionalAttributes","TypeName":"System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be added to the generated\n            <c>a</c> element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAttributes"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Match","TypeName":"Microsoft.AspNetCore.Components.Routing.NavLinkMatch","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value representing the URL matching behavior.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Match"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.NavLink","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-386477367,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the child content of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"NavLink"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":720148254,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the child content of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Routing.NavLink"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.NavLink.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1120317366,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.HeadContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Provides content to <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> components.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeadContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content to be rendered in <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> instances.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.HeadContent"}},{"HashCode":-764133860,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.HeadContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Provides content to <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> components.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Web.HeadContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content to be rendered in <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> instances.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.HeadContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1567531839,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the content to be rendered in <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> instances.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"HeadContent"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1208072112,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the content to be rendered in <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> instances.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Web.HeadContent"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.HeadContent.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1593959033,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.HeadOutlet","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Renders content provided by <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadContent\" /> components.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeadOutlet"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.HeadOutlet"}},{"HashCode":-34130624,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.HeadOutlet","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Renders content provided by <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadContent\" /> components.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Web.HeadOutlet"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.HeadOutlet","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1765254677,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.PageTitle","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Enables rendering an HTML <c>&lt;title&gt;</c> to a <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PageTitle"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content to be rendered as the document title.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.PageTitle"}},{"HashCode":1265492983,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.PageTitle","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Enables rendering an HTML <c>&lt;title&gt;</c> to a <see cref=\"T:Microsoft.AspNetCore.Components.Web.HeadOutlet\" /> component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Web.PageTitle"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content to be rendered as the document title.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.PageTitle","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":206629272,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the content to be rendered as the document title.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"PageTitle"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":2057572728,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the content to be rendered as the document title.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Web.PageTitle"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.PageTitle.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1524847289,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.ErrorBoundary","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Captures errors thrown from its child content.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ErrorBoundary"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The content to be displayed when there is no error.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ErrorContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Exception>","Documentation":"\n            <summary>\n            The content to be displayed when there is an error.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ErrorContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"MaximumErrorCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            The maximum number of errors that can be handled. If more errors are received,\n            they will be treated as fatal. Calling <see cref=\"M:Microsoft.AspNetCore.Components.ErrorBoundaryBase.Recover\" /> resets the count.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaximumErrorCount"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.ErrorBoundary"}},{"HashCode":-1295008868,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.ErrorBoundary","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Captures errors thrown from its child content.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Web.ErrorBoundary"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The content to be displayed when there is no error.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ErrorContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Exception>","Documentation":"\n            <summary>\n            The content to be displayed when there is an error.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ErrorContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"MaximumErrorCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            The maximum number of errors that can be handled. If more errors are received,\n            they will be treated as fatal. Calling <see cref=\"M:Microsoft.AspNetCore.Components.ErrorBoundaryBase.Recover\" /> resets the count.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaximumErrorCount"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.ErrorBoundary","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1991737880,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            The content to be displayed when there is no error.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"ErrorBoundary"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1669670115,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            The content to be displayed when there is no error.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Web.ErrorBoundary"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1533554184,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ErrorContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            The content to be displayed when there is an error.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ErrorContent","ParentTag":"ErrorBoundary"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ErrorContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ErrorContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-941639418,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ErrorContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            The content to be displayed when there is an error.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ErrorContent","ParentTag":"Microsoft.AspNetCore.Components.Web.ErrorBoundary"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ErrorContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.ErrorBoundary.ErrorContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2100606566,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Provides functionality for rendering a virtualized list of items.\n            </summary>\n            <typeparam name=\"TItem\">The <c>context</c> type for the items being rendered.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Virtualize"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemContent","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext>","Documentation":"\n            <summary>\n            Gets or sets the template for items that have not yet been loaded in memory.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ItemSize","TypeName":"System.Single","Documentation":"\n            <summary>\n            Gets the size of each item in pixels. Defaults to 50px.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemSize"}},{"Kind":"Components.Component","Name":"ItemsProvider","TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate<TItem>","Documentation":"\n            <summary>\n            Gets or sets the function providing items to the list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemsProvider","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.ICollection<TItem>","Documentation":"\n            <summary>\n            Gets or sets the fixed item source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Items","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OverscanCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets a value that determines how many additional items will be rendered\n            before and after the visible region. This help to reduce the frequency of rendering\n            during scrolling. However, higher values mean that more elements will be present\n            in the page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OverscanCount"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>","Components.GenericTyped":"True"}},{"HashCode":-349097859,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Provides functionality for rendering a virtualized list of items.\n            </summary>\n            <typeparam name=\"TItem\">The <c>context</c> type for the items being rendered.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemContent","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Web.Virtualization.PlaceholderContext>","Documentation":"\n            <summary>\n            Gets or sets the template for items that have not yet been loaded in memory.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ItemSize","TypeName":"System.Single","Documentation":"\n            <summary>\n            Gets the size of each item in pixels. Defaults to 50px.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemSize"}},{"Kind":"Components.Component","Name":"ItemsProvider","TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.ItemsProviderDelegate<TItem>","Documentation":"\n            <summary>\n            Gets or sets the function providing items to the list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemsProvider","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.ICollection<TItem>","Documentation":"\n            <summary>\n            Gets or sets the fixed item source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Items","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OverscanCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets a value that determines how many additional items will be rendered\n            before and after the visible region. This help to reduce the frequency of rendering\n            during scrolling. However, higher values mean that more elements will be present\n            in the page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OverscanCount"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1013193740,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Virtualize"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1003924632,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":153524432,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ItemContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemContent","ParentTag":"Virtualize"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ItemContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1557674147,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ItemContent","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the item template for the list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemContent","ParentTag":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.ItemContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1302905679,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.Placeholder","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the template for items that have not yet been loaded in memory.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Placeholder","ParentTag":"Virtualize"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Placeholder' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.Placeholder","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":945222623,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.Placeholder","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"\n            <summary>\n            Gets or sets the template for items that have not yet been loaded in memory.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Placeholder","ParentTag":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Placeholder' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Web.Virtualization.Virtualize<TItem>.Placeholder","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":831883187,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SfMediaQuery","AssemblyName":"Syncfusion.Blazor.Core","Documentation":"\n            <summary>\n            The Blazor Media Query component allows developers to create responsive layouts.\n            The component tracks changes in the browser size and notifies when the browser size matches the specified media query.\n            The <see cref=\"T:Syncfusion.Blazor.MediaBreakpoint\" /> class is used to store information about each media query breakpoint, including the <c>Breakpoint</c> name and the <c>MediaQuery</c> itself. \n            The <see cref=\"P:Syncfusion.Blazor.SfMediaQuery.ActiveBreakpoint\" /> property returns the <c>Breakpoint</c> of the <c>MediaBreakpoint</c> in the <c>MediaBreakpoints</c> collection that matches the current browser size. \n            This allows developers to easily create responsive layouts that adapt to different screen sizes and device types.\n            </summary>\n            <example>\n            <code><![CDATA[\n            @if (String.IsNullOrEmpty(activeBreakpoint))\n            {\n                <label>Loading...</label>\n            }\n            else\n            {\n                @if(activeBreakpoint == \"Small\")\n                {\n                    <button>Mobile</button>\n                }\n                else\n                {\n                    <button>Desktop</button>\n                }\n            }\n            <SfMediaQuery @bind-ActiveBreakpoint=\"@activeBreakpoint\"></SfMediaQuery>\n            @code {\n                private string activeBreakpoint;\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfMediaQuery"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ActiveBreakpoint","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets the <see cref=\"P:Syncfusion.Blazor.MediaBreakpoint.Breakpoint\" /> of the <see cref=\"P:Syncfusion.Blazor.MediaBreakpoint.MediaQuery\" /> in <see cref=\"P:Syncfusion.Blazor.SfMediaQuery.MediaBreakpoints\" /> collection that matches with the current browser size.\n            Based on the <c>ActiveBreakpoint</c>, developers can easily create responsive layouts that adapt to different screen sizes and device types.\n            </summary>\n            <value>\n            A string value that represents the <see cref=\"P:Syncfusion.Blazor.MediaBreakpoint.Breakpoint\" /> of the <see cref=\"P:Syncfusion.Blazor.MediaBreakpoint.MediaQuery\" /> in <see cref=\"P:Syncfusion.Blazor.SfMediaQuery.MediaBreakpoints\" /> collection that matches with the browser size.\n            The default value is <code>null</code>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ActiveBreakpoint"}},{"Kind":"Components.Component","Name":"MediaBreakpoints","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.MediaBreakpoint>","Documentation":"\n            <summary>\n            Gets or sets the collection of <see cref=\"T:Syncfusion.Blazor.MediaBreakpoint\" /> that contains the <see cref=\"P:Syncfusion.Blazor.MediaBreakpoint.Breakpoint\" /> and <see cref=\"P:Syncfusion.Blazor.MediaBreakpoint.MediaQuery\" />.\n            <see cref=\"P:Syncfusion.Blazor.SfMediaQuery.ActiveBreakpoint\" /> is set when a <see cref=\"P:Syncfusion.Blazor.MediaBreakpoint.MediaQuery\" /> matches with the current browser size from this collection.\n            </summary>\n            <value>\n            A collection of <see cref=\"T:Syncfusion.Blazor.MediaBreakpoint\" /> that contains the <see cref=\"P:Syncfusion.Blazor.MediaBreakpoint.Breakpoint\" /> and <see cref=\"P:Syncfusion.Blazor.MediaBreakpoint.MediaQuery\" />.\n            The defaul value is empty collection.\n            </value>\n            <remarks>\n            If <see cref=\"P:Syncfusion.Blazor.SfMediaQuery.MediaBreakpoints\" /> is not specified, <see cref=\"T:Syncfusion.Blazor.SfMediaQuery\" /> will use built-in collection of <see cref=\"T:Syncfusion.Blazor.MediaBreakpoint\" /> that contains <see cref=\"F:Syncfusion.Blazor.SfMediaQuery.Small\" />, <see cref=\"F:Syncfusion.Blazor.SfMediaQuery.Medium\" /> and <see cref=\"F:Syncfusion.Blazor.SfMediaQuery.Large\" /> media queries.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"MediaBreakpoints"}},{"Kind":"Components.Component","Name":"ActiveBreakpointChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Gets or sets the event that is triggered when the <see cref=\"P:Syncfusion.Blazor.SfMediaQuery.ActiveBreakpoint\" /> is changed.\n            </summary>\n            <value>\n            An event that is triggered when the <see cref=\"P:Syncfusion.Blazor.SfMediaQuery.ActiveBreakpoint\" /> is changed.\n            </value>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ActiveBreakpointChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBreakpointChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.BreakpointChangedEventArgs>","Documentation":"\n            <summary> \n             Gets or sets the event that is triggered when the <see cref=\"P:Syncfusion.Blazor.SfMediaQuery.ActiveBreakpoint\" /> is changed.\n            </summary> \n            <value>\n            An event that is triggered when the <see cref=\"P:Syncfusion.Blazor.SfMediaQuery.ActiveBreakpoint\" /> is changed.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnBreakpointChanged","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SfMediaQuery"}},{"HashCode":-995971050,"Kind":"Components.Component","Name":"Syncfusion.Blazor.SfMediaQuery","AssemblyName":"Syncfusion.Blazor.Core","Documentation":"\n            <summary>\n            The Blazor Media Query component allows developers to create responsive layouts.\n            The component tracks changes in the browser size and notifies when the browser size matches the specified media query.\n            The <see cref=\"T:Syncfusion.Blazor.MediaBreakpoint\" /> class is used to store information about each media query breakpoint, including the <c>Breakpoint</c> name and the <c>MediaQuery</c> itself. \n            The <see cref=\"P:Syncfusion.Blazor.SfMediaQuery.ActiveBreakpoint\" /> property returns the <c>Breakpoint</c> of the <c>MediaBreakpoint</c> in the <c>MediaBreakpoints</c> collection that matches the current browser size. \n            This allows developers to easily create responsive layouts that adapt to different screen sizes and device types.\n            </summary>\n            <example>\n            <code><![CDATA[\n            @if (String.IsNullOrEmpty(activeBreakpoint))\n            {\n                <label>Loading...</label>\n            }\n            else\n            {\n                @if(activeBreakpoint == \"Small\")\n                {\n                    <button>Mobile</button>\n                }\n                else\n                {\n                    <button>Desktop</button>\n                }\n            }\n            <SfMediaQuery @bind-ActiveBreakpoint=\"@activeBreakpoint\"></SfMediaQuery>\n            @code {\n                private string activeBreakpoint;\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SfMediaQuery"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ActiveBreakpoint","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets the <see cref=\"P:Syncfusion.Blazor.MediaBreakpoint.Breakpoint\" /> of the <see cref=\"P:Syncfusion.Blazor.MediaBreakpoint.MediaQuery\" /> in <see cref=\"P:Syncfusion.Blazor.SfMediaQuery.MediaBreakpoints\" /> collection that matches with the current browser size.\n            Based on the <c>ActiveBreakpoint</c>, developers can easily create responsive layouts that adapt to different screen sizes and device types.\n            </summary>\n            <value>\n            A string value that represents the <see cref=\"P:Syncfusion.Blazor.MediaBreakpoint.Breakpoint\" /> of the <see cref=\"P:Syncfusion.Blazor.MediaBreakpoint.MediaQuery\" /> in <see cref=\"P:Syncfusion.Blazor.SfMediaQuery.MediaBreakpoints\" /> collection that matches with the browser size.\n            The default value is <code>null</code>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ActiveBreakpoint"}},{"Kind":"Components.Component","Name":"MediaBreakpoints","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.MediaBreakpoint>","Documentation":"\n            <summary>\n            Gets or sets the collection of <see cref=\"T:Syncfusion.Blazor.MediaBreakpoint\" /> that contains the <see cref=\"P:Syncfusion.Blazor.MediaBreakpoint.Breakpoint\" /> and <see cref=\"P:Syncfusion.Blazor.MediaBreakpoint.MediaQuery\" />.\n            <see cref=\"P:Syncfusion.Blazor.SfMediaQuery.ActiveBreakpoint\" /> is set when a <see cref=\"P:Syncfusion.Blazor.MediaBreakpoint.MediaQuery\" /> matches with the current browser size from this collection.\n            </summary>\n            <value>\n            A collection of <see cref=\"T:Syncfusion.Blazor.MediaBreakpoint\" /> that contains the <see cref=\"P:Syncfusion.Blazor.MediaBreakpoint.Breakpoint\" /> and <see cref=\"P:Syncfusion.Blazor.MediaBreakpoint.MediaQuery\" />.\n            The defaul value is empty collection.\n            </value>\n            <remarks>\n            If <see cref=\"P:Syncfusion.Blazor.SfMediaQuery.MediaBreakpoints\" /> is not specified, <see cref=\"T:Syncfusion.Blazor.SfMediaQuery\" /> will use built-in collection of <see cref=\"T:Syncfusion.Blazor.MediaBreakpoint\" /> that contains <see cref=\"F:Syncfusion.Blazor.SfMediaQuery.Small\" />, <see cref=\"F:Syncfusion.Blazor.SfMediaQuery.Medium\" /> and <see cref=\"F:Syncfusion.Blazor.SfMediaQuery.Large\" /> media queries.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"MediaBreakpoints"}},{"Kind":"Components.Component","Name":"ActiveBreakpointChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <summary>\n            Gets or sets the event that is triggered when the <see cref=\"P:Syncfusion.Blazor.SfMediaQuery.ActiveBreakpoint\" /> is changed.\n            </summary>\n            <value>\n            An event that is triggered when the <see cref=\"P:Syncfusion.Blazor.SfMediaQuery.ActiveBreakpoint\" /> is changed.\n            </value>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ActiveBreakpointChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBreakpointChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.BreakpointChangedEventArgs>","Documentation":"\n            <summary> \n             Gets or sets the event that is triggered when the <see cref=\"P:Syncfusion.Blazor.SfMediaQuery.ActiveBreakpoint\" /> is changed.\n            </summary> \n            <value>\n            An event that is triggered when the <see cref=\"P:Syncfusion.Blazor.SfMediaQuery.ActiveBreakpoint\" /> is changed.\n            </value>\n        ","Metadata":{"Common.PropertyName":"OnBreakpointChanged","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.SfMediaQuery","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":606373012,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Core._Imports","AssemblyName":"Syncfusion.Blazor.Core","CaseSensitive":true,"TagMatchingRules":[{"TagName":"_Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Core._Imports"}},{"HashCode":887758561,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Core._Imports","AssemblyName":"Syncfusion.Blazor.Core","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Core._Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Core._Imports","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1673312231,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Internal.ModuleInitComponent","AssemblyName":"Syncfusion.Blazor.Core","Documentation":"\n            <summary>\n            Resource manager component for loading init interop script in .NET Core 3.0 applications.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ModuleInitComponent"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Internal.ModuleInitComponent"}},{"HashCode":-641697805,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Internal.ModuleInitComponent","AssemblyName":"Syncfusion.Blazor.Core","Documentation":"\n            <summary>\n            Resource manager component for loading init interop script in .NET Core 3.0 applications.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Internal.ModuleInitComponent"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Internal.ModuleInitComponent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-118747222,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.SpinnerEvents","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Configure event handlers for the Spinner component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SpinnerEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Event triggers after the Spinner is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBeforeOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Spinner.SpinnerEventArgs>","Documentation":"\n            <summary>\n            Event triggers before the Spinner is opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBeforeOpen","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBeforeClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Spinner.SpinnerEventArgs>","Documentation":"\n            <summary>\n            Event triggers before the Spinner is closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBeforeClose","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Event triggers after the Spinner is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.SpinnerEvents"}},{"HashCode":-1426350403,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.SpinnerEvents","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Configure event handlers for the Spinner component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Spinner.SpinnerEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Event triggers after the Spinner is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBeforeOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Spinner.SpinnerEventArgs>","Documentation":"\n            <summary>\n            Event triggers before the Spinner is opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBeforeOpen","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBeforeClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Spinner.SpinnerEventArgs>","Documentation":"\n            <summary>\n            Event triggers before the Spinner is closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBeforeClose","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Event triggers after the Spinner is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.SpinnerEvents","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-865821345,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.SpinnerTemplates","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Configure the template of the Spinner.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SpinnerTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the template of the Spinner.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Template","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.SpinnerTemplates"}},{"HashCode":29062447,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.SpinnerTemplates","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Configure the template of the Spinner.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Spinner.SpinnerTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the template of the Spinner.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Template","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.SpinnerTemplates","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2127287794,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Spinner.SpinnerTemplates.Template","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Defines the template of the Spinner.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"SpinnerTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Spinner.SpinnerTemplates.Template","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1051278160,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Spinner.SpinnerTemplates.Template","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Defines the template of the Spinner.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"Syncfusion.Blazor.Spinner.SpinnerTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Spinner.SpinnerTemplates.Template","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-856209765,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.SfSpinner","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Represents the spinner component that displays when spinner is shown.\n            </summary>\n            <exclude /> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSpinner"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the label for the Spinner.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the Spinner.\n            One or more custom CSS classes can be added to a Spinner.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Specified content of the Spinner element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the value that represents whether the Spinner component is visible.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Visible"}},{"Kind":"Components.Component","Name":"VisibleChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <summary>\n            Gets or sets a callback of the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VisibleChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Size","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the size of the Spinner.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Size"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the z-order for the Spinner.\n            By default the value is auto.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Spinner.SpinnerType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies a theme of the spinner.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.SfSpinner"}},{"HashCode":-1642865294,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.SfSpinner","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Represents the spinner component that displays when spinner is shown.\n            </summary>\n            <exclude /> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Spinner.SfSpinner"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the label for the Spinner.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the Spinner.\n            One or more custom CSS classes can be added to a Spinner.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Specified content of the Spinner element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the value that represents whether the Spinner component is visible.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Visible"}},{"Kind":"Components.Component","Name":"VisibleChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <summary>\n            Gets or sets a callback of the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VisibleChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Size","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the size of the Spinner.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Size"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the z-order for the Spinner.\n            By default the value is auto.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Spinner.SpinnerType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies a theme of the spinner.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.SfSpinner","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":260615393,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Spinner.SfSpinner.ChildContent","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <exclude />\n            <summary>\n            Specified content of the Spinner element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfSpinner"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Spinner.SfSpinner.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1097541949,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Spinner.SfSpinner.ChildContent","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <exclude />\n            <summary>\n            Specified content of the Spinner element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Spinner.SfSpinner"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Spinner.SfSpinner.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1847436698,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.Internal.Bootstrap","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Represents the Spinner's Bootstrap class.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Bootstrap"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.Internal.Bootstrap"}},{"HashCode":-2097238141,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.Internal.Bootstrap","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Represents the Spinner's Bootstrap class.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Spinner.Internal.Bootstrap"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.Internal.Bootstrap","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":198206408,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.Internal.Bootstrap4","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Represents the Spinner's Bootstrap 4 class.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Bootstrap4"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.Internal.Bootstrap4"}},{"HashCode":209160182,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.Internal.Bootstrap4","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Represents the Spinner's Bootstrap 4 class.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Spinner.Internal.Bootstrap4"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.Internal.Bootstrap4","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-69168577,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.Internal.FabricHighContrast","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Represents the Spinner's Fabric and High-Contrast class.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FabricHighContrast"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.Internal.FabricHighContrast"}},{"HashCode":1271440252,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.Internal.FabricHighContrast","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Represents the Spinner's Fabric and High-Contrast class.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Spinner.Internal.FabricHighContrast"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.Internal.FabricHighContrast","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1308970225,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.Internal.Material","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Represents the Spinner Material class.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Material"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.Internal.Material"}},{"HashCode":-1914870258,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.Internal.Material","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Represents the Spinner Material class.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Spinner.Internal.Material"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.Internal.Material","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":230225016,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.Internal.SpinnerBase","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Represents the common methods that are used in all the themes.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SpinnerBase"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.Internal.SpinnerBase"}},{"HashCode":549900215,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Spinner.Internal.SpinnerBase","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"\n            <summary>\n            Represents the common methods that are used in all the themes.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Spinner.Internal.SpinnerBase"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Spinner.Internal.SpinnerBase","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2025897700,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteEvents<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the AutoComplete Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the value type.</typeparam>\n            <typeparam name=\"TItem\">Specifies the type of AutoCompleteEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AutoCompleteEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.AutoCompleteEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.AutoCompleteEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Documentation":"\n            <summary>\n            Triggers before fetching data from the remote server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Documentation":"\n            <summary>\n            Triggers after data is fetched successfully from the remote server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Exception>","Documentation":"\n            <summary>\n            Triggers when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Documentation":"\n            <summary>\n            Triggers when the popup before opens.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when focus moves out from the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ChangeEventArgs<TValue, TItem>>","Documentation":"\n            <summary>\n            <para>Triggers when an item in a popup is selected or when the model value is changed by user.</para>\n            <para>Use Change event to configure the cascading DropDownList.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Triggers before the popup is closed. If you cancel this event, the popup remains opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"CustomValueSpecifier","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.CustomValueSpecifierEventArgs<TItem>>","Documentation":"\n            <summary>\n            Triggers on set a custom value to this component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CustomValueSpecifier","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Documentation":"\n            <summary>\n            Triggers when data source is populated in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataBound","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Filtering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Documentation":"\n            <summary>\n            Triggers on typing a character in the filter bar when the AllowFiltering is enabled.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Filtering","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is focused.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Triggers after the popup has been closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Documentation":"\n            <summary>\n            Triggers when the popup closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnValueSelect","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Documentation":"\n            <summary>\n            Triggers when an item in the popup is selected by the user either with mouse/tap or with keyboard navigation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnValueSelect","Components.EventCallback":"True","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteEvents<TValue, TItem>","Components.GenericTyped":"True"}},{"HashCode":-1641260341,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteEvents<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the AutoComplete Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the value type.</typeparam>\n            <typeparam name=\"TItem\">Specifies the type of AutoCompleteEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.AutoCompleteEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.AutoCompleteEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.AutoCompleteEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Documentation":"\n            <summary>\n            Triggers before fetching data from the remote server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Documentation":"\n            <summary>\n            Triggers after data is fetched successfully from the remote server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Exception>","Documentation":"\n            <summary>\n            Triggers when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Documentation":"\n            <summary>\n            Triggers when the popup before opens.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when focus moves out from the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ChangeEventArgs<TValue, TItem>>","Documentation":"\n            <summary>\n            <para>Triggers when an item in a popup is selected or when the model value is changed by user.</para>\n            <para>Use Change event to configure the cascading DropDownList.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Triggers before the popup is closed. If you cancel this event, the popup remains opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"CustomValueSpecifier","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.CustomValueSpecifierEventArgs<TItem>>","Documentation":"\n            <summary>\n            Triggers on set a custom value to this component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CustomValueSpecifier","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Documentation":"\n            <summary>\n            Triggers when data source is populated in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataBound","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Filtering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Documentation":"\n            <summary>\n            Triggers on typing a character in the filter bar when the AllowFiltering is enabled.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Filtering","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is focused.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Triggers after the popup has been closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Documentation":"\n            <summary>\n            Triggers when the popup closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnValueSelect","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Documentation":"\n            <summary>\n            Triggers when an item in the popup is selected by the user either with mouse/tap or with keyboard navigation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnValueSelect","Components.EventCallback":"True","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteEvents<TValue, TItem>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1197528979,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteFieldSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The Fields property maps the columns of the data table and binds the data to the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AutoCompleteFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Group the list items with it's related items by mapping groupBy field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupBy"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the list element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the icon class column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the text column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the value column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteFieldSettings"}},{"HashCode":-1863542175,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteFieldSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The Fields property maps the columns of the data table and binds the data to the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.AutoCompleteFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Group the list items with it's related items by mapping groupBy field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupBy"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the list element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the icon class column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the text column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the value column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteFieldSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":108787224,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The AutoComplete has been provided with several options to customize each list item, group title, selected value, header, and footer elements.\n            </summary>\n            /// <typeparam name=\"TItem\">Specifies the type of AutoCompleteTemplates.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AutoCompleteTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>","Components.GenericTyped":"True"}},{"HashCode":-1921151000,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The AutoComplete has been provided with several options to customize each list item, group title, selected value, header, and footer elements.\n            </summary>\n            /// <typeparam name=\"TItem\">Specifies the type of AutoCompleteTemplates.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1095745897,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"AutoCompleteTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.FooterTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1338459235,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.FooterTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-163604360,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"AutoCompleteTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.HeaderTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-223903981,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.HeaderTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1993817823,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"AutoCompleteTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.GroupTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":109485205,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.GroupTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":243061086,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"AutoCompleteTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.ItemTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":746564376,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.ItemTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1171302190,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"AutoCompleteTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.NoRecordsTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":2124605332,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.NoRecordsTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":514504812,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"AutoCompleteTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.ActionFailureTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":3142895,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.AutoCompleteTemplates<TItem>.ActionFailureTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":783854076,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The AutoComplete component provides the matched suggestion list when type into the input, from which the user can select one.\n            </summary>\n            <summary>\n            The AutoComplete component provides the matched suggestion list when type into the input, from which the user can select one.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfAutoComplete"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Highlight","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            When set to 'true', highlight the searched characters on suggested list items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Highlight"}},{"Kind":"Components.Component","Name":"MinLength","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Allows you to set the minimum search character length, the search action will perform after typed minimum characters.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinLength"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Determines on which filter type, the component needs to be considered on search action.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FilterType"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>Specifies whether to show or hide the clear button.</para>\n            <para>When the clear button is clicked, `Value` properties are reset to null.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton"}},{"Kind":"Components.Component","Name":"ShowPopupButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Allows you to either show or hide the popup button on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowPopupButton"}},{"Kind":"Components.Component","Name":"SuggestionCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Supports the specified number of list items on the suggestion popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SuggestionCount"}},{"Kind":"Components.Component","Name":"AllowCustom","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the component allows user defined value which does not exist in data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowCustom"}},{"Kind":"Components.Component","Name":"Autofill","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether suggest a first matched item in input when searching. No action happens when no matches found.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Autofill"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the unique identifier for <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            You can specify only unique value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value in the <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether the filtering option is enabled or not.\n            </summary>\n            <value>\n            <c>true</c>, if the filtering option is enabled and show the filter bar (search box) in the pop-up; otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            The filter action retrieves the matched items using the <see cref=\"P:Syncfusion.Blazor.DropDowns.DropDownListEvents`2.Filtering\" /> event based on the characters typed in the search textbox.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the drop-down list component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for dropdown list component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component. \n            </summary>\n            <value>\n            <c>true</c>, if the Dropdown list component is enabled; otherwise, it is disabled. The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"FilterBarPlaceholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is displayed when the filter textbox has no text and removes the focus.\n            </summary>\n            <value>\n            The text that is displayed when the filter text box has no text. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            This property value is updated only when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.AllowFiltering\" /> is enabled.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FilterBarPlaceholder"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the floating label behavior of the dropdown list. The <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Placeholder\" /> text act as a lable.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.FloatLabelType\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.FloatLabelType.Never\" />\n            </value>\n            <remarks>\n            If the <c>FloatLabelType</c> is <c>Never</c>, the placeholder text does not float as a label.\n            If the <c>FloatLabelType</c> is <c>Auto</c>, the placeholder text will float above the DropDownList component as a label after focusing it.\n            If the <c>FloatLabelType</c> is <c>Always</c>, the placeholder text is displayed as a label above the DropDownList component.\n            </remarks>\n            <example>\n            In the following code example, set the float lable as <c>Auto</c>.\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\" Placeholder=\"Select a value\" FloatLabelType=\"FloatLabelType.Auto\">\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the footer container of the pop-up list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n             <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <FooterTemplate>\n                        <span class='footer'>Total list items: 3 </span>\n                    </FooterTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the header container of the popup list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <HeaderTemplate>\n                        <span class='header'> T-shirt size </span>\n                    </HeaderTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as styles, class, and more that will be applied to the dropdown list element.\n            </summary>\n            <value>\n            The value as dictionary collection.The default value is <c>null</c>\n            </value>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\" HtmlAttributes=\"@CustomAttribute\">\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>()\n                {\n                    { \"title\", \"Select T-shirt size\" }\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as disabled, value, and more that will be applied to the dropdown list input element.\n            </summary>\n            <value>\n            The value as dictionary collection. The default value is <c>null</c>\n            </value>\n            <remarks>\n            If you configured both the property and equivalent input attribute, then the component considers the property value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"InputAttributes"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32?","Documentation":"\n            <summary>\n            Gets or sets the index of the selected item in the dropdown list component.\n            </summary>\n            <value>\n            The index of the selected items in the list. The default value is <c>null</c> which indicates that nothing is selected.\n            </value>\n            <exception cref=\"T:System.ArgumentOutOfRangeException\">The index was set to less than -1, or greater than or equal to the number of items on the list at the time the list is rendered.</exception>\n            <remarks>\n            Use this property to determine the index of the currently selected item in the list if the dropdown list component allows only one selection.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Index"}},{"Kind":"Components.Component","Name":"IndexChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32?>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the index changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IndexChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is displayed when the dropdown list has no value and remove on the focus.\n            </summary>\n            <value>\n            The text that is displayed when the dropdown list has no value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            The property depends on the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FloatLabelType\" /> property, The placeholder text acts as a label.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"PopupHeight","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the height of the popup list.\n            </summary>\n            <value>\n            The preferred height of the popup list in pixels or percentage of the dropdown list. The default value is <c>300px</c>.\n            </value>\n            <remarks>\n            This property accepts pixels or percentage value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"PopupHeight"}},{"Kind":"Components.Component","Name":"PopupWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the popup list. By default, the popup width sets based on the width of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </summary>\n            <value>\n            The preferred width of the popup list in pixels or percentage of the dropdown list. The default value is <c>100%</c>.\n            </value>\n            <remarks>\n            This property accepts pixels or percentage value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"PopupWidth"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> is in read-only mode or not.\n            </summary>\n            <value>\n            <c>true</c> if the dropdown list is in read-only mode; otherwise, <c>false</c>. The default is <c>false</c>.\n            </value>\n            <remarks>\n            In read-only mode, the dropdown list popup can not be opened on click.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Readonly"}},{"Kind":"Components.Component","Name":"EnableVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the virtual scrolling is enabled or not.\n            </summary>\n            <value>\n            <c>true</c> if the virtual scrolling for dropdown list; otherwise, <c>false</c>. The default is <c>false</c>.\n            </value>\n            <remarks>\n            To improve performance, the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.EnableVirtualization\" /> property is set to <c>true</c>. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualization"}},{"Kind":"Components.Component","Name":"ItemsCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the number of items to be fetched in the popup when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.EnableVirtualization\" /> property is enabled.\n            </summary>\n            <value>\n            The number of list items to be fetched in dropdown list component. The default value is <c>5</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemsCount"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets the value of the selected item in the dropdown list component. This will be used with two-way binding.\n            </summary>\n            <value>\n            The value of the selected item in the dropdown list component. The default is <c>null</c>.\n            </value>\n            <remarks>\n            Use the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property to specify or determine the value displayed in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the selected list item in the input element of the component.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <ValueTemplate>\n                        <span> T-shirt size - @(context)</span>\n                    </ValueTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </summary>\n            <value>\n            The preferred width of the dropdown list in pixels or percentage value. The default value is <c>100%</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the location of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component in the tab order.\n            </summary>\n            <value>\n            The numeric index of the dropdown list in the tab order. The default value is <c>0</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TabIndex"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input loses the focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            The order of sorting the list items. The default value is <c>SortOrder.None</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"SortOrder"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Gets or sets the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n            <value> \n            Binding data to the popup element. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"DataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Gets or sets the external `Query` that execute along with data processing.\n            </summary>\n            <value> \n            Query value to be used for data fetching. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Query"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether case-sensitivity is enabled or disabled when searching for suggestions.\n            </summary>\n            <value>\n            <c>false</c>, consider the `case-sensitive` on performing the search to find suggestions. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether diacritic characters or accents are ignored.\n            </summary>\n            <value>\n            <c>true</c>, ignores the diacritic characters or accents when filtering. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the z-index value of the component popup element.\n            </summary>\n            <value> \n            The ZIndex value for the popup element.The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>","Components.GenericTyped":"True"}},{"HashCode":873309412,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The AutoComplete component provides the matched suggestion list when type into the input, from which the user can select one.\n            </summary>\n            <summary>\n            The AutoComplete component provides the matched suggestion list when type into the input, from which the user can select one.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfAutoComplete"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Highlight","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            When set to 'true', highlight the searched characters on suggested list items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Highlight"}},{"Kind":"Components.Component","Name":"MinLength","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Allows you to set the minimum search character length, the search action will perform after typed minimum characters.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinLength"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Determines on which filter type, the component needs to be considered on search action.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FilterType"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>Specifies whether to show or hide the clear button.</para>\n            <para>When the clear button is clicked, `Value` properties are reset to null.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton"}},{"Kind":"Components.Component","Name":"ShowPopupButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Allows you to either show or hide the popup button on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowPopupButton"}},{"Kind":"Components.Component","Name":"SuggestionCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Supports the specified number of list items on the suggestion popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SuggestionCount"}},{"Kind":"Components.Component","Name":"AllowCustom","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the component allows user defined value which does not exist in data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowCustom"}},{"Kind":"Components.Component","Name":"Autofill","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether suggest a first matched item in input when searching. No action happens when no matches found.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Autofill"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the unique identifier for <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            You can specify only unique value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value in the <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether the filtering option is enabled or not.\n            </summary>\n            <value>\n            <c>true</c>, if the filtering option is enabled and show the filter bar (search box) in the pop-up; otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            The filter action retrieves the matched items using the <see cref=\"P:Syncfusion.Blazor.DropDowns.DropDownListEvents`2.Filtering\" /> event based on the characters typed in the search textbox.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the drop-down list component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for dropdown list component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component. \n            </summary>\n            <value>\n            <c>true</c>, if the Dropdown list component is enabled; otherwise, it is disabled. The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"FilterBarPlaceholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is displayed when the filter textbox has no text and removes the focus.\n            </summary>\n            <value>\n            The text that is displayed when the filter text box has no text. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            This property value is updated only when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.AllowFiltering\" /> is enabled.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FilterBarPlaceholder"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the floating label behavior of the dropdown list. The <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Placeholder\" /> text act as a lable.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.FloatLabelType\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.FloatLabelType.Never\" />\n            </value>\n            <remarks>\n            If the <c>FloatLabelType</c> is <c>Never</c>, the placeholder text does not float as a label.\n            If the <c>FloatLabelType</c> is <c>Auto</c>, the placeholder text will float above the DropDownList component as a label after focusing it.\n            If the <c>FloatLabelType</c> is <c>Always</c>, the placeholder text is displayed as a label above the DropDownList component.\n            </remarks>\n            <example>\n            In the following code example, set the float lable as <c>Auto</c>.\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\" Placeholder=\"Select a value\" FloatLabelType=\"FloatLabelType.Auto\">\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the footer container of the pop-up list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n             <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <FooterTemplate>\n                        <span class='footer'>Total list items: 3 </span>\n                    </FooterTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the header container of the popup list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <HeaderTemplate>\n                        <span class='header'> T-shirt size </span>\n                    </HeaderTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as styles, class, and more that will be applied to the dropdown list element.\n            </summary>\n            <value>\n            The value as dictionary collection.The default value is <c>null</c>\n            </value>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\" HtmlAttributes=\"@CustomAttribute\">\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>()\n                {\n                    { \"title\", \"Select T-shirt size\" }\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as disabled, value, and more that will be applied to the dropdown list input element.\n            </summary>\n            <value>\n            The value as dictionary collection. The default value is <c>null</c>\n            </value>\n            <remarks>\n            If you configured both the property and equivalent input attribute, then the component considers the property value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"InputAttributes"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32?","Documentation":"\n            <summary>\n            Gets or sets the index of the selected item in the dropdown list component.\n            </summary>\n            <value>\n            The index of the selected items in the list. The default value is <c>null</c> which indicates that nothing is selected.\n            </value>\n            <exception cref=\"T:System.ArgumentOutOfRangeException\">The index was set to less than -1, or greater than or equal to the number of items on the list at the time the list is rendered.</exception>\n            <remarks>\n            Use this property to determine the index of the currently selected item in the list if the dropdown list component allows only one selection.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Index"}},{"Kind":"Components.Component","Name":"IndexChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32?>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the index changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IndexChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is displayed when the dropdown list has no value and remove on the focus.\n            </summary>\n            <value>\n            The text that is displayed when the dropdown list has no value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            The property depends on the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FloatLabelType\" /> property, The placeholder text acts as a label.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"PopupHeight","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the height of the popup list.\n            </summary>\n            <value>\n            The preferred height of the popup list in pixels or percentage of the dropdown list. The default value is <c>300px</c>.\n            </value>\n            <remarks>\n            This property accepts pixels or percentage value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"PopupHeight"}},{"Kind":"Components.Component","Name":"PopupWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the popup list. By default, the popup width sets based on the width of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </summary>\n            <value>\n            The preferred width of the popup list in pixels or percentage of the dropdown list. The default value is <c>100%</c>.\n            </value>\n            <remarks>\n            This property accepts pixels or percentage value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"PopupWidth"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> is in read-only mode or not.\n            </summary>\n            <value>\n            <c>true</c> if the dropdown list is in read-only mode; otherwise, <c>false</c>. The default is <c>false</c>.\n            </value>\n            <remarks>\n            In read-only mode, the dropdown list popup can not be opened on click.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Readonly"}},{"Kind":"Components.Component","Name":"EnableVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the virtual scrolling is enabled or not.\n            </summary>\n            <value>\n            <c>true</c> if the virtual scrolling for dropdown list; otherwise, <c>false</c>. The default is <c>false</c>.\n            </value>\n            <remarks>\n            To improve performance, the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.EnableVirtualization\" /> property is set to <c>true</c>. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualization"}},{"Kind":"Components.Component","Name":"ItemsCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the number of items to be fetched in the popup when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.EnableVirtualization\" /> property is enabled.\n            </summary>\n            <value>\n            The number of list items to be fetched in dropdown list component. The default value is <c>5</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemsCount"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets the value of the selected item in the dropdown list component. This will be used with two-way binding.\n            </summary>\n            <value>\n            The value of the selected item in the dropdown list component. The default is <c>null</c>.\n            </value>\n            <remarks>\n            Use the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property to specify or determine the value displayed in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the selected list item in the input element of the component.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <ValueTemplate>\n                        <span> T-shirt size - @(context)</span>\n                    </ValueTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </summary>\n            <value>\n            The preferred width of the dropdown list in pixels or percentage value. The default value is <c>100%</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the location of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component in the tab order.\n            </summary>\n            <value>\n            The numeric index of the dropdown list in the tab order. The default value is <c>0</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TabIndex"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input loses the focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            The order of sorting the list items. The default value is <c>SortOrder.None</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"SortOrder"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Gets or sets the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n            <value> \n            Binding data to the popup element. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"DataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Gets or sets the external `Query` that execute along with data processing.\n            </summary>\n            <value> \n            Query value to be used for data fetching. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Query"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether case-sensitivity is enabled or disabled when searching for suggestions.\n            </summary>\n            <value>\n            <c>false</c>, consider the `case-sensitive` on performing the search to find suggestions. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether diacritic characters or accents are ignored.\n            </summary>\n            <value>\n            <c>true</c>, ignores the diacritic characters or accents when filtering. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the z-index value of the component popup element.\n            </summary>\n            <value> \n            The ZIndex value for the popup element.The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1855520582,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ChildContent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfAutoComplete"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":169780475,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ChildContent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.DropDowns.SfAutoComplete"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-942306095,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the footer container of the pop-up list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n             <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <FooterTemplate>\n                        <span class='footer'>Total list items: 3 </span>\n                    </FooterTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"SfAutoComplete"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.FooterTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1764329099,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the footer container of the pop-up list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n             <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <FooterTemplate>\n                        <span class='footer'>Total list items: 3 </span>\n                    </FooterTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfAutoComplete"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.FooterTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-977496540,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the header container of the popup list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <HeaderTemplate>\n                        <span class='header'> T-shirt size </span>\n                    </HeaderTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"SfAutoComplete"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.HeaderTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1489698386,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the header container of the popup list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <HeaderTemplate>\n                        <span class='header'> T-shirt size </span>\n                    </HeaderTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfAutoComplete"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.HeaderTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1309904031,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ValueTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the selected list item in the input element of the component.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <ValueTemplate>\n                        <span> T-shirt size - @(context)</span>\n                    </ValueTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"SfAutoComplete"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ValueTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ValueTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-968613497,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ValueTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the selected list item in the input element of the component.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <ValueTemplate>\n                        <span> T-shirt size - @(context)</span>\n                    </ValueTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfAutoComplete"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ValueTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ValueTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1544145732,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"SfAutoComplete"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ItemTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1436537185,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfAutoComplete"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ItemTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1369155570,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"SfAutoComplete"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.GroupTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-527103001,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfAutoComplete"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.GroupTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1889204339,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"SfAutoComplete"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.NoRecordsTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1167732557,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfAutoComplete"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.NoRecordsTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1653209724,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"SfAutoComplete"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ActionFailureTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":837514443,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfAutoComplete"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>.ActionFailureTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2116428701,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The DropDownBase can be created data source and fetch the list of data from data bound component.\n            </summary>\n            <typeparam name=\"T\">Specifies the type of SfDropDownBase.</typeparam>\n            <summary>\n            The DropDownBase can be created data source and fetch the list of data from data bound component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDropDownBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.DropDowns.SfDropDownBase<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<T>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<T>>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            The order of sorting the list items. The default value is <c>SortOrder.None</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"SortOrder"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<T>","Documentation":"\n            <summary>\n            <para>Gets or sets the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n            <value> \n            Binding data to the popup element. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"DataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Gets or sets the external `Query` that execute along with data processing.\n            </summary>\n            <value> \n            Query value to be used for data fetching. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets which filter type, the component needs to be considered on search action.\n            </summary>\n            <value> \n            The filter type specifed for searching the list items. The default value is <c>FilterType.StartsWith</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether case-sensitivity is enabled or disabled when searching for suggestions.\n            </summary>\n            <value>\n            <c>false</c>, consider the `case-sensitive` on performing the search to find suggestions. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether diacritic characters or accents are ignored.\n            </summary>\n            <value>\n            <c>true</c>, ignores the diacritic characters or accents when filtering. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the z-index value of the component popup element.\n            </summary>\n            <value> \n            The ZIndex value for the popup element.The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>","Components.GenericTyped":"True"}},{"HashCode":613591791,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The DropDownBase can be created data source and fetch the list of data from data bound component.\n            </summary>\n            <typeparam name=\"T\">Specifies the type of SfDropDownBase.</typeparam>\n            <summary>\n            The DropDownBase can be created data source and fetch the list of data from data bound component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfDropDownBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.DropDowns.SfDropDownBase<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<T>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<T>>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            The order of sorting the list items. The default value is <c>SortOrder.None</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"SortOrder"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<T>","Documentation":"\n            <summary>\n            <para>Gets or sets the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n            <value> \n            Binding data to the popup element. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"DataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Gets or sets the external `Query` that execute along with data processing.\n            </summary>\n            <value> \n            Query value to be used for data fetching. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets which filter type, the component needs to be considered on search action.\n            </summary>\n            <value> \n            The filter type specifed for searching the list items. The default value is <c>FilterType.StartsWith</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether case-sensitivity is enabled or disabled when searching for suggestions.\n            </summary>\n            <value>\n            <c>false</c>, consider the `case-sensitive` on performing the search to find suggestions. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether diacritic characters or accents are ignored.\n            </summary>\n            <value>\n            <c>true</c>, ignores the diacritic characters or accents when filtering. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the z-index value of the component popup element.\n            </summary>\n            <value> \n            The ZIndex value for the popup element.The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1446671831,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"SfDropDownBase"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.ItemTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-152434035,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfDropDownBase"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.ItemTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2035444707,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"SfDropDownBase"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.GroupTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":271265970,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfDropDownBase"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.GroupTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1864653142,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"SfDropDownBase"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.NoRecordsTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-132456553,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfDropDownBase"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.NoRecordsTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-274486587,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"SfDropDownBase"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.ActionFailureTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1103245187,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfDropDownBase"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownBase<T>.ActionFailureTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1797632729,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ComboBoxEvents<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the DropDownList Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the value type.</typeparam>\n            <typeparam name=\"TItem\">Specifies the type of ComboBoxEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ComboBoxEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.ComboBoxEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.ComboBoxEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Documentation":"\n            <summary>\n            Triggers before fetching data from the remote server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Documentation":"\n            <summary>\n            Triggers after data is fetched successfully from the remote server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Exception>","Documentation":"\n            <summary>\n            Triggers when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Documentation":"\n            <summary>\n            Triggers when the popup before opens.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when focus moves out from the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ChangeEventArgs<TValue, TItem>>","Documentation":"\n            <summary>\n            <para>Triggers when an item in a popup is selected or when the model value is changed by user.</para>\n            <para>Use Change event to configure the cascading DropDownList.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Triggers before the popup is closed. If you cancel this event, the popup remains opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"CustomValueSpecifier","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.CustomValueSpecifierEventArgs<TItem>>","Documentation":"\n            <summary>\n            Triggers on set a custom value to this component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CustomValueSpecifier","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Documentation":"\n            <summary>\n            Triggers when data source is populated in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataBound","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Filtering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Documentation":"\n            <summary>\n            Triggers on typing a character in the filter bar when the AllowFiltering is enabled.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Filtering","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is focused.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Triggers when the popup opens.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Documentation":"\n            <summary>\n            Triggers after the popup has been closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnValueSelect","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Documentation":"\n            <summary>\n            Triggers when an item in the popup is selected by the user either with mouse/tap or with keyboard navigation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnValueSelect","Components.EventCallback":"True","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxEvents<TValue, TItem>","Components.GenericTyped":"True"}},{"HashCode":-1542754117,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ComboBoxEvents<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the DropDownList Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the value type.</typeparam>\n            <typeparam name=\"TItem\">Specifies the type of ComboBoxEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.ComboBoxEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.ComboBoxEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.ComboBoxEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Documentation":"\n            <summary>\n            Triggers before fetching data from the remote server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Documentation":"\n            <summary>\n            Triggers after data is fetched successfully from the remote server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Exception>","Documentation":"\n            <summary>\n            Triggers when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Documentation":"\n            <summary>\n            Triggers when the popup before opens.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when focus moves out from the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ChangeEventArgs<TValue, TItem>>","Documentation":"\n            <summary>\n            <para>Triggers when an item in a popup is selected or when the model value is changed by user.</para>\n            <para>Use Change event to configure the cascading DropDownList.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Triggers before the popup is closed. If you cancel this event, the popup remains opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"CustomValueSpecifier","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.CustomValueSpecifierEventArgs<TItem>>","Documentation":"\n            <summary>\n            Triggers on set a custom value to this component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CustomValueSpecifier","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Documentation":"\n            <summary>\n            Triggers when data source is populated in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataBound","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Filtering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Documentation":"\n            <summary>\n            Triggers on typing a character in the filter bar when the AllowFiltering is enabled.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Filtering","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is focused.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Triggers when the popup opens.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Documentation":"\n            <summary>\n            Triggers after the popup has been closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnValueSelect","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Documentation":"\n            <summary>\n            Triggers when an item in the popup is selected by the user either with mouse/tap or with keyboard navigation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnValueSelect","Components.EventCallback":"True","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxEvents<TValue, TItem>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2035941180,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ComboBoxFieldSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The Fields property maps the columns of the data table and binds the data to the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ComboBoxFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Group the list items with it's related items by mapping groupBy field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupBy"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the list element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the icon class column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the text column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the value column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxFieldSettings"}},{"HashCode":1005156635,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ComboBoxFieldSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The Fields property maps the columns of the data table and binds the data to the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.ComboBoxFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Group the list items with it's related items by mapping groupBy field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupBy"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the list element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the icon class column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the text column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the value column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxFieldSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1536545254,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The ComboBox has been provided with several options to customize each list item, group title, header, and footer elements.\n            </summary>\n            <typeparam name=\"TItem\">Specifies the type of ComboBoxTemplates.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ComboBoxTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>","Components.GenericTyped":"True"}},{"HashCode":1163820535,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The ComboBox has been provided with several options to customize each list item, group title, header, and footer elements.\n            </summary>\n            <typeparam name=\"TItem\">Specifies the type of ComboBoxTemplates.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-95427937,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"ComboBoxTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.FooterTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1028176583,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.FooterTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1752330416,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"ComboBoxTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.HeaderTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":2073867375,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.HeaderTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":171513443,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"ComboBoxTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.GroupTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":58825444,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.GroupTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":219219383,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"ComboBoxTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.ItemTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":752541916,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.ItemTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1591879425,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"ComboBoxTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.NoRecordsTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1074194125,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.NoRecordsTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":732839057,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"ComboBoxTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.ActionFailureTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-542551927,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ComboBoxTemplates<TItem>.ActionFailureTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1925936753,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The ComboBox component allows the user to type a value or choose an option from the list of predefined options.\n            </summary>\n            <summary>\n            The ComboBox component allows the user to type a value or choose an option from the list of predefined options.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the value type.</typeparam>\n            <typeparam name=\"TItem\">Specifies the type of SfComboBox.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfComboBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"AllowCustom","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the component allows user defined value which does not exist in data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowCustom"}},{"Kind":"Components.Component","Name":"Autofill","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether suggest a first matched item in input when searching. No action happens when no matches found.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Autofill"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>Specifies whether to show or hide the clear button.</para>\n            <para>When the clear button is clicked, `Value`, `Text`, and `Index` properties are reset to null.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the unique identifier for <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            You can specify only unique value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value in the <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether the filtering option is enabled or not.\n            </summary>\n            <value>\n            <c>true</c>, if the filtering option is enabled and show the filter bar (search box) in the pop-up; otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            The filter action retrieves the matched items using the <see cref=\"P:Syncfusion.Blazor.DropDowns.DropDownListEvents`2.Filtering\" /> event based on the characters typed in the search textbox.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the drop-down list component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for dropdown list component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component. \n            </summary>\n            <value>\n            <c>true</c>, if the Dropdown list component is enabled; otherwise, it is disabled. The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"FilterBarPlaceholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is displayed when the filter textbox has no text and removes the focus.\n            </summary>\n            <value>\n            The text that is displayed when the filter text box has no text. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            This property value is updated only when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.AllowFiltering\" /> is enabled.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FilterBarPlaceholder"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the floating label behavior of the dropdown list. The <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Placeholder\" /> text act as a lable.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.FloatLabelType\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.FloatLabelType.Never\" />\n            </value>\n            <remarks>\n            If the <c>FloatLabelType</c> is <c>Never</c>, the placeholder text does not float as a label.\n            If the <c>FloatLabelType</c> is <c>Auto</c>, the placeholder text will float above the DropDownList component as a label after focusing it.\n            If the <c>FloatLabelType</c> is <c>Always</c>, the placeholder text is displayed as a label above the DropDownList component.\n            </remarks>\n            <example>\n            In the following code example, set the float lable as <c>Auto</c>.\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\" Placeholder=\"Select a value\" FloatLabelType=\"FloatLabelType.Auto\">\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the footer container of the pop-up list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n             <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <FooterTemplate>\n                        <span class='footer'>Total list items: 3 </span>\n                    </FooterTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the header container of the popup list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <HeaderTemplate>\n                        <span class='header'> T-shirt size </span>\n                    </HeaderTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as styles, class, and more that will be applied to the dropdown list element.\n            </summary>\n            <value>\n            The value as dictionary collection.The default value is <c>null</c>\n            </value>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\" HtmlAttributes=\"@CustomAttribute\">\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>()\n                {\n                    { \"title\", \"Select T-shirt size\" }\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as disabled, value, and more that will be applied to the dropdown list input element.\n            </summary>\n            <value>\n            The value as dictionary collection. The default value is <c>null</c>\n            </value>\n            <remarks>\n            If you configured both the property and equivalent input attribute, then the component considers the property value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"InputAttributes"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32?","Documentation":"\n            <summary>\n            Gets or sets the index of the selected item in the dropdown list component.\n            </summary>\n            <value>\n            The index of the selected items in the list. The default value is <c>null</c> which indicates that nothing is selected.\n            </value>\n            <exception cref=\"T:System.ArgumentOutOfRangeException\">The index was set to less than -1, or greater than or equal to the number of items on the list at the time the list is rendered.</exception>\n            <remarks>\n            Use this property to determine the index of the currently selected item in the list if the dropdown list component allows only one selection.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Index"}},{"Kind":"Components.Component","Name":"IndexChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32?>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the index changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IndexChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is displayed when the dropdown list has no value and remove on the focus.\n            </summary>\n            <value>\n            The text that is displayed when the dropdown list has no value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            The property depends on the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FloatLabelType\" /> property, The placeholder text acts as a label.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"PopupHeight","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the height of the popup list.\n            </summary>\n            <value>\n            The preferred height of the popup list in pixels or percentage of the dropdown list. The default value is <c>300px</c>.\n            </value>\n            <remarks>\n            This property accepts pixels or percentage value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"PopupHeight"}},{"Kind":"Components.Component","Name":"PopupWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the popup list. By default, the popup width sets based on the width of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </summary>\n            <value>\n            The preferred width of the popup list in pixels or percentage of the dropdown list. The default value is <c>100%</c>.\n            </value>\n            <remarks>\n            This property accepts pixels or percentage value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"PopupWidth"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> is in read-only mode or not.\n            </summary>\n            <value>\n            <c>true</c> if the dropdown list is in read-only mode; otherwise, <c>false</c>. The default is <c>false</c>.\n            </value>\n            <remarks>\n            In read-only mode, the dropdown list popup can not be opened on click.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Readonly"}},{"Kind":"Components.Component","Name":"EnableVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the virtual scrolling is enabled or not.\n            </summary>\n            <value>\n            <c>true</c> if the virtual scrolling for dropdown list; otherwise, <c>false</c>. The default is <c>false</c>.\n            </value>\n            <remarks>\n            To improve performance, the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.EnableVirtualization\" /> property is set to <c>true</c>. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualization"}},{"Kind":"Components.Component","Name":"ItemsCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the number of items to be fetched in the popup when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.EnableVirtualization\" /> property is enabled.\n            </summary>\n            <value>\n            The number of list items to be fetched in dropdown list component. The default value is <c>5</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemsCount"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets the value of the selected item in the dropdown list component. This will be used with two-way binding.\n            </summary>\n            <value>\n            The value of the selected item in the dropdown list component. The default is <c>null</c>.\n            </value>\n            <remarks>\n            Use the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property to specify or determine the value displayed in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the selected list item in the input element of the component.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <ValueTemplate>\n                        <span> T-shirt size - @(context)</span>\n                    </ValueTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </summary>\n            <value>\n            The preferred width of the dropdown list in pixels or percentage value. The default value is <c>100%</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the location of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component in the tab order.\n            </summary>\n            <value>\n            The numeric index of the dropdown list in the tab order. The default value is <c>0</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TabIndex"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input loses the focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            The order of sorting the list items. The default value is <c>SortOrder.None</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"SortOrder"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Gets or sets the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n            <value> \n            Binding data to the popup element. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"DataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Gets or sets the external `Query` that execute along with data processing.\n            </summary>\n            <value> \n            Query value to be used for data fetching. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets which filter type, the component needs to be considered on search action.\n            </summary>\n            <value> \n            The filter type specifed for searching the list items. The default value is <c>FilterType.StartsWith</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether case-sensitivity is enabled or disabled when searching for suggestions.\n            </summary>\n            <value>\n            <c>false</c>, consider the `case-sensitive` on performing the search to find suggestions. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether diacritic characters or accents are ignored.\n            </summary>\n            <value>\n            <c>true</c>, ignores the diacritic characters or accents when filtering. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the z-index value of the component popup element.\n            </summary>\n            <value> \n            The ZIndex value for the popup element.The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>","Components.GenericTyped":"True"}},{"HashCode":-1342170881,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The ComboBox component allows the user to type a value or choose an option from the list of predefined options.\n            </summary>\n            <summary>\n            The ComboBox component allows the user to type a value or choose an option from the list of predefined options.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the value type.</typeparam>\n            <typeparam name=\"TItem\">Specifies the type of SfComboBox.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfComboBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"AllowCustom","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the component allows user defined value which does not exist in data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowCustom"}},{"Kind":"Components.Component","Name":"Autofill","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether suggest a first matched item in input when searching. No action happens when no matches found.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Autofill"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>Specifies whether to show or hide the clear button.</para>\n            <para>When the clear button is clicked, `Value`, `Text`, and `Index` properties are reset to null.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton"}},{"Kind":"Components.Component","Name":"ValidateOnInput","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component validates the input or not.\n            </summary>\n            <value>\n            <c>true</c>, If the ValidateOnInput is enabled for form validation, then the model value will be updated on entering the value to the input. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            This property is used to validate the form on typing into the input and updating the model value. The ValueChange event will be fired after the component lost its focus.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ValidateOnInput"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the unique identifier for <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            You can specify only unique value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value in the <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether the filtering option is enabled or not.\n            </summary>\n            <value>\n            <c>true</c>, if the filtering option is enabled and show the filter bar (search box) in the pop-up; otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            The filter action retrieves the matched items using the <see cref=\"P:Syncfusion.Blazor.DropDowns.DropDownListEvents`2.Filtering\" /> event based on the characters typed in the search textbox.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the drop-down list component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for dropdown list component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component. \n            </summary>\n            <value>\n            <c>true</c>, if the Dropdown list component is enabled; otherwise, it is disabled. The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"FilterBarPlaceholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is displayed when the filter textbox has no text and removes the focus.\n            </summary>\n            <value>\n            The text that is displayed when the filter text box has no text. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            This property value is updated only when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.AllowFiltering\" /> is enabled.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FilterBarPlaceholder"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the floating label behavior of the dropdown list. The <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Placeholder\" /> text act as a lable.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.FloatLabelType\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.FloatLabelType.Never\" />\n            </value>\n            <remarks>\n            If the <c>FloatLabelType</c> is <c>Never</c>, the placeholder text does not float as a label.\n            If the <c>FloatLabelType</c> is <c>Auto</c>, the placeholder text will float above the DropDownList component as a label after focusing it.\n            If the <c>FloatLabelType</c> is <c>Always</c>, the placeholder text is displayed as a label above the DropDownList component.\n            </remarks>\n            <example>\n            In the following code example, set the float lable as <c>Auto</c>.\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\" Placeholder=\"Select a value\" FloatLabelType=\"FloatLabelType.Auto\">\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the footer container of the pop-up list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n             <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <FooterTemplate>\n                        <span class='footer'>Total list items: 3 </span>\n                    </FooterTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the header container of the popup list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <HeaderTemplate>\n                        <span class='header'> T-shirt size </span>\n                    </HeaderTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as styles, class, and more that will be applied to the dropdown list element.\n            </summary>\n            <value>\n            The value as dictionary collection.The default value is <c>null</c>\n            </value>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\" HtmlAttributes=\"@CustomAttribute\">\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>()\n                {\n                    { \"title\", \"Select T-shirt size\" }\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as disabled, value, and more that will be applied to the dropdown list input element.\n            </summary>\n            <value>\n            The value as dictionary collection. The default value is <c>null</c>\n            </value>\n            <remarks>\n            If you configured both the property and equivalent input attribute, then the component considers the property value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"InputAttributes"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32?","Documentation":"\n            <summary>\n            Gets or sets the index of the selected item in the dropdown list component.\n            </summary>\n            <value>\n            The index of the selected items in the list. The default value is <c>null</c> which indicates that nothing is selected.\n            </value>\n            <exception cref=\"T:System.ArgumentOutOfRangeException\">The index was set to less than -1, or greater than or equal to the number of items on the list at the time the list is rendered.</exception>\n            <remarks>\n            Use this property to determine the index of the currently selected item in the list if the dropdown list component allows only one selection.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Index"}},{"Kind":"Components.Component","Name":"IndexChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32?>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the index changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IndexChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is displayed when the dropdown list has no value and remove on the focus.\n            </summary>\n            <value>\n            The text that is displayed when the dropdown list has no value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            The property depends on the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FloatLabelType\" /> property, The placeholder text acts as a label.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"PopupHeight","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the height of the popup list.\n            </summary>\n            <value>\n            The preferred height of the popup list in pixels or percentage of the dropdown list. The default value is <c>300px</c>.\n            </value>\n            <remarks>\n            This property accepts pixels or percentage value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"PopupHeight"}},{"Kind":"Components.Component","Name":"PopupWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the popup list. By default, the popup width sets based on the width of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </summary>\n            <value>\n            The preferred width of the popup list in pixels or percentage of the dropdown list. The default value is <c>100%</c>.\n            </value>\n            <remarks>\n            This property accepts pixels or percentage value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"PopupWidth"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> is in read-only mode or not.\n            </summary>\n            <value>\n            <c>true</c> if the dropdown list is in read-only mode; otherwise, <c>false</c>. The default is <c>false</c>.\n            </value>\n            <remarks>\n            In read-only mode, the dropdown list popup can not be opened on click.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Readonly"}},{"Kind":"Components.Component","Name":"EnableVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the virtual scrolling is enabled or not.\n            </summary>\n            <value>\n            <c>true</c> if the virtual scrolling for dropdown list; otherwise, <c>false</c>. The default is <c>false</c>.\n            </value>\n            <remarks>\n            To improve performance, the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.EnableVirtualization\" /> property is set to <c>true</c>. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualization"}},{"Kind":"Components.Component","Name":"ItemsCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the number of items to be fetched in the popup when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.EnableVirtualization\" /> property is enabled.\n            </summary>\n            <value>\n            The number of list items to be fetched in dropdown list component. The default value is <c>5</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemsCount"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets the value of the selected item in the dropdown list component. This will be used with two-way binding.\n            </summary>\n            <value>\n            The value of the selected item in the dropdown list component. The default is <c>null</c>.\n            </value>\n            <remarks>\n            Use the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property to specify or determine the value displayed in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the selected list item in the input element of the component.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <ValueTemplate>\n                        <span> T-shirt size - @(context)</span>\n                    </ValueTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </summary>\n            <value>\n            The preferred width of the dropdown list in pixels or percentage value. The default value is <c>100%</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the location of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component in the tab order.\n            </summary>\n            <value>\n            The numeric index of the dropdown list in the tab order. The default value is <c>0</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TabIndex"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input loses the focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            The order of sorting the list items. The default value is <c>SortOrder.None</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"SortOrder"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Gets or sets the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n            <value> \n            Binding data to the popup element. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"DataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Gets or sets the external `Query` that execute along with data processing.\n            </summary>\n            <value> \n            Query value to be used for data fetching. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets which filter type, the component needs to be considered on search action.\n            </summary>\n            <value> \n            The filter type specifed for searching the list items. The default value is <c>FilterType.StartsWith</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether case-sensitivity is enabled or disabled when searching for suggestions.\n            </summary>\n            <value>\n            <c>false</c>, consider the `case-sensitive` on performing the search to find suggestions. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether diacritic characters or accents are ignored.\n            </summary>\n            <value>\n            <c>true</c>, ignores the diacritic characters or accents when filtering. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the z-index value of the component popup element.\n            </summary>\n            <value> \n            The ZIndex value for the popup element.The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-505890531,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ChildContent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfComboBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1272533037,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ChildContent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.DropDowns.SfComboBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":895016610,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the footer container of the pop-up list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n             <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <FooterTemplate>\n                        <span class='footer'>Total list items: 3 </span>\n                    </FooterTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"SfComboBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.FooterTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-2079719634,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the footer container of the pop-up list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n             <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <FooterTemplate>\n                        <span class='footer'>Total list items: 3 </span>\n                    </FooterTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfComboBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.FooterTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":885781137,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the header container of the popup list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <HeaderTemplate>\n                        <span class='header'> T-shirt size </span>\n                    </HeaderTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"SfComboBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.HeaderTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1999632368,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the header container of the popup list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <HeaderTemplate>\n                        <span class='header'> T-shirt size </span>\n                    </HeaderTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfComboBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.HeaderTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-457839820,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ValueTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the selected list item in the input element of the component.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <ValueTemplate>\n                        <span> T-shirt size - @(context)</span>\n                    </ValueTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"SfComboBox"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ValueTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ValueTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1588611677,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ValueTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the selected list item in the input element of the component.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <ValueTemplate>\n                        <span> T-shirt size - @(context)</span>\n                    </ValueTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfComboBox"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ValueTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ValueTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":875543416,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"SfComboBox"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ItemTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":642080404,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfComboBox"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ItemTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1459087691,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"SfComboBox"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.GroupTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-925319282,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfComboBox"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.GroupTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1244092892,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"SfComboBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.NoRecordsTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":689408848,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfComboBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.NoRecordsTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1191268270,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"SfComboBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ActionFailureTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1895223934,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfComboBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>.ActionFailureTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1119875636,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.DropDownListEvents<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Defines the SfDropDownList events of the component.\n            </summary>\n            <typeparam name=\"TValue\">A type which provides for the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> poperty type.</typeparam>\n            <typeparam name=\"TItem\">A type which provides data list schema for the dropdown list events.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DropDownListEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.DropDownListEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.DropDownListEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked before fetching data from the data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the evnet callback that will be invoked after data is fetched successfully from the data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Exception>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the data fetch request fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the dropdown popup before opens.\n            </summary>\n            <remarks>\n            You can prevent the dropdown popup open action using <see cref=\"P:Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs.Cancel\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListEvents TValue=\"string\" TItem=\"string\" OnOpen=\"@OnOpenHandler\"/>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnOpenHandler(BeforeOpenEventArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the dropdown list loses focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ChangeEventArgs<TValue, TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property changed.\n            </summary>\n            <remarks>\n            This event triggers when an item in a popup is selected or when the model value is changed by user.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListEvents TValue=\"string\" TItem=\"string\" ValueChange=\"@OnChange\"/>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, string> args) {\n                    var DDLValue = args.Value;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked before the dropdown popup is close.\n            </summary>\n            <remarks>\n            You can prevent the dropdown popup close action using <see cref=\"P:Syncfusion.Blazor.DropDowns.PopupEventArgs.Cancel\" /> and the popup remains opened always.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListEvents TValue=\"string\" TItem=\"string\" OnClose=\"@OnCloseHandler\"/>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnCloseHandler(PopupEventArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClose","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"DataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when data source is populated in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataBound","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Filtering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked on typing a character in the filter textbox.\n            </summary>\n            <remarks>\n            You can prevent the default filter action and make your query enable the <see cref=\"P:Syncfusion.Blazor.DropDowns.FilteringEventArgs.PreventDefaultAction\" /> event argument, and pass the modify data source and query in <see cref=\"M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FilterAsync(System.Collections.Generic.IEnumerable{`1},Syncfusion.Blazor.Data.Query,Syncfusion.Blazor.DropDowns.FieldSettingsModel)\" /> method.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList @ref=\"DDLObj\" TItem=\"string\" TValue=\"string\" AllowFiltering=\"true\" DataSource=\"@MyList\">\n                <DropDownListEvents TValue=\"string\" TItem=\"string\" Filtering=\"@OnFilteringHandler\" />\n            </SfDropDownList>\n            @code{\n                SfDropDownList<string, string> DDLObj { get; set; }\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public async Task OnFilteringHandler(FilteringEventArgs args) {\n                    args.PreventDefaultAction = true;\n                    var query = new Query().Where(new WhereFilter() { Field = \"Text\", Operator = \"contains\", value = args.Text, IgnoreCase = true });\n                    await DDLObj.FilterAsync(MyList, query);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Filtering","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is the focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the dropdown popup opens.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked after the dropdown popup has been closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnValueSelect","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be when an item is selected from the dropdown popup by the user either with mouse/tap or with keyboard navigation.\n            </summary>\n            <remarks>\n            You can prevent the item selection action using <see cref=\"P:Syncfusion.Blazor.DropDowns.SelectEventArgs`1.Cancel\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListEvents TValue=\"string\" TItem=\"string\" OnValueSelect=\"@OnSelectHandler\" />\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnSelectHandler(SelectEventArgs<string> args) {\n                    if(args.ItemData== \"Medium\")\n                        args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnValueSelect","Components.EventCallback":"True","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListEvents<TValue, TItem>","Components.GenericTyped":"True"}},{"HashCode":302463570,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.DropDownListEvents<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Defines the SfDropDownList events of the component.\n            </summary>\n            <typeparam name=\"TValue\">A type which provides for the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> poperty type.</typeparam>\n            <typeparam name=\"TItem\">A type which provides data list schema for the dropdown list events.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.DropDownListEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.DropDownListEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.DropDownListEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked before fetching data from the data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the evnet callback that will be invoked after data is fetched successfully from the data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Exception>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the data fetch request fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the dropdown popup before opens.\n            </summary>\n            <remarks>\n            You can prevent the dropdown popup open action using <see cref=\"P:Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs.Cancel\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListEvents TValue=\"string\" TItem=\"string\" OnOpen=\"@OnOpenHandler\"/>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnOpenHandler(BeforeOpenEventArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the dropdown list loses focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ChangeEventArgs<TValue, TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property changed.\n            </summary>\n            <remarks>\n            This event triggers when an item in a popup is selected or when the model value is changed by user.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListEvents TValue=\"string\" TItem=\"string\" ValueChange=\"@OnChange\"/>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, string> args) {\n                    var DDLValue = args.Value;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked before the dropdown popup is close.\n            </summary>\n            <remarks>\n            You can prevent the dropdown popup close action using <see cref=\"P:Syncfusion.Blazor.DropDowns.PopupEventArgs.Cancel\" /> and the popup remains opened always.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListEvents TValue=\"string\" TItem=\"string\" OnClose=\"@OnCloseHandler\"/>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnCloseHandler(PopupEventArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClose","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"DataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when data source is populated in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataBound","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Filtering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked on typing a character in the filter textbox.\n            </summary>\n            <remarks>\n            You can prevent the default filter action and make your query enable the <see cref=\"P:Syncfusion.Blazor.DropDowns.FilteringEventArgs.PreventDefaultAction\" /> event argument, and pass the modify data source and query in <see cref=\"M:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FilterAsync(System.Collections.Generic.IEnumerable{`1},Syncfusion.Blazor.Data.Query,Syncfusion.Blazor.DropDowns.FieldSettingsModel)\" /> method.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList @ref=\"DDLObj\" TItem=\"string\" TValue=\"string\" AllowFiltering=\"true\" DataSource=\"@MyList\">\n                <DropDownListEvents TValue=\"string\" TItem=\"string\" Filtering=\"@OnFilteringHandler\" />\n            </SfDropDownList>\n            @code{\n                SfDropDownList<string, string> DDLObj { get; set; }\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public async Task OnFilteringHandler(FilteringEventArgs args) {\n                    args.PreventDefaultAction = true;\n                    var query = new Query().Where(new WhereFilter() { Field = \"Text\", Operator = \"contains\", value = args.Text, IgnoreCase = true });\n                    await DDLObj.FilterAsync(MyList, query);\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Filtering","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the component is the focus.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked when the dropdown popup opens.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be invoked after the dropdown popup has been closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnValueSelect","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that will be when an item is selected from the dropdown popup by the user either with mouse/tap or with keyboard navigation.\n            </summary>\n            <remarks>\n            You can prevent the item selection action using <see cref=\"P:Syncfusion.Blazor.DropDowns.SelectEventArgs`1.Cancel\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListEvents TValue=\"string\" TItem=\"string\" OnValueSelect=\"@OnSelectHandler\" />\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnSelectHandler(SelectEventArgs<string> args) {\n                    if(args.ItemData== \"Medium\")\n                        args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnValueSelect","Components.EventCallback":"True","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListEvents<TValue, TItem>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-411418778,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.DropDownListFieldSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            A class that represents the Dropdown list fields to map with the data source and binds the data to the component.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TValue=\"string\" TItem=\"Country\" Placeholder=\"Select a country\" DataSource=\"@Countries\">\n                <DropDownListFieldSettings Text=\"Name\" Value=\"Code\"/>\n            </SfDropDownList>\n            @code{\n                public class Country\n                {\n                    public string Name { get; set; }\n                    public string Code { get; set; }\n                }\n                List<Country> Countries = new List<Country> {\n                    new Country() { Name = \"Australia\", Code = \"AU\" },\n                    new Country() { Name = \"Bermuda\", Code = \"BM\" },\n                    new Country() { Name = \"Canada\", Code = \"CA\" }\n                };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DropDownListFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets filed names to display the list in category-wise.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TValue=\"string\" TItem=\"Vegetables\" Placeholder=\"Select a country\" DataSource=\"@VegetablesList\">\n                <DropDownListFieldSettings Text=\"Name\" Value=\"ID\" GroupBy=\"Category\" />\n            </SfDropDownList>\n            @code{\n                public class Vegetables\n                {\n                    public string ID { get; set; }\n                    public string Name { get; set; }\n                    public string Category { get; set; }\n                }\n                List<Vegetables> VegetablesList = new List<Vegetables> {\n                    new Vegetables { Name = \"Cabbage\", Category = \"Leafy and Salad\", ID = \"item1\" },\n                    new Vegetables { Name = \"Chickpea\", Category = \"Beans\", ID = \"item2\" },\n                    new Vegetables { Name = \"Green bean\", Category = \"Beans\", ID = \"item4\" },\n                    new Vegetables { Name = \"Spinach\", Category = \"Leafy and Salad\", ID = \"item9\" }\n                };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"GroupBy"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as styles, classes, and more that will be applied to the pop-up list element.\n            </summary>\n            <value>\n            The value as dictionary collection.The default value is <c>null</c>\n            </value>\n            <remarks>\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to include an icon or image for the dropdown list item. \n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to include an icon or image for the dropdown list item. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that maps the text field from the data source model for each list item.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            If not mapped, the text field in the drop-down list item show as an empty text for each list item.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the value that maps the value field from the data source for each list item.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            If not mapped the text filed in the dropdown list item show as empty popup.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListFieldSettings"}},{"HashCode":2035058190,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.DropDownListFieldSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            A class that represents the Dropdown list fields to map with the data source and binds the data to the component.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TValue=\"string\" TItem=\"Country\" Placeholder=\"Select a country\" DataSource=\"@Countries\">\n                <DropDownListFieldSettings Text=\"Name\" Value=\"Code\"/>\n            </SfDropDownList>\n            @code{\n                public class Country\n                {\n                    public string Name { get; set; }\n                    public string Code { get; set; }\n                }\n                List<Country> Countries = new List<Country> {\n                    new Country() { Name = \"Australia\", Code = \"AU\" },\n                    new Country() { Name = \"Bermuda\", Code = \"BM\" },\n                    new Country() { Name = \"Canada\", Code = \"CA\" }\n                };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.DropDownListFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets filed names to display the list in category-wise.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TValue=\"string\" TItem=\"Vegetables\" Placeholder=\"Select a country\" DataSource=\"@VegetablesList\">\n                <DropDownListFieldSettings Text=\"Name\" Value=\"ID\" GroupBy=\"Category\" />\n            </SfDropDownList>\n            @code{\n                public class Vegetables\n                {\n                    public string ID { get; set; }\n                    public string Name { get; set; }\n                    public string Category { get; set; }\n                }\n                List<Vegetables> VegetablesList = new List<Vegetables> {\n                    new Vegetables { Name = \"Cabbage\", Category = \"Leafy and Salad\", ID = \"item1\" },\n                    new Vegetables { Name = \"Chickpea\", Category = \"Beans\", ID = \"item2\" },\n                    new Vegetables { Name = \"Green bean\", Category = \"Beans\", ID = \"item4\" },\n                    new Vegetables { Name = \"Spinach\", Category = \"Leafy and Salad\", ID = \"item9\" }\n                };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"GroupBy"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as styles, classes, and more that will be applied to the pop-up list element.\n            </summary>\n            <value>\n            The value as dictionary collection.The default value is <c>null</c>\n            </value>\n            <remarks>\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to include an icon or image for the dropdown list item. \n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to include an icon or image for the dropdown list item. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that maps the text field from the data source model for each list item.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            If not mapped, the text field in the drop-down list item show as an empty text for each list item.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the value that maps the value field from the data source for each list item.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            If not mapped the text filed in the dropdown list item show as empty popup.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListFieldSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":292983085,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The DropDownList has been provided with several options to customize each list item, group title, selected value, header, and footer elements.\n            </summary>\n            <typeparam name=\"TItem\">Specifies the type of DropDownListTemplates.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DropDownListTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>","Components.GenericTyped":"True"}},{"HashCode":-128617225,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The DropDownList has been provided with several options to customize each list item, group title, selected value, header, and footer elements.\n            </summary>\n            <typeparam name=\"TItem\">Specifies the type of DropDownListTemplates.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1335386712,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.ValueTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"DropDownListTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ValueTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.ValueTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":804126614,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.ValueTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.DropDownListTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ValueTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.ValueTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":448457192,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"DropDownListTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.FooterTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1205719575,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.DropDownListTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.FooterTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2031409244,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"DropDownListTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.HeaderTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1263756884,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.DropDownListTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.HeaderTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1391704981,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"DropDownListTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.GroupTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":2941129,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.DropDownListTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.GroupTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":995648233,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"DropDownListTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.ItemTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-155202328,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.DropDownListTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.ItemTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":978488925,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"DropDownListTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.NoRecordsTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-956014121,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.DropDownListTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.NoRecordsTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1033087998,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"DropDownListTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.ActionFailureTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-2135584000,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.DropDownListTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.DropDownListTemplates<TItem>.ActionFailureTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-479945035,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The DropDownList component allows users to select a single value that is non-editable from a list of predefined values.\n            </summary>\n            <example>\n            In the following code example, a basic DropDownList component is initialized with simple list items.\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n            <summary>\n            The DropDownList component contains a list of predefined values from which a single value can be chosen.\n            </summary>\n            <summary>\n            The DropDownList component contains a list of predefined values from which a single value can be chosen.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the value type.</typeparam>\n            <typeparam name=\"TItem\">Specifies the type of SfDropDownList.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDropDownList"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the unique identifier for <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            You can specify only unique value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value in the <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether the filtering option is enabled or not.\n            </summary>\n            <value>\n            <c>true</c>, if the filtering option is enabled and show the filter bar (search box) in the pop-up; otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            The filter action retrieves the matched items using the <see cref=\"P:Syncfusion.Blazor.DropDowns.DropDownListEvents`2.Filtering\" /> event based on the characters typed in the search textbox.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the drop-down list component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for dropdown list component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component. \n            </summary>\n            <value>\n            <c>true</c>, if the Dropdown list component is enabled; otherwise, it is disabled. The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"FilterBarPlaceholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is displayed when the filter textbox has no text and removes the focus.\n            </summary>\n            <value>\n            The text that is displayed when the filter text box has no text. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            This property value is updated only when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.AllowFiltering\" /> is enabled.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FilterBarPlaceholder"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the floating label behavior of the dropdown list. The <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Placeholder\" /> text act as a lable.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.FloatLabelType\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.FloatLabelType.Never\" />\n            </value>\n            <remarks>\n            If the <c>FloatLabelType</c> is <c>Never</c>, the placeholder text does not float as a label.\n            If the <c>FloatLabelType</c> is <c>Auto</c>, the placeholder text will float above the DropDownList component as a label after focusing it.\n            If the <c>FloatLabelType</c> is <c>Always</c>, the placeholder text is displayed as a label above the DropDownList component.\n            </remarks>\n            <example>\n            In the following code example, set the float lable as <c>Auto</c>.\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\" Placeholder=\"Select a value\" FloatLabelType=\"FloatLabelType.Auto\">\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the footer container of the pop-up list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n             <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <FooterTemplate>\n                        <span class='footer'>Total list items: 3 </span>\n                    </FooterTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the header container of the popup list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <HeaderTemplate>\n                        <span class='header'> T-shirt size </span>\n                    </HeaderTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as styles, class, and more that will be applied to the dropdown list element.\n            </summary>\n            <value>\n            The value as dictionary collection.The default value is <c>null</c>\n            </value>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\" HtmlAttributes=\"@CustomAttribute\">\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>()\n                {\n                    { \"title\", \"Select T-shirt size\" }\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as disabled, value, and more that will be applied to the dropdown list input element.\n            </summary>\n            <value>\n            The value as dictionary collection. The default value is <c>null</c>\n            </value>\n            <remarks>\n            If you configured both the property and equivalent input attribute, then the component considers the property value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"InputAttributes"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32?","Documentation":"\n            <summary>\n            Gets or sets the index of the selected item in the dropdown list component.\n            </summary>\n            <value>\n            The index of the selected items in the list. The default value is <c>null</c> which indicates that nothing is selected.\n            </value>\n            <exception cref=\"T:System.ArgumentOutOfRangeException\">The index was set to less than -1, or greater than or equal to the number of items on the list at the time the list is rendered.</exception>\n            <remarks>\n            Use this property to determine the index of the currently selected item in the list if the dropdown list component allows only one selection.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Index"}},{"Kind":"Components.Component","Name":"IndexChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32?>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the index changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IndexChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is displayed when the dropdown list has no value and remove on the focus.\n            </summary>\n            <value>\n            The text that is displayed when the dropdown list has no value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            The property depends on the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FloatLabelType\" /> property, The placeholder text acts as a label.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"PopupHeight","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the height of the popup list.\n            </summary>\n            <value>\n            The preferred height of the popup list in pixels or percentage of the dropdown list. The default value is <c>300px</c>.\n            </value>\n            <remarks>\n            This property accepts pixels or percentage value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"PopupHeight"}},{"Kind":"Components.Component","Name":"PopupWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the popup list. By default, the popup width sets based on the width of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </summary>\n            <value>\n            The preferred width of the popup list in pixels or percentage of the dropdown list. The default value is <c>100%</c>.\n            </value>\n            <remarks>\n            This property accepts pixels or percentage value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"PopupWidth"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> is in read-only mode or not.\n            </summary>\n            <value>\n            <c>true</c> if the dropdown list is in read-only mode; otherwise, <c>false</c>. The default is <c>false</c>.\n            </value>\n            <remarks>\n            In read-only mode, the dropdown list popup can not be opened on click.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Readonly"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether to show or hide the clear button in the dropdown list. It helps to clear the selected value of a dropdown list on user intraction.\n            </summary>\n            <value>\n            <c>true</c> if show the clear button in the dropdown list; otherwise, <c>false</c>. The default is <c>false</c>.\n            </value>\n            <remarks>\n            When the clear button is clicked, <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" />, and <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Index\" /> properties are reset to null.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton"}},{"Kind":"Components.Component","Name":"EnableVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the virtual scrolling is enabled or not.\n            </summary>\n            <value>\n            <c>true</c> if the virtual scrolling for dropdown list; otherwise, <c>false</c>. The default is <c>false</c>.\n            </value>\n            <remarks>\n            To improve performance, the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.EnableVirtualization\" /> property is set to <c>true</c>. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualization"}},{"Kind":"Components.Component","Name":"ItemsCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the number of items to be fetched in the popup when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.EnableVirtualization\" /> property is enabled.\n            </summary>\n            <value>\n            The number of list items to be fetched in dropdown list component. The default value is <c>5</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemsCount"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets the value of the selected item in the dropdown list component. This will be used with two-way binding.\n            </summary>\n            <value>\n            The value of the selected item in the dropdown list component. The default is <c>null</c>.\n            </value>\n            <remarks>\n            Use the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property to specify or determine the value displayed in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the selected list item in the input element of the component.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <ValueTemplate>\n                        <span> T-shirt size - @(context)</span>\n                    </ValueTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </summary>\n            <value>\n            The preferred width of the dropdown list in pixels or percentage value. The default value is <c>100%</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the location of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component in the tab order.\n            </summary>\n            <value>\n            The numeric index of the dropdown list in the tab order. The default value is <c>0</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TabIndex"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input loses the focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            The order of sorting the list items. The default value is <c>SortOrder.None</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"SortOrder"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Gets or sets the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n            <value> \n            Binding data to the popup element. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"DataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Gets or sets the external `Query` that execute along with data processing.\n            </summary>\n            <value> \n            Query value to be used for data fetching. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets which filter type, the component needs to be considered on search action.\n            </summary>\n            <value> \n            The filter type specifed for searching the list items. The default value is <c>FilterType.StartsWith</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether case-sensitivity is enabled or disabled when searching for suggestions.\n            </summary>\n            <value>\n            <c>false</c>, consider the `case-sensitive` on performing the search to find suggestions. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether diacritic characters or accents are ignored.\n            </summary>\n            <value>\n            <c>true</c>, ignores the diacritic characters or accents when filtering. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the z-index value of the component popup element.\n            </summary>\n            <value> \n            The ZIndex value for the popup element.The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>","Components.GenericTyped":"True"}},{"HashCode":761897989,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The DropDownList component allows users to select a single value that is non-editable from a list of predefined values.\n            </summary>\n            <example>\n            In the following code example, a basic DropDownList component is initialized with simple list items.\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n            <summary>\n            The DropDownList component contains a list of predefined values from which a single value can be chosen.\n            </summary>\n            <summary>\n            The DropDownList component contains a list of predefined values from which a single value can be chosen.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the value type.</typeparam>\n            <typeparam name=\"TItem\">Specifies the type of SfDropDownList.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfDropDownList"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the unique identifier for <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            You can specify only unique value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an expression that identifies the bound value in the <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether the filtering option is enabled or not.\n            </summary>\n            <value>\n            <c>true</c>, if the filtering option is enabled and show the filter bar (search box) in the pop-up; otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n            <remarks>\n            The filter action retrieves the matched items using the <see cref=\"P:Syncfusion.Blazor.DropDowns.DropDownListEvents`2.Filtering\" /> event based on the characters typed in the search textbox.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to customize the appearance of the <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right-to-left direction is enabled or not for the drop-down list component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for dropdown list component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n             Gets or sets a value that indicates whether to enable or disable the <see cref=\"T:Syncfusion.Blazor.DropDowns.DropDownListEvents`2\" /> component. \n            </summary>\n            <value>\n            <c>true</c>, if the Dropdown list component is enabled; otherwise, it is disabled. The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"FilterBarPlaceholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is displayed when the filter textbox has no text and removes the focus.\n            </summary>\n            <value>\n            The text that is displayed when the filter text box has no text. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            This property value is updated only when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.AllowFiltering\" /> is enabled.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FilterBarPlaceholder"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the floating label behavior of the dropdown list. The <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Placeholder\" /> text act as a lable.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Inputs.FloatLabelType\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Inputs.FloatLabelType.Never\" />\n            </value>\n            <remarks>\n            If the <c>FloatLabelType</c> is <c>Never</c>, the placeholder text does not float as a label.\n            If the <c>FloatLabelType</c> is <c>Auto</c>, the placeholder text will float above the DropDownList component as a label after focusing it.\n            If the <c>FloatLabelType</c> is <c>Always</c>, the placeholder text is displayed as a label above the DropDownList component.\n            </remarks>\n            <example>\n            In the following code example, set the float lable as <c>Auto</c>.\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\" Placeholder=\"Select a value\" FloatLabelType=\"FloatLabelType.Auto\">\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the footer container of the pop-up list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n             <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <FooterTemplate>\n                        <span class='footer'>Total list items: 3 </span>\n                    </FooterTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the header container of the popup list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <HeaderTemplate>\n                        <span class='header'> T-shirt size </span>\n                    </HeaderTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as styles, class, and more that will be applied to the dropdown list element.\n            </summary>\n            <value>\n            The value as dictionary collection.The default value is <c>null</c>\n            </value>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\" HtmlAttributes=\"@CustomAttribute\">\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                Dictionary<string, object> CustomAttribute = new Dictionary<string, object>()\n                {\n                    { \"title\", \"Select T-shirt size\" }\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes such as disabled, value, and more that will be applied to the dropdown list input element.\n            </summary>\n            <value>\n            The value as dictionary collection. The default value is <c>null</c>\n            </value>\n            <remarks>\n            If you configured both the property and equivalent input attribute, then the component considers the property value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"InputAttributes"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32?","Documentation":"\n            <summary>\n            Gets or sets the index of the selected item in the dropdown list component.\n            </summary>\n            <value>\n            The index of the selected items in the list. The default value is <c>null</c> which indicates that nothing is selected.\n            </value>\n            <exception cref=\"T:System.ArgumentOutOfRangeException\">The index was set to less than -1, or greater than or equal to the number of items on the list at the time the list is rendered.</exception>\n            <remarks>\n            Use this property to determine the index of the currently selected item in the list if the dropdown list component allows only one selection.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Index"}},{"Kind":"Components.Component","Name":"IndexChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32?>","Documentation":"\n            <summary>\n            Gets or sets the callback to trigger when the index changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IndexChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text that is displayed when the dropdown list has no value and remove on the focus.\n            </summary>\n            <value>\n            The text that is displayed when the dropdown list has no value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            The property depends on the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.FloatLabelType\" /> property, The placeholder text acts as a label.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"PopupHeight","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the height of the popup list.\n            </summary>\n            <value>\n            The preferred height of the popup list in pixels or percentage of the dropdown list. The default value is <c>300px</c>.\n            </value>\n            <remarks>\n            This property accepts pixels or percentage value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"PopupHeight"}},{"Kind":"Components.Component","Name":"PopupWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the popup list. By default, the popup width sets based on the width of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </summary>\n            <value>\n            The preferred width of the popup list in pixels or percentage of the dropdown list. The default value is <c>100%</c>.\n            </value>\n            <remarks>\n            This property accepts pixels or percentage value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"PopupWidth"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> is in read-only mode or not.\n            </summary>\n            <value>\n            <c>true</c> if the dropdown list is in read-only mode; otherwise, <c>false</c>. The default is <c>false</c>.\n            </value>\n            <remarks>\n            In read-only mode, the dropdown list popup can not be opened on click.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Readonly"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether to show or hide the clear button in the dropdown list. It helps to clear the selected value of a dropdown list on user intraction.\n            </summary>\n            <value>\n            <c>true</c> if show the clear button in the dropdown list; otherwise, <c>false</c>. The default is <c>false</c>.\n            </value>\n            <remarks>\n            When the clear button is clicked, <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" />, and <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Index\" /> properties are reset to null.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton"}},{"Kind":"Components.Component","Name":"EnableVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value indicating whether the virtual scrolling is enabled or not.\n            </summary>\n            <value>\n            <c>true</c> if the virtual scrolling for dropdown list; otherwise, <c>false</c>. The default is <c>false</c>.\n            </value>\n            <remarks>\n            To improve performance, the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.EnableVirtualization\" /> property is set to <c>true</c>. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualization"}},{"Kind":"Components.Component","Name":"ItemsCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the number of items to be fetched in the popup when the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.EnableVirtualization\" /> property is enabled.\n            </summary>\n            <value>\n            The number of list items to be fetched in dropdown list component. The default value is <c>5</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemsCount"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets the value of the selected item in the dropdown list component. This will be used with two-way binding.\n            </summary>\n            <value>\n            The value of the selected item in the dropdown list component. The default is <c>null</c>.\n            </value>\n            <remarks>\n            Use the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfDropDownList`2.Value\" /> property to specify or determine the value displayed in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets a callback that trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the selected list item in the input element of the component.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <ValueTemplate>\n                        <span> T-shirt size - @(context)</span>\n                    </ValueTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component.\n            </summary>\n            <value>\n            The preferred width of the dropdown list in pixels or percentage value. The default value is <c>100%</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the location of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfDropDownList`2\" /> component in the tab order.\n            </summary>\n            <value>\n            The numeric index of the dropdown list in the tab order. The default value is <c>0</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TabIndex"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input loses the focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            The order of sorting the list items. The default value is <c>SortOrder.None</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"SortOrder"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Gets or sets the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n            <value> \n            Binding data to the popup element. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"DataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Gets or sets the external `Query` that execute along with data processing.\n            </summary>\n            <value> \n            Query value to be used for data fetching. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets which filter type, the component needs to be considered on search action.\n            </summary>\n            <value> \n            The filter type specifed for searching the list items. The default value is <c>FilterType.StartsWith</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether case-sensitivity is enabled or disabled when searching for suggestions.\n            </summary>\n            <value>\n            <c>false</c>, consider the `case-sensitive` on performing the search to find suggestions. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether diacritic characters or accents are ignored.\n            </summary>\n            <value>\n            <c>true</c>, ignores the diacritic characters or accents when filtering. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the z-index value of the component popup element.\n            </summary>\n            <value> \n            The ZIndex value for the popup element.The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1374281865,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ChildContent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfDropDownList"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":833706673,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ChildContent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.DropDowns.SfDropDownList"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1361410736,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the footer container of the pop-up list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n             <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <FooterTemplate>\n                        <span class='footer'>Total list items: 3 </span>\n                    </FooterTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"SfDropDownList"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.FooterTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1994252863,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the footer container of the pop-up list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n             <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <FooterTemplate>\n                        <span class='footer'>Total list items: 3 </span>\n                    </FooterTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfDropDownList"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.FooterTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1258468892,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the header container of the popup list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <HeaderTemplate>\n                        <span class='header'> T-shirt size </span>\n                    </HeaderTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"SfDropDownList"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.HeaderTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1588543840,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the header container of the popup list.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <HeaderTemplate>\n                        <span class='header'> T-shirt size </span>\n                    </HeaderTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfDropDownList"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.HeaderTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1300450179,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ValueTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the selected list item in the input element of the component.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <ValueTemplate>\n                        <span> T-shirt size - @(context)</span>\n                    </ValueTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"SfDropDownList"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ValueTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ValueTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1451105346,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ValueTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the customised design content and assigns it to the selected list item in the input element of the component.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfDropDownList TItem=\"string\" TValue=\"string\" DataSource=\"@MyList\">\n                <DropDownListTemplates TItem=\"string\">\n                    <ValueTemplate>\n                        <span> T-shirt size - @(context)</span>\n                    </ValueTemplate>\n                </DropDownListTemplates>\n            </SfDropDownList>\n            @code{\n                protected List<string> MyList = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfDropDownList"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ValueTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ValueTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-660678626,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"SfDropDownList"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ItemTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-2012084884,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfDropDownList"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ItemTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-92477503,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"SfDropDownList"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.GroupTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1813069771,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfDropDownList"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.GroupTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1690395604,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"SfDropDownList"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.NoRecordsTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-510314835,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfDropDownList"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.NoRecordsTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":942147165,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"SfDropDownList"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ActionFailureTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":197660131,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfDropDownList"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>.ActionFailureTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1464780423,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            ListBox component used to display a list of items. Users can select one or more items in the list using a checkbox or by keyboard selection.\n            It supports sorting, grouping, reordering and drag and drop of items.\n            </summary>\n            <summary>\n            ListBox component used to display a list of items. Users can select one or more items in the list using a checkbox or by keyboard selection.\n            It supports sorting, grouping, reordering and drag and drop of items.\n            </summary>\n            <summary>\n            ListBox is used to display a list of items. Users can select one or more items in the list using a checkbox or by keyboard selection.\n            It supports sorting, grouping, reordering and drag and drop of items.\n            </summary>\n            <example>\n            In the below code example, showcases a basic listbox.\n            <code><![CDATA[\n            <SfListBox Value=@value DataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"Id\"></ListBoxFieldSettings>\n            </SfListBox>\n            @code{\n                privatestring[] value= newstring[] { \"List-01\"};\n                privateList<ListItem>vehicleData = newList<ListItem>{\n                    newListItem { Text = \"Hennessey Venom\", Id = \"List-01\"},\n                    newListItem { Text = \"Bugatti Chiron\", Id = \"List-02\"},\n                    newListItem { Text = \"Bugatti Veyron Super Sport\", Id = \"List-03\"}\n                }\n            }\n            ]]></code>\n            </example>\n            <summary>\n            ListBox is used to display a list of items. Users can select one or more items in the list using a checkbox or by keyboard selection.\n            It supports sorting, grouping, reordering and drag and drop of items.\n            </summary>\n            <summary>\n            ListBox component is used to display a list of items. Users can select one or more items in the list using a checkbox or by keyboard selection.\n            It supports sorting, grouping, reordering and drag and drop of items.\n            </summary>\n            <example>\n            In the below code example, showcases a basic ListBox component.\n            <code><![CDATA[\n            <SfListBox Value=@valueDataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"Id\"></ListBoxFieldSettings>\n            </SfListBox>\n            @code{\n                privatestring[] value= newstring[] { \"List-01\"};\n                privateList<ListItem>vehicleData = newList<ListItem>{\n                    newListItem { Text = \"Hennessey Venom\", Id = \"List-01\"},\n                    newListItem { Text = \"Bugatti Chiron\", Id = \"List-02\"},\n                    newListItem { Text = \"Bugatti Veyron Super Sport\", Id = \"List-03\"}\n                }\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfListBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the child content for the listbox including HTML element. If the child content is not specified, listbox is rendered using <c>DataSource</c> property.\n            </summary>\n            <value>\n            The template content. The default value is <c>null</c>.\n            </value>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the expression for defining the value of the bound.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"AllowDragAndDrop","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the drag and drop support in the listbox.\n            </summary>\n            <value>\n            <c>true</c>, if the drag and drop is performed in the listbox. The default value is <c>true</c>.\n            </value>\n            <remarks>\n            ListBox contains same 'Scope' property to perform drag and drop between multiple list boxes.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowDragAndDrop"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or diaable the filtering in the listbox.\n            </summary>\n            <value>\n            <c>true</c>, if the filtering is performed in the listbox. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates CSS class string to customize the appearance of listbox.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance of listbox. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the right to left direction in listbox.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for listbox. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>Enable or disable persisting component's state between page reloads.</para>\n            <para>If enabled,  the `Value` state will be persisted.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Value</term>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"FilterBarPlaceholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the watermark text on the filter bar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FilterBarPlaceholder"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the height of the listbox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Height"}},{"Kind":"Components.Component","Name":"MaximumSelectionLength","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the limitation to the value selection in the listbox.\n            </summary>\n            <value>\n            Accepts a double value. The default value is <c>500</c>.\n            </value>\n            <remarks>\n            Based on the limitation, list selection will be prevented.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"MaximumSelectionLength"}},{"Kind":"Components.Component","Name":"Scope","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the scope to the listbox to perform drag and drop and toolbar action.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Scope"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the specified item in the selected state of the listbox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets the event callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will applied to the listbox container element.\n            </summary>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            The order of sorting the list items. The default value is <c>SortOrder.None</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"SortOrder"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Gets or sets the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n            <value> \n            Binding data to the popup element. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"DataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Gets or sets the external `Query` that execute along with data processing.\n            </summary>\n            <value> \n            Query value to be used for data fetching. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets which filter type, the component needs to be considered on search action.\n            </summary>\n            <value> \n            The filter type specifed for searching the list items. The default value is <c>FilterType.StartsWith</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether case-sensitivity is enabled or disabled when searching for suggestions.\n            </summary>\n            <value>\n            <c>false</c>, consider the `case-sensitive` on performing the search to find suggestions. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether diacritic characters or accents are ignored.\n            </summary>\n            <value>\n            <c>true</c>, ignores the diacritic characters or accents when filtering. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the z-index value of the component popup element.\n            </summary>\n            <value> \n            The ZIndex value for the popup element.The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>","Components.GenericTyped":"True"}},{"HashCode":-1028851276,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            ListBox component used to display a list of items. Users can select one or more items in the list using a checkbox or by keyboard selection.\n            It supports sorting, grouping, reordering and drag and drop of items.\n            </summary>\n            <summary>\n            ListBox component used to display a list of items. Users can select one or more items in the list using a checkbox or by keyboard selection.\n            It supports sorting, grouping, reordering and drag and drop of items.\n            </summary>\n            <summary>\n            ListBox is used to display a list of items. Users can select one or more items in the list using a checkbox or by keyboard selection.\n            It supports sorting, grouping, reordering and drag and drop of items.\n            </summary>\n            <example>\n            In the below code example, showcases a basic listbox.\n            <code><![CDATA[\n            <SfListBox Value=@value DataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"Id\"></ListBoxFieldSettings>\n            </SfListBox>\n            @code{\n                privatestring[] value= newstring[] { \"List-01\"};\n                privateList<ListItem>vehicleData = newList<ListItem>{\n                    newListItem { Text = \"Hennessey Venom\", Id = \"List-01\"},\n                    newListItem { Text = \"Bugatti Chiron\", Id = \"List-02\"},\n                    newListItem { Text = \"Bugatti Veyron Super Sport\", Id = \"List-03\"}\n                }\n            }\n            ]]></code>\n            </example>\n            <summary>\n            ListBox is used to display a list of items. Users can select one or more items in the list using a checkbox or by keyboard selection.\n            It supports sorting, grouping, reordering and drag and drop of items.\n            </summary>\n            <summary>\n            ListBox component is used to display a list of items. Users can select one or more items in the list using a checkbox or by keyboard selection.\n            It supports sorting, grouping, reordering and drag and drop of items.\n            </summary>\n            <example>\n            In the below code example, showcases a basic ListBox component.\n            <code><![CDATA[\n            <SfListBox Value=@valueDataSource=\"@vehicleData\" TValue=\"string[]\" TItem=\"ListItem\">\n                <ListBoxFieldSettings Text=\"Text\" Value=\"Id\"></ListBoxFieldSettings>\n            </SfListBox>\n            @code{\n                privatestring[] value= newstring[] { \"List-01\"};\n                privateList<ListItem>vehicleData = newList<ListItem>{\n                    newListItem { Text = \"Hennessey Venom\", Id = \"List-01\"},\n                    newListItem { Text = \"Bugatti Chiron\", Id = \"List-02\"},\n                    newListItem { Text = \"Bugatti Veyron Super Sport\", Id = \"List-03\"}\n                }\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfListBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the child content for the listbox including HTML element. If the child content is not specified, listbox is rendered using <c>DataSource</c> property.\n            </summary>\n            <value>\n            The template content. The default value is <c>null</c>.\n            </value>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the expression for defining the value of the bound.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"AllowDragAndDrop","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the drag and drop support in the listbox.\n            </summary>\n            <value>\n            <c>true</c>, if the drag and drop is performed in the listbox. The default value is <c>true</c>.\n            </value>\n            <remarks>\n            ListBox contains same 'Scope' property to perform drag and drop between multiple list boxes.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowDragAndDrop"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or diaable the filtering in the listbox.\n            </summary>\n            <value>\n            <c>true</c>, if the filtering is performed in the listbox. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates CSS class string to customize the appearance of listbox.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to customize the appearance of listbox. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the right to left direction in listbox.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for listbox. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>Enable or disable persisting component's state between page reloads.</para>\n            <para>If enabled,  the `Value` state will be persisted.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Value</term>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"FilterBarPlaceholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the watermark text on the filter bar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FilterBarPlaceholder"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the height of the listbox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Height"}},{"Kind":"Components.Component","Name":"MaximumSelectionLength","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the limitation to the value selection in the listbox.\n            </summary>\n            <value>\n            Accepts a double value. The default value is <c>500</c>.\n            </value>\n            <remarks>\n            Based on the limitation, list selection will be prevented.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"MaximumSelectionLength"}},{"Kind":"Components.Component","Name":"Scope","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the scope to the listbox to perform drag and drop and toolbar action.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Scope"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the specified item in the selected state of the listbox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Gets or sets the event callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will applied to the listbox container element.\n            </summary>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            The order of sorting the list items. The default value is <c>SortOrder.None</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"SortOrder"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Gets or sets the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n            <value> \n            Binding data to the popup element. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"DataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Gets or sets the external `Query` that execute along with data processing.\n            </summary>\n            <value> \n            Query value to be used for data fetching. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets which filter type, the component needs to be considered on search action.\n            </summary>\n            <value> \n            The filter type specifed for searching the list items. The default value is <c>FilterType.StartsWith</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether case-sensitivity is enabled or disabled when searching for suggestions.\n            </summary>\n            <value>\n            <c>false</c>, consider the `case-sensitive` on performing the search to find suggestions. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether diacritic characters or accents are ignored.\n            </summary>\n            <value>\n            <c>true</c>, ignores the diacritic characters or accents when filtering. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the z-index value of the component popup element.\n            </summary>\n            <value> \n            The ZIndex value for the popup element.The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-874429911,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.ChildContent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the child content for the listbox including HTML element. If the child content is not specified, listbox is rendered using <c>DataSource</c> property.\n            </summary>\n            <value>\n            The template content. The default value is <c>null</c>.\n            </value>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfListBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":154790241,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.ChildContent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the child content for the listbox including HTML element. If the child content is not specified, listbox is rendered using <c>DataSource</c> property.\n            </summary>\n            <value>\n            The template content. The default value is <c>null</c>.\n            </value>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.DropDowns.SfListBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1808062845,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"SfListBox"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.ItemTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1930335306,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfListBox"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.ItemTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1595310651,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"SfListBox"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.GroupTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1203027455,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfListBox"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.GroupTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-950203064,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"SfListBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.NoRecordsTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1811640115,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfListBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.NoRecordsTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":468936927,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"SfListBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.ActionFailureTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-2080508807,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfListBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>.ActionFailureTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1902000015,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ListBoxEvents<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the ListBox Events of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListBoxEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.ListBoxEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.ListBoxEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before fetching data from the remote server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised after data is fetched successfully from the remote server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnDrop","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DropEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before dropping the list item on another list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnDrop","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnItemRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.BeforeItemRenderEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised while rendering each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnItemRender","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ListBoxChangeEventArgs<TValue, TItem>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when select / unselect the list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"DragStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DragEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised after dragging the list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DragStart","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Dropped","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DragEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before dropping the list item on another list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Dropped","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the listbox item is selected.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemSelected","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ListBoxItemKeyDown","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ListBoxKeyDownEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when performing keydown action in a listbox item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBoxItemKeyDown","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxEvents<TValue, TItem>","Components.GenericTyped":"True"}},{"HashCode":-18376643,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ListBoxEvents<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the ListBox Events of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.ListBoxEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.ListBoxEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.ListBoxEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before fetching data from the remote server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised after data is fetched successfully from the remote server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnDrop","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DropEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before dropping the list item on another list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnDrop","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnItemRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.BeforeItemRenderEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised while rendering each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnItemRender","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ListBoxChangeEventArgs<TValue, TItem>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when select / unselect the list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"DragStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DragEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised after dragging the list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DragStart","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Dropped","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DragEventArgs<TItem>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before dropping the list item on another list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Dropped","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the listbox item is selected.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemSelected","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ListBoxItemKeyDown","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ListBoxKeyDownEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when performing keydown action in a listbox item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBoxItemKeyDown","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxEvents<TValue, TItem>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":957440652,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ListBoxFieldSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Fields property maps the columns of the data table and binds the data to the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListBoxFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the groupBy value to group the list items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupBy"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will applied to the listbox container element.\n            </summary>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates a CSS class string to include an icon or image for each list item. \n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to include an icon or image for each list item. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates a text for mapping column from data table for each list item. \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates a value for mapping column from data table for each list item. \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxFieldSettings"}},{"HashCode":-2080036924,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ListBoxFieldSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Fields property maps the columns of the data table and binds the data to the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.ListBoxFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the groupBy value to group the list items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupBy"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will applied to the listbox container element.\n            </summary>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates a CSS class string to include an icon or image for each list item. \n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to include an icon or image for each list item. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates a text for mapping column from data table for each list item. \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates a value for mapping column from data table for each list item. \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxFieldSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-41768311,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ListBoxSelectionSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Defines the selection settings of List Box.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListBoxSelectionSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"CheckboxPosition","TypeName":"Syncfusion.Blazor.DropDowns.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates the position of a checkbox.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.DropDowns.CheckBoxPosition\" /> enumeration. The default value is <c>Left</c>.\n            </value>\n            <remarks>\n            If the <c>CheckBoxPosition</c> is <c>Left</c>, the checkbox will be placed left to the content of the list item.\n            If the <c>CheckBoxPosition</c> is <c>Right</c>, the checkbox will be placed right to the content of the list item.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"CheckboxPosition"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.DropDowns.SelectionMode","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates the mode of selection in the listbox.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SelectionMode\" /> enumeration. The default value is <c>Multile</c>.\n            </value>\n            <remarks>\n            If the <c>SelectionMode</c> is <c>Single</c>, allows single selection.\n            If the <c>SelectionMode</c> is <c>Multiple</c>, alloes multiple selection.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Mode"}},{"Kind":"Components.Component","Name":"ShowCheckbox","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the checkox selection in listbox.\n            </summary>\n            <value>\n            <c>true</c>, if the checkox selection is enabled for listbox. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowCheckbox"}},{"Kind":"Components.Component","Name":"ShowSelectAll","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the select all checkox option in listbox.\n            </summary>\n            <value>\n            <c>true</c>, if the select all checkox option is enabled for listbox. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowSelectAll"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxSelectionSettings"}},{"HashCode":-1255610891,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ListBoxSelectionSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Defines the selection settings of List Box.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.ListBoxSelectionSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"CheckboxPosition","TypeName":"Syncfusion.Blazor.DropDowns.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates the position of a checkbox.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.DropDowns.CheckBoxPosition\" /> enumeration. The default value is <c>Left</c>.\n            </value>\n            <remarks>\n            If the <c>CheckBoxPosition</c> is <c>Left</c>, the checkbox will be placed left to the content of the list item.\n            If the <c>CheckBoxPosition</c> is <c>Right</c>, the checkbox will be placed right to the content of the list item.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"CheckboxPosition"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.DropDowns.SelectionMode","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates the mode of selection in the listbox.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SelectionMode\" /> enumeration. The default value is <c>Multile</c>.\n            </value>\n            <remarks>\n            If the <c>SelectionMode</c> is <c>Single</c>, allows single selection.\n            If the <c>SelectionMode</c> is <c>Multiple</c>, alloes multiple selection.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Mode"}},{"Kind":"Components.Component","Name":"ShowCheckbox","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the checkox selection in listbox.\n            </summary>\n            <value>\n            <c>true</c>, if the checkox selection is enabled for listbox. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowCheckbox"}},{"Kind":"Components.Component","Name":"ShowSelectAll","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the select all checkox option in listbox.\n            </summary>\n            <value>\n            <c>true</c>, if the select all checkox option is enabled for listbox. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ShowSelectAll"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxSelectionSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1099576378,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies custom templates for list items in ListBox.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListBoxTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the template design and assigns it to each list item present in the listbox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the template design and assigns it to listbox, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem>","Components.GenericTyped":"True"}},{"HashCode":1587256835,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies custom templates for list items in ListBox.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.ListBoxTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the template design and assigns it to each list item present in the listbox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the template design and assigns it to listbox, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":204670412,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the template design and assigns it to each list item present in the listbox.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"ListBoxTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem>.ItemTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":209003732,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the template design and assigns it to each list item present in the listbox.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.ListBoxTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem>.ItemTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-300871266,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the template design and assigns it to listbox, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"ListBoxTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem>.NoRecordsTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":193993908,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the template design and assigns it to listbox, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.ListBoxTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxTemplates<TItem>.NoRecordsTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":172409870,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ListBoxToolbarSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the ListBox tool bar settings.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListBoxToolbarSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Items","TypeName":"System.String[]","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the list of toolbar items used in dual listbox.\n            </summary>\n            <value>\n            The predefined tools are 'MoveUp', 'MoveDown', 'MoveTo', 'MoveFrom', 'MoveAllTo', and 'MoveAllFrom'\n            </value>\n        ","Metadata":{"Common.PropertyName":"Items"}},{"Kind":"Components.Component","Name":"Position","TypeName":"Syncfusion.Blazor.DropDowns.ToolBarPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates the position of toolbar in the listbox.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.DropDowns.ToolBarPosition\" /> enumeration. The default value is <c>Left</c>.\n            </value>\n            <remarks>\n            If the <c>ToolBarPosition</c> is <c>Left</c>, the toolbar will be positioned to the left of the ListBox.\n            If the <c>ToolBarPosition</c> is <c>Right</c>, the toolbar will be positioned to the right of the ListBox.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Position"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxToolbarSettings"}},{"HashCode":900033428,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.ListBoxToolbarSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the ListBox tool bar settings.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.ListBoxToolbarSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Items","TypeName":"System.String[]","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the list of toolbar items used in dual listbox.\n            </summary>\n            <value>\n            The predefined tools are 'MoveUp', 'MoveDown', 'MoveTo', 'MoveFrom', 'MoveAllTo', and 'MoveAllFrom'\n            </value>\n        ","Metadata":{"Common.PropertyName":"Items"}},{"Kind":"Components.Component","Name":"Position","TypeName":"Syncfusion.Blazor.DropDowns.ToolBarPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates the position of toolbar in the listbox.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.DropDowns.ToolBarPosition\" /> enumeration. The default value is <c>Left</c>.\n            </value>\n            <remarks>\n            If the <c>ToolBarPosition</c> is <c>Left</c>, the toolbar will be positioned to the left of the ListBox.\n            If the <c>ToolBarPosition</c> is <c>Right</c>, the toolbar will be positioned to the right of the ListBox.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Position"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.ListBoxToolbarSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":382493219,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.MentionFieldSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The <c>MentionFieldSettings</c> class is a configuration class that is used to specify which fields in a data source should be used for different aspects of a mention list,\n            For example, you can use this class to specify which fields in a data source should be used for the text and value of each item in the mention list, as well as an optional field for grouping items.\n            </summary>\n            <remarks>\n            This allows the mention list to be populated with data from the specified data source, making it easier for users to select items from the list. \n            This can be useful in scenarios where users need to select items from a large or complex data set, such as selecting names from a list of contacts or selecting products from a catalog.\n            </remarks>\n            <example> \n            In this example, the <c>MentionFieldSettings</c> class is used to specify that the <c>Text</c> and <c>ID</c> fields in the data source should be used for the text and value of each item in the mention list, respectively. \n            <code><![CDATA[ \n            <SfMention TItem=\"Games\" DataSource=\"@GamesData\">\n              <ChildContent>\n                <MentionFieldSettings Value=\"ID\" Text=\"Text\"/>\n              </ChildContent>\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention>\n            @code{\n               public class Games\n               {  \n                   public string ID { get; set; }\n                   public string Text { get; set; }\n               }\n               \n               List<Games> GamesData = new List<Games> {\n                   new Games() { ID= \"Game1\", Text= \"American Football\" },\n                   new Games() { ID= \"Game2\", Text= \"Badminton\" },\n                   new Games() { ID= \"Game3\", Text= \"Basketball\" },\n                   new Games() { ID= \"Game4\", Text= \"Cricket\" },\n                   new Games() { ID= \"Game5\", Text= \"Football\" },\n                   new Games() { ID= \"Game6\", Text= \"Golf\" }\n                 };\n            }\n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"MentionFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a field in the data source that should be used for grouping items in the mention list.\n            </summary>\n            <value>\n            A field in the data source that should be used for grouping items in the mention list.\n            The default value is <c>string.Empty</c>. \n            This is optional and does not have to be specified if you do not want to group items in the mention list. \n            If you do not specify a <c>GroupBy</c>, all items in the mention list will be displayed in a single, ungrouped list.\n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupBy"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the CSS class which is used to specify the field in the data source that contains the CSS class name for the icon that should be displayed for each item in the mention list.\n            </summary>\n            <value>\n            A field in data source that contains the CSS class name for the icon that should be displayed for each item in the mention list.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a field that is used to specify the field in a data source that should be used as the display text for each item in the mention list.\n            </summary>\n            <value>\n            A field that is used to specify the field in a data source that should be used as the display text for each item in the mention list.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a field that is used to specify the field in a data source that should be used as the value for each item in the mention list.\n            </summary>\n            <value>\n            A field that is used to specify the field in a data source that should be used as the value for each item in the mention list.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.MentionFieldSettings"}},{"HashCode":-228411778,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.MentionFieldSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The <c>MentionFieldSettings</c> class is a configuration class that is used to specify which fields in a data source should be used for different aspects of a mention list,\n            For example, you can use this class to specify which fields in a data source should be used for the text and value of each item in the mention list, as well as an optional field for grouping items.\n            </summary>\n            <remarks>\n            This allows the mention list to be populated with data from the specified data source, making it easier for users to select items from the list. \n            This can be useful in scenarios where users need to select items from a large or complex data set, such as selecting names from a list of contacts or selecting products from a catalog.\n            </remarks>\n            <example> \n            In this example, the <c>MentionFieldSettings</c> class is used to specify that the <c>Text</c> and <c>ID</c> fields in the data source should be used for the text and value of each item in the mention list, respectively. \n            <code><![CDATA[ \n            <SfMention TItem=\"Games\" DataSource=\"@GamesData\">\n              <ChildContent>\n                <MentionFieldSettings Value=\"ID\" Text=\"Text\"/>\n              </ChildContent>\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention>\n            @code{\n               public class Games\n               {  \n                   public string ID { get; set; }\n                   public string Text { get; set; }\n               }\n               \n               List<Games> GamesData = new List<Games> {\n                   new Games() { ID= \"Game1\", Text= \"American Football\" },\n                   new Games() { ID= \"Game2\", Text= \"Badminton\" },\n                   new Games() { ID= \"Game3\", Text= \"Basketball\" },\n                   new Games() { ID= \"Game4\", Text= \"Cricket\" },\n                   new Games() { ID= \"Game5\", Text= \"Football\" },\n                   new Games() { ID= \"Game6\", Text= \"Golf\" }\n                 };\n            }\n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.MentionFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a field in the data source that should be used for grouping items in the mention list.\n            </summary>\n            <value>\n            A field in the data source that should be used for grouping items in the mention list.\n            The default value is <c>string.Empty</c>. \n            This is optional and does not have to be specified if you do not want to group items in the mention list. \n            If you do not specify a <c>GroupBy</c>, all items in the mention list will be displayed in a single, ungrouped list.\n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupBy"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the CSS class which is used to specify the field in the data source that contains the CSS class name for the icon that should be displayed for each item in the mention list.\n            </summary>\n            <value>\n            A field in data source that contains the CSS class name for the icon that should be displayed for each item in the mention list.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a field that is used to specify the field in a data source that should be used as the display text for each item in the mention list.\n            </summary>\n            <value>\n            A field that is used to specify the field in a data source that should be used as the display text for each item in the mention list.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a field that is used to specify the field in a data source that should be used as the value for each item in the mention list.\n            </summary>\n            <value>\n            A field that is used to specify the field in a data source that should be used as the value for each item in the mention list.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.MentionFieldSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1876220624,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfMention<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component displays a list of suggested items from which users can select or tag one.\n            Enter the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.MentionChar\" /> in the editable element and tag the any item from the suggestion list.\n            </summary>\n            <example> \n            <code><![CDATA[ \n            <SfMention TItem=\"Games\" DataSource=\"@GamesData\">\n              <ChildContent>\n                <MentionFieldSettings Value=\"ID\" Text=\"Text\"></MentionFieldSettings>\n              </ChildContent>\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention>\n            @code{\n               public class Games\n                 {  \n                   public string ID { get; set; }\n                   public string Text { get; set; }\n               }\n               List<Games> GamesData = new List<Games> {\n                   new Games() { ID= \"Game1\", Text= \"American Football\" },\n                   new Games() { ID= \"Game2\", Text= \"Badminton\" },\n                   new Games() { ID= \"Game3\", Text= \"Basketball\" },\n                   new Games() { ID= \"Game4\", Text= \"Cricket\" },\n                   new Games() { ID= \"Game5\", Text= \"Football\" },\n                   new Games() { ID= \"Game6\", Text= \"Golf\" }\n                 };\n            }\n            ]]></code> \n            </example>\n            <typeparam name=\"TItem\">Specifies the type of data source.</typeparam>\n            <summary>\n            The <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component displays a list of suggested items from which users can choose or tag one.\n            The selected item inserted in target in a predefined highlight format.\n            Enter the mention character in the editable element and tag the users from the suggestion list.\n            </summary>\n            <summary>\n            The <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component displays a list of suggested items from which users can choose or tag one.\n            Enter the mention character in the editable element and tag the users from the suggestion list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfMention"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.SfMention<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the id of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component.\n            </summary>\n            <value> \n            It sets the unique ID for the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the target selector for displaying the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component. \n            The <c>SfMention</c> component listens to user input on the target element displays suggestions as soon as the user enters the mention character. \n            This allows users to easily select items from the list of suggestions by typing the mention character and then selecting an item from the list.\n            </summary>\n            <value>\n            An element on the page should be used as the target for the <c>SfMention</c> component, \n            so that mention component displays suggestion list opens relative to the elements cursor position.\n            </value>\n            <remarks>\n            The <c>Target</c> property is required and must be specified.\n            </remarks>\n            <example> \n            <code><![CDATA[ \n            <SfMention DataSource=\"@SizeData\">\n            <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n            </TargetComponent>\n            </SfMention>\n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Target"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content that has to be passed.\n            </summary>\n            <value>\n            The value used to build the content.\n            </value>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the class/multiple classes separated by a space for the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component. \n            </summary>\n            <value> \n            Accepts a CSS class string separated by space to include for <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> popup element. The default value is <c>String.Empty</c>.\n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfMention CssClass=\"custom-mention\" DataSource=\"@SizeData\">\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n               .custom-mention .e-dropdownbase .e-list-item.e-active {\n                  color: #eec5d2;\n               }\n            </style>\n            @code{\n               protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"MentionChar","TypeName":"System.Char","Documentation":"\n            <summary>\n            Gets or sets the symbol or single character which triggers the search action in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component.\n            The <c>SfMention</c> component listens to user input on the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.Target\" /> element displays suggestions as soon as the user enters the mention character.\n            </summary>\n            <value> \n            A character of symbol. By default, the trigger character is the <c>@</c> symbol..\n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfMention MentionChar='#' DataSource=\"@SizeData\">\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention>\n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"MentionChar"}},{"Kind":"Components.Component","Name":"ShowMentionChar","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to show the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.MentionChar\" /> along with with the text when displaying selected mention item in target.\n            </summary>\n            <value>\n            <c>true</c>, the selected mention item displayed along with the mention character. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            If <c>ShowMentionChar</c> is set to <c>true</c>, the <c>mention</c> component will display the mention character along with the text of the mentioned item. \n            For example, if the mention character is <c>@</c> and the user mentions the item \"John Doe\", the mention will be displayed as @John Doe.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ShowMentionChar"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the filter type that specifies the match criteria while searching for mentions. The possible values for the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.FilterType\" /> property are:\n            <list type=\"bullet\">\n            <item>\n            <term>StartsWith</term>\n            <description>lists the items if the start of the text in the item matches with the search term or input string.</description>\n            </item>\n            <item>\n            <term>EndsWith</term>\n            <description>lists the items if the end of the text in the item matches with the search term or input string.</description>\n            </item>\n            <item>\n            <term>Contains</term>\n            <description>lists the items if the item text contains the search term or input string.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.DropDowns.FilterType\" /> enumeration that specifies the match criteria while searching.\n            The default value is <see cref=\"F:Syncfusion.Blazor.DropDowns.FilterType.Contains\" />.\n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfMention FilterType=\"FilterType.Contains\" DataSource=\"@SizeData\">\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"FilterType"}},{"Kind":"Components.Component","Name":"AllowSpaces","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to continue search action if user enter space after mention character while searching.\n            </summary>\n            <value> \n            <c>true</c>, the search action takes place even after a space, if the DataSource data's are matched. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            By default, the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component will only search for mentions when the mention character is immediately followed by a non-whitespace character (e.g. @john but not @ john). \n            However, you can change this behavior and allow the SfMention component to continue searching for mentions even if the user enters a space after the mention character by setting the <c>AllowSpaces</c> property to true.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowSpaces"}},{"Kind":"Components.Component","Name":"SuffixText","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the custom suffix that will be appended to the end of the mentioned item's text when it is inserted into the target editor. \n            </summary>\n            <value> \n            Accepts <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.SuffixText\" /> as string value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            When a item is selected, the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component will automatically insert the text of the mentioned item into the target editor. \n            By default, the mention component will insert the text of the mentioned item without any additional text or characters. \n            However, you can specify a custom suffix that will be appended to the end of the mentioned item's text when it is inserted into the target editor.\n            </remarks>\n            <example> \n            <code><![CDATA[ \n            <SfMention SuffixText=\"&nbsp;\" DataSource=\"@SizeData\">\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"SuffixText"}},{"Kind":"Components.Component","Name":"SuggestionCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the maximum number of items that will be displayed in the suggestion list.\n            </summary>\n            <value> \n            The maximum number of items that will be displayed in the suggestion list. The default value is <c>25</c>.\n            </value>\n            <remarks>\n            </remarks>\n            By default, the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component will display all of the items in the suggestions list. \n            However, you can limit the number of items that are displayed in the list by setting the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.SuggestionCount\" /> property.\n            <example> \n            <code><![CDATA[ \n            <SfMention SuggestionCount=15 DataSource=\"@SizeData\">\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"SuggestionCount"}},{"Kind":"Components.Component","Name":"MinLength","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the minimum length of user input that is required to initiate the search action.\n            </summary>\n            <value> \n            The minimum number of characters user input that is required to initiate the search action.The default value is <c>0</c>.\n            </value>\n            <remarks>\n            By default, the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component will initiate a search as soon as the user begins typing in the editable element.\n            You can change this behavior by setting the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.MinLength\" /> property.\n            </remarks>\n            <example> \n            For example, if you wanted to require the user to enter at least <c>3</c> characters before a search is initiated, you could use the following code:\n            <code><![CDATA[ \n            <SfMention MinLength=3 DataSource=\"@SizeData\">\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"MinLength"}},{"Kind":"Components.Component","Name":"Highlight","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to highlight the searched characters on suggestion list items.\n            </summary>\n            <value> \n            <c>true</c>, enable the highlighting of the searched characters in the suggestions list. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Highlight"}},{"Kind":"Components.Component","Name":"PopupHeight","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the popup's height value in pixels/number/percentage. If a number value is specified, it will be treated as pixels. \n            </summary>\n            <value> \n            Accepts <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.PopupHeight\" /> property accepts a value in pixels, number, or percentage. The default value is <c>300px</c>.\n            </value>\n            <example> \n            For example, if you wanted to set the height of the popup to 200 pixels, you could use the following code:\n            <code><![CDATA[ \n            <SfMention PopupHeight=\"200px\" DataSource=\"@SizeData\">\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"PopupHeight"}},{"Kind":"Components.Component","Name":"PopupWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the popup's width value in pixels/number/percentage. If a number value is specified, it will be treated as pixels.\n            </summary>\n            <value> \n            Accepts <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.PopupWidth\" /> property accepts a value in pixels, number, or percentage. The default value is <c>auto</c>.\n            </value>\n            <example>\n            For example, if you wanted to set the width of the popup to 250 pixels, you could use the following code:\n            <code><![CDATA[ \n            <SfMention PopupWidth=\"250px\" DataSource=\"@SizeData\">\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"PopupWidth"}},{"Kind":"Components.Component","Name":"SpinnerTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets a template that defines the appearance of the loading initiator in the popup. \n            This template is displayed until the data for the suggestions has been loaded.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfMention TItem=\"EmployeeData\" Query=\"@Query\" PopupWidth=\"250px\">\n                <TargetComponent>\n                    <div id=\"mentionTarget\" ></div>\n                </TargetComponent>\n                <SpinnerTemplate>\n                    <div class=\"spinner_loader\"></div>\n                 </SpinnerTemplate>\n                <ChildContent>\n                    <SfDataManager Url=\"https://ej2services.syncfusion.com/production/web-services/api/Orders\" Adaptor=\"Adaptors.WebApiAdaptor\"></SfDataManager>\n                    <MentionFieldSettings Value=\"ShipCity\" Text=\"ShipName\"></MentionFieldSettings>\n                </ChildContent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               public class EmployeeData\n               {\n                    public string FirstName { get; set; }\n                    public string Country { get; set; }\n               }\n               public EmployeeData Data = new EmployeeData();\n               public Query Query = new Query();\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"SpinnerTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"DisplayTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets a template that defines how the selected value will be displayed in the editable component.\n            The <c>TItem\"</c> is passed as a context to the template, allowing it to access information about the suggested item, such as its <see cref=\"P:Syncfusion.Blazor.DropDowns.MentionFieldSettings.Value\" /> and <see cref=\"P:Syncfusion.Blazor.DropDowns.MentionFieldSettings.Text\" />.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfMention TItem=\"EmployeeData\" Query=\"@Query\" PopupWidth=\"250px\">\n                <TargetComponent>\n                   <div id=\"mentionTarget\" ></div>\n                </TargetComponent>\n                <DisplayTemplate>\n                   <span class='name'>@@@((context as EmployeeData).FirstName)</span>\n                </DisplayTemplate>\n                <ChildContent>\n                    <SfDataManager Url=\"https://ej2services.syncfusion.com/production/web-services/api/Orders\" Adaptor=\"Adaptors.WebApiAdaptor\"></SfDataManager>\n                    <MentionFieldSettings Value=\"ShipCity\" Text=\"ShipName\"></MentionFieldSettings>\n                </ChildContent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               public class EmployeeData\n               {\n                    public string FirstName { get; set; }\n                    public string Country { get; set; }\n               }\n               public EmployeeData Data = new EmployeeData();\n               public Query Query = new Query();\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"DisplayTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"TargetComponent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the target component for displaying the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component. \n            The <c>SfMention</c> component listens to user input on the target component displays suggestions as soon as the user enters the mention character. \n            This allows users to easily select items from the list of suggestions by typing the mention character and then selecting an item from the list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <remarks>\n            <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> is attached to the first element of the TargetComponent.\n            </remarks>\n            <example> \n            <code><![CDATA[ \n            <div id=\"mentionTarget\" ></div>\n            <SfMention TItem=\"EmployeeData\" Query=\"@Query\" PopupWidth=\"250px\">\n                <TargetComponent>\n                   <div id=\"mentionTarget\"></div>\n                </TargetComponent>\n                <ChildContent>\n                    <SfDataManager Url=\"https://ej2services.syncfusion.com/production/web-services/api/Orders\" Adaptor=\"Adaptors.WebApiAdaptor\"></SfDataManager>\n                    <MentionFieldSettings Value=\"ShipCity\" Text=\"ShipName\"></MentionFieldSettings>\n                </ChildContent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               public class EmployeeData\n               {\n                    public string FirstName { get; set; }\n                    public string Country { get; set; }\n               }\n               public EmployeeData Data = new EmployeeData();\n               public Query Query = new Query();\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"TargetComponent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.Created\" /> event callback.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.Destroyed\" /> event callback.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.OnActionBegin\" /> event callback. \n            </summary>\n            <remarks>\n            You can prevent the action using <see cref=\"P:Syncfusion.Blazor.DropDowns.ActionBeginEventArgs.Cancel\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMention TItem=\"string\" DataSource=\"@SizeData\" OnActionBegin=\"@OnActionBeginHandler\"></SfMention>\n            @code{\n                protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnActionBeginHandler(ActionBeginEventArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.OnActionComplete\" /> event callback. \n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfMention TItem=\"string\" DataSource=\"@SizeData\" OnActionComplete=\"@OnActionCompleteHandler\"></SfMention>\n            @code{\n                protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnActionCompleteHandler(ActionBeginEventArgs<string> args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Exception>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.OnActionFailure\" /> event callback. \n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Filtering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.MentionFilteringEventArgs<TItem>>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.Filtering\" /> event callback. \n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfMention TItem=\"string\" DataSource=\"@SizeData\" Filtering=\"@OnFilteringHandler\"></SfMention>\n            @code{\n                protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public async Task OnFilteringHandler(MentionFilteringEventArgs args) {\n                    \n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Filtering","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Opening","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.MentionOpeningEventArgs>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.Opening\" /> event callback. \n            </summary>\n            <remarks>\n            You can prevent the popup open action using <see cref=\"!:MentionOpeningEventArgs.Cancel\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMention TItem=\"string\" DataSource=\"@SizeData\" Opening=\"@OnOpeningHandler\"></SfMention>\n            @code{\n                protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnOpeningHandler(MentionOpeningEventArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Opening","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.MentionClosingEventArgs>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.Closing\" /> event callback.\n            </summary>\n            <remarks>\n            You can prevent the popup close action using <see cref=\"P:Syncfusion.Blazor.DropDowns.MentionClosingEventArgs.Cancel\" /> and the popup remains opened always.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMention TItem=\"string\" DataSource=\"@SizeData\" Closing=\"@OnClosingHandler\"></SfMention>\n            @code{\n                protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnClosingHandler(MentionClosingEventArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Closing","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.Opened\" /> event callback.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.Closed\" /> event callback.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.MentionValueSelectedEventArgs<TItem>>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.ValueSelected\" /> event callback.\n            </summary>\n            <remarks>\n            This event triggers when an item in a popup is selected or when the model value is changed by user.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMention TItem=\"string\" DataSource=\"@SizeData\" ValueSelected=\"@OnValueSelectedHandler\"></SfMention>\n            @code{\n                protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnValueSelectedHandler(MentionValueSelectedEventArgs<TItem> args) {\n                    \n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueSelected","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueSelecting","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.MentionValueSelectingEventArgs<TItem>>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.ValueSelecting\" /> event callback.\n            </summary>\n            <remarks>\n            You can prevent the item selection action using <see cref=\"P:Syncfusion.Blazor.DropDowns.MentionValueSelectingEventArgs`1.Cancel\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMention TItem=\"string\" DataSource=\"@SizeData\" ValueSelecting=\"@OnValueSelectingHandler\"></SfMention>\n            @code{\n                protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnValueSelectingHandler(MentionValueSelectingEventArgs<string> args) {\n                    if(args.ItemData== \"Medium\")\n                        args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueSelecting","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            The order of sorting the list items. The default value is <c>SortOrder.None</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"SortOrder"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Gets or sets the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n            <value> \n            Binding data to the popup element. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"DataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Gets or sets the external `Query` that execute along with data processing.\n            </summary>\n            <value> \n            Query value to be used for data fetching. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Query"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether case-sensitivity is enabled or disabled when searching for suggestions.\n            </summary>\n            <value>\n            <c>false</c>, consider the `case-sensitive` on performing the search to find suggestions. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether diacritic characters or accents are ignored.\n            </summary>\n            <value>\n            <c>true</c>, ignores the diacritic characters or accents when filtering. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the z-index value of the component popup element.\n            </summary>\n            <value> \n            The ZIndex value for the popup element.The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMention<TItem>","Components.GenericTyped":"True"}},{"HashCode":-351260421,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfMention<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component displays a list of suggested items from which users can select or tag one.\n            Enter the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.MentionChar\" /> in the editable element and tag the any item from the suggestion list.\n            </summary>\n            <example> \n            <code><![CDATA[ \n            <SfMention TItem=\"Games\" DataSource=\"@GamesData\">\n              <ChildContent>\n                <MentionFieldSettings Value=\"ID\" Text=\"Text\"></MentionFieldSettings>\n              </ChildContent>\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention>\n            @code{\n               public class Games\n                 {  \n                   public string ID { get; set; }\n                   public string Text { get; set; }\n               }\n               List<Games> GamesData = new List<Games> {\n                   new Games() { ID= \"Game1\", Text= \"American Football\" },\n                   new Games() { ID= \"Game2\", Text= \"Badminton\" },\n                   new Games() { ID= \"Game3\", Text= \"Basketball\" },\n                   new Games() { ID= \"Game4\", Text= \"Cricket\" },\n                   new Games() { ID= \"Game5\", Text= \"Football\" },\n                   new Games() { ID= \"Game6\", Text= \"Golf\" }\n                 };\n            }\n            ]]></code> \n            </example>\n            <typeparam name=\"TItem\">Specifies the type of data source.</typeparam>\n            <summary>\n            The <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component displays a list of suggested items from which users can choose or tag one.\n            The selected item inserted in target in a predefined highlight format.\n            Enter the mention character in the editable element and tag the users from the suggestion list.\n            </summary>\n            <summary>\n            The <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component displays a list of suggested items from which users can choose or tag one.\n            Enter the mention character in the editable element and tag the users from the suggestion list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfMention"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.SfMention<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the id of the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component.\n            </summary>\n            <value> \n            It sets the unique ID for the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the target selector for displaying the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component. \n            The <c>SfMention</c> component listens to user input on the target element displays suggestions as soon as the user enters the mention character. \n            This allows users to easily select items from the list of suggestions by typing the mention character and then selecting an item from the list.\n            </summary>\n            <value>\n            An element on the page should be used as the target for the <c>SfMention</c> component, \n            so that mention component displays suggestion list opens relative to the elements cursor position.\n            </value>\n            <remarks>\n            The <c>Target</c> property is required and must be specified.\n            </remarks>\n            <example> \n            <code><![CDATA[ \n            <SfMention DataSource=\"@SizeData\">\n            <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n            </TargetComponent>\n            </SfMention>\n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Target"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content that has to be passed.\n            </summary>\n            <value>\n            The value used to build the content.\n            </value>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the class/multiple classes separated by a space for the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component. \n            </summary>\n            <value> \n            Accepts a CSS class string separated by space to include for <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> popup element. The default value is <c>String.Empty</c>.\n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfMention CssClass=\"custom-mention\" DataSource=\"@SizeData\">\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n               .custom-mention .e-dropdownbase .e-list-item.e-active {\n                  color: #eec5d2;\n               }\n            </style>\n            @code{\n               protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"MentionChar","TypeName":"System.Char","Documentation":"\n            <summary>\n            Gets or sets the symbol or single character which triggers the search action in the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component.\n            The <c>SfMention</c> component listens to user input on the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.Target\" /> element displays suggestions as soon as the user enters the mention character.\n            </summary>\n            <value> \n            A character of symbol. By default, the trigger character is the <c>@</c> symbol..\n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfMention MentionChar='#' DataSource=\"@SizeData\">\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention>\n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"MentionChar"}},{"Kind":"Components.Component","Name":"ShowMentionChar","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to show the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.MentionChar\" /> along with with the text when displaying selected mention item in target.\n            </summary>\n            <value>\n            <c>true</c>, the selected mention item displayed along with the mention character. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            If <c>ShowMentionChar</c> is set to <c>true</c>, the <c>mention</c> component will display the mention character along with the text of the mentioned item. \n            For example, if the mention character is <c>@</c> and the user mentions the item \"John Doe\", the mention will be displayed as @John Doe.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ShowMentionChar"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the filter type that specifies the match criteria while searching for mentions. The possible values for the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.FilterType\" /> property are:\n            <list type=\"bullet\">\n            <item>\n            <term>StartsWith</term>\n            <description>lists the items if the start of the text in the item matches with the search term or input string.</description>\n            </item>\n            <item>\n            <term>EndsWith</term>\n            <description>lists the items if the end of the text in the item matches with the search term or input string.</description>\n            </item>\n            <item>\n            <term>Contains</term>\n            <description>lists the items if the item text contains the search term or input string.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.DropDowns.FilterType\" /> enumeration that specifies the match criteria while searching.\n            The default value is <see cref=\"F:Syncfusion.Blazor.DropDowns.FilterType.Contains\" />.\n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfMention FilterType=\"FilterType.Contains\" DataSource=\"@SizeData\">\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"FilterType"}},{"Kind":"Components.Component","Name":"AllowSpaces","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to continue search action if user enter space after mention character while searching.\n            </summary>\n            <value> \n            <c>true</c>, the search action takes place even after a space, if the DataSource data's are matched. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            By default, the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component will only search for mentions when the mention character is immediately followed by a non-whitespace character (e.g. @john but not @ john). \n            However, you can change this behavior and allow the SfMention component to continue searching for mentions even if the user enters a space after the mention character by setting the <c>AllowSpaces</c> property to true.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowSpaces"}},{"Kind":"Components.Component","Name":"SuffixText","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the custom suffix that will be appended to the end of the mentioned item's text when it is inserted into the target editor. \n            </summary>\n            <value> \n            Accepts <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.SuffixText\" /> as string value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            When a item is selected, the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component will automatically insert the text of the mentioned item into the target editor. \n            By default, the mention component will insert the text of the mentioned item without any additional text or characters. \n            However, you can specify a custom suffix that will be appended to the end of the mentioned item's text when it is inserted into the target editor.\n            </remarks>\n            <example> \n            <code><![CDATA[ \n            <SfMention SuffixText=\"&nbsp;\" DataSource=\"@SizeData\">\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"SuffixText"}},{"Kind":"Components.Component","Name":"SuggestionCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the maximum number of items that will be displayed in the suggestion list.\n            </summary>\n            <value> \n            The maximum number of items that will be displayed in the suggestion list. The default value is <c>25</c>.\n            </value>\n            <remarks>\n            </remarks>\n            By default, the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component will display all of the items in the suggestions list. \n            However, you can limit the number of items that are displayed in the list by setting the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.SuggestionCount\" /> property.\n            <example> \n            <code><![CDATA[ \n            <SfMention SuggestionCount=15 DataSource=\"@SizeData\">\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"SuggestionCount"}},{"Kind":"Components.Component","Name":"MinLength","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the minimum length of user input that is required to initiate the search action.\n            </summary>\n            <value> \n            The minimum number of characters user input that is required to initiate the search action.The default value is <c>0</c>.\n            </value>\n            <remarks>\n            By default, the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component will initiate a search as soon as the user begins typing in the editable element.\n            You can change this behavior by setting the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.MinLength\" /> property.\n            </remarks>\n            <example> \n            For example, if you wanted to require the user to enter at least <c>3</c> characters before a search is initiated, you could use the following code:\n            <code><![CDATA[ \n            <SfMention MinLength=3 DataSource=\"@SizeData\">\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"MinLength"}},{"Kind":"Components.Component","Name":"Highlight","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to highlight the searched characters on suggestion list items.\n            </summary>\n            <value> \n            <c>true</c>, enable the highlighting of the searched characters in the suggestions list. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Highlight"}},{"Kind":"Components.Component","Name":"PopupHeight","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the popup's height value in pixels/number/percentage. If a number value is specified, it will be treated as pixels. \n            </summary>\n            <value> \n            Accepts <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.PopupHeight\" /> property accepts a value in pixels, number, or percentage. The default value is <c>300px</c>.\n            </value>\n            <example> \n            For example, if you wanted to set the height of the popup to 200 pixels, you could use the following code:\n            <code><![CDATA[ \n            <SfMention PopupHeight=\"200px\" DataSource=\"@SizeData\">\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"PopupHeight"}},{"Kind":"Components.Component","Name":"PopupWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the popup's width value in pixels/number/percentage. If a number value is specified, it will be treated as pixels.\n            </summary>\n            <value> \n            Accepts <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.PopupWidth\" /> property accepts a value in pixels, number, or percentage. The default value is <c>auto</c>.\n            </value>\n            <example>\n            For example, if you wanted to set the width of the popup to 250 pixels, you could use the following code:\n            <code><![CDATA[ \n            <SfMention PopupWidth=\"250px\" DataSource=\"@SizeData\">\n              <TargetComponent>\n                <div id=\"mentionTarget\" ></div>\n              </TargetComponent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"PopupWidth"}},{"Kind":"Components.Component","Name":"SpinnerTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets a template that defines the appearance of the loading initiator in the popup. \n            This template is displayed until the data for the suggestions has been loaded.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfMention TItem=\"EmployeeData\" Query=\"@Query\" PopupWidth=\"250px\">\n                <TargetComponent>\n                    <div id=\"mentionTarget\" ></div>\n                </TargetComponent>\n                <SpinnerTemplate>\n                    <div class=\"spinner_loader\"></div>\n                 </SpinnerTemplate>\n                <ChildContent>\n                    <SfDataManager Url=\"https://ej2services.syncfusion.com/production/web-services/api/Orders\" Adaptor=\"Adaptors.WebApiAdaptor\"></SfDataManager>\n                    <MentionFieldSettings Value=\"ShipCity\" Text=\"ShipName\"></MentionFieldSettings>\n                </ChildContent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               public class EmployeeData\n               {\n                    public string FirstName { get; set; }\n                    public string Country { get; set; }\n               }\n               public EmployeeData Data = new EmployeeData();\n               public Query Query = new Query();\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"SpinnerTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"DisplayTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets a template that defines how the selected value will be displayed in the editable component.\n            The <c>TItem\"</c> is passed as a context to the template, allowing it to access information about the suggested item, such as its <see cref=\"P:Syncfusion.Blazor.DropDowns.MentionFieldSettings.Value\" /> and <see cref=\"P:Syncfusion.Blazor.DropDowns.MentionFieldSettings.Text\" />.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfMention TItem=\"EmployeeData\" Query=\"@Query\" PopupWidth=\"250px\">\n                <TargetComponent>\n                   <div id=\"mentionTarget\" ></div>\n                </TargetComponent>\n                <DisplayTemplate>\n                   <span class='name'>@@@((context as EmployeeData).FirstName)</span>\n                </DisplayTemplate>\n                <ChildContent>\n                    <SfDataManager Url=\"https://ej2services.syncfusion.com/production/web-services/api/Orders\" Adaptor=\"Adaptors.WebApiAdaptor\"></SfDataManager>\n                    <MentionFieldSettings Value=\"ShipCity\" Text=\"ShipName\"></MentionFieldSettings>\n                </ChildContent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               public class EmployeeData\n               {\n                    public string FirstName { get; set; }\n                    public string Country { get; set; }\n               }\n               public EmployeeData Data = new EmployeeData();\n               public Query Query = new Query();\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"DisplayTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"TargetComponent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the target component for displaying the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component. \n            The <c>SfMention</c> component listens to user input on the target component displays suggestions as soon as the user enters the mention character. \n            This allows users to easily select items from the list of suggestions by typing the mention character and then selecting an item from the list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <remarks>\n            <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> is attached to the first element of the TargetComponent.\n            </remarks>\n            <example> \n            <code><![CDATA[ \n            <div id=\"mentionTarget\" ></div>\n            <SfMention TItem=\"EmployeeData\" Query=\"@Query\" PopupWidth=\"250px\">\n                <TargetComponent>\n                   <div id=\"mentionTarget\"></div>\n                </TargetComponent>\n                <ChildContent>\n                    <SfDataManager Url=\"https://ej2services.syncfusion.com/production/web-services/api/Orders\" Adaptor=\"Adaptors.WebApiAdaptor\"></SfDataManager>\n                    <MentionFieldSettings Value=\"ShipCity\" Text=\"ShipName\"></MentionFieldSettings>\n                </ChildContent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               public class EmployeeData\n               {\n                    public string FirstName { get; set; }\n                    public string Country { get; set; }\n               }\n               public EmployeeData Data = new EmployeeData();\n               public Query Query = new Query();\n            }\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"TargetComponent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.Created\" /> event callback.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.Destroyed\" /> event callback.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.OnActionBegin\" /> event callback. \n            </summary>\n            <remarks>\n            You can prevent the action using <see cref=\"P:Syncfusion.Blazor.DropDowns.ActionBeginEventArgs.Cancel\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMention TItem=\"string\" DataSource=\"@SizeData\" OnActionBegin=\"@OnActionBeginHandler\"></SfMention>\n            @code{\n                protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnActionBeginHandler(ActionBeginEventArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.OnActionComplete\" /> event callback. \n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfMention TItem=\"string\" DataSource=\"@SizeData\" OnActionComplete=\"@OnActionCompleteHandler\"></SfMention>\n            @code{\n                protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnActionCompleteHandler(ActionBeginEventArgs<string> args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Exception>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.OnActionFailure\" /> event callback. \n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Filtering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.MentionFilteringEventArgs<TItem>>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.Filtering\" /> event callback. \n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfMention TItem=\"string\" DataSource=\"@SizeData\" Filtering=\"@OnFilteringHandler\"></SfMention>\n            @code{\n                protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public async Task OnFilteringHandler(MentionFilteringEventArgs args) {\n                    \n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Filtering","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Opening","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.MentionOpeningEventArgs>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.Opening\" /> event callback. \n            </summary>\n            <remarks>\n            You can prevent the popup open action using <see cref=\"!:MentionOpeningEventArgs.Cancel\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMention TItem=\"string\" DataSource=\"@SizeData\" Opening=\"@OnOpeningHandler\"></SfMention>\n            @code{\n                protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnOpeningHandler(MentionOpeningEventArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Opening","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.MentionClosingEventArgs>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.Closing\" /> event callback.\n            </summary>\n            <remarks>\n            You can prevent the popup close action using <see cref=\"P:Syncfusion.Blazor.DropDowns.MentionClosingEventArgs.Cancel\" /> and the popup remains opened always.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMention TItem=\"string\" DataSource=\"@SizeData\" Closing=\"@OnClosingHandler\"></SfMention>\n            @code{\n                protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnClosingHandler(MentionClosingEventArgs args) {\n                    args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Closing","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.Opened\" /> event callback.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.Closed\" /> event callback.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.MentionValueSelectedEventArgs<TItem>>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.ValueSelected\" /> event callback.\n            </summary>\n            <remarks>\n            This event triggers when an item in a popup is selected or when the model value is changed by user.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMention TItem=\"string\" DataSource=\"@SizeData\" ValueSelected=\"@OnValueSelectedHandler\"></SfMention>\n            @code{\n                protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnValueSelectedHandler(MentionValueSelectedEventArgs<TItem> args) {\n                    \n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueSelected","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueSelecting","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.MentionValueSelectingEventArgs<TItem>>","Documentation":"\n            <summary>\n            Provides information about the <see cref=\"P:Syncfusion.Blazor.DropDowns.SfMention`1.ValueSelecting\" /> event callback.\n            </summary>\n            <remarks>\n            You can prevent the item selection action using <see cref=\"P:Syncfusion.Blazor.DropDowns.MentionValueSelectingEventArgs`1.Cancel\" />.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfMention TItem=\"string\" DataSource=\"@SizeData\" ValueSelecting=\"@OnValueSelectingHandler\"></SfMention>\n            @code{\n                protected List<string> SizeData = new List<string>() { \"Small\", \"Medium\", \"Large\" };\n                public void OnValueSelectingHandler(MentionValueSelectingEventArgs<string> args) {\n                    if(args.ItemData== \"Medium\")\n                        args.Cancel = true;\n                }\n              }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ValueSelecting","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            The order of sorting the list items. The default value is <c>SortOrder.None</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"SortOrder"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Gets or sets the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n            <value> \n            Binding data to the popup element. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"DataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Gets or sets the external `Query` that execute along with data processing.\n            </summary>\n            <value> \n            Query value to be used for data fetching. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Query"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether case-sensitivity is enabled or disabled when searching for suggestions.\n            </summary>\n            <value>\n            <c>false</c>, consider the `case-sensitive` on performing the search to find suggestions. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether diacritic characters or accents are ignored.\n            </summary>\n            <value>\n            <c>true</c>, ignores the diacritic characters or accents when filtering. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the z-index value of the component popup element.\n            </summary>\n            <value> \n            The ZIndex value for the popup element.The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMention<TItem>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1815933611,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.ChildContent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the content that has to be passed.\n            </summary>\n            <value>\n            The value used to build the content.\n            </value>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfMention"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-200139618,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.ChildContent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the content that has to be passed.\n            </summary>\n            <value>\n            The value used to build the content.\n            </value>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.DropDowns.SfMention"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":150102437,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.SpinnerTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets a template that defines the appearance of the loading initiator in the popup. \n            This template is displayed until the data for the suggestions has been loaded.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfMention TItem=\"EmployeeData\" Query=\"@Query\" PopupWidth=\"250px\">\n                <TargetComponent>\n                    <div id=\"mentionTarget\" ></div>\n                </TargetComponent>\n                <SpinnerTemplate>\n                    <div class=\"spinner_loader\"></div>\n                 </SpinnerTemplate>\n                <ChildContent>\n                    <SfDataManager Url=\"https://ej2services.syncfusion.com/production/web-services/api/Orders\" Adaptor=\"Adaptors.WebApiAdaptor\"></SfDataManager>\n                    <MentionFieldSettings Value=\"ShipCity\" Text=\"ShipName\"></MentionFieldSettings>\n                </ChildContent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               public class EmployeeData\n               {\n                    public string FirstName { get; set; }\n                    public string Country { get; set; }\n               }\n               public EmployeeData Data = new EmployeeData();\n               public Query Query = new Query();\n            }\n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SpinnerTemplate","ParentTag":"SfMention"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.SpinnerTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1258378595,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.SpinnerTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets a template that defines the appearance of the loading initiator in the popup. \n            This template is displayed until the data for the suggestions has been loaded.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfMention TItem=\"EmployeeData\" Query=\"@Query\" PopupWidth=\"250px\">\n                <TargetComponent>\n                    <div id=\"mentionTarget\" ></div>\n                </TargetComponent>\n                <SpinnerTemplate>\n                    <div class=\"spinner_loader\"></div>\n                 </SpinnerTemplate>\n                <ChildContent>\n                    <SfDataManager Url=\"https://ej2services.syncfusion.com/production/web-services/api/Orders\" Adaptor=\"Adaptors.WebApiAdaptor\"></SfDataManager>\n                    <MentionFieldSettings Value=\"ShipCity\" Text=\"ShipName\"></MentionFieldSettings>\n                </ChildContent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               public class EmployeeData\n               {\n                    public string FirstName { get; set; }\n                    public string Country { get; set; }\n               }\n               public EmployeeData Data = new EmployeeData();\n               public Query Query = new Query();\n            }\n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SpinnerTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfMention"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.SpinnerTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-837986283,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.DisplayTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets a template that defines how the selected value will be displayed in the editable component.\n            The <c>TItem\"</c> is passed as a context to the template, allowing it to access information about the suggested item, such as its <see cref=\"P:Syncfusion.Blazor.DropDowns.MentionFieldSettings.Value\" /> and <see cref=\"P:Syncfusion.Blazor.DropDowns.MentionFieldSettings.Text\" />.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfMention TItem=\"EmployeeData\" Query=\"@Query\" PopupWidth=\"250px\">\n                <TargetComponent>\n                   <div id=\"mentionTarget\" ></div>\n                </TargetComponent>\n                <DisplayTemplate>\n                   <span class='name'>@@@((context as EmployeeData).FirstName)</span>\n                </DisplayTemplate>\n                <ChildContent>\n                    <SfDataManager Url=\"https://ej2services.syncfusion.com/production/web-services/api/Orders\" Adaptor=\"Adaptors.WebApiAdaptor\"></SfDataManager>\n                    <MentionFieldSettings Value=\"ShipCity\" Text=\"ShipName\"></MentionFieldSettings>\n                </ChildContent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               public class EmployeeData\n               {\n                    public string FirstName { get; set; }\n                    public string Country { get; set; }\n               }\n               public EmployeeData Data = new EmployeeData();\n               public Query Query = new Query();\n            }\n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DisplayTemplate","ParentTag":"SfMention"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'DisplayTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.DisplayTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1444300852,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.DisplayTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets a template that defines how the selected value will be displayed in the editable component.\n            The <c>TItem\"</c> is passed as a context to the template, allowing it to access information about the suggested item, such as its <see cref=\"P:Syncfusion.Blazor.DropDowns.MentionFieldSettings.Value\" /> and <see cref=\"P:Syncfusion.Blazor.DropDowns.MentionFieldSettings.Text\" />.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfMention TItem=\"EmployeeData\" Query=\"@Query\" PopupWidth=\"250px\">\n                <TargetComponent>\n                   <div id=\"mentionTarget\" ></div>\n                </TargetComponent>\n                <DisplayTemplate>\n                   <span class='name'>@@@((context as EmployeeData).FirstName)</span>\n                </DisplayTemplate>\n                <ChildContent>\n                    <SfDataManager Url=\"https://ej2services.syncfusion.com/production/web-services/api/Orders\" Adaptor=\"Adaptors.WebApiAdaptor\"></SfDataManager>\n                    <MentionFieldSettings Value=\"ShipCity\" Text=\"ShipName\"></MentionFieldSettings>\n                </ChildContent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               public class EmployeeData\n               {\n                    public string FirstName { get; set; }\n                    public string Country { get; set; }\n               }\n               public EmployeeData Data = new EmployeeData();\n               public Query Query = new Query();\n            }\n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DisplayTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfMention"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'DisplayTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.DisplayTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-339113942,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.TargetComponent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the target component for displaying the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component. \n            The <c>SfMention</c> component listens to user input on the target component displays suggestions as soon as the user enters the mention character. \n            This allows users to easily select items from the list of suggestions by typing the mention character and then selecting an item from the list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <remarks>\n            <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> is attached to the first element of the TargetComponent.\n            </remarks>\n            <example> \n            <code><![CDATA[ \n            <div id=\"mentionTarget\" ></div>\n            <SfMention TItem=\"EmployeeData\" Query=\"@Query\" PopupWidth=\"250px\">\n                <TargetComponent>\n                   <div id=\"mentionTarget\"></div>\n                </TargetComponent>\n                <ChildContent>\n                    <SfDataManager Url=\"https://ej2services.syncfusion.com/production/web-services/api/Orders\" Adaptor=\"Adaptors.WebApiAdaptor\"></SfDataManager>\n                    <MentionFieldSettings Value=\"ShipCity\" Text=\"ShipName\"></MentionFieldSettings>\n                </ChildContent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               public class EmployeeData\n               {\n                    public string FirstName { get; set; }\n                    public string Country { get; set; }\n               }\n               public EmployeeData Data = new EmployeeData();\n               public Query Query = new Query();\n            }\n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TargetComponent","ParentTag":"SfMention"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.TargetComponent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1333315579,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.TargetComponent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the target component for displaying the <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> component. \n            The <c>SfMention</c> component listens to user input on the target component displays suggestions as soon as the user enters the mention character. \n            This allows users to easily select items from the list of suggestions by typing the mention character and then selecting an item from the list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n            <remarks>\n            <see cref=\"T:Syncfusion.Blazor.DropDowns.SfMention`1\" /> is attached to the first element of the TargetComponent.\n            </remarks>\n            <example> \n            <code><![CDATA[ \n            <div id=\"mentionTarget\" ></div>\n            <SfMention TItem=\"EmployeeData\" Query=\"@Query\" PopupWidth=\"250px\">\n                <TargetComponent>\n                   <div id=\"mentionTarget\"></div>\n                </TargetComponent>\n                <ChildContent>\n                    <SfDataManager Url=\"https://ej2services.syncfusion.com/production/web-services/api/Orders\" Adaptor=\"Adaptors.WebApiAdaptor\"></SfDataManager>\n                    <MentionFieldSettings Value=\"ShipCity\" Text=\"ShipName\"></MentionFieldSettings>\n                </ChildContent>\n            </SfMention> \n            <style>\n               #mentionTarget {\n                  border: 2px solid grey;\n                  min-height: 200px;\n               }\n            </style>\n            @code{\n               public class EmployeeData\n               {\n                    public string FirstName { get; set; }\n                    public string Country { get; set; }\n               }\n               public EmployeeData Data = new EmployeeData();\n               public Query Query = new Query();\n            }\n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TargetComponent","ParentTag":"Syncfusion.Blazor.DropDowns.SfMention"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.TargetComponent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1815466752,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"SfMention"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.ItemTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":422056352,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfMention"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.ItemTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-775940465,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"SfMention"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.GroupTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":2100995300,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfMention"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.GroupTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2080468963,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"SfMention"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.NoRecordsTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-64954677,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfMention"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.NoRecordsTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-30939107,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"SfMention"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.ActionFailureTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1748515147,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfMention"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMention<TItem>.ActionFailureTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":376947762,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The MultiSelect component contains a list of predefined values from which a multiple value can be chosen.\n            </summary>\n            <summary>\n            The MultiSelect component contains a list of predefined values from which a multiple value can be chosen.\n            </summary>\n            <summary>\n            The MultiSelect component contains a list of predefined values from which a multiple value can be chosen.\n            </summary>\n            <summary>\n            The MultiSelect component contains a list of predefined values from which a multiple value can be chosen.\n            </summary>\n            <summary>\n            The MultiSelect component contains a list of predefined values from which a single value can be chosen.\n            </summary>\n            <summary>\n            The MultiSelect component contains a list of predefined values from which a multiple value can be chosen.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the value type.</typeparam>\n            <typeparam name=\"TItem\">Specifies the type of SfMultiSelect.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfMultiSelect"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the MultiSelect component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>Enable or disable persisting component's state between page reloads.</para>\n            <para>If enabled,  the `Value` state will be persisted.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Value</term>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"AllowCustomValue","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Allows user to add a\n            Custom value the value which is not present in the suggestion list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowCustomValue"}},{"Kind":"Components.Component","Name":"EnableVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            The Virtual Scrolling feature is used to display a large amount of data that you require without buffering the entire load of a huge database records in the DropDowns, that is, when scrolling, the datamanager request is sent to fetch some amount of data from the server dynamically.\n            To achieve this scenario with DropDowns, set the EnableVirtualization to true.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualization"}},{"Kind":"Components.Component","Name":"ItemsCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            The data can be fetched in popup based on ItemsCount, when enabled the EnableVirtualization.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemsCount"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>To enable the filtering option in this component.</para>\n            <para>Filter action performs when type in search box and collect the matched item through `Filtering` event.</para>\n            <para>If searching character does not match, `NoRecordsTemplate` property value will be shown.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering"}},{"Kind":"Components.Component","Name":"EnableChangeOnBlur","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>By default, the MultiSelect component fires the Change event while focus out the component.</para>\n            <para>If you want to fires the Change event on every value selection and remove, then disable the EnabledChangeOnBlur property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableChangeOnBlur"}},{"Kind":"Components.Component","Name":"EnableCloseOnSelect","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Based on the property, when item get select popup visibility state will changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableCloseOnSelect"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the MultiSelect. One or more custom CSS classes can be added to a MultiSelect.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"DelimiterChar","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets the delimiter character for 'default' and 'delimiter' visibility modes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DelimiterChar"}},{"Kind":"Components.Component","Name":"EnableGroupCheckBox","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>Specifies a boolean value that indicates the whether the grouped list items are\n            allowed to check by checking the group header in checkbox mode.</para>\n            <para>By default, there is no checkbox provided for group headers.</para>\n            <para>This property allows you to render checkbox for group headers and to select\n            all the grouped items at once.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableGroupCheckBox"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"EnableSelectionOrder","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Reorder the selected items in popup visibility state.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableSelectionOrder"}},{"Kind":"Components.Component","Name":"FilterBarPlaceholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Accepts the value to be displayed as a watermark text on the filter bar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FilterBarPlaceholder"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the floating label behavior of the MultiSelect that the placeholder text floats above the MultiSelect based on the following values.\n            <para>Possible values are: </para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the MultiSelect when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the MultiSelect.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the MultiSelect after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType"}},{"Kind":"Components.Component","Name":"HideSelectedItem","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Hides the selected item from the list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HideSelectedItem"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            <para>If you configured both the property and equivalent input attribute, then the component considers the property value.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            <para>If you configured both the property and equivalent input attribute, then the component considers the property value.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes"}},{"Kind":"Components.Component","Name":"MaximumSelectionLength","TypeName":"System.Int32","Documentation":"\n            <summary>\n            <para>Sets limitation to the value selection.</para>\n            <para>Based on the limitation, list selection will be prevented.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaximumSelectionLength"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.DropDowns.VisualMode","IsEnum":true,"Documentation":"\n            <summary>\n            configures visibility mode for component interaction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Mode"}},{"Kind":"Components.Component","Name":"OpenOnClick","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Whether to automatically open the popup when the control is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OpenOnClick"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text that is shown as a hint or placeholder until the user focuses or enter a value in MultiSelect. The property is depending on the FloatLabelType property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"PopupHeight","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the height of the popup list. By default, it renders based on its list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PopupHeight"}},{"Kind":"Components.Component","Name":"PopupWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the popup list and percentage values has calculated based on input width.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PopupWidth"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the MultiSelect allows the user to change the value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly"}},{"Kind":"Components.Component","Name":"SelectAllText","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the selectAllText to be displayed on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectAllText"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables close icon with the each selected item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton"}},{"Kind":"Components.Component","Name":"ShowDropDownIcon","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Allows you to either show or hide the DropDown button on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowDropDownIcon"}},{"Kind":"Components.Component","Name":"ShowSelectAll","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Allows you to either show or hide the selectAll option on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowSelectAll"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Selects the list item which maps the data `Text` field in the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"UnSelectAllText","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the UnSelectAllText to be displayed on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"UnSelectAllText"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Selects the list item which maps the data `Value` field in the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the component. By default, it sizes based on its parent.\n            container dimension.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the DropDownList component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnKeyUp","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnKeyUp","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input loses the focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            The order of sorting the list items. The default value is <c>SortOrder.None</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"SortOrder"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Gets or sets the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n            <value> \n            Binding data to the popup element. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"DataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Gets or sets the external `Query` that execute along with data processing.\n            </summary>\n            <value> \n            Query value to be used for data fetching. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets which filter type, the component needs to be considered on search action.\n            </summary>\n            <value> \n            The filter type specifed for searching the list items. The default value is <c>FilterType.StartsWith</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether case-sensitivity is enabled or disabled when searching for suggestions.\n            </summary>\n            <value>\n            <c>false</c>, consider the `case-sensitive` on performing the search to find suggestions. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether diacritic characters or accents are ignored.\n            </summary>\n            <value>\n            <c>true</c>, ignores the diacritic characters or accents when filtering. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the z-index value of the component popup element.\n            </summary>\n            <value> \n            The ZIndex value for the popup element.The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>","Components.GenericTyped":"True"}},{"HashCode":-590163166,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The MultiSelect component contains a list of predefined values from which a multiple value can be chosen.\n            </summary>\n            <summary>\n            The MultiSelect component contains a list of predefined values from which a multiple value can be chosen.\n            </summary>\n            <summary>\n            The MultiSelect component contains a list of predefined values from which a multiple value can be chosen.\n            </summary>\n            <summary>\n            The MultiSelect component contains a list of predefined values from which a multiple value can be chosen.\n            </summary>\n            <summary>\n            The MultiSelect component contains a list of predefined values from which a single value can be chosen.\n            </summary>\n            <summary>\n            The MultiSelect component contains a list of predefined values from which a multiple value can be chosen.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the value type.</typeparam>\n            <typeparam name=\"TItem\">Specifies the type of SfMultiSelect.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfMultiSelect"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id of the MultiSelect component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a boolean value that indicates whether the component allows the user to interact with it.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>Enable or disable persisting component's state between page reloads.</para>\n            <para>If enabled,  the `Value` state will be persisted.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>Value</term>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ValueExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TValue>>","Documentation":"\n            <summary>\n            Specifies the expression for defining the value of the bound.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"AllowCustomValue","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Allows user to add a\n            Custom value the value which is not present in the suggestion list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowCustomValue"}},{"Kind":"Components.Component","Name":"EnableVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            The Virtual Scrolling feature is used to display a large amount of data that you require without buffering the entire load of a huge database records in the DropDowns, that is, when scrolling, the datamanager request is sent to fetch some amount of data from the server dynamically.\n            To achieve this scenario with DropDowns, set the EnableVirtualization to true.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualization"}},{"Kind":"Components.Component","Name":"ItemsCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            The data can be fetched in popup based on ItemsCount, when enabled the EnableVirtualization.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemsCount"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>To enable the filtering option in this component.</para>\n            <para>Filter action performs when type in search box and collect the matched item through `Filtering` event.</para>\n            <para>If searching character does not match, `NoRecordsTemplate` property value will be shown.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering"}},{"Kind":"Components.Component","Name":"EnableChangeOnBlur","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>By default, the MultiSelect component fires the Change event while focus out the component.</para>\n            <para>If you want to fires the Change event on every value selection and remove, then disable the EnabledChangeOnBlur property.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableChangeOnBlur"}},{"Kind":"Components.Component","Name":"EnableCloseOnSelect","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Based on the property, when item get select popup visibility state will changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableCloseOnSelect"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the CSS class name that can be appended with the root element of the MultiSelect. One or more custom CSS classes can be added to a MultiSelect.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"DelimiterChar","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets the delimiter character for 'default' and 'delimiter' visibility modes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DelimiterChar"}},{"Kind":"Components.Component","Name":"EnableGroupCheckBox","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            <para>Specifies a boolean value that indicates the whether the grouped list items are\n            allowed to check by checking the group header in checkbox mode.</para>\n            <para>By default, there is no checkbox provided for group headers.</para>\n            <para>This property allows you to render checkbox for group headers and to select\n            all the grouped items at once.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableGroupCheckBox"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"EnableSelectionOrder","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Reorder the selected items in popup visibility state.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableSelectionOrder"}},{"Kind":"Components.Component","Name":"FilterBarPlaceholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Accepts the value to be displayed as a watermark text on the filter bar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FilterBarPlaceholder"}},{"Kind":"Components.Component","Name":"FloatLabelType","TypeName":"Syncfusion.Blazor.Inputs.FloatLabelType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the floating label behavior of the MultiSelect that the placeholder text floats above the MultiSelect based on the following values.\n            <para>Possible values are: </para>\n            <list type=\"bullet\">\n            <item>\n            <term>Never</term>\n            <description>Never floats the label in the MultiSelect when the placeholder is available.</description>\n            </item>\n            <item>\n            <term>Always</term>\n            <description>The floating label always floats above the MultiSelect.</description>\n            </item>\n            <item>\n            <term>Auto</term>\n            <description>The floating label floats above the MultiSelect after focusing it or when enters the value in it.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FloatLabelType"}},{"Kind":"Components.Component","Name":"HideSelectedItem","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Hides the selected item from the list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HideSelectedItem"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            <para>If you configured both the property and equivalent input attribute, then the component considers the property value.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"InputAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            <para>If you configured both the property and equivalent input attribute, then the component considers the property value.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"InputAttributes"}},{"Kind":"Components.Component","Name":"MaximumSelectionLength","TypeName":"System.Int32","Documentation":"\n            <summary>\n            <para>Sets limitation to the value selection.</para>\n            <para>Based on the limitation, list selection will be prevented.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaximumSelectionLength"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.DropDowns.VisualMode","IsEnum":true,"Documentation":"\n            <summary>\n            configures visibility mode for component interaction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Mode"}},{"Kind":"Components.Component","Name":"OpenOnClick","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Whether to automatically open the popup when the control is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OpenOnClick"}},{"Kind":"Components.Component","Name":"Placeholder","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text that is shown as a hint or placeholder until the user focuses or enter a value in MultiSelect. The property is depending on the FloatLabelType property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Placeholder"}},{"Kind":"Components.Component","Name":"PopupHeight","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the height of the popup list. By default, it renders based on its list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PopupHeight"}},{"Kind":"Components.Component","Name":"PopupWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the popup list and percentage values has calculated based on input width.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PopupWidth"}},{"Kind":"Components.Component","Name":"Readonly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the boolean value whether the MultiSelect allows the user to change the value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Readonly"}},{"Kind":"Components.Component","Name":"SelectAllText","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the selectAllText to be displayed on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectAllText"}},{"Kind":"Components.Component","Name":"ShowClearButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables close icon with the each selected item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowClearButton"}},{"Kind":"Components.Component","Name":"ShowDropDownIcon","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Allows you to either show or hide the DropDown button on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowDropDownIcon"}},{"Kind":"Components.Component","Name":"ShowSelectAll","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Allows you to either show or hide the selectAll option on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowSelectAll"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Selects the list item which maps the data `Text` field in the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"UnSelectAllText","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the UnSelectAllText to be displayed on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"UnSelectAllText"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            Selects the list item which maps the data `Value` field in the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the value changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the width of the component. By default, it sizes based on its parent.\n            container dimension.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tab order of the DropDownList component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TabIndex"}},{"Kind":"Components.Component","Name":"OnChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnChange","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnKeyUp","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Documentation":"\n            <summary>\n            Triggers when the content of input has changed and gets focus-out.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnKeyUp","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnInput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers each time when the value of input has changed.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnInput","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBlur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input loses the focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnBlur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnFocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"\n            <summary>\n            Triggers when the input gets focus.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"OnFocus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            The order of sorting the list items. The default value is <c>SortOrder.None</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"SortOrder"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Gets or sets the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n            <value> \n            Binding data to the popup element. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"DataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Gets or sets the external `Query` that execute along with data processing.\n            </summary>\n            <value> \n            Query value to be used for data fetching. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets which filter type, the component needs to be considered on search action.\n            </summary>\n            <value> \n            The filter type specifed for searching the list items. The default value is <c>FilterType.StartsWith</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether case-sensitivity is enabled or disabled when searching for suggestions.\n            </summary>\n            <value>\n            <c>false</c>, consider the `case-sensitive` on performing the search to find suggestions. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether diacritic characters or accents are ignored.\n            </summary>\n            <value>\n            <c>true</c>, ignores the diacritic characters or accents when filtering. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the z-index value of the component popup element.\n            </summary>\n            <value> \n            The ZIndex value for the popup element.The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2057054727,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ChildContent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfMultiSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1291506139,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ChildContent","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the content that has to be passed.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.DropDowns.SfMultiSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-715536814,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ValueTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"SfMultiSelect"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ValueTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ValueTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1404208434,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ValueTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfMultiSelect"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ValueTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ValueTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":35824486,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"SfMultiSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.FooterTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1881865400,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfMultiSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.FooterTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1321539873,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"SfMultiSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.HeaderTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1034263050,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfMultiSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.HeaderTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-100784497,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"SfMultiSelect"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ItemTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":338618060,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfMultiSelect"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ItemTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":957446467,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"SfMultiSelect"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.GroupTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1924089072,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfMultiSelect"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.GroupTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1736698838,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"SfMultiSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.NoRecordsTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1191664320,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfMultiSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.NoRecordsTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-353404399,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"SfMultiSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ActionFailureTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1758203576,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.SfMultiSelect"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>.ActionFailureTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2109952501,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.MultiSelectEvents<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the MultiSelect Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the value type.</typeparam>\n            <typeparam name=\"TItem\">Specifies the type of MultiSelectEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"MultiSelectEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.MultiSelectEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.MultiSelectEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Documentation":"\n            <summary>\n            Triggers before fetching data from the remote server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Documentation":"\n            <summary>\n            Triggers after data is fetched successfully from the remote server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Exception>","Documentation":"\n            <summary>\n            Triggers when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Documentation":"\n            <summary>\n            Fires when popup opens before animation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Event triggers when the input get focus-out.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<TValue>>","Documentation":"\n            <summary>\n            Fires each time when selection changes happened in list items after model and input value get affected.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ChipSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ChipSelectedEventArgs<TItem>>","Documentation":"\n            <summary>\n            Event triggers when the chip selection.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChipSelected","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Triggers before the popup is closed. If you cancel this event, the popup remains opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"CustomValueSpecifier","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.CustomValueEventArgs<TItem>>","Documentation":"\n            <summary>\n            Triggers when the CustomValue is selected.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CustomValueSpecifier","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Documentation":"\n            <summary>\n            Triggers when data source is populated in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataBound","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Filtering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Documentation":"\n            <summary>\n            Triggers event,when user types a text in search box.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Filtering","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Event triggers when the input get focused.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Fires when popup opens after animation completion.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Documentation":"\n            <summary>\n            Triggers after the popup has been closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueRemoved","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.RemoveEventArgs<TItem>>","Documentation":"\n            <summary>\n            Fires after the selected item removed from the widget.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueRemoved","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnValueRemove","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.RemoveEventArgs<TItem>>","Documentation":"\n            <summary>\n            Fires before the selected item removed from the widget.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnValueRemove","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnValueSelect","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Documentation":"\n            <summary>\n            Triggers when an item in the popup is selected by the user either with mouse/tap or with keyboard navigation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnValueSelect","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"SelectedAll","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.SelectAllEventArgs<TItem>>","Documentation":"\n            <summary>\n            Fires after select all process completion.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectedAll","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Cleared","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Fires after cleared all item using clear icon.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Cleared","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnChipTag","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.TaggingEventArgs<TItem>>","Documentation":"\n            <summary>\n            Fires before set the selected item as chip in the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnChipTag","Components.EventCallback":"True","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectEvents<TValue, TItem>","Components.GenericTyped":"True"}},{"HashCode":903357727,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.MultiSelectEvents<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Specifies the MultiSelect Events of the component.\n            </summary>\n            <typeparam name=\"TValue\">Specifies the value type.</typeparam>\n            <typeparam name=\"TItem\">Specifies the type of MultiSelectEvents.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.MultiSelectEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.DropDowns.MultiSelectEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.MultiSelectEvents<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionBeginEventArgs>","Documentation":"\n            <summary>\n            Triggers before fetching data from the remote server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ActionCompleteEventArgs<TItem>>","Documentation":"\n            <summary>\n            Triggers after data is fetched successfully from the remote server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Exception>","Documentation":"\n            <summary>\n            Triggers when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.BeforeOpenEventArgs>","Documentation":"\n            <summary>\n            Fires when popup opens before animation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Blur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Event triggers when the input get focus-out.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Blur","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.MultiSelectChangeEventArgs<TValue>>","Documentation":"\n            <summary>\n            Fires each time when selection changes happened in list items after model and input value get affected.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ChipSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ChipSelectedEventArgs<TItem>>","Documentation":"\n            <summary>\n            Event triggers when the chip selection.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChipSelected","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Triggers before the popup is closed. If you cancel this event, the popup remains opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"CustomValueSpecifier","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.CustomValueEventArgs<TItem>>","Documentation":"\n            <summary>\n            Triggers when the CustomValue is selected.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CustomValueSpecifier","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.DataBoundEventArgs>","Documentation":"\n            <summary>\n            Triggers when data source is populated in the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataBound","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Filtering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.FilteringEventArgs>","Documentation":"\n            <summary>\n            Triggers event,when user types a text in search box.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Filtering","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Focus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Event triggers when the input get focused.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Focus","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.PopupEventArgs>","Documentation":"\n            <summary>\n            Fires when popup opens after animation completion.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.ClosedEventArgs>","Documentation":"\n            <summary>\n            Triggers after the popup has been closed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ValueRemoved","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.RemoveEventArgs<TItem>>","Documentation":"\n            <summary>\n            Fires after the selected item removed from the widget.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueRemoved","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnValueRemove","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.RemoveEventArgs<TItem>>","Documentation":"\n            <summary>\n            Fires before the selected item removed from the widget.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnValueRemove","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnValueSelect","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.SelectEventArgs<TItem>>","Documentation":"\n            <summary>\n            Triggers when an item in the popup is selected by the user either with mouse/tap or with keyboard navigation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnValueSelect","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"SelectedAll","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.SelectAllEventArgs<TItem>>","Documentation":"\n            <summary>\n            Fires after select all process completion.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectedAll","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Cleared","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary>\n            Fires after cleared all item using clear icon.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Cleared","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnChipTag","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.DropDowns.TaggingEventArgs<TItem>>","Documentation":"\n            <summary>\n            Fires before set the selected item as chip in the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnChipTag","Components.EventCallback":"True","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectEvents<TValue, TItem>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2030806631,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.MultiSelectFieldSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The Fields property maps the columns of the data table and binds the data to the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"MultiSelectFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Group the list items with it's related items by mapping groupBy field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupBy"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the list element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the icon class column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the text column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the value column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectFieldSettings"}},{"HashCode":220257860,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.MultiSelectFieldSettings","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The Fields property maps the columns of the data table and binds the data to the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.MultiSelectFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Group the list items with it's related items by mapping groupBy field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupBy"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            You can add the additional html attributes such as styles, class, and more to the list element.\n            If you configured both property and equivalent html attributes, then the component considers the property value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the icon class column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the text column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Maps the value column from data table for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectFieldSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-184010312,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The MulitSelect has been provided with several options to customize each list item, group title, selected value, header, and footer elements.\n            </summary>\n            <typeparam name=\"TItem\">Specifies the type of MultiSelectTemplates.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"MultiSelectTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>","Components.GenericTyped":"True"}},{"HashCode":1380522955,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The MulitSelect has been provided with several options to customize each list item, group title, selected value, header, and footer elements.\n            </summary>\n            <typeparam name=\"TItem\">Specifies the type of MultiSelectTemplates.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ValueTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValueTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1253436669,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.ValueTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"MultiSelectTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ValueTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.ValueTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":963773793,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.ValueTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the selected list item in the input element of the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValueTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ValueTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.ValueTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1949220670,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"MultiSelectTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.FooterTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":782902434,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.FooterTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1314405127,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"MultiSelectTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.HeaderTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":405369085,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.HeaderTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":123580871,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"MultiSelectTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.GroupTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-957774660,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.GroupTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":753545496,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"MultiSelectTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.ItemTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1210505298,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.ItemTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1000073599,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"MultiSelectTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.NoRecordsTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1423397788,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.NoRecordsTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":910771960,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"MultiSelectTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.ActionFailureTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-211969321,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.MultiSelectTemplates<TItem>.ActionFailureTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-13751498,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns._Imports","AssemblyName":"Syncfusion.Blazor.DropDowns","CaseSensitive":true,"TagMatchingRules":[{"TagName":"_Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns._Imports"}},{"HashCode":1426187085,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns._Imports","AssemblyName":"Syncfusion.Blazor.DropDowns","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns._Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns._Imports","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1611263983,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The DropDowns has been provided with several options to customize each list item, group title, header, and footer elements.\n            </summary>\n            <typeparam name=\"TItem\">Specifies the type of DropDownsTemplates.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DropDownsTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>","Components.GenericTyped":"True"}},{"HashCode":-130768463,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            The DropDowns has been provided with several options to customize each list item, group title, header, and footer elements.\n            </summary>\n            <typeparam name=\"TItem\">Specifies the type of DropDownsTemplates.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1753141464,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"DropDownsTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.FooterTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1941511848,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.FooterTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the footer container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.FooterTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":573190093,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"DropDownsTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.HeaderTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1307894758,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the header container of the popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.HeaderTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":673713304,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"DropDownsTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.GroupTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-2031795143,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the DropDowns popup list.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.GroupTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":169604142,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"DropDownsTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.ItemTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-489108760,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to each list item present in the popup.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.ItemTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-138370517,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"DropDownsTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.NoRecordsTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":393062420,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to popup list of DropDowns component, when no data is available on the component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.NoRecordsTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1334583062,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"DropDownsTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.ActionFailureTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1456860456,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Accepts the template and assigns it to the popup list content of the DropDowns component, when the data fetch request from the remote server fails.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.DropDownsTemplates<TItem>.ActionFailureTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-126634061,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecord"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"IsFaiure","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            IsActionFaiure set to true, then the action failure template is show in popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsFaiure"}},{"Kind":"Components.Component","Name":"LocaleKey","TypeName":"System.String","Documentation":"\n            <summary>\n            Get the no record locale key for dropdowns component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LocaleKey"}},{"Kind":"Components.Component","Name":"FailureLocaleKey","TypeName":"System.String","Documentation":"\n            <summary>\n            Get the action failure locale key for dropdowns component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FailureLocaleKey"}},{"Kind":"Components.Component","Name":"LocaleValue","TypeName":"System.String","Documentation":"\n            <summary>\n            Get the no record locale value for dropdowns component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LocaleValue"}},{"Kind":"Components.Component","Name":"FailureLocaleValue","TypeName":"System.String","Documentation":"\n            <summary>\n            Get the action failure locale value for dropdowns component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FailureLocaleValue"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            The order of sorting the list items. The default value is <c>SortOrder.None</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"SortOrder"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Gets or sets the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n            <value> \n            Binding data to the popup element. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"DataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Gets or sets the external `Query` that execute along with data processing.\n            </summary>\n            <value> \n            Query value to be used for data fetching. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets which filter type, the component needs to be considered on search action.\n            </summary>\n            <value> \n            The filter type specifed for searching the list items. The default value is <c>FilterType.StartsWith</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether case-sensitivity is enabled or disabled when searching for suggestions.\n            </summary>\n            <value>\n            <c>false</c>, consider the `case-sensitive` on performing the search to find suggestions. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether diacritic characters or accents are ignored.\n            </summary>\n            <value>\n            <c>true</c>, ignores the diacritic characters or accents when filtering. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the z-index value of the component popup element.\n            </summary>\n            <value> \n            The ZIndex value for the popup element.The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>","Components.GenericTyped":"True"}},{"HashCode":-1213656377,"Kind":"Components.Component","Name":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.Internal.NoRecord"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"IsFaiure","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            IsActionFaiure set to true, then the action failure template is show in popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsFaiure"}},{"Kind":"Components.Component","Name":"LocaleKey","TypeName":"System.String","Documentation":"\n            <summary>\n            Get the no record locale key for dropdowns component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LocaleKey"}},{"Kind":"Components.Component","Name":"FailureLocaleKey","TypeName":"System.String","Documentation":"\n            <summary>\n            Get the action failure locale key for dropdowns component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FailureLocaleKey"}},{"Kind":"Components.Component","Name":"LocaleValue","TypeName":"System.String","Documentation":"\n            <summary>\n            Get the no record locale value for dropdowns component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LocaleValue"}},{"Kind":"Components.Component","Name":"FailureLocaleValue","TypeName":"System.String","Documentation":"\n            <summary>\n            Get the action failure locale value for dropdowns component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FailureLocaleValue"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TItem>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.DropDowns.ComposedItemModel<TItem>>","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"NoRecordsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"NoRecordsTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActionFailureTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"ActionFailureTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.DropDowns.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            <para>Specifies the `SortOrder` to sort the data source.</para>\n            <para>The available type of sort orders are.</para>\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>The data source is not sorting.</description>\n            </item>\n            <item>\n            <term>Ascending</term>\n            <description>The data source is sorting with ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>The data source is sorting with descending order.</description>\n            </item>\n            </list>\n            </summary>\n            <value> \n            The order of sorting the list items. The default value is <c>SortOrder.None</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"SortOrder"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TItem>","Documentation":"\n            <summary>\n            <para>Gets or sets the list items either through local or remote service and binds it to the component.</para>\n            <para>It can be an array of JSON Objects or an instance of `DataManager`.</para>\n            </summary>\n            <value> \n            Binding data to the popup element. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"DataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Gets or sets the external `Query` that execute along with data processing.\n            </summary>\n            <value> \n            Query value to be used for data fetching. The default value is <c>null</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Query"}},{"Kind":"Components.Component","Name":"FilterType","TypeName":"Syncfusion.Blazor.DropDowns.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets which filter type, the component needs to be considered on search action.\n            </summary>\n            <value> \n            The filter type specifed for searching the list items. The default value is <c>FilterType.StartsWith</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"FilterType"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether case-sensitivity is enabled or disabled when searching for suggestions.\n            </summary>\n            <value>\n            <c>false</c>, consider the `case-sensitive` on performing the search to find suggestions. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether diacritic characters or accents are ignored.\n            </summary>\n            <value>\n            <c>true</c>, ignores the diacritic characters or accents when filtering. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the z-index value of the component popup element.\n            </summary>\n            <value> \n            The ZIndex value for the popup element.The default value is <c>1000</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ZIndex"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1133145730,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"NoRecord"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.ItemTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1176129707,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.ItemTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to each list item present in the popup.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.Internal.NoRecord"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.ItemTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1954349389,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"NoRecord"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.GroupTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1610899170,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to the group headers present in the popup list.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.Internal.NoRecord"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.GroupTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1256934534,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"NoRecord"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.NoRecordsTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1453476179,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.NoRecordsTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template design and assigns it to popup list of component, when no data is available on the component.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NoRecordsTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.Internal.NoRecord"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.NoRecordsTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":573212799,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"NoRecord"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.ActionFailureTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1466299659,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.ActionFailureTemplate","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"\n            <summary>\n            Gets or sets the template and assigns it to the popup list content of the component, when the data fetch request from the remote server fails.\n            </summary>\n            <value> \n            The template content. The default value is <c>null</c>. \n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ActionFailureTemplate","ParentTag":"Syncfusion.Blazor.DropDowns.Internal.NoRecord"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.DropDowns.Internal.NoRecord<TItem>.ActionFailureTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":100075476,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.CascadingValue<TValue>","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            A component that provides a cascading value to all descendant components.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CascadingValue"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.CascadingValue<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The content to which the value should be provided.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            The value to be provided.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n             <summary>\n             Optionally gives a name to the provided value. Descendant components\n             will be able to receive the value by specifying this name.\n            \n             If no name is specified, then descendant components will receive the\n             value based the type of value they are requesting.\n             </summary>\n        ","Metadata":{"Common.PropertyName":"Name"}},{"Kind":"Components.Component","Name":"IsFixed","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If true, indicates that <see cref=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\" /> will not change. This is a\n            performance optimization that allows the framework to skip setting up\n            change notifications. Set this flag only if you will not change\n            <see cref=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\" /> during the component's lifetime.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsFixed"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.CascadingValue<TValue>","Components.GenericTyped":"True"}},{"HashCode":2058523097,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.CascadingValue<TValue>","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            A component that provides a cascading value to all descendant components.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.CascadingValue"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Microsoft.AspNetCore.Components.CascadingValue<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The content to which the value should be provided.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Value","TypeName":"TValue","Documentation":"\n            <summary>\n            The value to be provided.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n             <summary>\n             Optionally gives a name to the provided value. Descendant components\n             will be able to receive the value by specifying this name.\n            \n             If no name is specified, then descendant components will receive the\n             value based the type of value they are requesting.\n             </summary>\n        ","Metadata":{"Common.PropertyName":"Name"}},{"Kind":"Components.Component","Name":"IsFixed","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If true, indicates that <see cref=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\" /> will not change. This is a\n            performance optimization that allows the framework to skip setting up\n            change notifications. Set this flag only if you will not change\n            <see cref=\"P:Microsoft.AspNetCore.Components.CascadingValue`1.Value\" /> during the component's lifetime.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsFixed"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.CascadingValue<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":909141050,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.CascadingValue<TValue>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            The content to which the value should be provided.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"CascadingValue"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.CascadingValue<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-700243708,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.CascadingValue<TValue>.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            The content to which the value should be provided.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.CascadingValue"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.CascadingValue<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1980174088,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.DynamicComponent","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            A component that renders another component dynamically according to its\n            <see cref=\"P:Microsoft.AspNetCore.Components.DynamicComponent.Type\" /> parameter.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DynamicComponent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Type","TypeName":"System.Type","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the type of the component to be rendered. The supplied type must\n            implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"Parameters","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a dictionary of parameters to be passed to the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Parameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.DynamicComponent"}},{"HashCode":-1268363715,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.DynamicComponent","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            A component that renders another component dynamically according to its\n            <see cref=\"P:Microsoft.AspNetCore.Components.DynamicComponent.Type\" /> parameter.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.DynamicComponent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Type","TypeName":"System.Type","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the type of the component to be rendered. The supplied type must\n            implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"Parameters","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a dictionary of parameters to be passed to the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Parameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.DynamicComponent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":47192083,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.LayoutView","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Displays the specified content inside the specified layout and any further\n            nested layouts.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"LayoutView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content to display.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Layout","TypeName":"System.Type","Documentation":"\n            <summary>\n            Gets or sets the type of the layout in which to display the content.\n            The type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" /> and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Layout"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.LayoutView"}},{"HashCode":171641290,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.LayoutView","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Displays the specified content inside the specified layout and any further\n            nested layouts.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.LayoutView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the content to display.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Layout","TypeName":"System.Type","Documentation":"\n            <summary>\n            Gets or sets the type of the layout in which to display the content.\n            The type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" /> and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Layout"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.LayoutView","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1879651112,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.LayoutView.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Gets or sets the content to display.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"LayoutView"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.LayoutView.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1403492109,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.LayoutView.ChildContent","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Gets or sets the content to display.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Microsoft.AspNetCore.Components.LayoutView"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.LayoutView.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1044827811,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.RouteView","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Displays the specified page component, rendering it inside its layout\n            and any further nested layouts.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"RouteView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"RouteData","TypeName":"Microsoft.AspNetCore.Components.RouteData","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the route data. This determines the page that will be\n            displayed and the parameter values that will be supplied to the page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RouteData"}},{"Kind":"Components.Component","Name":"DefaultLayout","TypeName":"System.Type","Documentation":"\n            <summary>\n            Gets or sets the type of a layout to be used if the page does not\n            declare any layout. If specified, the type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />\n            and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DefaultLayout"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.RouteView"}},{"HashCode":-1365215869,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.RouteView","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Displays the specified page component, rendering it inside its layout\n            and any further nested layouts.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.RouteView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"RouteData","TypeName":"Microsoft.AspNetCore.Components.RouteData","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the route data. This determines the page that will be\n            displayed and the parameter values that will be supplied to the page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RouteData"}},{"Kind":"Components.Component","Name":"DefaultLayout","TypeName":"System.Type","Documentation":"\n            <summary>\n            Gets or sets the type of a layout to be used if the page does not\n            declare any layout. If specified, the type must implement <see cref=\"T:Microsoft.AspNetCore.Components.IComponent\" />\n            and accept a parameter named <see cref=\"P:Microsoft.AspNetCore.Components.LayoutComponentBase.Body\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DefaultLayout"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.RouteView","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":646472149,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Routing.Router","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            A component that supplies route data corresponding to the current navigation state.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Router"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AppAssembly","TypeName":"System.Reflection.Assembly","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the assembly that should be searched for components matching the URI.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AppAssembly"}},{"Kind":"Components.Component","Name":"AdditionalAssemblies","TypeName":"System.Collections.Generic.IEnumerable<System.Reflection.Assembly>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional assemblies that should be searched for components\n            that can match URIs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAssemblies"}},{"Kind":"Components.Component","Name":"NotFound","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the content to display when no match is found for the requested route.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NotFound","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Found","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.RouteData>","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the content to display when a match is found for the requested route.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Found","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Navigating","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Get or sets the content to display when asynchronous navigation is in progress.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Navigating","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"OnNavigateAsync","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Routing.NavigationContext>","Documentation":"\n            <summary>\n            Gets or sets a handler that should be called before navigating to a new page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnNavigateAsync","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"PreferExactMatches","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a flag to indicate whether route matching should prefer exact matches\n            over wildcards.\n            <para>This property is obsolete and configuring it does nothing.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PreferExactMatches"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router"}},{"HashCode":-701282789,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Routing.Router","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            A component that supplies route data corresponding to the current navigation state.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Routing.Router"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"AppAssembly","TypeName":"System.Reflection.Assembly","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the assembly that should be searched for components matching the URI.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AppAssembly"}},{"Kind":"Components.Component","Name":"AdditionalAssemblies","TypeName":"System.Collections.Generic.IEnumerable<System.Reflection.Assembly>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional assemblies that should be searched for components\n            that can match URIs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdditionalAssemblies"}},{"Kind":"Components.Component","Name":"NotFound","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the content to display when no match is found for the requested route.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NotFound","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Found","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.RouteData>","IsEditorRequired":true,"Documentation":"\n            <summary>\n            Gets or sets the content to display when a match is found for the requested route.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Found","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Navigating","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Get or sets the content to display when asynchronous navigation is in progress.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Navigating","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"OnNavigateAsync","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Routing.NavigationContext>","Documentation":"\n            <summary>\n            Gets or sets a handler that should be called before navigating to a new page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnNavigateAsync","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"PreferExactMatches","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a flag to indicate whether route matching should prefer exact matches\n            over wildcards.\n            <para>This property is obsolete and configuring it does nothing.</para>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PreferExactMatches"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-806325141,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.Router.NotFound","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Gets or sets the content to display when no match is found for the requested route.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NotFound","ParentTag":"Router"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router.NotFound","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1984749400,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.Router.NotFound","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Gets or sets the content to display when no match is found for the requested route.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NotFound","ParentTag":"Microsoft.AspNetCore.Components.Routing.Router"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router.NotFound","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":377068835,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.Router.Found","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Gets or sets the content to display when a match is found for the requested route.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Found","ParentTag":"Router"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Found' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router.Found","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-879377312,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.Router.Found","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Gets or sets the content to display when a match is found for the requested route.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Found","ParentTag":"Microsoft.AspNetCore.Components.Routing.Router"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Found' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router.Found","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1895447004,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.Router.Navigating","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Get or sets the content to display when asynchronous navigation is in progress.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Navigating","ParentTag":"Router"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router.Navigating","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-2136429748,"Kind":"Components.ChildContent","Name":"Microsoft.AspNetCore.Components.Routing.Router.Navigating","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"\n            <summary>\n            Get or sets the content to display when asynchronous navigation is in progress.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Navigating","ParentTag":"Microsoft.AspNetCore.Components.Routing.Router"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Microsoft.AspNetCore.Components.Routing.Router.Navigating","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1019142916,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridAggregate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid aggregate.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridAggregate"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridAggregateColumn>","Documentation":"\n            <summary>\n            Configures the aggregate columns.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Columns"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregate"}},{"HashCode":182677004,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridAggregate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid aggregate.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridAggregate"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridAggregateColumn>","Documentation":"\n            <summary>\n            Configures the aggregate columns.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Columns"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregate","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1226784181,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridAggregate.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridAggregate"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregate.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-119560572,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridAggregate.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridAggregate"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregate.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1426400809,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridAggregateColumn","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid aggregate column.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridAggregateColumn"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ColumnName","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the column name to display the aggregate value. If ColumnName is not defined,\n            then Field name value will be assigned to the ColumnName` property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ColumnName"}},{"Kind":"Components.Component","Name":"Field","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the column name to perform aggregation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Field"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the cell template for the footer aggregate column.\n            The Type name should be used to access aggregate values inside the template.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.AggregateTemplateContext\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            Format is applied to a calculated value before it is displayed.\n            Gets the format from the user, which can be standard or custom formats.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format"}},{"Kind":"Components.Component","Name":"GroupCaptionTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the cell template for the group caption aggregate column.\n            The Type name should be used to access aggregate values inside the template.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.AggregateTemplateContext\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"GroupCaptionTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"GroupFooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the cell template for the group footer aggregate column.\n            The Type name should be used to access aggregate values inside the template.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.AggregateTemplateContext\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"GroupFooterTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Type","TypeName":"System.Object","Documentation":"\n            <summary>\n            Defines the aggregate type of a particular column.\n            Types of aggregate supported in-built are,.\n            <list type=\"bullet\">\n            <item>\n            <term><see cref=\"F:Syncfusion.Blazor.Grids.AggregateType.Sum\" /></term>\n            <description>Performes sum aggregation.</description>\n            </item>\n            <item><term><see cref=\"F:Syncfusion.Blazor.Grids.AggregateType.Average\" /></term>\n            <description>Performes average aggregation.</description>\n            </item>\n            <item><term><see cref=\"F:Syncfusion.Blazor.Grids.AggregateType.Count\" /></term>\n            <description>Performes count aggregation.</description>\n            </item>\n            <item><term><see cref=\"F:Syncfusion.Blazor.Grids.AggregateType.FalseCount\" /></term>\n            <description>Performes false count aggregation.</description>\n            </item>\n            <item><term><see cref=\"F:Syncfusion.Blazor.Grids.AggregateType.TrueCount\" /></term>\n            <description>Performes true count aggregation.</description>\n            </item>\n            <item><term><see cref=\"F:Syncfusion.Blazor.Grids.AggregateType.Max\" /></term>\n            <description>Performes max aggregation.</description>\n            </item>\n            <item><term><see cref=\"F:Syncfusion.Blazor.Grids.AggregateType.Min\" /></term>\n            <description>Performes min aggregation.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregateColumn"}},{"HashCode":-2097719046,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridAggregateColumn","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid aggregate column.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridAggregateColumn"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ColumnName","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the column name to display the aggregate value. If ColumnName is not defined,\n            then Field name value will be assigned to the ColumnName` property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ColumnName"}},{"Kind":"Components.Component","Name":"Field","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the column name to perform aggregation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Field"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the cell template for the footer aggregate column.\n            The Type name should be used to access aggregate values inside the template.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.AggregateTemplateContext\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            Format is applied to a calculated value before it is displayed.\n            Gets the format from the user, which can be standard or custom formats.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format"}},{"Kind":"Components.Component","Name":"GroupCaptionTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the cell template for the group caption aggregate column.\n            The Type name should be used to access aggregate values inside the template.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.AggregateTemplateContext\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"GroupCaptionTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"GroupFooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the cell template for the group footer aggregate column.\n            The Type name should be used to access aggregate values inside the template.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.AggregateTemplateContext\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"GroupFooterTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Type","TypeName":"System.Object","Documentation":"\n            <summary>\n            Defines the aggregate type of a particular column.\n            Types of aggregate supported in-built are,.\n            <list type=\"bullet\">\n            <item>\n            <term><see cref=\"F:Syncfusion.Blazor.Grids.AggregateType.Sum\" /></term>\n            <description>Performes sum aggregation.</description>\n            </item>\n            <item><term><see cref=\"F:Syncfusion.Blazor.Grids.AggregateType.Average\" /></term>\n            <description>Performes average aggregation.</description>\n            </item>\n            <item><term><see cref=\"F:Syncfusion.Blazor.Grids.AggregateType.Count\" /></term>\n            <description>Performes count aggregation.</description>\n            </item>\n            <item><term><see cref=\"F:Syncfusion.Blazor.Grids.AggregateType.FalseCount\" /></term>\n            <description>Performes false count aggregation.</description>\n            </item>\n            <item><term><see cref=\"F:Syncfusion.Blazor.Grids.AggregateType.TrueCount\" /></term>\n            <description>Performes true count aggregation.</description>\n            </item>\n            <item><term><see cref=\"F:Syncfusion.Blazor.Grids.AggregateType.Max\" /></term>\n            <description>Performes max aggregation.</description>\n            </item>\n            <item><term><see cref=\"F:Syncfusion.Blazor.Grids.AggregateType.Min\" /></term>\n            <description>Performes min aggregation.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregateColumn","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":871890519,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridAggregateColumn.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridAggregateColumn"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregateColumn.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-870969331,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridAggregateColumn.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridAggregateColumn"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregateColumn.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-289093024,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridAggregateColumn.FooterTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the cell template for the footer aggregate column.\n            The Type name should be used to access aggregate values inside the template.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.AggregateTemplateContext\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"GridAggregateColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FooterTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregateColumn.FooterTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1112838213,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridAggregateColumn.FooterTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the cell template for the footer aggregate column.\n            The Type name should be used to access aggregate values inside the template.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.AggregateTemplateContext\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridAggregateColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FooterTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregateColumn.FooterTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":319199905,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridAggregateColumn.GroupCaptionTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the cell template for the group caption aggregate column.\n            The Type name should be used to access aggregate values inside the template.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.AggregateTemplateContext\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupCaptionTemplate","ParentTag":"GridAggregateColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupCaptionTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregateColumn.GroupCaptionTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1655864084,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridAggregateColumn.GroupCaptionTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the cell template for the group caption aggregate column.\n            The Type name should be used to access aggregate values inside the template.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.AggregateTemplateContext\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupCaptionTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridAggregateColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupCaptionTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregateColumn.GroupCaptionTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":805057462,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridAggregateColumn.GroupFooterTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the cell template for the group footer aggregate column.\n            The Type name should be used to access aggregate values inside the template.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.AggregateTemplateContext\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupFooterTemplate","ParentTag":"GridAggregateColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupFooterTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregateColumn.GroupFooterTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":613032537,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridAggregateColumn.GroupFooterTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the cell template for the group footer aggregate column.\n            The Type name should be used to access aggregate values inside the template.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.AggregateTemplateContext\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupFooterTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridAggregateColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupFooterTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregateColumn.GroupFooterTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1597282593,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridAggregateColumns","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid aggregate columms.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridAggregateColumns"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregateColumns"}},{"HashCode":-1852868539,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridAggregateColumns","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid aggregate columms.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridAggregateColumns"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregateColumns","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1642917092,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridAggregateColumns.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridAggregateColumns"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregateColumns.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-124345275,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridAggregateColumns.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridAggregateColumns"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregateColumns.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1429809015,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridAggregates","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid aggregates.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridAggregates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregates"}},{"HashCode":1737751950,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridAggregates","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid aggregates.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridAggregates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregates","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-507455937,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridAggregates.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridAggregates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregates.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":587273388,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridAggregates.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridAggregates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridAggregates.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2113818054,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridColumn","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid columm.\n            </summary>\n            <summary>\n            Configures a grid column.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridColumn"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowEditing","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowEditing set to false, then it disables editing of a particular column.\n            By default all columns are editable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowEditing"}},{"Kind":"Components.Component","Name":"AllowAdding","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowAdding set to false, then it disables add operation of a particular column.\n            By default all columns are editable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowAdding"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowFiltering set to false, then it disables filtering option and filter bar element of a particular column.\n            By default all columns are filterable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering"}},{"Kind":"Components.Component","Name":"AllowGrouping","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowGrouping set to false, then it disables grouping of a particular column.\n            By default all columns are groupable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowGrouping"}},{"Kind":"Components.Component","Name":"AllowReordering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowReordering set to false, then it disables reorder of a particular column.\n            By default all columns can be reorder.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowReordering"}},{"Kind":"Components.Component","Name":"AllowResizing","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowResizing set to false, it disables resize option of a particular column.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowResizing"}},{"Kind":"Components.Component","Name":"AllowSearching","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowSearching set to false, then it disables searching of a particular column.\n            By default all columns are searchable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowSearching"}},{"Kind":"Components.Component","Name":"AllowSorting","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowSorting set to false, then it disables sorting option of a particular column.\n            By default all columns are sortable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowSorting"}},{"Kind":"Components.Component","Name":"AutoFit","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AutoFit set to true, then the particular column content width will be\n            adjusted based on its content in the initial rendering itself.\n            Setting this property as true is equivalent to calling AutoFitColumns method in the DataBound event.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AutoFit"}},{"Kind":"Components.Component","Name":"ClipMode","TypeName":"Syncfusion.Blazor.Grids.ClipMode","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the cell content's overflow mode. The available modes are.\n            <list type=\"bullet\">\n            <item>\n            <term><see cref=\"F:Syncfusion.Blazor.Grids.ClipMode.Clip\"></see></term>\n            <description>Truncates the cell content when it overflows its area.</description>\n            </item>\n            <item>\n            <term><see cref=\"F:Syncfusion.Blazor.Grids.ClipMode.Ellipsis\"></see></term>\n            <description>Displays ellipsis when the cell content overflows its area.</description>\n            </item>\n            <item>\n            <term><see cref=\"F:Syncfusion.Blazor.Grids.ClipMode.EllipsisWithTooltip\"></see></term>\n            <description>Displays ellipsis when the cell content overflows its area also it will display tooltip while hover on ellipsis applied cell.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ClipMode"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridColumn>","Documentation":"\n            <summary>\n            Used to render multiple header rows(stacked headers) on the Grid header.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Columns"}},{"Kind":"Components.Component","Name":"Commands","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridCommandColumn>","Documentation":"\n            <summary>\n            Commands provides an option to display command buttons in every cell.\n            Use <see cref=\"T:Syncfusion.Blazor.Grids.GridCommandColumn\" /> component to declare command columns.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Commands"}},{"Kind":"Components.Component","Name":"CustomAttributes","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            The CSS styles and attributes of the content cells of a particular column can be customized.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CustomAttributes"}},{"Kind":"Components.Component","Name":"DefaultValue","TypeName":"System.Object","Documentation":"\n            <summary>\n            Defines default values for the component when adding a new record to the Grid.\n            </summary>\n            <remarks>If no default value is provided then the default value of the model property type will be\n            used as initial value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DefaultValue"}},{"Kind":"Components.Component","Name":"DisableHtmlEncode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If DisableHtmlEncode is set to false, it disables the encodes the HTML of the header and content cells.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisableHtmlEncode"}},{"Kind":"Components.Component","Name":"DisplayAsCheckBox","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If DisplayAsCheckBox is set to true, it displays the column value as a check box instead of Boolean value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayAsCheckBox"}},{"Kind":"Components.Component","Name":"EditorSettings","TypeName":"Syncfusion.Blazor.Grids.IEditorSettings","Documentation":"\n            <summary>\n            Defines the object to customize default cell editors. The following types can be used to customize default\n            editors.\n            <list type=\"bullet\">\n            <item>\n            <term><see cref=\"T:Syncfusion.Blazor.Grids.NumericEditCellParams\" /></term>\n            <description>Customizes the default numerictextbox editor.</description>\n            </item>\n            <item>\n            <term><see cref=\"T:Syncfusion.Blazor.Grids.DropDownEditCellParams\" /></term>\n            <description>Customizes the default dropdown editor.</description>\n            </item>\n            <item>\n            <term><see cref=\"T:Syncfusion.Blazor.Grids.DateEditCellParams\" /></term>\n            <description>Customizes the default datepicker editor.</description>\n            </item>\n            <item>\n            <term><see cref=\"T:Syncfusion.Blazor.Grids.BooleanEditCellParams\" /></term>\n            <description>Customizes the default checkbox editor.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EditorSettings"}},{"Kind":"Components.Component","Name":"EditTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the cell edit template that used as editor for a particular column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EditTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"EditType","TypeName":"Syncfusion.Blazor.Grids.EditType","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the type of editor to be used for cell editing.\n            </summary>\n            <remarks>If EditType is not provided then the EditType will be inferred from the\n            property type of the TValue.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EditType"}},{"Kind":"Components.Component","Name":"EnableGroupByFormat","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableGroupByFormat set to true, then it groups the particular column by formatted values.\n            By default columns are group by format.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableGroupByFormat"}},{"Kind":"Components.Component","Name":"Field","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the field name of column which is mapped with mapping name of DataSource.\n            The bounded columns can be sort, filter and group etc.,\n            If the Field name contains “dot”, then it is considered as complex binding.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Field"}},{"Kind":"Components.Component","Name":"FilterSettings","TypeName":"Syncfusion.Blazor.Grids.FilterSettings","Documentation":"\n            <summary>\n             Defines the filter options to customize filtering for the particular column.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"FilterSettings"}},{"Kind":"Components.Component","Name":"FilterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the filter template that used as filter UI for a particular column in FilterBar and Menu.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.PredicateModel\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FilterTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ForeignKeyField","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the mapping column name of the foreign data source.\n            If it is not defined then the Field will be considered as mapping column name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ForeignKeyField"}},{"Kind":"Components.Component","Name":"ForeignKeyValue","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the display column name from the foreign data source which will be obtained from comparing local and foreign data.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ForeignKeyValue"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            It is used to change display value with the given format and does not affect the original data.\n            Gets the format from the user which can be standard or custom formats.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the column template which is used to add customized element in the column header.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.GridColumn\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderText","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the header text of column which is used to display in column header.\n            If HeaderText is not defined, then field name value will be assigned to header text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderText"}},{"Kind":"Components.Component","Name":"HeaderTextAlign","TypeName":"Syncfusion.Blazor.Grids.TextAlign","IsEnum":true,"Documentation":"\n            <summary>\n            Define the alignment of column header which is used to align the text of column header.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTextAlign"}},{"Kind":"Components.Component","Name":"HideAtMedia","TypeName":"System.String","Documentation":"\n            <summary>\n            Column visibility can change based on its Media Queries.\n            HideAtMedia accepts only valid Media Queries.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HideAtMedia"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets the unique identifier value of the column. It is used to get the object.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            You can use this property to freeze selected columns in grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsFrozen"}},{"Kind":"Components.Component","Name":"IsIdentity","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If IsIdentity is set to true, then this column is considered as identity column.\n            This column will be in disabled state in add form.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsIdentity"}},{"Kind":"Components.Component","Name":"IsPrimaryKey","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If IsPrimaryKey is set to true, considers this column as the primary key constraint.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsPrimaryKey"}},{"Kind":"Components.Component","Name":"LockColumn","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Defines the mapping column name of the foreign data source.\n            If it is not defined then the Field will be considered as mapping column name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LockColumn"}},{"Kind":"Components.Component","Name":"MaxWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the maximum width of the column in pixel or percentage, which will restrict resizing beyond this pixel or percentage.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaxWidth"}},{"Kind":"Components.Component","Name":"MinWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the minimum width of the column in pixels or percentage.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinWidth"}},{"Kind":"Components.Component","Name":"ShowColumnMenu","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowColumnMenu set to false, then it disable the column menu of a particular column.\n            By default column menu will show for all columns.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowColumnMenu"}},{"Kind":"Components.Component","Name":"ShowInColumnChooser","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowInColumnChooser set to false, then hides the particular column in column chooser.\n            By default all columns are displayed in column chooser.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowInColumnChooser"}},{"Kind":"Components.Component","Name":"SortComparer","TypeName":"System.Collections.Generic.IComparer<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the custom sort comparer function to implement own sort logic for a particular column.\n            For foreign key column with local data source a sort comparer will be assigned by default to sort it by text(ForeignKeyValue) instead of the underlying field value.\n            </summary>\n            <remarks>\n            Custom sort comparer cannot be used with remote data and Entity framework data source.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"SortComparer"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the column template that renders customized element in each cell of the column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <c>TValue</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Template","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"TextAlign","TypeName":"Syncfusion.Blazor.Grids.TextAlign","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the alignment of the column in both header and content cells.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TextAlign"}},{"Kind":"Components.Component","Name":"Freeze","TypeName":"Syncfusion.Blazor.Grids.FreezeDirection","IsEnum":true,"Documentation":"\n            <summary>\n            Defines which side the column need to freeze.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Freeze"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Grids.ColumnType","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the data type of the column.\n            </summary>\n            <remarks>If Type is not provided then the Type will be inferred from the\n            property type of the TValue.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"Uid","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets the unique identifier value of the column. It is used to get the object.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Uid"}},{"Kind":"Components.Component","Name":"ValidationRules","TypeName":"Syncfusion.Blazor.Grids.ValidationRules","Documentation":"\n            <summary>\n            Defines rules to validate data before creating and updating. The validation rules can be set\n            as instance of <see cref=\"T:Syncfusion.Blazor.Grids.ValidationRules\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValidationRules"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If Visible is set to false, hides the particular column. By default, all columns are displayed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Visible"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the width of the column in pixels or percentage.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"FilterItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the Checkbox Item template that renders customized element/value in each checkbox of the Filter column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.FilterItemTemplateContext\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FilterItemTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumn"}},{"HashCode":1992376178,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridColumn","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid columm.\n            </summary>\n            <summary>\n            Configures a grid column.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridColumn"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowEditing","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowEditing set to false, then it disables editing of a particular column.\n            By default all columns are editable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowEditing"}},{"Kind":"Components.Component","Name":"AllowAdding","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowAdding set to false, then it disables add operation of a particular column.\n            By default all columns are editable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowAdding"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowFiltering set to false, then it disables filtering option and filter bar element of a particular column.\n            By default all columns are filterable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering"}},{"Kind":"Components.Component","Name":"AllowGrouping","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowGrouping set to false, then it disables grouping of a particular column.\n            By default all columns are groupable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowGrouping"}},{"Kind":"Components.Component","Name":"AllowReordering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowReordering set to false, then it disables reorder of a particular column.\n            By default all columns can be reorder.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowReordering"}},{"Kind":"Components.Component","Name":"AllowResizing","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowResizing set to false, it disables resize option of a particular column.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowResizing"}},{"Kind":"Components.Component","Name":"AllowSearching","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowSearching set to false, then it disables searching of a particular column.\n            By default all columns are searchable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowSearching"}},{"Kind":"Components.Component","Name":"AllowSorting","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowSorting set to false, then it disables sorting option of a particular column.\n            By default all columns are sortable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowSorting"}},{"Kind":"Components.Component","Name":"AutoFit","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AutoFit set to true, then the particular column content width will be\n            adjusted based on its content in the initial rendering itself.\n            Setting this property as true is equivalent to calling AutoFitColumns method in the DataBound event.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AutoFit"}},{"Kind":"Components.Component","Name":"ClipMode","TypeName":"Syncfusion.Blazor.Grids.ClipMode","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the cell content's overflow mode. The available modes are.\n            <list type=\"bullet\">\n            <item>\n            <term><see cref=\"F:Syncfusion.Blazor.Grids.ClipMode.Clip\"></see></term>\n            <description>Truncates the cell content when it overflows its area.</description>\n            </item>\n            <item>\n            <term><see cref=\"F:Syncfusion.Blazor.Grids.ClipMode.Ellipsis\"></see></term>\n            <description>Displays ellipsis when the cell content overflows its area.</description>\n            </item>\n            <item>\n            <term><see cref=\"F:Syncfusion.Blazor.Grids.ClipMode.EllipsisWithTooltip\"></see></term>\n            <description>Displays ellipsis when the cell content overflows its area also it will display tooltip while hover on ellipsis applied cell.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ClipMode"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridColumn>","Documentation":"\n            <summary>\n            Used to render multiple header rows(stacked headers) on the Grid header.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Columns"}},{"Kind":"Components.Component","Name":"Commands","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridCommandColumn>","Documentation":"\n            <summary>\n            Commands provides an option to display command buttons in every cell.\n            Use <see cref=\"T:Syncfusion.Blazor.Grids.GridCommandColumn\" /> component to declare command columns.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Commands"}},{"Kind":"Components.Component","Name":"CustomAttributes","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            The CSS styles and attributes of the content cells of a particular column can be customized.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CustomAttributes"}},{"Kind":"Components.Component","Name":"DefaultValue","TypeName":"System.Object","Documentation":"\n            <summary>\n            Defines default values for the component when adding a new record to the Grid.\n            </summary>\n            <remarks>If no default value is provided then the default value of the model property type will be\n            used as initial value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DefaultValue"}},{"Kind":"Components.Component","Name":"DisableHtmlEncode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If DisableHtmlEncode is set to false, it disables the encodes the HTML of the header and content cells.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisableHtmlEncode"}},{"Kind":"Components.Component","Name":"DisplayAsCheckBox","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If DisplayAsCheckBox is set to true, it displays the column value as a check box instead of Boolean value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayAsCheckBox"}},{"Kind":"Components.Component","Name":"EditorSettings","TypeName":"Syncfusion.Blazor.Grids.IEditorSettings","Documentation":"\n            <summary>\n            Defines the object to customize default cell editors. The following types can be used to customize default\n            editors.\n            <list type=\"bullet\">\n            <item>\n            <term><see cref=\"T:Syncfusion.Blazor.Grids.NumericEditCellParams\" /></term>\n            <description>Customizes the default numerictextbox editor.</description>\n            </item>\n            <item>\n            <term><see cref=\"T:Syncfusion.Blazor.Grids.DropDownEditCellParams\" /></term>\n            <description>Customizes the default dropdown editor.</description>\n            </item>\n            <item>\n            <term><see cref=\"T:Syncfusion.Blazor.Grids.DateEditCellParams\" /></term>\n            <description>Customizes the default datepicker editor.</description>\n            </item>\n            <item>\n            <term><see cref=\"T:Syncfusion.Blazor.Grids.BooleanEditCellParams\" /></term>\n            <description>Customizes the default checkbox editor.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EditorSettings"}},{"Kind":"Components.Component","Name":"EditTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the cell edit template that used as editor for a particular column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EditTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"EditType","TypeName":"Syncfusion.Blazor.Grids.EditType","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the type of editor to be used for cell editing.\n            </summary>\n            <remarks>If EditType is not provided then the EditType will be inferred from the\n            property type of the TValue.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EditType"}},{"Kind":"Components.Component","Name":"EnableGroupByFormat","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableGroupByFormat set to true, then it groups the particular column by formatted values.\n            By default columns are group by format.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableGroupByFormat"}},{"Kind":"Components.Component","Name":"Field","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the field name of column which is mapped with mapping name of DataSource.\n            The bounded columns can be sort, filter and group etc.,\n            If the Field name contains “dot”, then it is considered as complex binding.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Field"}},{"Kind":"Components.Component","Name":"FilterSettings","TypeName":"Syncfusion.Blazor.Grids.FilterSettings","Documentation":"\n            <summary>\n             Defines the filter options to customize filtering for the particular column.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"FilterSettings"}},{"Kind":"Components.Component","Name":"FilterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the filter template that used as filter UI for a particular column in FilterBar and Menu.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.PredicateModel\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FilterTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ForeignKeyField","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the mapping column name of the foreign data source.\n            If it is not defined then the Field will be considered as mapping column name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ForeignKeyField"}},{"Kind":"Components.Component","Name":"ForeignKeyValue","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the display column name from the foreign data source which will be obtained from comparing local and foreign data.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ForeignKeyValue"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            It is used to change display value with the given format and does not affect the original data.\n            Gets the format from the user which can be standard or custom formats.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the column template which is used to add customized element in the column header.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.GridColumn\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderText","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the header text of column which is used to display in column header.\n            If HeaderText is not defined, then field name value will be assigned to header text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderText"}},{"Kind":"Components.Component","Name":"HeaderTextAlign","TypeName":"Syncfusion.Blazor.Grids.TextAlign","IsEnum":true,"Documentation":"\n            <summary>\n            Define the alignment of column header which is used to align the text of column header.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTextAlign"}},{"Kind":"Components.Component","Name":"HideAtMedia","TypeName":"System.String","Documentation":"\n            <summary>\n            Column visibility can change based on its Media Queries.\n            HideAtMedia accepts only valid Media Queries.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HideAtMedia"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets the unique identifier value of the column. It is used to get the object.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            You can use this property to freeze selected columns in grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsFrozen"}},{"Kind":"Components.Component","Name":"IsIdentity","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If IsIdentity is set to true, then this column is considered as identity column.\n            This column will be in disabled state in add form.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsIdentity"}},{"Kind":"Components.Component","Name":"IsPrimaryKey","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If IsPrimaryKey is set to true, considers this column as the primary key constraint.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsPrimaryKey"}},{"Kind":"Components.Component","Name":"LockColumn","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Defines the mapping column name of the foreign data source.\n            If it is not defined then the Field will be considered as mapping column name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LockColumn"}},{"Kind":"Components.Component","Name":"MaxWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the maximum width of the column in pixel or percentage, which will restrict resizing beyond this pixel or percentage.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaxWidth"}},{"Kind":"Components.Component","Name":"MinWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the minimum width of the column in pixels or percentage.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinWidth"}},{"Kind":"Components.Component","Name":"ShowColumnMenu","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowColumnMenu set to false, then it disable the column menu of a particular column.\n            By default column menu will show for all columns.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowColumnMenu"}},{"Kind":"Components.Component","Name":"ShowInColumnChooser","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowInColumnChooser set to false, then hides the particular column in column chooser.\n            By default all columns are displayed in column chooser.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowInColumnChooser"}},{"Kind":"Components.Component","Name":"SortComparer","TypeName":"System.Collections.Generic.IComparer<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the custom sort comparer function to implement own sort logic for a particular column.\n            For foreign key column with local data source a sort comparer will be assigned by default to sort it by text(ForeignKeyValue) instead of the underlying field value.\n            </summary>\n            <remarks>\n            Custom sort comparer cannot be used with remote data and Entity framework data source.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"SortComparer"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the column template that renders customized element in each cell of the column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <c>TValue</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Template","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"TextAlign","TypeName":"Syncfusion.Blazor.Grids.TextAlign","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the alignment of the column in both header and content cells.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TextAlign"}},{"Kind":"Components.Component","Name":"Freeze","TypeName":"Syncfusion.Blazor.Grids.FreezeDirection","IsEnum":true,"Documentation":"\n            <summary>\n            Defines which side the column need to freeze.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Freeze"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Grids.ColumnType","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the data type of the column.\n            </summary>\n            <remarks>If Type is not provided then the Type will be inferred from the\n            property type of the TValue.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"Uid","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets the unique identifier value of the column. It is used to get the object.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Uid"}},{"Kind":"Components.Component","Name":"ValidationRules","TypeName":"Syncfusion.Blazor.Grids.ValidationRules","Documentation":"\n            <summary>\n            Defines rules to validate data before creating and updating. The validation rules can be set\n            as instance of <see cref=\"T:Syncfusion.Blazor.Grids.ValidationRules\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValidationRules"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If Visible is set to false, hides the particular column. By default, all columns are displayed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Visible"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the width of the column in pixels or percentage.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"FilterItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the Checkbox Item template that renders customized element/value in each checkbox of the Filter column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.FilterItemTemplateContext\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FilterItemTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumn","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1955290038,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumn.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridColumn"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumn.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1300240870,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumn.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridColumn"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumn.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1013289903,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumn.EditTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the cell edit template that used as editor for a particular column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EditTemplate","ParentTag":"GridColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'EditTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumn.EditTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1217817258,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumn.EditTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the cell edit template that used as editor for a particular column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EditTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'EditTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumn.EditTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-822938568,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumn.FilterTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the filter template that used as filter UI for a particular column in FilterBar and Menu.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.PredicateModel\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FilterTemplate","ParentTag":"GridColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FilterTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumn.FilterTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":2039998384,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumn.FilterTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the filter template that used as filter UI for a particular column in FilterBar and Menu.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.PredicateModel\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FilterTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FilterTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumn.FilterTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2055928024,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumn.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the column template which is used to add customized element in the column header.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.GridColumn\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"GridColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'HeaderTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumn.HeaderTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1911821425,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumn.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the column template which is used to add customized element in the column header.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.GridColumn\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'HeaderTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumn.HeaderTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-841219848,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumn.Template","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the column template that renders customized element in each cell of the column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <c>TValue</c>.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"GridColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumn.Template","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-534996898,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumn.Template","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the column template that renders customized element in each cell of the column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <c>TValue</c>.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"Syncfusion.Blazor.Grids.GridColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumn.Template","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-743121879,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumn.FilterItemTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the Checkbox Item template that renders customized element/value in each checkbox of the Filter column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.FilterItemTemplateContext\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FilterItemTemplate","ParentTag":"GridColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FilterItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumn.FilterItemTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-437504375,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumn.FilterItemTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the Checkbox Item template that renders customized element/value in each checkbox of the Filter column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.FilterItemTemplateContext\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FilterItemTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FilterItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumn.FilterItemTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-338368127,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridColumnChooserSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid column chooser settings.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridColumnChooserSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Operator","TypeName":"Syncfusion.Blazor.Operator","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the search operator for Column Chooser.\n            By default search operator is <see cref=\"T:Syncfusion.Blazor.Operator\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Operator"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the custom content for the column chooser dialog. This can be used to introduce own UI inside the column chooser dialog content.\n            The checkboxes can be rendered using <see cref=\"T:Syncfusion.Blazor.Grids.GridColumnChooserItem\" /> component.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.ColumnChooserTemplateContext\" /> of the grid.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Template","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the custom footer content for the column chooser.This can be used to introduce own UI inside the column chooser dialog footer content.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.ColumnChooserFooterTemplateContext\" /> of the grid.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumnChooserSettings"}},{"HashCode":671427484,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridColumnChooserSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid column chooser settings.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridColumnChooserSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Operator","TypeName":"Syncfusion.Blazor.Operator","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the search operator for Column Chooser.\n            By default search operator is <see cref=\"T:Syncfusion.Blazor.Operator\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Operator"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the custom content for the column chooser dialog. This can be used to introduce own UI inside the column chooser dialog content.\n            The checkboxes can be rendered using <see cref=\"T:Syncfusion.Blazor.Grids.GridColumnChooserItem\" /> component.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.ColumnChooserTemplateContext\" /> of the grid.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Template","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the custom footer content for the column chooser.This can be used to introduce own UI inside the column chooser dialog footer content.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.ColumnChooserFooterTemplateContext\" /> of the grid.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumnChooserSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-906056596,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumnChooserSettings.Template","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the custom content for the column chooser dialog. This can be used to introduce own UI inside the column chooser dialog content.\n            The checkboxes can be rendered using <see cref=\"T:Syncfusion.Blazor.Grids.GridColumnChooserItem\" /> component.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.ColumnChooserTemplateContext\" /> of the grid.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"GridColumnChooserSettings"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumnChooserSettings.Template","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1194411344,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumnChooserSettings.Template","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the custom content for the column chooser dialog. This can be used to introduce own UI inside the column chooser dialog content.\n            The checkboxes can be rendered using <see cref=\"T:Syncfusion.Blazor.Grids.GridColumnChooserItem\" /> component.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.ColumnChooserTemplateContext\" /> of the grid.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"Syncfusion.Blazor.Grids.GridColumnChooserSettings"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumnChooserSettings.Template","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-683129697,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumnChooserSettings.FooterTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the custom footer content for the column chooser.This can be used to introduce own UI inside the column chooser dialog footer content.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.ColumnChooserFooterTemplateContext\" /> of the grid.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"GridColumnChooserSettings"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FooterTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumnChooserSettings.FooterTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":679853171,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumnChooserSettings.FooterTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the custom footer content for the column chooser.This can be used to introduce own UI inside the column chooser dialog footer content.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.ColumnChooserFooterTemplateContext\" /> of the grid.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridColumnChooserSettings"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FooterTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumnChooserSettings.FooterTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-193910253,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridColumns","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid columns.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridColumns"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumns"}},{"HashCode":189831348,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridColumns","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid columns.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridColumns"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumns","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1680954136,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumns.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridColumns"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumns.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":603738258,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumns.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridColumns"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumns.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-610005919,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridCommandColumn","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid command column.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridCommandColumn"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ButtonOption","TypeName":"Syncfusion.Blazor.Grids.CommandButtonOptions","Documentation":"\n            <summary>\n            Define the button model.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ButtonOption"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"\n            <summary>\n            Define the command button tooltip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Title"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Define the command button ID.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Grids.CommandButtonType","IsEnum":true,"Documentation":"\n            <summary>\n            Define the command button type.\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>Default. A command button with no default action. Use this for custom command actions.</description>\n            </item>\n            <item>\n            <term>Edit</term>\n            <description>A edit command button that edit current record.</description>\n            </item>\n            <item>\n            <term>Delete</term>\n            <description>A delete command button that delete current record.</description>\n            </item>\n            <item>\n            <term>Save</term>\n            <description>A save command button that saves the current edited record.</description>\n            </item>\n            <item>\n            <term>Cancel</term>\n            <description>A cancel command button that cancels the edit state.</description>\n            </item>\n            </list>\n            </summary>\n            <remarks>\n            To use custom command button, set Type as <see cref=\"F:Syncfusion.Blazor.Grids.CommandButtonType.None\" /> and use\n            <see cref=\"P:Syncfusion.Blazor.Grids.GridEvents`1.CommandClicked\" /> event to perform custom action.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"Uid","TypeName":"System.String","Metadata":{"Common.PropertyName":"Uid"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridCommandColumn"}},{"HashCode":-352394031,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridCommandColumn","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid command column.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridCommandColumn"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ButtonOption","TypeName":"Syncfusion.Blazor.Grids.CommandButtonOptions","Documentation":"\n            <summary>\n            Define the button model.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ButtonOption"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"\n            <summary>\n            Define the command button tooltip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Title"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Define the command button ID.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Grids.CommandButtonType","IsEnum":true,"Documentation":"\n            <summary>\n            Define the command button type.\n            <list type=\"bullet\">\n            <item>\n            <term>None</term>\n            <description>Default. A command button with no default action. Use this for custom command actions.</description>\n            </item>\n            <item>\n            <term>Edit</term>\n            <description>A edit command button that edit current record.</description>\n            </item>\n            <item>\n            <term>Delete</term>\n            <description>A delete command button that delete current record.</description>\n            </item>\n            <item>\n            <term>Save</term>\n            <description>A save command button that saves the current edited record.</description>\n            </item>\n            <item>\n            <term>Cancel</term>\n            <description>A cancel command button that cancels the edit state.</description>\n            </item>\n            </list>\n            </summary>\n            <remarks>\n            To use custom command button, set Type as <see cref=\"F:Syncfusion.Blazor.Grids.CommandButtonType.None\" /> and use\n            <see cref=\"P:Syncfusion.Blazor.Grids.GridEvents`1.CommandClicked\" /> event to perform custom action.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"Uid","TypeName":"System.String","Metadata":{"Common.PropertyName":"Uid"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridCommandColumn","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":585715583,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridCommandColumn.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridCommandColumn"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridCommandColumn.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-614454227,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridCommandColumn.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridCommandColumn"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridCommandColumn.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":615933062,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridCommandColumns","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid command columns.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridCommandColumns"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridCommandColumns"}},{"HashCode":-1311414749,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridCommandColumns","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid command columns.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridCommandColumns"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridCommandColumns","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1371237847,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridCommandColumns.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridCommandColumns"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridCommandColumns.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1118300650,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridCommandColumns.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridCommandColumns"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridCommandColumns.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2052622563,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridEditSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid edit settings.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridEditSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowAdding","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowAdding is set to true, new records can be added to the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowAdding"}},{"Kind":"Components.Component","Name":"AllowDeleting","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowDeleting is set to true, existing record can be deleted from the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowDeleting"}},{"Kind":"Components.Component","Name":"AllowEditOnDblClick","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowEditOnDblClick is set to false, Grid will not allow editing of a record on double click.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowEditOnDblClick"}},{"Kind":"Components.Component","Name":"AllowEditing","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowEditing is set to true, values can be updated in the existing record.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowEditing"}},{"Kind":"Components.Component","Name":"AllowNextRowEdit","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If allowNextRowEdit is set to true, editing is done to next row. By default allowNextRowEdit is set to false.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowNextRowEdit"}},{"Kind":"Components.Component","Name":"Dialog","TypeName":"Syncfusion.Blazor.Grids.DialogSettings","Documentation":"\n            <summary>\n            Defines the dialog params to edit.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Dialog"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the custom footer for the edit dialog.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue of the grid.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the custom header for the edit dialog.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue of the grid.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.Grids.EditMode","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the mode to edit. The available editing modes are:\n            <list type=\"bullet\">\n            <item>\n            <term>Normal</term>\n            <description>Default. Editing is done in an inline form. Edit form is rendered inline as one of the table rows.</description>\n            </item>\n            <item>\n            <term>Dialog</term>\n            <description>Editing is done in a Dialog/Pop component.</description>\n            </item>\n            <item>\n            <term>Batch</term>\n            <description>Enables cell editing. Multiple cells can be edited, added or deleted and saved.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Mode"}},{"Kind":"Components.Component","Name":"NewRowPosition","TypeName":"Syncfusion.Blazor.Grids.NewRowPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the position of adding a new row. The available position are:\n            <list type=\"bullet\">\n            <item>\n            <term>Top</term>\n            <description>Default. Add form is placed at the first row of the grid.</description>\n            </item>\n            <item>\n            <term>Bottom</term>\n            <description>Add form is placed at the last row of the grid</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NewRowPosition"}},{"Kind":"Components.Component","Name":"ShowConfirmDialog","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowConfirmDialog is set to false, confirm dialog does not show when batch changes are saved or discarded.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowConfirmDialog"}},{"Kind":"Components.Component","Name":"ShowDeleteConfirmDialog","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowDeleteConfirmDialog is set to true, confirm dialog will show delete action. You can also cancel delete command.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowDeleteConfirmDialog"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the custom content and edit elements for the edit dialog.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue of the grid.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Template","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Validator","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the custom validator component for the built-in EditForm. Use this to override built-in\n            validation components.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.ValidatorTemplateContext\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Validator","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridEditSettings"}},{"HashCode":578847483,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridEditSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid edit settings.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridEditSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowAdding","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowAdding is set to true, new records can be added to the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowAdding"}},{"Kind":"Components.Component","Name":"AllowDeleting","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowDeleting is set to true, existing record can be deleted from the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowDeleting"}},{"Kind":"Components.Component","Name":"AllowEditOnDblClick","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowEditOnDblClick is set to false, Grid will not allow editing of a record on double click.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowEditOnDblClick"}},{"Kind":"Components.Component","Name":"AllowEditing","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowEditing is set to true, values can be updated in the existing record.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowEditing"}},{"Kind":"Components.Component","Name":"AllowNextRowEdit","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If allowNextRowEdit is set to true, editing is done to next row. By default allowNextRowEdit is set to false.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowNextRowEdit"}},{"Kind":"Components.Component","Name":"Dialog","TypeName":"Syncfusion.Blazor.Grids.DialogSettings","Documentation":"\n            <summary>\n            Defines the dialog params to edit.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Dialog"}},{"Kind":"Components.Component","Name":"FooterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the custom footer for the edit dialog.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue of the grid.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FooterTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the custom header for the edit dialog.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue of the grid.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.Grids.EditMode","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the mode to edit. The available editing modes are:\n            <list type=\"bullet\">\n            <item>\n            <term>Normal</term>\n            <description>Default. Editing is done in an inline form. Edit form is rendered inline as one of the table rows.</description>\n            </item>\n            <item>\n            <term>Dialog</term>\n            <description>Editing is done in a Dialog/Pop component.</description>\n            </item>\n            <item>\n            <term>Batch</term>\n            <description>Enables cell editing. Multiple cells can be edited, added or deleted and saved.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Mode"}},{"Kind":"Components.Component","Name":"NewRowPosition","TypeName":"Syncfusion.Blazor.Grids.NewRowPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the position of adding a new row. The available position are:\n            <list type=\"bullet\">\n            <item>\n            <term>Top</term>\n            <description>Default. Add form is placed at the first row of the grid.</description>\n            </item>\n            <item>\n            <term>Bottom</term>\n            <description>Add form is placed at the last row of the grid</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NewRowPosition"}},{"Kind":"Components.Component","Name":"ShowConfirmDialog","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowConfirmDialog is set to false, confirm dialog does not show when batch changes are saved or discarded.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowConfirmDialog"}},{"Kind":"Components.Component","Name":"ShowDeleteConfirmDialog","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowDeleteConfirmDialog is set to true, confirm dialog will show delete action. You can also cancel delete command.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowDeleteConfirmDialog"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the custom content and edit elements for the edit dialog.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue of the grid.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Template","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Validator","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the custom validator component for the built-in EditForm. Use this to override built-in\n            validation components.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.ValidatorTemplateContext\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Validator","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridEditSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1602421459,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridEditSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridEditSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridEditSettings.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-208418372,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridEditSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridEditSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridEditSettings.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-383257937,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridEditSettings.FooterTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the custom footer for the edit dialog.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue of the grid.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"GridEditSettings"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FooterTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridEditSettings.FooterTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":501375113,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridEditSettings.FooterTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the custom footer for the edit dialog.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue of the grid.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridEditSettings"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FooterTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridEditSettings.FooterTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":536516048,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridEditSettings.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the custom header for the edit dialog.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue of the grid.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"GridEditSettings"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'HeaderTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridEditSettings.HeaderTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1751705216,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridEditSettings.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the custom header for the edit dialog.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue of the grid.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridEditSettings"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'HeaderTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridEditSettings.HeaderTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-484975581,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridEditSettings.Template","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the custom content and edit elements for the edit dialog.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue of the grid.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"GridEditSettings"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridEditSettings.Template","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1018867520,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridEditSettings.Template","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the custom content and edit elements for the edit dialog.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue of the grid.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"Syncfusion.Blazor.Grids.GridEditSettings"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridEditSettings.Template","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1145473269,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridEditSettings.Validator","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the custom validator component for the built-in EditForm. Use this to override built-in\n            validation components.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.ValidatorTemplateContext\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Validator","ParentTag":"GridEditSettings"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Validator' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridEditSettings.Validator","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-571399483,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridEditSettings.Validator","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the custom validator component for the built-in EditForm. Use this to override built-in\n            validation components.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.ValidatorTemplateContext\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Validator","ParentTag":"Syncfusion.Blazor.Grids.GridEditSettings"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Validator' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridEditSettings.Validator","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1549629758,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid events.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Grids.GridEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.ActionEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when Grid actions such as sorting, filtering, paging, grouping etc., starts.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.ActionEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when Grid actions such as sorting, filtering, paging, grouping etc. are completed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.FailureEventArgs>","Documentation":"\n            <summary>\n            Triggers when any Grid action failed to achieve the desired results.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBatchAdd","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.BeforeBatchAddArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before records are added in batch mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBatchAdd","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnBatchDelete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.BeforeBatchDeleteArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before records are deleted in batch mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBatchDelete","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnBatchSave","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.BeforeBatchSaveArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before records are saved in batch mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBatchSave","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnBatchCancel","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.BeforeBatchCancelArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the cancel operation is started in batch mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBatchCancel","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"BeforeCopyPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.BeforeCopyPasteEventArgs>","Documentation":"\n             <summary>\n             An event that is raised before copy or paste action in the Grid cells. You can cancel this entire copy or paste action by using this event.\n             </summary>\n             <remarks>\n             This event triggers before <see cref=\"P:Syncfusion.Blazor.Grids.GridEvents`1.BeforeCellPaste\" /> event, so you can cancel entire pasting operation by using this event.\n             Also, this event handler receives a <see cref=\"P:Syncfusion.Blazor.Grids.GridEvents`1.BeforeCopyPaste\" /> object which provides the details of before paste/copy action.\n            </remarks>\n             <example>\n             <code><![CDATA[\n             <SfGrid DataSource=\"@Orders\" @ref=\"DefaultGrid\" >\n             <GridEvents TValue=\"Orders\" BeforeCopyPaste=\"Copy\"></GridEvents>\n             ........\n             </SfGrid>\n             @code{\n             public async Task Copy(BeforeCopyPasteEventArgs args)\n             {\n                  //you can cancel the entire copy action here\n                   if(args.Action == \"Copy\"){\n                      args.Cancel = true;\n                   }\n                 // you can cancel the entire paste action here\n                   if(args.Action == \"Paste\"){\n                      args.Cancel = true;\n                   }\n             }\n             ]]>\n             </code>\n             </example>\n        ","Metadata":{"Common.PropertyName":"BeforeCopyPaste","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"BeforeCellPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.BeforeCellPasteEventArgs<TValue>>","Documentation":"\n            <summary>\n            An event that is raised before pasting the copied cell value for each cell. You can cancel the pasting action for particular cell or change the value by using this event.\n            </summary>\n            <remarks>\n            This event handler receives a <see cref=\"P:Syncfusion.Blazor.Grids.GridEvents`1.BeforeCellPaste\" /> object which provides the details of before pasting the copied cell value in the current cell.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfGrid DataSource=\"@Orders\" @ref=\"DefaultGrid\" >\n            <GridEvents TValue=\"Orders\" BeforeCellPaste=\"Paste\"></GridEvents>\n            ........\n            </SfGrid>\n            @code{\n            public async Task Paste(BeforeCellPasteEventArgs<Orders> args)\n            {\n              if(ColumnIndex == 1 && RowIndex == 4){\n                  //you can modified the content to be paste here.\n                 args.CellValue = \"Modified value\"; \n                }\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"BeforeCellPaste","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnDataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.BeforeDataBoundArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before data is bound to Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnDataBound","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnBeginEdit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.BeginEditArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before the record is to be edit.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBeginEdit","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnCellEdit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.CellEditArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the cell is being edited.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnCellEdit","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnCellSave","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.CellSaveArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when cell is saved.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnCellSave","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CellSaved","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.CellSaveArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when cell is saved.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CellSaved","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CellSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.CellSelectEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers after a cell is selected.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CellSelected","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CellDeselecting","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.CellDeselectEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before any cell selection occurs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CellDeselecting","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CellDeselected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.CellDeselectEventArgs<TValue>>","Metadata":{"Common.PropertyName":"CellDeselected","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CellSelecting","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.CellSelectingEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before any cell selection occurs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CellSelecting","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ColumnMenuItemClicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.ColumnMenuClickEventArgs>","Documentation":"\n            <summary>\n            Triggers when click the context menu items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ColumnMenuItemClicked","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"CommandClicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.CommandClickEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when command button is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CommandClicked","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ContextMenuItemClicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.ContextMenuClickEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when click on context menu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ContextMenuItemClicked","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ContextMenuOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.ContextMenuOpenEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when open the context menu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ContextMenuOpen","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"DataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when data source is populated in the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataBound","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"DetailDataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.DetailDataBoundEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers after detail row expands.\n            This event triggers at initial expand.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DetailDataBound","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DetailsExpanding","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.DetailsExpandingEventArgs<TValue>>","Documentation":"\n            <summary>\n            An event that is raised when detail template row clicked to expand. You can cancel the action by handling this event.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfGrid DataSource=\"@Orders\" @ref=\"DefaultGrid\" >\n            <GridEvents TValue=\"Orders\" DetailsExpanding=\"DetailsExpand\"></GridEvents>\n            ........\n            </SfGrid>\n            @code{\n            public async Task DetailsExpand(DetailsExpandingEventArgs<Orders> args)\n            {\n              ...........\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"DetailsExpanding","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DetailsExpanded","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.DetailsExpandedEventArgs<TValue>>","Documentation":"\n            <summary>\n            An event that is raised after detail template row is expanded.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfGrid DataSource=\"@Orders\" @ref=\"DefaultGrid\" >\n            <GridEvents TValue=\"Orders\" DetailsExpanded=\"DetailsExpanded\"></GridEvents>\n            ........\n            </SfGrid>\n            @code{\n            public async Task DetailsExpanded(DetailsExpandedEventArgs<Orders> args)\n            {\n              ...........\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"DetailsExpanded","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DetailsCollapsing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.DetailsCollapsingEventArgs<TValue>>","Documentation":"\n            <summary>\n            An event that is raised when detail template row clicked to collapse. You can cancel the action by handling this event.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfGrid DataSource=\"@Orders\" @ref=\"DefaultGrid\" >\n            <GridEvents TValue=\"Orders\" DetailsCollapsing=\"DetailsCollapse\"></GridEvents>\n            ........\n            </SfGrid>\n            @code{\n            public async Task DetailsCollapse(DetailsCollapsingEventArgs<Orders> args)\n            {\n              ...........\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"DetailsCollapsing","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DetailsCollapsed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.DetailsCollapsedEventArgs<TValue>>","Documentation":"\n            <summary>\n            An event that is raised after detail template row is collapsed.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfGrid DataSource=\"@Orders\" @ref=\"DefaultGrid\" >\n            <GridEvents TValue=\"Orders\" DetailsCollapsed=\"DetailsCollapsed\"></GridEvents>\n            ........\n            </SfGrid>\n            @code{\n            public async Task DetailsCollapsed(DetailsCollapsedEventArgs<Orders> args)\n            {\n              ...........\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"DetailsCollapsed","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"BeforeAutoFill","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.BeforeAutoFillEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that is raised before the autofill action. \n            </summary>\n            <remarks>\n            This event handler receives a <see cref=\"P:Syncfusion.Blazor.Grids.GridEvents`1.BeforeAutoFill\" /> object which provides the details of before autofill action.\n            Also,this event triggers when you release the dragged fill handle icon. You can cancel the entire cells getting automatically filled in the cell.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfGrid DataSource=\"@Orders\" @ref=\"DefaultGrid\" >\n            <GridEvents TValue=\"Orders\" BeforeAutoFill=\"BeforeAutoFillAction\"></GridEvents>\n            ........\n            </SfGrid>\n            @code{\n            public async Task BeforeAutoFillAction(BeforeAutoFillEventArgs args)\n            {     \n                  //you can cancel the autofill action here.\n                  args.Cancel = true;\n              }\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"BeforeAutoFill","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"BeforeAutoFillCell","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.BeforeAutoFillCellEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that is raised before the autofill action sets the value for each cell. You can cancel the autofill action for particular cell or change the value by using this event.\n            </summary>\n            <remarks>\n            This event occurs after the <see cref=\"P:Syncfusion.Blazor.Grids.GridEvents`1.BeforeAutoFill\" /> event if that event is not canceled.\n            This event handler receives a <see cref=\"P:Syncfusion.Blazor.Grids.GridEvents`1.BeforeAutoFillCell\" /> object which provides the details of before autofill action.    \n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfGrid DataSource=\"@Orders\" @ref=\"DefaultGrid\" >\n            <GridEvents TValue=\"Orders\" BeforeAutoFillCell=\"BeforeAutoFillCellAction\"></GridEvents>\n            ........\n            </SfGrid>\n            @code{\n            public async Task BeforeAutoFillCellAction(BeforeAutoFillCellEventArgs<Orders> args)\n            {\n              if(args.ColumnIndex == 1 && args.RowIndex == 5)\n              { \n                  //you can modified the content to be paste here.\n                  args.Value = \"Modified Value\";\n              }\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"BeforeAutoFillCell","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"HeaderCellInfo","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.HeaderCellInfoEventArgs>","Documentation":"\n            <summary>\n            Triggered for stacked header.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderCellInfo","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnLoad","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            This event allows customization of Grid properties before rendering.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnLoad","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"QueryCellInfo","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.QueryCellInfoEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggered every time a request is made to access cell information, element, or data.\n            This will be triggered before the cell element is appended to the Grid element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"QueryCellInfo","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnRecordClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RecordClickEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when record is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnRecordClick","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnRecordDoubleClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RecordDoubleClickEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when record is double clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnRecordDoubleClick","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnResizeStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.ResizeArgs>","Documentation":"\n            <summary>\n            Triggers when column resize starts.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnResizeStart","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ResizeStopped","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.ResizeArgs>","Documentation":"\n            <summary>\n            Triggers when column resize ends.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ResizeStopped","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"RowDataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RowDataBoundEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggered every time a request is made to access row information, element, or data.\n            This will be triggered before the row element is appended to the Grid element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RowDataBound","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"RowDeselected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RowDeselectEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when a selected row is deselected.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RowDeselected","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"RowDeselecting","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RowDeselectEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before deselecting the selected row.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RowDeselecting","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnRowDragStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RowDragEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that is raised when we start dragging the rows to perform reorder.\n            </summary>\n            <remarks>\n            This event handler receives a <see cref=\"T:Syncfusion.Blazor.Grids.RowDragEventArgs`1\" /> object which provides the details of the rows from which it is dragged.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfGrid DataSource=\"@Orders\">\n            <GridEvents TValue=\"Orders\" OnRowDragStart=\"OnRowDragStartHandler\"></GridEvents>\n            ........\n            </SfGrid>\n            @code{\n            public async Task OnRowDragStartHandler(RowDragEventArgs<Orders> args)\n            {\n                 //you can get the dragged row data's here\n                 List<Orders> Data = args.Data;\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnRowDragStart","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"RowDragStarting","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RowDragStartingEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that is raised when we start dragging the rows to perform reorder.\n            </summary>\n            <remarks>\n            This event handler receives a <see cref=\"T:Syncfusion.Blazor.Grids.RowDragStartingEventArgs`1\" /> object which provides the details of the rows from which it is dragged.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfGrid DataSource=\"@Orders\">\n            <GridEvents TValue=\"Orders\" RowDragStarting=\"RowDragStartingHandler\"></GridEvents>\n            ........\n            </SfGrid>\n            @code{\n            public async Task RowDragStartingHandler(RowDragStartingEventArgs<Orders> args)\n            {\n                 //you can get the dragged row data's here\n                 List<Orders> Data = args.Data;\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"RowDragStarting","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"RowDropping","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RowDroppingEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that is raised when the row elements are dropping on the target element. You can cancel the dropping action using this event.\n            </summary>\n            <remarks>\n            This event handler receives a <see cref=\"T:Syncfusion.Blazor.Grids.RowDroppingEventArgs`1\" /> object which provides the details of the rows which are dropping and the target where the rows are dropping.\n            If the dropping action is prevented using the <c>Cancel</c> argument, then the RowDropped event doesn't trigger.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfGrid DataSource=\"@Orders\">\n            <GridEvents TValue=\"Orders\" RowDropping=\"RowDroppingHandler\"></GridEvents>\n            ........\n            </SfGrid>\n            @code{\n            public async Task RowDroppingHandler(RowDroppingEventArgs<Orders> args)\n            {\n                 //you can cancel the dropping action here\n                 args.Cancel = true;\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"RowDropping","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"RowDropped","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RowDroppedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that is raised when row elements are dropped on the target element.\n            </summary>\n            <remarks>\n            This event handler receives a <see cref=\"T:Syncfusion.Blazor.Grids.RowDroppedEventArgs`1\" /> object which provides the details of the rows which are dropped and the target where the rows are dropped.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfGrid DataSource=\"@Orders\">\n            <GridEvents TValue=\"Orders\" RowDropped=\"RowDroppedHandler\"></GridEvents>\n            ........\n            </SfGrid>\n            @code{\n            public async Task RowDroppedHandler(RowDroppedEventArgs<Orders> args)\n            {\n                 //you can get the dropped row data's here\n                 List<Orders> Data = args.Data;\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"RowDropped","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"RowSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RowSelectEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers after a row is selected.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RowSelected","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"RowSelecting","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RowSelectingEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before row selection occurs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RowSelecting","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"FreezeLineMoving","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.FreezeLineMovingEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised on moving freeze line.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FreezeLineMoving","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"FreezeLineMoved","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.FreezeLineMovedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised after moved freeze line.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FreezeLineMoved","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnToolbarClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.ClickEventArgs>","Documentation":"\n            <summary>\n            Triggers when toolbar item is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnToolbarClick","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"BeforeOpenColumnChooser","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.ColumnChooserEventArgs>","Documentation":"\n            <summary>\n            Triggers when clicked column chooser.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"BeforeOpenColumnChooser","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPdfExport","TypeName":"System.Action<System.Object>","Documentation":"\n            <summary>\n            Triggers before Grid data is exported to PDF document.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnPdfExport","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"PdfQueryCellInfoEvent","TypeName":"System.Action<Syncfusion.Blazor.Grids.PdfQueryCellInfoEventArgs<TValue>>","Documentation":"\n            <summary>\n            The PdfQueryCellInfoEvent event is triggered every time a data is entered into a cell of the pdf document. So this event is triggered as many times as the data is entered into a cell.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PdfQueryCellInfoEvent","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"PdfHeaderQueryCellInfoEvent","TypeName":"System.Action<Syncfusion.Blazor.Grids.PdfHeaderQueryCellInfoEventArgs>","Documentation":"\n            <summary>\n            The PdfHeaderQueryCellInfoEvent event is triggered every time a data is entered into a header cell of the pdf document.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PdfHeaderQueryCellInfoEvent","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"PdfAggregateTemplateInfo","TypeName":"System.Action<Syncfusion.Blazor.Grids.PdfAggregateEventArgs>","Documentation":"\n            <summary>\n            The PdfAggregateTemplateInfo event is triggered every time a caption/footer/group footer aggregate row created on the pdf document.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PdfAggregateTemplateInfo","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"PdfGroupCaptionTemplateInfo","TypeName":"System.Action<Syncfusion.Blazor.Grids.PdfCaptionTemplateArgs>","Documentation":"\n            <summary>\n            The PdfGroupCaptionTemplateInfo event is triggered every time a caption template row created on the pdf document.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PdfGroupCaptionTemplateInfo","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"OnExcelExport","TypeName":"System.Action<System.Object>","Documentation":"\n            <summary>\n            Triggers before Grid data is exported to Excel/Csv Sheet.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnExcelExport","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"ExcelAggregateTemplateInfo","TypeName":"System.Action<Syncfusion.Blazor.Grids.ExcelAggregateEventArgs>","Documentation":"\n            <summary>\n            The ExcelAggregateTemplateInfo event is triggered every time a caption/footer/group footer aggregate row created on the excel sheet.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExcelAggregateTemplateInfo","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"ExcelGroupCaptionTemplateInfo","TypeName":"System.Action<Syncfusion.Blazor.Grids.ExcelCaptionTemplateArgs>","Documentation":"\n            <summary>\n            The ExcelGroupCaptionTemplateInfo event is triggered every time a caption template row created on the excel sheet.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExcelGroupCaptionTemplateInfo","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"ExcelQueryCellInfoEvent","TypeName":"System.Action<Syncfusion.Blazor.Grids.ExcelQueryCellInfoEventArgs<TValue>>","Documentation":"\n            <summary>\n            The ExcelQueryCellInfoEvent event is triggered every time a data is entered into a cell of the Excel sheet. So this event is triggered as many times as the data is entered into a cell written in the excel sheet.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExcelQueryCellInfoEvent","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ExcelHeaderQueryCellInfoEvent","TypeName":"System.Action<Syncfusion.Blazor.Grids.ExcelHeaderQueryCellInfoEventArgs>","Documentation":"\n            <summary>\n            The ExcelHeaderQueryCellInfoEvent event is triggered every time a data is entered into a header cell of the Excel sheet.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExcelHeaderQueryCellInfoEvent","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"ExportComplete","TypeName":"System.Action<System.Object>","Documentation":"\n            <summary>\n            The ExportComplete event is triggered when exporting process was completed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExportComplete","Components.DelegateSignature":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridEvents<TValue>","Components.GenericTyped":"True"}},{"HashCode":-1581236438,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid events.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Grids.GridEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.ActionEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when Grid actions such as sorting, filtering, paging, grouping etc., starts.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.ActionEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when Grid actions such as sorting, filtering, paging, grouping etc. are completed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.FailureEventArgs>","Documentation":"\n            <summary>\n            Triggers when any Grid action failed to achieve the desired results.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnBatchAdd","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.BeforeBatchAddArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before records are added in batch mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBatchAdd","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnBatchDelete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.BeforeBatchDeleteArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before records are deleted in batch mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBatchDelete","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnBatchSave","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.BeforeBatchSaveArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before records are saved in batch mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBatchSave","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnBatchCancel","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.BeforeBatchCancelArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the cancel operation is started in batch mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBatchCancel","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"BeforeCopyPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.BeforeCopyPasteEventArgs>","Documentation":"\n             <summary>\n             An event that is raised before copy or paste action in the Grid cells. You can cancel this entire copy or paste action by using this event.\n             </summary>\n             <remarks>\n             This event triggers before <see cref=\"P:Syncfusion.Blazor.Grids.GridEvents`1.BeforeCellPaste\" /> event, so you can cancel entire pasting operation by using this event.\n             Also, this event handler receives a <see cref=\"P:Syncfusion.Blazor.Grids.GridEvents`1.BeforeCopyPaste\" /> object which provides the details of before paste/copy action.\n            </remarks>\n             <example>\n             <code><![CDATA[\n             <SfGrid DataSource=\"@Orders\" @ref=\"DefaultGrid\" >\n             <GridEvents TValue=\"Orders\" BeforeCopyPaste=\"Copy\"></GridEvents>\n             ........\n             </SfGrid>\n             @code{\n             public async Task Copy(BeforeCopyPasteEventArgs args)\n             {\n                  //you can cancel the entire copy action here\n                   if(args.Action == \"Copy\"){\n                      args.Cancel = true;\n                   }\n                 // you can cancel the entire paste action here\n                   if(args.Action == \"Paste\"){\n                      args.Cancel = true;\n                   }\n             }\n             ]]>\n             </code>\n             </example>\n        ","Metadata":{"Common.PropertyName":"BeforeCopyPaste","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"BeforeCellPaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.BeforeCellPasteEventArgs<TValue>>","Documentation":"\n            <summary>\n            An event that is raised before pasting the copied cell value for each cell. You can cancel the pasting action for particular cell or change the value by using this event.\n            </summary>\n            <remarks>\n            This event handler receives a <see cref=\"P:Syncfusion.Blazor.Grids.GridEvents`1.BeforeCellPaste\" /> object which provides the details of before pasting the copied cell value in the current cell.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfGrid DataSource=\"@Orders\" @ref=\"DefaultGrid\" >\n            <GridEvents TValue=\"Orders\" BeforeCellPaste=\"Paste\"></GridEvents>\n            ........\n            </SfGrid>\n            @code{\n            public async Task Paste(BeforeCellPasteEventArgs<Orders> args)\n            {\n              if(ColumnIndex == 1 && RowIndex == 4){\n                  //you can modified the content to be paste here.\n                 args.CellValue = \"Modified value\"; \n                }\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"BeforeCellPaste","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnDataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.BeforeDataBoundArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before data is bound to Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnDataBound","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnBeginEdit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.BeginEditArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before the record is to be edit.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBeginEdit","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnCellEdit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.CellEditArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the cell is being edited.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnCellEdit","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnCellSave","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.CellSaveArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when cell is saved.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnCellSave","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CellSaved","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.CellSaveArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when cell is saved.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CellSaved","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CellSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.CellSelectEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers after a cell is selected.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CellSelected","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CellDeselecting","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.CellDeselectEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before any cell selection occurs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CellDeselecting","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CellDeselected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.CellDeselectEventArgs<TValue>>","Metadata":{"Common.PropertyName":"CellDeselected","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CellSelecting","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.CellSelectingEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before any cell selection occurs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CellSelecting","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ColumnMenuItemClicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.ColumnMenuClickEventArgs>","Documentation":"\n            <summary>\n            Triggers when click the context menu items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ColumnMenuItemClicked","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"CommandClicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.CommandClickEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when command button is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CommandClicked","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ContextMenuItemClicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.ContextMenuClickEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when click on context menu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ContextMenuItemClicked","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ContextMenuOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.ContextMenuOpenEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when open the context menu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ContextMenuOpen","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"DataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when data source is populated in the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataBound","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"DetailDataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.DetailDataBoundEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers after detail row expands.\n            This event triggers at initial expand.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DetailDataBound","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DetailsExpanding","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.DetailsExpandingEventArgs<TValue>>","Documentation":"\n            <summary>\n            An event that is raised when detail template row clicked to expand. You can cancel the action by handling this event.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfGrid DataSource=\"@Orders\" @ref=\"DefaultGrid\" >\n            <GridEvents TValue=\"Orders\" DetailsExpanding=\"DetailsExpand\"></GridEvents>\n            ........\n            </SfGrid>\n            @code{\n            public async Task DetailsExpand(DetailsExpandingEventArgs<Orders> args)\n            {\n              ...........\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"DetailsExpanding","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DetailsExpanded","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.DetailsExpandedEventArgs<TValue>>","Documentation":"\n            <summary>\n            An event that is raised after detail template row is expanded.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfGrid DataSource=\"@Orders\" @ref=\"DefaultGrid\" >\n            <GridEvents TValue=\"Orders\" DetailsExpanded=\"DetailsExpanded\"></GridEvents>\n            ........\n            </SfGrid>\n            @code{\n            public async Task DetailsExpanded(DetailsExpandedEventArgs<Orders> args)\n            {\n              ...........\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"DetailsExpanded","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DetailsCollapsing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.DetailsCollapsingEventArgs<TValue>>","Documentation":"\n            <summary>\n            An event that is raised when detail template row clicked to collapse. You can cancel the action by handling this event.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfGrid DataSource=\"@Orders\" @ref=\"DefaultGrid\" >\n            <GridEvents TValue=\"Orders\" DetailsCollapsing=\"DetailsCollapse\"></GridEvents>\n            ........\n            </SfGrid>\n            @code{\n            public async Task DetailsCollapse(DetailsCollapsingEventArgs<Orders> args)\n            {\n              ...........\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"DetailsCollapsing","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DetailsCollapsed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.DetailsCollapsedEventArgs<TValue>>","Documentation":"\n            <summary>\n            An event that is raised after detail template row is collapsed.\n            </summary>\n            <example>\n            <code><![CDATA[\n            <SfGrid DataSource=\"@Orders\" @ref=\"DefaultGrid\" >\n            <GridEvents TValue=\"Orders\" DetailsCollapsed=\"DetailsCollapsed\"></GridEvents>\n            ........\n            </SfGrid>\n            @code{\n            public async Task DetailsCollapsed(DetailsCollapsedEventArgs<Orders> args)\n            {\n              ...........\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"DetailsCollapsed","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"BeforeAutoFill","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.BeforeAutoFillEventArgs>","Documentation":"\n            <summary>\n            Gets or sets the event callback that is raised before the autofill action. \n            </summary>\n            <remarks>\n            This event handler receives a <see cref=\"P:Syncfusion.Blazor.Grids.GridEvents`1.BeforeAutoFill\" /> object which provides the details of before autofill action.\n            Also,this event triggers when you release the dragged fill handle icon. You can cancel the entire cells getting automatically filled in the cell.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfGrid DataSource=\"@Orders\" @ref=\"DefaultGrid\" >\n            <GridEvents TValue=\"Orders\" BeforeAutoFill=\"BeforeAutoFillAction\"></GridEvents>\n            ........\n            </SfGrid>\n            @code{\n            public async Task BeforeAutoFillAction(BeforeAutoFillEventArgs args)\n            {     \n                  //you can cancel the autofill action here.\n                  args.Cancel = true;\n              }\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"BeforeAutoFill","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"BeforeAutoFillCell","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.BeforeAutoFillCellEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that is raised before the autofill action sets the value for each cell. You can cancel the autofill action for particular cell or change the value by using this event.\n            </summary>\n            <remarks>\n            This event occurs after the <see cref=\"P:Syncfusion.Blazor.Grids.GridEvents`1.BeforeAutoFill\" /> event if that event is not canceled.\n            This event handler receives a <see cref=\"P:Syncfusion.Blazor.Grids.GridEvents`1.BeforeAutoFillCell\" /> object which provides the details of before autofill action.    \n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfGrid DataSource=\"@Orders\" @ref=\"DefaultGrid\" >\n            <GridEvents TValue=\"Orders\" BeforeAutoFillCell=\"BeforeAutoFillCellAction\"></GridEvents>\n            ........\n            </SfGrid>\n            @code{\n            public async Task BeforeAutoFillCellAction(BeforeAutoFillCellEventArgs<Orders> args)\n            {\n              if(args.ColumnIndex == 1 && args.RowIndex == 5)\n              { \n                  //you can modified the content to be paste here.\n                  args.Value = \"Modified Value\";\n              }\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"BeforeAutoFillCell","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"HeaderCellInfo","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.HeaderCellInfoEventArgs>","Documentation":"\n            <summary>\n            Triggered for stacked header.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderCellInfo","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnLoad","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            This event allows customization of Grid properties before rendering.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnLoad","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"QueryCellInfo","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.QueryCellInfoEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggered every time a request is made to access cell information, element, or data.\n            This will be triggered before the cell element is appended to the Grid element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"QueryCellInfo","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnRecordClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RecordClickEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when record is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnRecordClick","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnRecordDoubleClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RecordDoubleClickEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when record is double clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnRecordDoubleClick","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnResizeStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.ResizeArgs>","Documentation":"\n            <summary>\n            Triggers when column resize starts.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnResizeStart","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ResizeStopped","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.ResizeArgs>","Documentation":"\n            <summary>\n            Triggers when column resize ends.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ResizeStopped","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"RowDataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RowDataBoundEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggered every time a request is made to access row information, element, or data.\n            This will be triggered before the row element is appended to the Grid element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RowDataBound","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"RowDeselected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RowDeselectEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when a selected row is deselected.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RowDeselected","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"RowDeselecting","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RowDeselectEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before deselecting the selected row.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RowDeselecting","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnRowDragStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RowDragEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that is raised when we start dragging the rows to perform reorder.\n            </summary>\n            <remarks>\n            This event handler receives a <see cref=\"T:Syncfusion.Blazor.Grids.RowDragEventArgs`1\" /> object which provides the details of the rows from which it is dragged.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfGrid DataSource=\"@Orders\">\n            <GridEvents TValue=\"Orders\" OnRowDragStart=\"OnRowDragStartHandler\"></GridEvents>\n            ........\n            </SfGrid>\n            @code{\n            public async Task OnRowDragStartHandler(RowDragEventArgs<Orders> args)\n            {\n                 //you can get the dragged row data's here\n                 List<Orders> Data = args.Data;\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnRowDragStart","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"RowDragStarting","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RowDragStartingEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that is raised when we start dragging the rows to perform reorder.\n            </summary>\n            <remarks>\n            This event handler receives a <see cref=\"T:Syncfusion.Blazor.Grids.RowDragStartingEventArgs`1\" /> object which provides the details of the rows from which it is dragged.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfGrid DataSource=\"@Orders\">\n            <GridEvents TValue=\"Orders\" RowDragStarting=\"RowDragStartingHandler\"></GridEvents>\n            ........\n            </SfGrid>\n            @code{\n            public async Task RowDragStartingHandler(RowDragStartingEventArgs<Orders> args)\n            {\n                 //you can get the dragged row data's here\n                 List<Orders> Data = args.Data;\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"RowDragStarting","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"RowDropping","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RowDroppingEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that is raised when the row elements are dropping on the target element. You can cancel the dropping action using this event.\n            </summary>\n            <remarks>\n            This event handler receives a <see cref=\"T:Syncfusion.Blazor.Grids.RowDroppingEventArgs`1\" /> object which provides the details of the rows which are dropping and the target where the rows are dropping.\n            If the dropping action is prevented using the <c>Cancel</c> argument, then the RowDropped event doesn't trigger.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfGrid DataSource=\"@Orders\">\n            <GridEvents TValue=\"Orders\" RowDropping=\"RowDroppingHandler\"></GridEvents>\n            ........\n            </SfGrid>\n            @code{\n            public async Task RowDroppingHandler(RowDroppingEventArgs<Orders> args)\n            {\n                 //you can cancel the dropping action here\n                 args.Cancel = true;\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"RowDropping","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"RowDropped","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RowDroppedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets the event callback that is raised when row elements are dropped on the target element.\n            </summary>\n            <remarks>\n            This event handler receives a <see cref=\"T:Syncfusion.Blazor.Grids.RowDroppedEventArgs`1\" /> object which provides the details of the rows which are dropped and the target where the rows are dropped.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfGrid DataSource=\"@Orders\">\n            <GridEvents TValue=\"Orders\" RowDropped=\"RowDroppedHandler\"></GridEvents>\n            ........\n            </SfGrid>\n            @code{\n            public async Task RowDroppedHandler(RowDroppedEventArgs<Orders> args)\n            {\n                 //you can get the dropped row data's here\n                 List<Orders> Data = args.Data;\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"RowDropped","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"RowSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RowSelectEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers after a row is selected.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RowSelected","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"RowSelecting","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.RowSelectingEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers before row selection occurs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RowSelecting","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"FreezeLineMoving","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.FreezeLineMovingEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised on moving freeze line.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FreezeLineMoving","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"FreezeLineMoved","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.FreezeLineMovedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised after moved freeze line.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FreezeLineMoved","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnToolbarClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.ClickEventArgs>","Documentation":"\n            <summary>\n            Triggers when toolbar item is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnToolbarClick","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"BeforeOpenColumnChooser","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Grids.ColumnChooserEventArgs>","Documentation":"\n            <summary>\n            Triggers when clicked column chooser.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"BeforeOpenColumnChooser","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnPdfExport","TypeName":"System.Action<System.Object>","Documentation":"\n            <summary>\n            Triggers before Grid data is exported to PDF document.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnPdfExport","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"PdfQueryCellInfoEvent","TypeName":"System.Action<Syncfusion.Blazor.Grids.PdfQueryCellInfoEventArgs<TValue>>","Documentation":"\n            <summary>\n            The PdfQueryCellInfoEvent event is triggered every time a data is entered into a cell of the pdf document. So this event is triggered as many times as the data is entered into a cell.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PdfQueryCellInfoEvent","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"PdfHeaderQueryCellInfoEvent","TypeName":"System.Action<Syncfusion.Blazor.Grids.PdfHeaderQueryCellInfoEventArgs>","Documentation":"\n            <summary>\n            The PdfHeaderQueryCellInfoEvent event is triggered every time a data is entered into a header cell of the pdf document.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PdfHeaderQueryCellInfoEvent","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"PdfAggregateTemplateInfo","TypeName":"System.Action<Syncfusion.Blazor.Grids.PdfAggregateEventArgs>","Documentation":"\n            <summary>\n            The PdfAggregateTemplateInfo event is triggered every time a caption/footer/group footer aggregate row created on the pdf document.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PdfAggregateTemplateInfo","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"PdfGroupCaptionTemplateInfo","TypeName":"System.Action<Syncfusion.Blazor.Grids.PdfCaptionTemplateArgs>","Documentation":"\n            <summary>\n            The PdfGroupCaptionTemplateInfo event is triggered every time a caption template row created on the pdf document.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PdfGroupCaptionTemplateInfo","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"OnExcelExport","TypeName":"System.Action<System.Object>","Documentation":"\n            <summary>\n            Triggers before Grid data is exported to Excel/Csv Sheet.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnExcelExport","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"ExcelAggregateTemplateInfo","TypeName":"System.Action<Syncfusion.Blazor.Grids.ExcelAggregateEventArgs>","Documentation":"\n            <summary>\n            The ExcelAggregateTemplateInfo event is triggered every time a caption/footer/group footer aggregate row created on the excel sheet.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExcelAggregateTemplateInfo","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"ExcelGroupCaptionTemplateInfo","TypeName":"System.Action<Syncfusion.Blazor.Grids.ExcelCaptionTemplateArgs>","Documentation":"\n            <summary>\n            The ExcelGroupCaptionTemplateInfo event is triggered every time a caption template row created on the excel sheet.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExcelGroupCaptionTemplateInfo","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"ExcelQueryCellInfoEvent","TypeName":"System.Action<Syncfusion.Blazor.Grids.ExcelQueryCellInfoEventArgs<TValue>>","Documentation":"\n            <summary>\n            The ExcelQueryCellInfoEvent event is triggered every time a data is entered into a cell of the Excel sheet. So this event is triggered as many times as the data is entered into a cell written in the excel sheet.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExcelQueryCellInfoEvent","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ExcelHeaderQueryCellInfoEvent","TypeName":"System.Action<Syncfusion.Blazor.Grids.ExcelHeaderQueryCellInfoEventArgs>","Documentation":"\n            <summary>\n            The ExcelHeaderQueryCellInfoEvent event is triggered every time a data is entered into a header cell of the Excel sheet.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExcelHeaderQueryCellInfoEvent","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"ExportComplete","TypeName":"System.Action<System.Object>","Documentation":"\n            <summary>\n            The ExportComplete event is triggered when exporting process was completed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExportComplete","Components.DelegateSignature":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridEvents<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-628059691,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridFilterColumn","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid filter column.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridFilterColumn"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Field","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the field name of the filter column.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Field"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ignoreAccent is set to true, then filter ignores the diacritic characters or accents while filtering.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent"}},{"Kind":"Components.Component","Name":"MatchCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If match case set to true, then filter records with exact match or else\n            filter records with case insensitive(uppercase and lowercase letters treated as same).\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MatchCase"}},{"Kind":"Components.Component","Name":"Operator","TypeName":"Syncfusion.Blazor.Operator","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the operator to filter records.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Operator"}},{"Kind":"Components.Component","Name":"Predicate","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the relationship between one filter query and another by using AND or OR predicate.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Predicate"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Object","Documentation":"\n            <summary>\n            Defines the value used to filter records.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridFilterColumn"}},{"HashCode":232218884,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridFilterColumn","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid filter column.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridFilterColumn"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Field","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the field name of the filter column.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Field"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ignoreAccent is set to true, then filter ignores the diacritic characters or accents while filtering.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent"}},{"Kind":"Components.Component","Name":"MatchCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If match case set to true, then filter records with exact match or else\n            filter records with case insensitive(uppercase and lowercase letters treated as same).\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MatchCase"}},{"Kind":"Components.Component","Name":"Operator","TypeName":"Syncfusion.Blazor.Operator","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the operator to filter records.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Operator"}},{"Kind":"Components.Component","Name":"Predicate","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the relationship between one filter query and another by using AND or OR predicate.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Predicate"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.Object","Documentation":"\n            <summary>\n            Defines the value used to filter records.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridFilterColumn","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2120597863,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridFilterColumn.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridFilterColumn"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridFilterColumn.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1068493635,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridFilterColumn.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridFilterColumn"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridFilterColumn.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2045532444,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridFilterColumns","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid filter columns.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridFilterColumns"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridFilterColumns"}},{"HashCode":1002822651,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridFilterColumns","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid filter columns.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridFilterColumns"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridFilterColumns","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1546057356,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridFilterColumns.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridFilterColumns"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridFilterColumns.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":2120614305,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridFilterColumns.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridFilterColumns"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridFilterColumns.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1574370568,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridFilterSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid filtering.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridFilterSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridFilterColumn>","Documentation":"\n            <summary>\n            Specifies the columns to be filtered at initial rendering of the Grid. You can also get the columns that were currently filtered.\n            </summary>\n            <remarks>\n            Use <see cref=\"T:Syncfusion.Blazor.Grids.GridFilterColumn\" /> component\n            to define filter criteria.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Columns"}},{"Kind":"Components.Component","Name":"EnableCaseSensitivity","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableCaseSensitivity is set to true then searches grid records with exact match based on the filter\n            operator. It will have no effect on number, boolean and Date fields.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableCaseSensitivity"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ignoreAccent set to true, then filter ignores the diacritic characters or accents while filtering.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent"}},{"Kind":"Components.Component","Name":"ImmediateModeDelay","TypeName":"System.Double","Documentation":"\n            <summary>\n            Defines the time delay (in milliseconds) in filtering records when the Immediate mode of filter bar is set.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ImmediateModeDelay"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.Grids.FilterBarMode","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the filter bar modes. The available options are.\n            <list type=\"bullet\">\n            <item>\n            <term>OnEnter</term>\n            <description>Initiate filter operation after Enter key is pressed.</description>\n            </item>\n            <item>\n            <term>Immediate</term>\n            <description>Initiate filter operation after certain time interval. By default time interval is 1500ms.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Mode"}},{"Kind":"Components.Component","Name":"Operators","TypeName":"System.Object","Documentation":"\n            <summary>\n            The Operators is used to override the default operators in filter menu. This should be defined by type wise\n            (string, number, date and boolean). Based on the column type, this customize operator list will render in filter menu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Operators"}},{"Kind":"Components.Component","Name":"ShowFilterBarStatus","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Shows or hides the filtered status message on the pager.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowFilterBarStatus"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Grids.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Defines options for filtering type. The available options are.\n            <list type=\"bullet\">\n            <item>\n            <term>FilterBar</term>\n            <description>Default. Specifies the filter type as filter bar.</description>\n            </item>\n            <item>\n            <term>Menu</term>\n            <description>Specifies the filter type as menu.</description>\n            </item>\n            <item>\n            <term>CheckBox</term>\n            <description>Specifies the filter type as check box.</description>\n            </item>\n            <item>\n            <term>Excel</term>\n            <description>Specifies the filter type as excel.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridFilterSettings"}},{"HashCode":-374862572,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridFilterSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid filtering.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridFilterSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridFilterColumn>","Documentation":"\n            <summary>\n            Specifies the columns to be filtered at initial rendering of the Grid. You can also get the columns that were currently filtered.\n            </summary>\n            <remarks>\n            Use <see cref=\"T:Syncfusion.Blazor.Grids.GridFilterColumn\" /> component\n            to define filter criteria.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Columns"}},{"Kind":"Components.Component","Name":"EnableCaseSensitivity","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableCaseSensitivity is set to true then searches grid records with exact match based on the filter\n            operator. It will have no effect on number, boolean and Date fields.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableCaseSensitivity"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ignoreAccent set to true, then filter ignores the diacritic characters or accents while filtering.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent"}},{"Kind":"Components.Component","Name":"ImmediateModeDelay","TypeName":"System.Double","Documentation":"\n            <summary>\n            Defines the time delay (in milliseconds) in filtering records when the Immediate mode of filter bar is set.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ImmediateModeDelay"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.Grids.FilterBarMode","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the filter bar modes. The available options are.\n            <list type=\"bullet\">\n            <item>\n            <term>OnEnter</term>\n            <description>Initiate filter operation after Enter key is pressed.</description>\n            </item>\n            <item>\n            <term>Immediate</term>\n            <description>Initiate filter operation after certain time interval. By default time interval is 1500ms.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Mode"}},{"Kind":"Components.Component","Name":"Operators","TypeName":"System.Object","Documentation":"\n            <summary>\n            The Operators is used to override the default operators in filter menu. This should be defined by type wise\n            (string, number, date and boolean). Based on the column type, this customize operator list will render in filter menu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Operators"}},{"Kind":"Components.Component","Name":"ShowFilterBarStatus","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Shows or hides the filtered status message on the pager.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowFilterBarStatus"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Grids.FilterType","IsEnum":true,"Documentation":"\n            <summary>\n            Defines options for filtering type. The available options are.\n            <list type=\"bullet\">\n            <item>\n            <term>FilterBar</term>\n            <description>Default. Specifies the filter type as filter bar.</description>\n            </item>\n            <item>\n            <term>Menu</term>\n            <description>Specifies the filter type as menu.</description>\n            </item>\n            <item>\n            <term>CheckBox</term>\n            <description>Specifies the filter type as check box.</description>\n            </item>\n            <item>\n            <term>Excel</term>\n            <description>Specifies the filter type as excel.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridFilterSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-193702492,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridFilterSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridFilterSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridFilterSettings.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-623729933,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridFilterSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridFilterSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridFilterSettings.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-884916787,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridGroupSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid grouping.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridGroupSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowReordering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowReordering is set to true, Grid allows the grouped elements to be reordered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowReordering"}},{"Kind":"Components.Component","Name":"CaptionTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            The Caption Template allows user to display custom group caption.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.CaptionTemplateContext\" /> of the grid.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"CaptionTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.String[]","Documentation":"\n            <summary>\n            Specifies the column names to group at initial rendering of the Grid.\n            You can also get the currently grouped columns.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Columns"}},{"Kind":"Components.Component","Name":"DisablePageWiseAggregates","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If DisablePageWiseAggregates set to true, then the group aggregate value will\n            be calculated from the whole data instead of paged data and two requests will be made for each page\n            when Grid bound with remote service.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisablePageWiseAggregates"}},{"Kind":"Components.Component","Name":"ShowDropArea","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowDropArea is set to true, the group drop area element will be visible at the top of the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowDropArea"}},{"Kind":"Components.Component","Name":"ShowGroupedColumn","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowGroupedColumn is set to false, it hides the grouped column after grouping.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowGroupedColumn"}},{"Kind":"Components.Component","Name":"ShowToggleButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowToggleButton set to true, then the toggle button will be showed in the column headers which can be used to group\n            or ungroup columns by clicking them.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowToggleButton"}},{"Kind":"Components.Component","Name":"ShowUngroupButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowUngroupButton set to false, then ungroup button is hidden in dropped element.\n            It can be used to ungroup the grouped column when click on ungroup button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowUngroupButton"}},{"Kind":"Components.Component","Name":"EnableLazyLoading","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            The Lazy load grouping, allows the Grid to render only the initial level caption rows in collapsed state while grouping.\n            The child rows of each caption will render only when we expand the captions.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableLazyLoading"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridGroupSettings"}},{"HashCode":1084161634,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridGroupSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid grouping.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridGroupSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowReordering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowReordering is set to true, Grid allows the grouped elements to be reordered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowReordering"}},{"Kind":"Components.Component","Name":"CaptionTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            The Caption Template allows user to display custom group caption.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.CaptionTemplateContext\" /> of the grid.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"CaptionTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.String[]","Documentation":"\n            <summary>\n            Specifies the column names to group at initial rendering of the Grid.\n            You can also get the currently grouped columns.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Columns"}},{"Kind":"Components.Component","Name":"DisablePageWiseAggregates","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If DisablePageWiseAggregates set to true, then the group aggregate value will\n            be calculated from the whole data instead of paged data and two requests will be made for each page\n            when Grid bound with remote service.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisablePageWiseAggregates"}},{"Kind":"Components.Component","Name":"ShowDropArea","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowDropArea is set to true, the group drop area element will be visible at the top of the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowDropArea"}},{"Kind":"Components.Component","Name":"ShowGroupedColumn","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowGroupedColumn is set to false, it hides the grouped column after grouping.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowGroupedColumn"}},{"Kind":"Components.Component","Name":"ShowToggleButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowToggleButton set to true, then the toggle button will be showed in the column headers which can be used to group\n            or ungroup columns by clicking them.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowToggleButton"}},{"Kind":"Components.Component","Name":"ShowUngroupButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowUngroupButton set to false, then ungroup button is hidden in dropped element.\n            It can be used to ungroup the grouped column when click on ungroup button.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowUngroupButton"}},{"Kind":"Components.Component","Name":"EnableLazyLoading","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            The Lazy load grouping, allows the Grid to render only the initial level caption rows in collapsed state while grouping.\n            The child rows of each caption will render only when we expand the captions.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableLazyLoading"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridGroupSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1793979845,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridGroupSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridGroupSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridGroupSettings.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-2031094285,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridGroupSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridGroupSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridGroupSettings.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1560877728,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridGroupSettings.CaptionTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            The Caption Template allows user to display custom group caption.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.CaptionTemplateContext\" /> of the grid.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CaptionTemplate","ParentTag":"GridGroupSettings"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'CaptionTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridGroupSettings.CaptionTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1627733691,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridGroupSettings.CaptionTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            The Caption Template allows user to display custom group caption.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.CaptionTemplateContext\" /> of the grid.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CaptionTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridGroupSettings"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'CaptionTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridGroupSettings.CaptionTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1939198360,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridKeySettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures keyboard navigation for grid.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridKeySettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"MoveLeftCell","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the action keys for the left cell movement.\n            <list type=\"bullet\">\n            <item>\n            <term>ShiftTab</term>\n            <description>Moves to left cell on pressing Shift+Tab key</description>\n            </item>\n            <item>\n            <term>ArrowLeft</term>\n            <description>Moves to left cell on pressing left arrow key</description>\n            </item>\n            <item>\n            <term>ShiftLeft</term>\n            <description>Moves to left cell on pressing shift+left arrow key</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MoveLeftCell"}},{"Kind":"Components.Component","Name":"MoveRightCell","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the action keys for the right cell movement.\n            <list type=\"bullet\">\n            <item>\n            <term>Tab</term>\n            <description>Moves to right cell on pressing Tab key</description>\n            </item>\n            <item>\n            <term>ArrowRight</term>\n            <description>Moves to right cell on pressing right arrow key</description>\n            </item>\n            <item>\n            <term>ShiftRight</term>\n            <description>Moves to right cell on pressing shift+right arrow key</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MoveRightCell"}},{"Kind":"Components.Component","Name":"MoveUpCell","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the action keys for the up cell movement.\n            <list type=\"bullet\">\n            <item>\n            <term>ShiftEnter</term>\n            <description>Moves to top cell on pressing Shit+Enter key</description>\n            </item>\n            <item>\n            <term>ArrowUp</term>\n            <description>Moves to top cell on pressing up arrow key</description>\n            </item>\n            <item>\n            <term>ShiftUp</term>\n            <description>Moves to top cell on pressing shift+up arrow key</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MoveUpCell"}},{"Kind":"Components.Component","Name":"MoveDownCell","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the action keys for the down cell movement.\n            <list type=\"bullet\">\n            <item>\n            <term>Enter</term>\n            <description>Moves to down cell on pressing Enter key</description>\n            </item>\n            <item>\n            <term>ArrowDown</term>\n            <description>Moves to down cell on pressing down arrow key</description>\n            </item>\n            <item>\n            <term>ShiftDown</term>\n            <description>Moves to down cell on pressing shift+down arrow key</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MoveDownCell"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridKeySettings"}},{"HashCode":-644720540,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridKeySettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures keyboard navigation for grid.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridKeySettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"MoveLeftCell","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the action keys for the left cell movement.\n            <list type=\"bullet\">\n            <item>\n            <term>ShiftTab</term>\n            <description>Moves to left cell on pressing Shift+Tab key</description>\n            </item>\n            <item>\n            <term>ArrowLeft</term>\n            <description>Moves to left cell on pressing left arrow key</description>\n            </item>\n            <item>\n            <term>ShiftLeft</term>\n            <description>Moves to left cell on pressing shift+left arrow key</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MoveLeftCell"}},{"Kind":"Components.Component","Name":"MoveRightCell","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the action keys for the right cell movement.\n            <list type=\"bullet\">\n            <item>\n            <term>Tab</term>\n            <description>Moves to right cell on pressing Tab key</description>\n            </item>\n            <item>\n            <term>ArrowRight</term>\n            <description>Moves to right cell on pressing right arrow key</description>\n            </item>\n            <item>\n            <term>ShiftRight</term>\n            <description>Moves to right cell on pressing shift+right arrow key</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MoveRightCell"}},{"Kind":"Components.Component","Name":"MoveUpCell","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the action keys for the up cell movement.\n            <list type=\"bullet\">\n            <item>\n            <term>ShiftEnter</term>\n            <description>Moves to top cell on pressing Shit+Enter key</description>\n            </item>\n            <item>\n            <term>ArrowUp</term>\n            <description>Moves to top cell on pressing up arrow key</description>\n            </item>\n            <item>\n            <term>ShiftUp</term>\n            <description>Moves to top cell on pressing shift+up arrow key</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MoveUpCell"}},{"Kind":"Components.Component","Name":"MoveDownCell","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the action keys for the down cell movement.\n            <list type=\"bullet\">\n            <item>\n            <term>Enter</term>\n            <description>Moves to down cell on pressing Enter key</description>\n            </item>\n            <item>\n            <term>ArrowDown</term>\n            <description>Moves to down cell on pressing down arrow key</description>\n            </item>\n            <item>\n            <term>ShiftDown</term>\n            <description>Moves to down cell on pressing shift+down arrow key</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MoveDownCell"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridKeySettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1711478320,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridPageSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid paging.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridPageSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CurrentPage","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Defines the current page number of the pager.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CurrentPage"}},{"Kind":"Components.Component","Name":"EnableQueryString","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableQueryString set to true,\n            then it pass current page information as a query string along with the URL while navigating to other page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableQueryString"}},{"Kind":"Components.Component","Name":"PageCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Defines the number of pages to be displayed in the pager container.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PageCount"}},{"Kind":"Components.Component","Name":"PageSize","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Defines the number of records to be displayed per page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PageSize"}},{"Kind":"Components.Component","Name":"PageSizes","TypeName":"System.Object","Documentation":"\n            <summary>\n            If PageSizes set to true or Array of values,\n            It renders DropDownList in the pager which allow us to select pageSize from DropDownList.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PageSizes"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the template which renders customized elements in pager instead of default elements.\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Navigations.PagerTemplateContext\" /> of the grid.\n            </remarks>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Template","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridPageSettings"}},{"HashCode":1815426585,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridPageSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid paging.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridPageSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CurrentPage","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Defines the current page number of the pager.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CurrentPage"}},{"Kind":"Components.Component","Name":"EnableQueryString","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableQueryString set to true,\n            then it pass current page information as a query string along with the URL while navigating to other page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableQueryString"}},{"Kind":"Components.Component","Name":"PageCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Defines the number of pages to be displayed in the pager container.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PageCount"}},{"Kind":"Components.Component","Name":"PageSize","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Defines the number of records to be displayed per page.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PageSize"}},{"Kind":"Components.Component","Name":"PageSizes","TypeName":"System.Object","Documentation":"\n            <summary>\n            If PageSizes set to true or Array of values,\n            It renders DropDownList in the pager which allow us to select pageSize from DropDownList.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PageSizes"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the template which renders customized elements in pager instead of default elements.\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Navigations.PagerTemplateContext\" /> of the grid.\n            </remarks>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Template","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridPageSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1938725636,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridPageSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridPageSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridPageSettings.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1861481594,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridPageSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridPageSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridPageSettings.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-159990448,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridPageSettings.Template","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the template which renders customized elements in pager instead of default elements.\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Navigations.PagerTemplateContext\" /> of the grid.\n            </remarks>\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"GridPageSettings"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridPageSettings.Template","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-383016885,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridPageSettings.Template","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the template which renders customized elements in pager instead of default elements.\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Navigations.PagerTemplateContext\" /> of the grid.\n            </remarks>\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"Syncfusion.Blazor.Grids.GridPageSettings"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridPageSettings.Template","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1506310303,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridRowDropSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid row drag and drop.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridRowDropSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TargetID","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the ID of droppable component on which row drop should occur.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TargetID"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridRowDropSettings"}},{"HashCode":1502113456,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridRowDropSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid row drag and drop.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridRowDropSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TargetID","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the ID of droppable component on which row drop should occur.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TargetID"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridRowDropSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-981168395,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridSearchSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid searching.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridSearchSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Fields","TypeName":"System.String[]","Documentation":"\n            <summary>\n            Specifies the collection of fields included in search operation. By default, bounded columns of the Grid are included.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Fields"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ignoreAccent set to true, then filter ignores the diacritic characters or accents while filtering.\n            </summary>\n            <remarks>Ignore accent is supported by remote data alone.\n            IgnoreAccent key will be sent to server and operation should be handled at user level.</remarks>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If IgnoreCase is set to false, searches records that match exactly, else\n            searches records that are case insensitive(uppercase and lowercase letters treated the same).\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase"}},{"Kind":"Components.Component","Name":"Key","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the key value to search Grid records at initial rendering.\n            You can also get the current search key.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Key"}},{"Kind":"Components.Component","Name":"Operator","TypeName":"Syncfusion.Blazor.Operator","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the operator to search records.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Operator"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridSearchSettings"}},{"HashCode":486668816,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridSearchSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid searching.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridSearchSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Fields","TypeName":"System.String[]","Documentation":"\n            <summary>\n            Specifies the collection of fields included in search operation. By default, bounded columns of the Grid are included.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Fields"}},{"Kind":"Components.Component","Name":"IgnoreAccent","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ignoreAccent set to true, then filter ignores the diacritic characters or accents while filtering.\n            </summary>\n            <remarks>Ignore accent is supported by remote data alone.\n            IgnoreAccent key will be sent to server and operation should be handled at user level.</remarks>\n        ","Metadata":{"Common.PropertyName":"IgnoreAccent"}},{"Kind":"Components.Component","Name":"IgnoreCase","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If IgnoreCase is set to false, searches records that match exactly, else\n            searches records that are case insensitive(uppercase and lowercase letters treated the same).\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IgnoreCase"}},{"Kind":"Components.Component","Name":"Key","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the key value to search Grid records at initial rendering.\n            You can also get the current search key.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Key"}},{"Kind":"Components.Component","Name":"Operator","TypeName":"Syncfusion.Blazor.Operator","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the operator to search records.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Operator"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridSearchSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1297159112,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridSelectionSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid selection.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridSelectionSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"CellSelectionMode","TypeName":"Syncfusion.Blazor.Grids.CellSelectionMode","IsEnum":true,"Documentation":"\n            <summary>\n            The cell selection modes are flow and box.\n            It requires the <see cref=\"P:Syncfusion.Blazor.Grids.GridSelectionSettings.Mode\" /> to be either cell or both.\n            <list type=\"bullet\">\n            <item>\n            <term>Flow</term>\n            <description>Default. Selects the range of cells between start index and end index that also includes the other cells of the selected rows..</description>\n            </item>\n            <item>\n            <term>Box</term>\n            <description>Selects the range of cells within the start and end column indexes that includes in between cells of rows within the range</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CellSelectionMode"}},{"Kind":"Components.Component","Name":"CheckboxMode","TypeName":"Syncfusion.Blazor.Grids.CheckboxSelectionType","IsEnum":true,"Documentation":"\n            <summary>\n            Defines options for checkbox selection Mode. They are,.\n            <list type=\"bullet\">\n            <item>\n            <term>Default</term>\n            <description>Default. In this mode, user can select multiple rows by clicking rows one by one.</description>\n            </item>\n            <item>\n            <term>ResetOnRowClick</term>\n            <description>In ResetOnRowClick mode, on clicking a row it will reset previously selected row and also multiple\n             rows can be selected by using CTRL or SHIFT key.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckboxMode"}},{"Kind":"Components.Component","Name":"CheckboxOnly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If CheckboxOnly set to true, then the Grid selection is allowed only through checkbox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckboxOnly"}},{"Kind":"Components.Component","Name":"EnableSimpleMultiRowSelection","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableSimpleMultiRowSelection set to true, then the user can able to perform multiple row selection with single clicks.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableSimpleMultiRowSelection"}},{"Kind":"Components.Component","Name":"EnableToggle","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableToggle set to true, then the user can able to perform toggle for the selected row.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableToggle"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.Grids.SelectionMode","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the selection mode. Available modes are,.\n            <list type=\"bullet\">\n            <item>\n            <term>Row</term>\n            <description>Default. Row selection is enabled</description>\n            </item>\n            <item>\n            <term>Cell</term>\n            <description>Cell selection is enabled.</description>\n            </item>\n            <item>\n            <term>Both</term>\n            <description>Both Row and Cell selection is enabled.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Mode"}},{"Kind":"Components.Component","Name":"PersistSelection","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If PersistSelection set to true, then the Grid selection is persisted on all operations.\n            For persisting selection in the Grid, any one of the column must be enabled as a primary key.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PersistSelection"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Grids.SelectionType","IsEnum":true,"Documentation":"\n            <summary>\n            Defines options for selection type. They are.\n            <list type=\"bullet\">\n            <item>\n            <term>Single</term>\n            <description>Default. Allows selection of only a row or a cell.</description>\n            </item>\n            <item>\n            <term>Multiple</term>\n            <description>Allows user to select a multiple rows or cells.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"AllowDragSelection","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to enable selection of multiple rows and cells by dragging mouse.\n            </summary>\n            <value>\n            <c>true</c>, if the row and cell selection enabled when dragging mouse. Otherwise, false.\n            </value>\n            <remarks>\n            To perform drag selection in blazor grid, set <see cref=\"P:Syncfusion.Blazor.Grids.GridSelectionSettings.Type\" /> as should be <c>Multiple</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowDragSelection"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridSelectionSettings"}},{"HashCode":1884348295,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridSelectionSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid selection.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridSelectionSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"CellSelectionMode","TypeName":"Syncfusion.Blazor.Grids.CellSelectionMode","IsEnum":true,"Documentation":"\n            <summary>\n            The cell selection modes are flow and box.\n            It requires the <see cref=\"P:Syncfusion.Blazor.Grids.GridSelectionSettings.Mode\" /> to be either cell or both.\n            <list type=\"bullet\">\n            <item>\n            <term>Flow</term>\n            <description>Default. Selects the range of cells between start index and end index that also includes the other cells of the selected rows..</description>\n            </item>\n            <item>\n            <term>Box</term>\n            <description>Selects the range of cells within the start and end column indexes that includes in between cells of rows within the range</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CellSelectionMode"}},{"Kind":"Components.Component","Name":"CheckboxMode","TypeName":"Syncfusion.Blazor.Grids.CheckboxSelectionType","IsEnum":true,"Documentation":"\n            <summary>\n            Defines options for checkbox selection Mode. They are,.\n            <list type=\"bullet\">\n            <item>\n            <term>Default</term>\n            <description>Default. In this mode, user can select multiple rows by clicking rows one by one.</description>\n            </item>\n            <item>\n            <term>ResetOnRowClick</term>\n            <description>In ResetOnRowClick mode, on clicking a row it will reset previously selected row and also multiple\n             rows can be selected by using CTRL or SHIFT key.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckboxMode"}},{"Kind":"Components.Component","Name":"CheckboxOnly","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If CheckboxOnly set to true, then the Grid selection is allowed only through checkbox.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckboxOnly"}},{"Kind":"Components.Component","Name":"EnableSimpleMultiRowSelection","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableSimpleMultiRowSelection set to true, then the user can able to perform multiple row selection with single clicks.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableSimpleMultiRowSelection"}},{"Kind":"Components.Component","Name":"EnableToggle","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableToggle set to true, then the user can able to perform toggle for the selected row.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableToggle"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.Grids.SelectionMode","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the selection mode. Available modes are,.\n            <list type=\"bullet\">\n            <item>\n            <term>Row</term>\n            <description>Default. Row selection is enabled</description>\n            </item>\n            <item>\n            <term>Cell</term>\n            <description>Cell selection is enabled.</description>\n            </item>\n            <item>\n            <term>Both</term>\n            <description>Both Row and Cell selection is enabled.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Mode"}},{"Kind":"Components.Component","Name":"PersistSelection","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If PersistSelection set to true, then the Grid selection is persisted on all operations.\n            For persisting selection in the Grid, any one of the column must be enabled as a primary key.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PersistSelection"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Grids.SelectionType","IsEnum":true,"Documentation":"\n            <summary>\n            Defines options for selection type. They are.\n            <list type=\"bullet\">\n            <item>\n            <term>Single</term>\n            <description>Default. Allows selection of only a row or a cell.</description>\n            </item>\n            <item>\n            <term>Multiple</term>\n            <description>Allows user to select a multiple rows or cells.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"AllowDragSelection","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to enable selection of multiple rows and cells by dragging mouse.\n            </summary>\n            <value>\n            <c>true</c>, if the row and cell selection enabled when dragging mouse. Otherwise, false.\n            </value>\n            <remarks>\n            To perform drag selection in blazor grid, set <see cref=\"P:Syncfusion.Blazor.Grids.GridSelectionSettings.Type\" /> as should be <c>Multiple</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowDragSelection"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridSelectionSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2064831838,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridSortColumn","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid sort column.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridSortColumn"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Direction","TypeName":"Syncfusion.Blazor.Grids.SortDirection","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the direction of sort column. Available directions are,.\n            <list type=\"bullet\">\n            <item>\n            <term>Ascending</term>\n            <description>Default. Sorts records in ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>Sorts records in descending order.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Direction"}},{"Kind":"Components.Component","Name":"Field","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the field name of sort column.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Field"}},{"Kind":"Components.Component","Name":"IsFromGroup","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Defines the sorted column whether or from grouping operation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsFromGroup"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridSortColumn"}},{"HashCode":1527481185,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridSortColumn","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid sort column.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridSortColumn"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Direction","TypeName":"Syncfusion.Blazor.Grids.SortDirection","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the direction of sort column. Available directions are,.\n            <list type=\"bullet\">\n            <item>\n            <term>Ascending</term>\n            <description>Default. Sorts records in ascending order.</description>\n            </item>\n            <item>\n            <term>Descending</term>\n            <description>Sorts records in descending order.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Direction"}},{"Kind":"Components.Component","Name":"Field","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the field name of sort column.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Field"}},{"Kind":"Components.Component","Name":"IsFromGroup","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Defines the sorted column whether or from grouping operation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsFromGroup"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridSortColumn","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1468106685,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridSortColumns","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid sort columns.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridSortColumns"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridSortColumns"}},{"HashCode":-2071543880,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridSortColumns","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid sort columns.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridSortColumns"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridSortColumns","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2072079634,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridSortColumns.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridSortColumns"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridSortColumns.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1867608144,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridSortColumns.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridSortColumns"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridSortColumns.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":33657643,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridSortSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid sorting.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridSortSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowUnsort","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowUnsort set to false the user can not get the grid in unsorted state by clicking the sorted column header.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowUnsort"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridSortColumn>","Documentation":"\n            <summary>\n            Specifies the columns to sort at initial rendering of Grid.\n            Also user can get current sorted columns, use <see cref=\"T:Syncfusion.Blazor.Grids.GridSortColumn\" /> component\n            to set initial sort columns.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Columns"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridSortSettings"}},{"HashCode":1033093313,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridSortSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid sorting.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridSortSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowUnsort","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowUnsort set to false the user can not get the grid in unsorted state by clicking the sorted column header.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowUnsort"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridSortColumn>","Documentation":"\n            <summary>\n            Specifies the columns to sort at initial rendering of Grid.\n            Also user can get current sorted columns, use <see cref=\"T:Syncfusion.Blazor.Grids.GridSortColumn\" /> component\n            to set initial sort columns.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Columns"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridSortSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1831756664,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridSortSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridSortSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridSortSettings.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":879862495,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridSortSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridSortSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridSortSettings.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1485257792,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridTemplates","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid templates.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"RowTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the row template to customize row elements.\n            </summary>\n            <remarks>\n            The RowTemplate content must be TD elements and the number of TD elements must match the number of datagrid columns.\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"RowTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"DetailTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the template to customize detail row element.\n            </summary>\n            <remarks>\n            Use DetailTemplate to render hierarchy grid. It supports N level of nested grids.\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DetailTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"EmptyRecordTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Grids.EmptyRecordTemplateContext>","Documentation":"\n            <summary>\n            Gets or sets the template to customize empty grid row element.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.EmptyRecordTemplateContext\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EmptyRecordTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ToolbarTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Render custom toolbar using ToolbarTemplate property. It replaces the in-built toolbar\n            and click actions must be handled in custom toolbar itself.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ToolbarTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridTemplates"}},{"HashCode":-762305536,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridTemplates","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid templates.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"RowTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the row template to customize row elements.\n            </summary>\n            <remarks>\n            The RowTemplate content must be TD elements and the number of TD elements must match the number of datagrid columns.\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"RowTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"DetailTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the template to customize detail row element.\n            </summary>\n            <remarks>\n            Use DetailTemplate to render hierarchy grid. It supports N level of nested grids.\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DetailTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"EmptyRecordTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Grids.EmptyRecordTemplateContext>","Documentation":"\n            <summary>\n            Gets or sets the template to customize empty grid row element.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.EmptyRecordTemplateContext\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EmptyRecordTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ToolbarTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Render custom toolbar using ToolbarTemplate property. It replaces the in-built toolbar\n            and click actions must be handled in custom toolbar itself.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ToolbarTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridTemplates","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1521568315,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridTemplates.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridTemplates.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":212337888,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridTemplates.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridTemplates.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":557662952,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridTemplates.RowTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Gets or sets the row template to customize row elements.\n            </summary>\n            <remarks>\n            The RowTemplate content must be TD elements and the number of TD elements must match the number of datagrid columns.\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"RowTemplate","ParentTag":"GridTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'RowTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridTemplates.RowTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1064421174,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridTemplates.RowTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Gets or sets the row template to customize row elements.\n            </summary>\n            <remarks>\n            The RowTemplate content must be TD elements and the number of TD elements must match the number of datagrid columns.\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"RowTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'RowTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridTemplates.RowTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1568589729,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridTemplates.DetailTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Gets or sets the template to customize detail row element.\n            </summary>\n            <remarks>\n            Use DetailTemplate to render hierarchy grid. It supports N level of nested grids.\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DetailTemplate","ParentTag":"GridTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'DetailTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridTemplates.DetailTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-258915865,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridTemplates.DetailTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Gets or sets the template to customize detail row element.\n            </summary>\n            <remarks>\n            Use DetailTemplate to render hierarchy grid. It supports N level of nested grids.\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DetailTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'DetailTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridTemplates.DetailTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-256904900,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridTemplates.EmptyRecordTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Gets or sets the template to customize empty grid row element.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.EmptyRecordTemplateContext\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EmptyRecordTemplate","ParentTag":"GridTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'EmptyRecordTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridTemplates.EmptyRecordTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-638669600,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridTemplates.EmptyRecordTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Gets or sets the template to customize empty grid row element.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.EmptyRecordTemplateContext\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EmptyRecordTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'EmptyRecordTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridTemplates.EmptyRecordTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2081356974,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridTemplates.ToolbarTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Render custom toolbar using ToolbarTemplate property. It replaces the in-built toolbar\n            and click actions must be handled in custom toolbar itself.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ToolbarTemplate","ParentTag":"GridTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ToolbarTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridTemplates.ToolbarTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1168476177,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridTemplates.ToolbarTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Render custom toolbar using ToolbarTemplate property. It replaces the in-built toolbar\n            and click actions must be handled in custom toolbar itself.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ToolbarTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ToolbarTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridTemplates.ToolbarTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1354372765,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridTextWrapSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid text wrapping.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridTextWrapSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"WrapMode","TypeName":"Syncfusion.Blazor.Grids.WrapMode","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the WrapMode` of the Grid. The available modes are:\n            <list type=\"bullet\">\n            <item>\n            <term>Both</term>\n            <description>Default. Wraps both header and content.</description>\n            </item>\n            <item>\n            <term>Header</term>\n            <description>Wraps header alone.</description>\n            </item>\n            <item>\n            <term>Content</term>\n            <description>Wraps content alone.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WrapMode"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridTextWrapSettings"}},{"HashCode":1096051908,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridTextWrapSettings","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Configures grid text wrapping.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridTextWrapSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"WrapMode","TypeName":"Syncfusion.Blazor.Grids.WrapMode","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the WrapMode` of the Grid. The available modes are:\n            <list type=\"bullet\">\n            <item>\n            <term>Both</term>\n            <description>Default. Wraps both header and content.</description>\n            </item>\n            <item>\n            <term>Header</term>\n            <description>Wraps header alone.</description>\n            </item>\n            <item>\n            <term>Content</term>\n            <description>Wraps content alone.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"WrapMode"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridTextWrapSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1390316676,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.SfGrid<TValue>","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Blazor Grid component displays tabular data and it has in-built support for various data binding, editing,\n            sorting and filtering.\n            </summary>\n            <typeparam name=\"TValue\">A type which provides schema for the grid component.\n            </typeparam>\n            <remarks><c>TValue</c> is inferred from value of <c>DataSource</c> property if it is bounded with IEnumerable.\n            If data is consumed using <c>SfDataManager</c> then TValue must be assigned explicitly.</remarks>\n            <seealso cref=\"T:Syncfusion.Blazor.Data.SfDataManager\" />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfGrid"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Grids.SfGrid<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"UnMatchedAttributes","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Catches unmatched attributes from the component.\n            This can be used to specify custom style, class and other attributes to the grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"UnMatchedAttributes"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Aggregates","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridAggregate>","Documentation":"\n            <summary>\n            Gets the Grid aggregate rows. Use <see cref=\"T:Syncfusion.Blazor.Grids.GridAggregates\" /> component to configure\n            aggregate rows.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Aggregates"}},{"Kind":"Components.Component","Name":"AllowExcelExport","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowExcelExport set to true, then it will allow the user to export grid to Excel file.\n            </summary>\n            <remarks>\n            To perform excel export, bind <see cref=\"P:Syncfusion.Blazor.Grids.GridEvents`1.OnToolbarClick\" /> event and\n            invoke <see cref=\"M:Syncfusion.Blazor.Grids.SfGrid`1.ExcelExport(Syncfusion.Blazor.Grids.ExcelExportProperties,System.Nullable{System.Boolean},System.Object,System.Nullable{System.Boolean})\" /> method\n            in its toolbar item click handler.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowExcelExport"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowFiltering set to true the filter bar will be displayed for all columns.\n            If set to false the filter bar will not be displayed.\n            Filter bar allows the user to filter grid records with required criteria.\n            </summary>\n            <remarks>\n            Filter type  can be changed from filterbar using <see cref=\"P:Syncfusion.Blazor.Grids.GridFilterSettings.Type\" /> property.\n            Filter can be disabled for particular column by using  <see cref=\"P:Syncfusion.Blazor.Grids.GridColumn.AllowFiltering\" />.\n            <seealso cref=\"T:Syncfusion.Blazor.Grids.FilterType\" />\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering"}},{"Kind":"Components.Component","Name":"AllowGrouping","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowGrouping set to true, then it will allow the user to dynamically group or ungroup columns.\n            Grouping can be done by drag and drop columns from column header to group drop area.\n            </summary>\n            <remarks>\n            Grouping can be further configured using <see cref=\"T:Syncfusion.Blazor.Grids.GridGroupSettings\" /> component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowGrouping"}},{"Kind":"Components.Component","Name":"AllowMultiSorting","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowMultiSorting set to true, then it will allow the user to sort multiple column in the grid.\n            </summary>\n            <remarks>\n            <see cref=\"P:Syncfusion.Blazor.Grids.SfGrid`1.AllowSorting\" /> must be true to use this property.\n            Sorting can be further configured using <see cref=\"T:Syncfusion.Blazor.Grids.GridSortSettings\" /> component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowMultiSorting"}},{"Kind":"Components.Component","Name":"AllowPaging","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowPaging is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.\n            </summary>\n            <remarks>\n            Paging can be further configured using <see cref=\"T:Syncfusion.Blazor.Grids.GridPageSettings\" /> component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowPaging"}},{"Kind":"Components.Component","Name":"AllowPdfExport","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowPdfExport set to true, then it will allow the user to export grid to Pdf file.\n            </summary>\n            <remarks>\n            To perform pdf export, bind <see cref=\"P:Syncfusion.Blazor.Grids.GridEvents`1.OnToolbarClick\" /> event and\n            invoke <see cref=\"M:Syncfusion.Blazor.Grids.SfGrid`1.PdfExport(Syncfusion.Blazor.Grids.PdfExportProperties,System.Nullable{System.Boolean},System.Object,System.Nullable{System.Boolean})\" /> method\n            in its toolbar item click handler.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowPdfExport"}},{"Kind":"Components.Component","Name":"AllowReordering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowReordering is set to true, Grid columns can be reordered.\n            Reordering can be done by drag and drop of a particular column from one index to another index.\n            </summary>\n            <remarks>\n            If Grid is rendered with stacked headers, reordering is allowed only at the same level as the column headers.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowReordering"}},{"Kind":"Components.Component","Name":"AllowResizing","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowResizing is set to true, Grid columns can be resized.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowResizing"}},{"Kind":"Components.Component","Name":"AllowRowDragAndDrop","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowRowDragAndDrop is set to true, you can drag and drop grid rows at another or within grid.\n            </summary>\n            <remarks>\n            To drag and drop rows between grids or to another component, <see cref=\"P:Syncfusion.Blazor.Grids.GridRowDropSettings.TargetID\" /> property should be provided\n            with the ID of the target grid or any other component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowRowDragAndDrop"}},{"Kind":"Components.Component","Name":"AllowSelection","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowSelection is set to true, it allows selection of (highlight row) Grid records by clicking it.\n            </summary>\n            <remarks>\n            Selection can be further configured using <see cref=\"T:Syncfusion.Blazor.Grids.GridSelectionSettings\" /> component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowSelection"}},{"Kind":"Components.Component","Name":"AllowSorting","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowSorting is set to true, it allows sorting of grid records when column header is clicked.\n            </summary>\n            <remarks>\n            Sorting can be further configured using <see cref=\"T:Syncfusion.Blazor.Grids.GridSortSettings\" /> component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowSorting"}},{"Kind":"Components.Component","Name":"AllowTextWrap","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowTextWrap set to true,\n            then text content will wrap to the next line when its text content exceeds the width of the Column Cells.\n            </summary>\n            <remarks>\n            Text wrap can be further configured using <see cref=\"T:Syncfusion.Blazor.Grids.GridTextWrapSettings\" /> component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowTextWrap"}},{"Kind":"Components.Component","Name":"ClipMode","TypeName":"Syncfusion.Blazor.Grids.ClipMode","IsEnum":true,"Documentation":"\n            <summary>\n             Defines the mode of clip. The available modes are,.\n            <list type=\"bullet\">\n            <item>\n            <term>Clip</term>\n            <description>Truncates the cell content when it overflows its area.</description>\n            </item>\n            <item>\n            <term>Ellipsis</term>\n            <description>Displays ellipsis when the cell content overflows its area.</description>\n            </item>\n            <item>\n            <term>EllipsisWithTooltip</term>\n            <description>Displays ellipsis when the cell content overflows its area also it will display tooltip while hover on ellipsis applied cell.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ClipMode"}},{"Kind":"Components.Component","Name":"ColumnChooserSettings","TypeName":"Syncfusion.Blazor.Grids.GridColumnChooserSettings","Documentation":"\n            <summary>\n            Configures the column chooser in the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ColumnChooserSettings"}},{"Kind":"Components.Component","Name":"KeySettings","TypeName":"Syncfusion.Blazor.Grids.GridKeySettings","Documentation":"\n            <summary>\n            Configures the cell movement keys in the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeySettings"}},{"Kind":"Components.Component","Name":"ColumnMenuItems","TypeName":"System.Object","Documentation":"\n             <summary>\n             ColumnMenuItems defines both built-in and custom column menu items.\n            \n             The available built-in items are,\n              AutoFitAll - Auto fit the size of all columns.\n              AutoFit - Auto fit the current column.\n              Group - Group by current column.\n              Ungroup - Ungroup by current column.\n              SortAscending - Sort the current column in ascending order.\n              SortDescending - Sort the current column in descending order.\n              Filter - Filter options will show based on filterSettings property like checkbox filter, excel filter, menu filter.\n             </summary>\n        ","Metadata":{"Common.PropertyName":"ColumnMenuItems"}},{"Kind":"Components.Component","Name":"ColumnQueryMode","TypeName":"Syncfusion.Blazor.Grids.ColumnQueryModeType","IsEnum":true,"Documentation":"\n            <summary>\n            ColumnQueryModeprovides options to retrive data from the datasource.\n            <list type=\"bullet\">\n            <item>\n            <term>All</term>\n            <description>It retrives whole data source</description>\n            </item>\n            <item>\n            <term>Schema</term>\n            <description>Retrives data for all the defined columns in grid from the data source.</description>\n            </item>\n            <item>\n            <term>ExcludeHidden</term>\n            <description>Retrives data only for visible columns of grid from the data source.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ColumnQueryMode"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridColumn>","Documentation":"\n            <summary>\n            Defines the schema of data source. Use <see cref=\"T:Syncfusion.Blazor.Grids.GridColumns\" /> to add grid columns.\n            If the Columns declaration is empty or undefined then the columns are automatically generated from data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Columns"}},{"Kind":"Components.Component","Name":"ContextMenuItems","TypeName":"System.Object","Documentation":"\n             <summary>\n             ContextMenuItems defines both built-in and custom context menu items.\n            \n             The available built-in items are,\n              AutoFitAll - Auto fit the size of all columns.\n              AutoFit - Auto fit the current column.\n              Group - Group by current column.\n              Ungroup - Ungroup by current column.\n              Edit - Edit the current record.\n              Delete - Delete the current record.\n              Save - Save the edited record.\n              Cancel - Cancel the edited state.\n              Copy - Copy the selected records.\n              PdfExport - Export the grid as Pdf format.\n              ExcelExport - Export the grid as Excel format.\n              CsvExport - Export the grid as CSV format.\n              SortAscending - Sort the current column in ascending order.\n              SortDescending - Sort the current column in descending order.\n              FirstPage - Go to the first page.\n              PrevPage - Go to the previous page.\n              LastPage - Go to the last page.\n              NextPage - Go to the next page.\n             </summary>\n        ","Metadata":{"Common.PropertyName":"ContextMenuItems"}},{"Kind":"Components.Component","Name":"CurrentAction","TypeName":"Syncfusion.Blazor.Grids.ActionArgs","Documentation":"\n            <summary>\n            Gets or sets the current action details.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CurrentAction"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Provides the data source for rendering grid rows. The data source value can be of any type\n            that implements IEnumerable.\n            </summary>\n            <remarks>\n            To consume data from remote service or custom adaptor,\n            <see cref=\"T:Syncfusion.Blazor.Data.SfDataManager\" /> component has to be used.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DataSourceChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.IEnumerable<TValue>>","Documentation":"\n            <summary>\n            Invokes when data source changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSourceChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"EnableAdaptiveUI","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Render the Grid component as Adaptive mode based on Parent element. Also, it's render's the Grid filter, sorting and editing dialogs adaptively\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableAdaptiveUI"}},{"Kind":"Components.Component","Name":"AdaptiveUIMode","TypeName":"Syncfusion.Blazor.Grids.AdaptiveMode","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the Adaptive mode in grid. Setting this as both will render adaptive layout for both mobile and desktop, for Mobile - render adaptive layout only for smaller devices, for Desktop - render adaptive layout only for desktop. Also, it render's the Grid filter, sorting and editing dialogs adaptively.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdaptiveUIMode"}},{"Kind":"Components.Component","Name":"EditSettings","TypeName":"Syncfusion.Blazor.Grids.GridEditSettings","Documentation":"\n            <summary>\n            Configures the edit settings.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EditSettings"}},{"Kind":"Components.Component","Name":"EnableAltRow","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableAltRow is set to true, the grid will render with e-altrow CSS class to the alternative tr elements.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableAltRow"}},{"Kind":"Components.Component","Name":"EnableAutoFill","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableAutoFill is set to true, then the auto fill icon will displayed on cell selection for copy cells.\n            It requires the selection mode to be Cell and CellSelectionMode to be Box.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableAutoFill"}},{"Kind":"Components.Component","Name":"EnableColumnVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableColumnVirtualization set to true, then the Grid will render only the columns visible within the view-port\n            and load subsequent columns on horizontal scrolling. This helps to load large dataset of columns in Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableColumnVirtualization"}},{"Kind":"Components.Component","Name":"EnableHeaderFocus","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableHeaderFocus set to true, then header element will be focused when focus moves to grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableHeaderFocus"}},{"Kind":"Components.Component","Name":"EnableVirtualMaskRow","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableMastRow set to true the Masked row append in the DOM elements.\n            If set to false default virtual scrolling will work while enabling Enable Virtualization.\n            In this feature Masked cells displayed until data cells retrieve.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualMaskRow"}},{"Kind":"Components.Component","Name":"EnableHover","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableHover is set to true, the row hover is enabled in the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableHover"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable persisting component's state between page reloads.\n            </summary>\n            <remarks>\n            Enabling this property will store the grid state such as column order, column width, sort information etc in the\n            window.localStorage when the component is disposed.\n            Users can also store grid state in data base instead of window.localStorage by using <see cref=\"M:Syncfusion.Blazor.Grids.SfGrid`1.GetPersistData\" /> method.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"EnableStickyHeader","TypeName":"System.Boolean","Documentation":"\n             <summary>\n             Sets the grid headers will be sticky, while scrolling the Grid's Parent div element.\n             </summary>\n             <value>\n             <b>true</b> then the user can able to make the column headers visible, when the document is scrolled; otherwise, <b>false</b>. By default, the property value is false.\n             </value>\n             <example>\n             <code><![CDATA[\n            <SfGrid EnableStickyHeader=true>\n             ......\n            </SfGrid>\n             ]]>\n             </code>\n             </example>\n        ","Metadata":{"Common.PropertyName":"EnableStickyHeader"}},{"Kind":"Components.Component","Name":"EnableVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableVirtualization set to true, then the Grid will render only the rows visible within the view-port\n            and load subsequent rows on vertical scrolling. This helps to load large dataset in Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualization"}},{"Kind":"Components.Component","Name":"FilterSettings","TypeName":"Syncfusion.Blazor.Grids.GridFilterSettings","Documentation":"\n            <summary>\n            Configures the filter settings of the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FilterSettings"}},{"Kind":"Components.Component","Name":"FrozenColumns","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the number of frozen columns.\n            </summary>\n            <remarks>Specific column can be frozen using <see cref=\"P:Syncfusion.Blazor.Grids.GridColumn.IsFrozen\" /> property.</remarks>\n        ","Metadata":{"Common.PropertyName":"FrozenColumns"}},{"Kind":"Components.Component","Name":"AllowFreezeLineMoving","TypeName":"System.Boolean","Documentation":"\n             <summary>\n             Gets or sets whether allow the user to move the frozen line by dragging and dropping it.\n             </summary>\n             <value>\n             <b>true</b> if allowed to adjust freeze line; otherwise, <b>false</b>.  By default, the property value is false.\n             </value>\n             <remarks>\n             Enable FreezeLineMoving property that helps to increase/decrease the frozen columns by drag-and-drop the freeze bar between columns.\n             </remarks>\n             <example>\n             <code><![CDATA[\n            <SfGrid AllowFreezeLineMoving=true FrozenColumns=\"2\" Height=\"500\" Width=\"500\">\n             ..\n            </SfGrid>\n             ]]>\n             </code>\n             </example>\n        ","Metadata":{"Common.PropertyName":"AllowFreezeLineMoving"}},{"Kind":"Components.Component","Name":"FrozenRows","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the number of frozen rows.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FrozenRows"}},{"Kind":"Components.Component","Name":"GridLines","TypeName":"Syncfusion.Blazor.Grids.GridLine","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the mode of grid lines. The available modes are,.\n            <list type=\"bullet\">\n            <item>\n            <term>Both</term>\n            <description>Displays both the horizontal and vertical grid lines.</description>\n            </item>\n            <item>\n            <term>None</term>\n            <description>No grid lines are displayed.</description>\n            </item>\n            <item>\n            <term>Horizontal</term>\n            <description>Displays the horizontal grid lines only.</description>\n            </item>\n            <item>\n            <term>Vertical</term>\n            <description>Displays grid lines based on the theme.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GridLines"}},{"Kind":"Components.Component","Name":"GroupSettings","TypeName":"Syncfusion.Blazor.Grids.GridGroupSettings","Documentation":"\n            <summary>\n            Configures the group settings.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupSettings"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the scrollable height of the grid content.\n            </summary>\n            <remarks>\n            Height can be assigned with pixel and percentage values such as 100px, 100% etc.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Height"}},{"Kind":"Components.Component","Name":"HierarchyPrintMode","TypeName":"Syncfusion.Blazor.Grids.HierarchyGridPrintMode","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the hierarchy grid print modes. The available modes are.\n            <list type=\"bullet\">\n            <item>\n            <term>Expanded</term>\n            <description>Prints the master grid with expanded child grids.</description>\n            </item>\n            <item>\n            <term>All</term>\n            <description>Prints the master grid with all the child grids.</description>\n            </item>\n            <item>\n            <term>None</term>\n            <description>Prints the master grid alone.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HierarchyPrintMode"}},{"Kind":"Components.Component","Name":"PageSettings","TypeName":"Syncfusion.Blazor.Grids.GridPageSettings","Documentation":"\n            <summary>\n            Configures the pager in the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PageSettings"}},{"Kind":"Components.Component","Name":"PrintMode","TypeName":"Syncfusion.Blazor.Grids.PrintMode","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the print modes. The available print modes are.\n            <list type=\"bullet\">\n            <item>\n            <term>AllPages</term>\n            <description>Print all pages records of the Grid.</description>\n            </item>\n            <item>\n            <term>CurrentPage</term>\n            <description>Print current page records of the Grid.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PrintMode"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Defines the external Query\n            that will be executed along with data processing.\n            </summary>\n            <remarks>\n            Additional parameters can be send along with request\n            by using <see cref=\"M:Syncfusion.Blazor.Data.Query.AddParams(System.String,System.Object)\" /> method.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Query"}},{"Kind":"Components.Component","Name":"RowDropSettings","TypeName":"Syncfusion.Blazor.Grids.GridRowDropSettings","Documentation":"\n            <summary>\n            Configures the row drop settings.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RowDropSettings"}},{"Kind":"Components.Component","Name":"RowHeight","TypeName":"System.Double","Documentation":"\n            <summary>\n            Defines the height of Grid rows.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RowHeight"}},{"Kind":"Components.Component","Name":"RowRenderingMode","TypeName":"Syncfusion.Blazor.Grids.RowDirection","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the row rendering mode in grid. Setting this in vertical mode will render rows vertically with headers in the same row which suits better to use grid in small screens. In vertical row rendering mode, limited features are supported like filtering,sorting, Dialog editing, Selection, Searching and Row virtualization. \n            </summary>\n        ","Metadata":{"Common.PropertyName":"RowRenderingMode"}},{"Kind":"Components.Component","Name":"SearchSettings","TypeName":"Syncfusion.Blazor.Grids.GridSearchSettings","Documentation":"\n            <summary>\n            Configures the search behavior in the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SearchSettings"}},{"Kind":"Components.Component","Name":"SelectedRowIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the index of the row that is selected in the Grid.\n            </summary>\n            <value>\n            The index of the selected row.\n            </value>\n            <remarks>\n            The SelectedRowIndex property allows you to specify the index of the row that should be selected when the Grid is initially rendered. The property value is updated dynamically as the user selects other rows in the Grid, allowing you to keep track of the currently selected row.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"SelectedRowIndex"}},{"Kind":"Components.Component","Name":"SelectionSettings","TypeName":"Syncfusion.Blazor.Grids.GridSelectionSettings","Documentation":"\n            <summary>\n            Configures the selection settings.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectionSettings"}},{"Kind":"Components.Component","Name":"ShowColumnChooser","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowColumnChooser is set to true, it allows you to dynamically show or hide columns.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowColumnChooser"}},{"Kind":"Components.Component","Name":"ShowColumnMenu","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowColumnMenu set to true, then it will enable the column menu options in each columns.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowColumnMenu"}},{"Kind":"Components.Component","Name":"SortSettings","TypeName":"Syncfusion.Blazor.Grids.GridSortSettings","Documentation":"\n            <summary>\n            Configures the sort settings.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SortSettings"}},{"Kind":"Components.Component","Name":"TextWrapSettings","TypeName":"Syncfusion.Blazor.Grids.GridTextWrapSettings","Documentation":"\n            <summary>\n            Configures the text wrap in the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TextWrapSettings"}},{"Kind":"Components.Component","Name":"Toolbar","TypeName":"System.Object","Documentation":"\n            <summary>\n            Toolbar defines the ToolBar items of the Grid.\n            It contains built-in and custom toolbar items.\n            </summary>\n            <remarks>\n            If an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n            In some cases user may want to use custom toolbar instead of custom item, in such cases user can use\n            <see cref=\"P:Syncfusion.Blazor.Grids.GridTemplates.ToolbarTemplate\" /> property to provide custom toolbar.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Toolbar"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the Grid width.\n            </summary>\n            <remarks>\n            Width can be assigned with pixel and percentage values such as 100px, 100% etc.\n            When the sum of total column width exceeds this value then the browser horizontal scrollbar will be displayed.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Width"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.SfGrid<TValue>","Components.GenericTyped":"True"}},{"HashCode":-2044838119,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.SfGrid<TValue>","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Blazor Grid component displays tabular data and it has in-built support for various data binding, editing,\n            sorting and filtering.\n            </summary>\n            <typeparam name=\"TValue\">A type which provides schema for the grid component.\n            </typeparam>\n            <remarks><c>TValue</c> is inferred from value of <c>DataSource</c> property if it is bounded with IEnumerable.\n            If data is consumed using <c>SfDataManager</c> then TValue must be assigned explicitly.</remarks>\n            <seealso cref=\"T:Syncfusion.Blazor.Data.SfDataManager\" />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.SfGrid"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Grids.SfGrid<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"UnMatchedAttributes","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Catches unmatched attributes from the component.\n            This can be used to specify custom style, class and other attributes to the grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"UnMatchedAttributes"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Aggregates","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridAggregate>","Documentation":"\n            <summary>\n            Gets the Grid aggregate rows. Use <see cref=\"T:Syncfusion.Blazor.Grids.GridAggregates\" /> component to configure\n            aggregate rows.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Aggregates"}},{"Kind":"Components.Component","Name":"AllowExcelExport","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowExcelExport set to true, then it will allow the user to export grid to Excel file.\n            </summary>\n            <remarks>\n            To perform excel export, bind <see cref=\"P:Syncfusion.Blazor.Grids.GridEvents`1.OnToolbarClick\" /> event and\n            invoke <see cref=\"M:Syncfusion.Blazor.Grids.SfGrid`1.ExcelExport(Syncfusion.Blazor.Grids.ExcelExportProperties,System.Nullable{System.Boolean},System.Object,System.Nullable{System.Boolean})\" /> method\n            in its toolbar item click handler.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowExcelExport"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowFiltering set to true the filter bar will be displayed for all columns.\n            If set to false the filter bar will not be displayed.\n            Filter bar allows the user to filter grid records with required criteria.\n            </summary>\n            <remarks>\n            Filter type  can be changed from filterbar using <see cref=\"P:Syncfusion.Blazor.Grids.GridFilterSettings.Type\" /> property.\n            Filter can be disabled for particular column by using  <see cref=\"P:Syncfusion.Blazor.Grids.GridColumn.AllowFiltering\" />.\n            <seealso cref=\"T:Syncfusion.Blazor.Grids.FilterType\" />\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering"}},{"Kind":"Components.Component","Name":"AllowGrouping","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowGrouping set to true, then it will allow the user to dynamically group or ungroup columns.\n            Grouping can be done by drag and drop columns from column header to group drop area.\n            </summary>\n            <remarks>\n            Grouping can be further configured using <see cref=\"T:Syncfusion.Blazor.Grids.GridGroupSettings\" /> component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowGrouping"}},{"Kind":"Components.Component","Name":"AllowMultiSorting","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowMultiSorting set to true, then it will allow the user to sort multiple column in the grid.\n            </summary>\n            <remarks>\n            <see cref=\"P:Syncfusion.Blazor.Grids.SfGrid`1.AllowSorting\" /> must be true to use this property.\n            Sorting can be further configured using <see cref=\"T:Syncfusion.Blazor.Grids.GridSortSettings\" /> component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowMultiSorting"}},{"Kind":"Components.Component","Name":"AllowPaging","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowPaging is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.\n            </summary>\n            <remarks>\n            Paging can be further configured using <see cref=\"T:Syncfusion.Blazor.Grids.GridPageSettings\" /> component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowPaging"}},{"Kind":"Components.Component","Name":"AllowPdfExport","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowPdfExport set to true, then it will allow the user to export grid to Pdf file.\n            </summary>\n            <remarks>\n            To perform pdf export, bind <see cref=\"P:Syncfusion.Blazor.Grids.GridEvents`1.OnToolbarClick\" /> event and\n            invoke <see cref=\"M:Syncfusion.Blazor.Grids.SfGrid`1.PdfExport(Syncfusion.Blazor.Grids.PdfExportProperties,System.Nullable{System.Boolean},System.Object,System.Nullable{System.Boolean})\" /> method\n            in its toolbar item click handler.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowPdfExport"}},{"Kind":"Components.Component","Name":"AllowReordering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowReordering is set to true, Grid columns can be reordered.\n            Reordering can be done by drag and drop of a particular column from one index to another index.\n            </summary>\n            <remarks>\n            If Grid is rendered with stacked headers, reordering is allowed only at the same level as the column headers.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowReordering"}},{"Kind":"Components.Component","Name":"AllowResizing","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowResizing is set to true, Grid columns can be resized.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowResizing"}},{"Kind":"Components.Component","Name":"AllowRowDragAndDrop","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowRowDragAndDrop is set to true, you can drag and drop grid rows at another or within grid.\n            </summary>\n            <remarks>\n            To drag and drop rows between grids or to another component, <see cref=\"P:Syncfusion.Blazor.Grids.GridRowDropSettings.TargetID\" /> property should be provided\n            with the ID of the target grid or any other component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowRowDragAndDrop"}},{"Kind":"Components.Component","Name":"AllowSelection","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowSelection is set to true, it allows selection of (highlight row) Grid records by clicking it.\n            </summary>\n            <remarks>\n            Selection can be further configured using <see cref=\"T:Syncfusion.Blazor.Grids.GridSelectionSettings\" /> component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowSelection"}},{"Kind":"Components.Component","Name":"AllowSorting","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowSorting is set to true, it allows sorting of grid records when column header is clicked.\n            </summary>\n            <remarks>\n            Sorting can be further configured using <see cref=\"T:Syncfusion.Blazor.Grids.GridSortSettings\" /> component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowSorting"}},{"Kind":"Components.Component","Name":"AllowTextWrap","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowTextWrap set to true,\n            then text content will wrap to the next line when its text content exceeds the width of the Column Cells.\n            </summary>\n            <remarks>\n            Text wrap can be further configured using <see cref=\"T:Syncfusion.Blazor.Grids.GridTextWrapSettings\" /> component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowTextWrap"}},{"Kind":"Components.Component","Name":"ClipMode","TypeName":"Syncfusion.Blazor.Grids.ClipMode","IsEnum":true,"Documentation":"\n            <summary>\n             Defines the mode of clip. The available modes are,.\n            <list type=\"bullet\">\n            <item>\n            <term>Clip</term>\n            <description>Truncates the cell content when it overflows its area.</description>\n            </item>\n            <item>\n            <term>Ellipsis</term>\n            <description>Displays ellipsis when the cell content overflows its area.</description>\n            </item>\n            <item>\n            <term>EllipsisWithTooltip</term>\n            <description>Displays ellipsis when the cell content overflows its area also it will display tooltip while hover on ellipsis applied cell.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ClipMode"}},{"Kind":"Components.Component","Name":"ColumnChooserSettings","TypeName":"Syncfusion.Blazor.Grids.GridColumnChooserSettings","Documentation":"\n            <summary>\n            Configures the column chooser in the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ColumnChooserSettings"}},{"Kind":"Components.Component","Name":"KeySettings","TypeName":"Syncfusion.Blazor.Grids.GridKeySettings","Documentation":"\n            <summary>\n            Configures the cell movement keys in the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"KeySettings"}},{"Kind":"Components.Component","Name":"ColumnMenuItems","TypeName":"System.Object","Documentation":"\n             <summary>\n             ColumnMenuItems defines both built-in and custom column menu items.\n            \n             The available built-in items are,\n              AutoFitAll - Auto fit the size of all columns.\n              AutoFit - Auto fit the current column.\n              Group - Group by current column.\n              Ungroup - Ungroup by current column.\n              SortAscending - Sort the current column in ascending order.\n              SortDescending - Sort the current column in descending order.\n              Filter - Filter options will show based on filterSettings property like checkbox filter, excel filter, menu filter.\n             </summary>\n        ","Metadata":{"Common.PropertyName":"ColumnMenuItems"}},{"Kind":"Components.Component","Name":"ColumnQueryMode","TypeName":"Syncfusion.Blazor.Grids.ColumnQueryModeType","IsEnum":true,"Documentation":"\n            <summary>\n            ColumnQueryModeprovides options to retrive data from the datasource.\n            <list type=\"bullet\">\n            <item>\n            <term>All</term>\n            <description>It retrives whole data source</description>\n            </item>\n            <item>\n            <term>Schema</term>\n            <description>Retrives data for all the defined columns in grid from the data source.</description>\n            </item>\n            <item>\n            <term>ExcludeHidden</term>\n            <description>Retrives data only for visible columns of grid from the data source.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ColumnQueryMode"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridColumn>","Documentation":"\n            <summary>\n            Defines the schema of data source. Use <see cref=\"T:Syncfusion.Blazor.Grids.GridColumns\" /> to add grid columns.\n            If the Columns declaration is empty or undefined then the columns are automatically generated from data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Columns"}},{"Kind":"Components.Component","Name":"ContextMenuItems","TypeName":"System.Object","Documentation":"\n             <summary>\n             ContextMenuItems defines both built-in and custom context menu items.\n            \n             The available built-in items are,\n              AutoFitAll - Auto fit the size of all columns.\n              AutoFit - Auto fit the current column.\n              Group - Group by current column.\n              Ungroup - Ungroup by current column.\n              Edit - Edit the current record.\n              Delete - Delete the current record.\n              Save - Save the edited record.\n              Cancel - Cancel the edited state.\n              Copy - Copy the selected records.\n              PdfExport - Export the grid as Pdf format.\n              ExcelExport - Export the grid as Excel format.\n              CsvExport - Export the grid as CSV format.\n              SortAscending - Sort the current column in ascending order.\n              SortDescending - Sort the current column in descending order.\n              FirstPage - Go to the first page.\n              PrevPage - Go to the previous page.\n              LastPage - Go to the last page.\n              NextPage - Go to the next page.\n             </summary>\n        ","Metadata":{"Common.PropertyName":"ContextMenuItems"}},{"Kind":"Components.Component","Name":"CurrentAction","TypeName":"Syncfusion.Blazor.Grids.ActionArgs","Documentation":"\n            <summary>\n            Gets or sets the current action details.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CurrentAction"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Provides the data source for rendering grid rows. The data source value can be of any type\n            that implements IEnumerable.\n            </summary>\n            <remarks>\n            To consume data from remote service or custom adaptor,\n            <see cref=\"T:Syncfusion.Blazor.Data.SfDataManager\" /> component has to be used.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DataSourceChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.IEnumerable<TValue>>","Documentation":"\n            <summary>\n            Invokes when data source changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSourceChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"EnableAdaptiveUI","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Render the Grid component as Adaptive mode based on Parent element. Also, it's render's the Grid filter, sorting and editing dialogs adaptively\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableAdaptiveUI"}},{"Kind":"Components.Component","Name":"AdaptiveUIMode","TypeName":"Syncfusion.Blazor.Grids.AdaptiveMode","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the Adaptive mode in grid. Setting this as both will render adaptive layout for both mobile and desktop, for Mobile - render adaptive layout only for smaller devices, for Desktop - render adaptive layout only for desktop. Also, it render's the Grid filter, sorting and editing dialogs adaptively.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AdaptiveUIMode"}},{"Kind":"Components.Component","Name":"EditSettings","TypeName":"Syncfusion.Blazor.Grids.GridEditSettings","Documentation":"\n            <summary>\n            Configures the edit settings.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EditSettings"}},{"Kind":"Components.Component","Name":"EnableAltRow","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableAltRow is set to true, the grid will render with e-altrow CSS class to the alternative tr elements.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableAltRow"}},{"Kind":"Components.Component","Name":"EnableAutoFill","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableAutoFill is set to true, then the auto fill icon will displayed on cell selection for copy cells.\n            It requires the selection mode to be Cell and CellSelectionMode to be Box.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableAutoFill"}},{"Kind":"Components.Component","Name":"EnableColumnVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableColumnVirtualization set to true, then the Grid will render only the columns visible within the view-port\n            and load subsequent columns on horizontal scrolling. This helps to load large dataset of columns in Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableColumnVirtualization"}},{"Kind":"Components.Component","Name":"EnableHeaderFocus","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableHeaderFocus set to true, then header element will be focused when focus moves to grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableHeaderFocus"}},{"Kind":"Components.Component","Name":"EnableVirtualMaskRow","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableMastRow set to true the Masked row append in the DOM elements.\n            If set to false default virtual scrolling will work while enabling Enable Virtualization.\n            In this feature Masked cells displayed until data cells retrieve.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualMaskRow"}},{"Kind":"Components.Component","Name":"EnableHover","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableHover is set to true, the row hover is enabled in the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableHover"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable persisting component's state between page reloads.\n            </summary>\n            <remarks>\n            Enabling this property will store the grid state such as column order, column width, sort information etc in the\n            window.localStorage when the component is disposed.\n            Users can also store grid state in data base instead of window.localStorage by using <see cref=\"M:Syncfusion.Blazor.Grids.SfGrid`1.GetPersistData\" /> method.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"EnableStickyHeader","TypeName":"System.Boolean","Documentation":"\n             <summary>\n             Sets the grid headers will be sticky, while scrolling the Grid's Parent div element.\n             </summary>\n             <value>\n             <b>true</b> then the user can able to make the column headers visible, when the document is scrolled; otherwise, <b>false</b>. By default, the property value is false.\n             </value>\n             <example>\n             <code><![CDATA[\n            <SfGrid EnableStickyHeader=true>\n             ......\n            </SfGrid>\n             ]]>\n             </code>\n             </example>\n        ","Metadata":{"Common.PropertyName":"EnableStickyHeader"}},{"Kind":"Components.Component","Name":"EnableVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableVirtualization set to true, then the Grid will render only the rows visible within the view-port\n            and load subsequent rows on vertical scrolling. This helps to load large dataset in Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualization"}},{"Kind":"Components.Component","Name":"FilterSettings","TypeName":"Syncfusion.Blazor.Grids.GridFilterSettings","Documentation":"\n            <summary>\n            Configures the filter settings of the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FilterSettings"}},{"Kind":"Components.Component","Name":"FrozenColumns","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the number of frozen columns.\n            </summary>\n            <remarks>Specific column can be frozen using <see cref=\"P:Syncfusion.Blazor.Grids.GridColumn.IsFrozen\" /> property.</remarks>\n        ","Metadata":{"Common.PropertyName":"FrozenColumns"}},{"Kind":"Components.Component","Name":"AllowFreezeLineMoving","TypeName":"System.Boolean","Documentation":"\n             <summary>\n             Gets or sets whether allow the user to move the frozen line by dragging and dropping it.\n             </summary>\n             <value>\n             <b>true</b> if allowed to adjust freeze line; otherwise, <b>false</b>.  By default, the property value is false.\n             </value>\n             <remarks>\n             Enable FreezeLineMoving property that helps to increase/decrease the frozen columns by drag-and-drop the freeze bar between columns.\n             </remarks>\n             <example>\n             <code><![CDATA[\n            <SfGrid AllowFreezeLineMoving=true FrozenColumns=\"2\" Height=\"500\" Width=\"500\">\n             ..\n            </SfGrid>\n             ]]>\n             </code>\n             </example>\n        ","Metadata":{"Common.PropertyName":"AllowFreezeLineMoving"}},{"Kind":"Components.Component","Name":"FrozenRows","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the number of frozen rows.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"FrozenRows"}},{"Kind":"Components.Component","Name":"GridLines","TypeName":"Syncfusion.Blazor.Grids.GridLine","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the mode of grid lines. The available modes are,.\n            <list type=\"bullet\">\n            <item>\n            <term>Both</term>\n            <description>Displays both the horizontal and vertical grid lines.</description>\n            </item>\n            <item>\n            <term>None</term>\n            <description>No grid lines are displayed.</description>\n            </item>\n            <item>\n            <term>Horizontal</term>\n            <description>Displays the horizontal grid lines only.</description>\n            </item>\n            <item>\n            <term>Vertical</term>\n            <description>Displays grid lines based on the theme.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GridLines"}},{"Kind":"Components.Component","Name":"GroupSettings","TypeName":"Syncfusion.Blazor.Grids.GridGroupSettings","Documentation":"\n            <summary>\n            Configures the group settings.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupSettings"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the scrollable height of the grid content.\n            </summary>\n            <remarks>\n            Height can be assigned with pixel and percentage values such as 100px, 100% etc.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Height"}},{"Kind":"Components.Component","Name":"HierarchyPrintMode","TypeName":"Syncfusion.Blazor.Grids.HierarchyGridPrintMode","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the hierarchy grid print modes. The available modes are.\n            <list type=\"bullet\">\n            <item>\n            <term>Expanded</term>\n            <description>Prints the master grid with expanded child grids.</description>\n            </item>\n            <item>\n            <term>All</term>\n            <description>Prints the master grid with all the child grids.</description>\n            </item>\n            <item>\n            <term>None</term>\n            <description>Prints the master grid alone.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HierarchyPrintMode"}},{"Kind":"Components.Component","Name":"PageSettings","TypeName":"Syncfusion.Blazor.Grids.GridPageSettings","Documentation":"\n            <summary>\n            Configures the pager in the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PageSettings"}},{"Kind":"Components.Component","Name":"PrintMode","TypeName":"Syncfusion.Blazor.Grids.PrintMode","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the print modes. The available print modes are.\n            <list type=\"bullet\">\n            <item>\n            <term>AllPages</term>\n            <description>Print all pages records of the Grid.</description>\n            </item>\n            <item>\n            <term>CurrentPage</term>\n            <description>Print current page records of the Grid.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PrintMode"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            Defines the external Query\n            that will be executed along with data processing.\n            </summary>\n            <remarks>\n            Additional parameters can be send along with request\n            by using <see cref=\"M:Syncfusion.Blazor.Data.Query.AddParams(System.String,System.Object)\" /> method.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Query"}},{"Kind":"Components.Component","Name":"RowDropSettings","TypeName":"Syncfusion.Blazor.Grids.GridRowDropSettings","Documentation":"\n            <summary>\n            Configures the row drop settings.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RowDropSettings"}},{"Kind":"Components.Component","Name":"RowHeight","TypeName":"System.Double","Documentation":"\n            <summary>\n            Defines the height of Grid rows.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RowHeight"}},{"Kind":"Components.Component","Name":"RowRenderingMode","TypeName":"Syncfusion.Blazor.Grids.RowDirection","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the row rendering mode in grid. Setting this in vertical mode will render rows vertically with headers in the same row which suits better to use grid in small screens. In vertical row rendering mode, limited features are supported like filtering,sorting, Dialog editing, Selection, Searching and Row virtualization. \n            </summary>\n        ","Metadata":{"Common.PropertyName":"RowRenderingMode"}},{"Kind":"Components.Component","Name":"SearchSettings","TypeName":"Syncfusion.Blazor.Grids.GridSearchSettings","Documentation":"\n            <summary>\n            Configures the search behavior in the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SearchSettings"}},{"Kind":"Components.Component","Name":"SelectedRowIndex","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets the index of the row that is selected in the Grid.\n            </summary>\n            <value>\n            The index of the selected row.\n            </value>\n            <remarks>\n            The SelectedRowIndex property allows you to specify the index of the row that should be selected when the Grid is initially rendered. The property value is updated dynamically as the user selects other rows in the Grid, allowing you to keep track of the currently selected row.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"SelectedRowIndex"}},{"Kind":"Components.Component","Name":"SelectionSettings","TypeName":"Syncfusion.Blazor.Grids.GridSelectionSettings","Documentation":"\n            <summary>\n            Configures the selection settings.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectionSettings"}},{"Kind":"Components.Component","Name":"ShowColumnChooser","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowColumnChooser is set to true, it allows you to dynamically show or hide columns.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowColumnChooser"}},{"Kind":"Components.Component","Name":"ShowColumnMenu","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowColumnMenu set to true, then it will enable the column menu options in each columns.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowColumnMenu"}},{"Kind":"Components.Component","Name":"SortSettings","TypeName":"Syncfusion.Blazor.Grids.GridSortSettings","Documentation":"\n            <summary>\n            Configures the sort settings.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SortSettings"}},{"Kind":"Components.Component","Name":"TextWrapSettings","TypeName":"Syncfusion.Blazor.Grids.GridTextWrapSettings","Documentation":"\n            <summary>\n            Configures the text wrap in the Grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TextWrapSettings"}},{"Kind":"Components.Component","Name":"Toolbar","TypeName":"System.Object","Documentation":"\n            <summary>\n            Toolbar defines the ToolBar items of the Grid.\n            It contains built-in and custom toolbar items.\n            </summary>\n            <remarks>\n            If an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n            In some cases user may want to use custom toolbar instead of custom item, in such cases user can use\n            <see cref=\"P:Syncfusion.Blazor.Grids.GridTemplates.ToolbarTemplate\" /> property to provide custom toolbar.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Toolbar"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the Grid width.\n            </summary>\n            <remarks>\n            Width can be assigned with pixel and percentage values such as 100px, 100% etc.\n            When the sum of total column width exceeds this value then the browser horizontal scrollbar will be displayed.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Width"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.SfGrid<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":356116911,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.SfGrid<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfGrid"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.SfGrid<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1290589593,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.SfGrid<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.SfGrid"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.SfGrid<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1807532788,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridColumnChooserItem","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridColumnChooserItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the label value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Title"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Documentation":"\n            <summary>\n            Specifies the grid column\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Column"}},{"Kind":"Components.Component","Name":"IsSelectAll","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies that the checkbox is select all.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsSelectAll"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumnChooserItem"}},{"HashCode":1619521728,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridColumnChooserItem","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridColumnChooserItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the label value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Title"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Documentation":"\n            <summary>\n            Specifies the grid column\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Column"}},{"Kind":"Components.Component","Name":"IsSelectAll","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies that the checkbox is select all.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsSelectAll"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumnChooserItem","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1345653387,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridColumnChooserItemGroup","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridColumnChooserItemGroup"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the group title for the checkbox collections. \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Title"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumnChooserItemGroup"}},{"HashCode":322977480,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridColumnChooserItemGroup","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridColumnChooserItemGroup"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the group title for the checkbox collections. \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Title"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumnChooserItemGroup","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1392830428,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumnChooserItemGroup.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridColumnChooserItemGroup"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumnChooserItemGroup.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1762832232,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridColumnChooserItemGroup.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridColumnChooserItemGroup"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridColumnChooserItemGroup.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1685624555,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridForeignColumn"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Grids.GridForeignColumn<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ForeignDataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Defines the column data source  which will act as foreign data source.\n            </summary>\n            <remarks>List or any IEnumerable type value is accepted as foreign data source.\n            For custom binding or using remote service as foreign data source use\n            <see cref=\"T:Syncfusion.Blazor.Grids.GridForeignColumn`1\" /> component and configure data source using\n            <see cref=\"T:Syncfusion.Blazor.Data.SfDataManager\" />.</remarks>\n        ","Metadata":{"Common.PropertyName":"ForeignDataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowEditing","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowEditing set to false, then it disables editing of a particular column.\n            By default all columns are editable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowEditing"}},{"Kind":"Components.Component","Name":"AllowAdding","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowAdding set to false, then it disables add operation of a particular column.\n            By default all columns are editable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowAdding"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowFiltering set to false, then it disables filtering option and filter bar element of a particular column.\n            By default all columns are filterable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering"}},{"Kind":"Components.Component","Name":"AllowGrouping","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowGrouping set to false, then it disables grouping of a particular column.\n            By default all columns are groupable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowGrouping"}},{"Kind":"Components.Component","Name":"AllowReordering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowReordering set to false, then it disables reorder of a particular column.\n            By default all columns can be reorder.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowReordering"}},{"Kind":"Components.Component","Name":"AllowResizing","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowResizing set to false, it disables resize option of a particular column.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowResizing"}},{"Kind":"Components.Component","Name":"AllowSearching","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowSearching set to false, then it disables searching of a particular column.\n            By default all columns are searchable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowSearching"}},{"Kind":"Components.Component","Name":"AllowSorting","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowSorting set to false, then it disables sorting option of a particular column.\n            By default all columns are sortable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowSorting"}},{"Kind":"Components.Component","Name":"AutoFit","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AutoFit set to true, then the particular column content width will be\n            adjusted based on its content in the initial rendering itself.\n            Setting this property as true is equivalent to calling AutoFitColumns method in the DataBound event.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AutoFit"}},{"Kind":"Components.Component","Name":"ClipMode","TypeName":"Syncfusion.Blazor.Grids.ClipMode","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the cell content's overflow mode. The available modes are.\n            <list type=\"bullet\">\n            <item>\n            <term><see cref=\"F:Syncfusion.Blazor.Grids.ClipMode.Clip\"></see></term>\n            <description>Truncates the cell content when it overflows its area.</description>\n            </item>\n            <item>\n            <term><see cref=\"F:Syncfusion.Blazor.Grids.ClipMode.Ellipsis\"></see></term>\n            <description>Displays ellipsis when the cell content overflows its area.</description>\n            </item>\n            <item>\n            <term><see cref=\"F:Syncfusion.Blazor.Grids.ClipMode.EllipsisWithTooltip\"></see></term>\n            <description>Displays ellipsis when the cell content overflows its area also it will display tooltip while hover on ellipsis applied cell.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ClipMode"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridColumn>","Documentation":"\n            <summary>\n            Used to render multiple header rows(stacked headers) on the Grid header.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Columns"}},{"Kind":"Components.Component","Name":"Commands","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridCommandColumn>","Documentation":"\n            <summary>\n            Commands provides an option to display command buttons in every cell.\n            Use <see cref=\"T:Syncfusion.Blazor.Grids.GridCommandColumn\" /> component to declare command columns.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Commands"}},{"Kind":"Components.Component","Name":"CustomAttributes","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            The CSS styles and attributes of the content cells of a particular column can be customized.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CustomAttributes"}},{"Kind":"Components.Component","Name":"DefaultValue","TypeName":"System.Object","Documentation":"\n            <summary>\n            Defines default values for the component when adding a new record to the Grid.\n            </summary>\n            <remarks>If no default value is provided then the default value of the model property type will be\n            used as initial value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DefaultValue"}},{"Kind":"Components.Component","Name":"DisableHtmlEncode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If DisableHtmlEncode is set to false, it disables the encodes the HTML of the header and content cells.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisableHtmlEncode"}},{"Kind":"Components.Component","Name":"DisplayAsCheckBox","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If DisplayAsCheckBox is set to true, it displays the column value as a check box instead of Boolean value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayAsCheckBox"}},{"Kind":"Components.Component","Name":"EditorSettings","TypeName":"Syncfusion.Blazor.Grids.IEditorSettings","Documentation":"\n            <summary>\n            Defines the object to customize default cell editors. The following types can be used to customize default\n            editors.\n            <list type=\"bullet\">\n            <item>\n            <term><see cref=\"T:Syncfusion.Blazor.Grids.NumericEditCellParams\" /></term>\n            <description>Customizes the default numerictextbox editor.</description>\n            </item>\n            <item>\n            <term><see cref=\"T:Syncfusion.Blazor.Grids.DropDownEditCellParams\" /></term>\n            <description>Customizes the default dropdown editor.</description>\n            </item>\n            <item>\n            <term><see cref=\"T:Syncfusion.Blazor.Grids.DateEditCellParams\" /></term>\n            <description>Customizes the default datepicker editor.</description>\n            </item>\n            <item>\n            <term><see cref=\"T:Syncfusion.Blazor.Grids.BooleanEditCellParams\" /></term>\n            <description>Customizes the default checkbox editor.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EditorSettings"}},{"Kind":"Components.Component","Name":"EditTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the cell edit template that used as editor for a particular column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EditTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"EditType","TypeName":"Syncfusion.Blazor.Grids.EditType","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the type of editor to be used for cell editing.\n            </summary>\n            <remarks>If EditType is not provided then the EditType will be inferred from the\n            property type of the TValue.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EditType"}},{"Kind":"Components.Component","Name":"EnableGroupByFormat","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableGroupByFormat set to true, then it groups the particular column by formatted values.\n            By default columns are group by format.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableGroupByFormat"}},{"Kind":"Components.Component","Name":"Field","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the field name of column which is mapped with mapping name of DataSource.\n            The bounded columns can be sort, filter and group etc.,\n            If the Field name contains “dot”, then it is considered as complex binding.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Field"}},{"Kind":"Components.Component","Name":"FilterSettings","TypeName":"Syncfusion.Blazor.Grids.FilterSettings","Documentation":"\n            <summary>\n             Defines the filter options to customize filtering for the particular column.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"FilterSettings"}},{"Kind":"Components.Component","Name":"FilterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the filter template that used as filter UI for a particular column in FilterBar and Menu.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.PredicateModel\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FilterTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ForeignKeyField","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the mapping column name of the foreign data source.\n            If it is not defined then the Field will be considered as mapping column name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ForeignKeyField"}},{"Kind":"Components.Component","Name":"ForeignKeyValue","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the display column name from the foreign data source which will be obtained from comparing local and foreign data.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ForeignKeyValue"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            It is used to change display value with the given format and does not affect the original data.\n            Gets the format from the user which can be standard or custom formats.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the column template which is used to add customized element in the column header.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.GridColumn\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderText","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the header text of column which is used to display in column header.\n            If HeaderText is not defined, then field name value will be assigned to header text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderText"}},{"Kind":"Components.Component","Name":"HeaderTextAlign","TypeName":"Syncfusion.Blazor.Grids.TextAlign","IsEnum":true,"Documentation":"\n            <summary>\n            Define the alignment of column header which is used to align the text of column header.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTextAlign"}},{"Kind":"Components.Component","Name":"HideAtMedia","TypeName":"System.String","Documentation":"\n            <summary>\n            Column visibility can change based on its Media Queries.\n            HideAtMedia accepts only valid Media Queries.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HideAtMedia"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets the unique identifier value of the column. It is used to get the object.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            You can use this property to freeze selected columns in grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsFrozen"}},{"Kind":"Components.Component","Name":"IsIdentity","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If IsIdentity is set to true, then this column is considered as identity column.\n            This column will be in disabled state in add form.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsIdentity"}},{"Kind":"Components.Component","Name":"IsPrimaryKey","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If IsPrimaryKey is set to true, considers this column as the primary key constraint.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsPrimaryKey"}},{"Kind":"Components.Component","Name":"LockColumn","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Defines the mapping column name of the foreign data source.\n            If it is not defined then the Field will be considered as mapping column name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LockColumn"}},{"Kind":"Components.Component","Name":"MaxWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the maximum width of the column in pixel or percentage, which will restrict resizing beyond this pixel or percentage.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaxWidth"}},{"Kind":"Components.Component","Name":"MinWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the minimum width of the column in pixels or percentage.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinWidth"}},{"Kind":"Components.Component","Name":"ShowColumnMenu","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowColumnMenu set to false, then it disable the column menu of a particular column.\n            By default column menu will show for all columns.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowColumnMenu"}},{"Kind":"Components.Component","Name":"ShowInColumnChooser","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowInColumnChooser set to false, then hides the particular column in column chooser.\n            By default all columns are displayed in column chooser.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowInColumnChooser"}},{"Kind":"Components.Component","Name":"SortComparer","TypeName":"System.Collections.Generic.IComparer<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the custom sort comparer function to implement own sort logic for a particular column.\n            For foreign key column with local data source a sort comparer will be assigned by default to sort it by text(ForeignKeyValue) instead of the underlying field value.\n            </summary>\n            <remarks>\n            Custom sort comparer cannot be used with remote data and Entity framework data source.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"SortComparer"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the column template that renders customized element in each cell of the column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <c>TValue</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Template","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"TextAlign","TypeName":"Syncfusion.Blazor.Grids.TextAlign","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the alignment of the column in both header and content cells.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TextAlign"}},{"Kind":"Components.Component","Name":"Freeze","TypeName":"Syncfusion.Blazor.Grids.FreezeDirection","IsEnum":true,"Documentation":"\n            <summary>\n            Defines which side the column need to freeze.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Freeze"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Grids.ColumnType","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the data type of the column.\n            </summary>\n            <remarks>If Type is not provided then the Type will be inferred from the\n            property type of the TValue.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"Uid","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets the unique identifier value of the column. It is used to get the object.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Uid"}},{"Kind":"Components.Component","Name":"ValidationRules","TypeName":"Syncfusion.Blazor.Grids.ValidationRules","Documentation":"\n            <summary>\n            Defines rules to validate data before creating and updating. The validation rules can be set\n            as instance of <see cref=\"T:Syncfusion.Blazor.Grids.ValidationRules\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValidationRules"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If Visible is set to false, hides the particular column. By default, all columns are displayed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Visible"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the width of the column in pixels or percentage.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"FilterItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the Checkbox Item template that renders customized element/value in each checkbox of the Filter column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.FilterItemTemplateContext\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FilterItemTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>","Components.GenericTyped":"True"}},{"HashCode":-1134082223,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.GridForeignColumn"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Grids.GridForeignColumn<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ForeignDataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Defines the column data source  which will act as foreign data source.\n            </summary>\n            <remarks>List or any IEnumerable type value is accepted as foreign data source.\n            For custom binding or using remote service as foreign data source use\n            <see cref=\"T:Syncfusion.Blazor.Grids.GridForeignColumn`1\" /> component and configure data source using\n            <see cref=\"T:Syncfusion.Blazor.Data.SfDataManager\" />.</remarks>\n        ","Metadata":{"Common.PropertyName":"ForeignDataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowEditing","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowEditing set to false, then it disables editing of a particular column.\n            By default all columns are editable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowEditing"}},{"Kind":"Components.Component","Name":"AllowAdding","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowAdding set to false, then it disables add operation of a particular column.\n            By default all columns are editable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowAdding"}},{"Kind":"Components.Component","Name":"AllowFiltering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowFiltering set to false, then it disables filtering option and filter bar element of a particular column.\n            By default all columns are filterable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowFiltering"}},{"Kind":"Components.Component","Name":"AllowGrouping","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowGrouping set to false, then it disables grouping of a particular column.\n            By default all columns are groupable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowGrouping"}},{"Kind":"Components.Component","Name":"AllowReordering","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowReordering set to false, then it disables reorder of a particular column.\n            By default all columns can be reorder.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowReordering"}},{"Kind":"Components.Component","Name":"AllowResizing","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowResizing set to false, it disables resize option of a particular column.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowResizing"}},{"Kind":"Components.Component","Name":"AllowSearching","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowSearching set to false, then it disables searching of a particular column.\n            By default all columns are searchable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowSearching"}},{"Kind":"Components.Component","Name":"AllowSorting","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AllowSorting set to false, then it disables sorting option of a particular column.\n            By default all columns are sortable.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowSorting"}},{"Kind":"Components.Component","Name":"AutoFit","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If AutoFit set to true, then the particular column content width will be\n            adjusted based on its content in the initial rendering itself.\n            Setting this property as true is equivalent to calling AutoFitColumns method in the DataBound event.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AutoFit"}},{"Kind":"Components.Component","Name":"ClipMode","TypeName":"Syncfusion.Blazor.Grids.ClipMode","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the cell content's overflow mode. The available modes are.\n            <list type=\"bullet\">\n            <item>\n            <term><see cref=\"F:Syncfusion.Blazor.Grids.ClipMode.Clip\"></see></term>\n            <description>Truncates the cell content when it overflows its area.</description>\n            </item>\n            <item>\n            <term><see cref=\"F:Syncfusion.Blazor.Grids.ClipMode.Ellipsis\"></see></term>\n            <description>Displays ellipsis when the cell content overflows its area.</description>\n            </item>\n            <item>\n            <term><see cref=\"F:Syncfusion.Blazor.Grids.ClipMode.EllipsisWithTooltip\"></see></term>\n            <description>Displays ellipsis when the cell content overflows its area also it will display tooltip while hover on ellipsis applied cell.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ClipMode"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridColumn>","Documentation":"\n            <summary>\n            Used to render multiple header rows(stacked headers) on the Grid header.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Columns"}},{"Kind":"Components.Component","Name":"Commands","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridCommandColumn>","Documentation":"\n            <summary>\n            Commands provides an option to display command buttons in every cell.\n            Use <see cref=\"T:Syncfusion.Blazor.Grids.GridCommandColumn\" /> component to declare command columns.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Commands"}},{"Kind":"Components.Component","Name":"CustomAttributes","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            The CSS styles and attributes of the content cells of a particular column can be customized.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CustomAttributes"}},{"Kind":"Components.Component","Name":"DefaultValue","TypeName":"System.Object","Documentation":"\n            <summary>\n            Defines default values for the component when adding a new record to the Grid.\n            </summary>\n            <remarks>If no default value is provided then the default value of the model property type will be\n            used as initial value.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DefaultValue"}},{"Kind":"Components.Component","Name":"DisableHtmlEncode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If DisableHtmlEncode is set to false, it disables the encodes the HTML of the header and content cells.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisableHtmlEncode"}},{"Kind":"Components.Component","Name":"DisplayAsCheckBox","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If DisplayAsCheckBox is set to true, it displays the column value as a check box instead of Boolean value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DisplayAsCheckBox"}},{"Kind":"Components.Component","Name":"EditorSettings","TypeName":"Syncfusion.Blazor.Grids.IEditorSettings","Documentation":"\n            <summary>\n            Defines the object to customize default cell editors. The following types can be used to customize default\n            editors.\n            <list type=\"bullet\">\n            <item>\n            <term><see cref=\"T:Syncfusion.Blazor.Grids.NumericEditCellParams\" /></term>\n            <description>Customizes the default numerictextbox editor.</description>\n            </item>\n            <item>\n            <term><see cref=\"T:Syncfusion.Blazor.Grids.DropDownEditCellParams\" /></term>\n            <description>Customizes the default dropdown editor.</description>\n            </item>\n            <item>\n            <term><see cref=\"T:Syncfusion.Blazor.Grids.DateEditCellParams\" /></term>\n            <description>Customizes the default datepicker editor.</description>\n            </item>\n            <item>\n            <term><see cref=\"T:Syncfusion.Blazor.Grids.BooleanEditCellParams\" /></term>\n            <description>Customizes the default checkbox editor.</description>\n            </item>\n            </list>\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EditorSettings"}},{"Kind":"Components.Component","Name":"EditTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the cell edit template that used as editor for a particular column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EditTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"EditType","TypeName":"Syncfusion.Blazor.Grids.EditType","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the type of editor to be used for cell editing.\n            </summary>\n            <remarks>If EditType is not provided then the EditType will be inferred from the\n            property type of the TValue.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EditType"}},{"Kind":"Components.Component","Name":"EnableGroupByFormat","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If EnableGroupByFormat set to true, then it groups the particular column by formatted values.\n            By default columns are group by format.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableGroupByFormat"}},{"Kind":"Components.Component","Name":"Field","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the field name of column which is mapped with mapping name of DataSource.\n            The bounded columns can be sort, filter and group etc.,\n            If the Field name contains “dot”, then it is considered as complex binding.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Field"}},{"Kind":"Components.Component","Name":"FilterSettings","TypeName":"Syncfusion.Blazor.Grids.FilterSettings","Documentation":"\n            <summary>\n             Defines the filter options to customize filtering for the particular column.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"FilterSettings"}},{"Kind":"Components.Component","Name":"FilterTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the filter template that used as filter UI for a particular column in FilterBar and Menu.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.PredicateModel\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FilterTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ForeignKeyField","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the mapping column name of the foreign data source.\n            If it is not defined then the Field will be considered as mapping column name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ForeignKeyField"}},{"Kind":"Components.Component","Name":"ForeignKeyValue","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the display column name from the foreign data source which will be obtained from comparing local and foreign data.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ForeignKeyValue"}},{"Kind":"Components.Component","Name":"Format","TypeName":"System.String","Documentation":"\n            <summary>\n            It is used to change display value with the given format and does not affect the original data.\n            Gets the format from the user which can be standard or custom formats.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Format"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the column template which is used to add customized element in the column header.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.GridColumn\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderText","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the header text of column which is used to display in column header.\n            If HeaderText is not defined, then field name value will be assigned to header text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderText"}},{"Kind":"Components.Component","Name":"HeaderTextAlign","TypeName":"Syncfusion.Blazor.Grids.TextAlign","IsEnum":true,"Documentation":"\n            <summary>\n            Define the alignment of column header which is used to align the text of column header.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTextAlign"}},{"Kind":"Components.Component","Name":"HideAtMedia","TypeName":"System.String","Documentation":"\n            <summary>\n            Column visibility can change based on its Media Queries.\n            HideAtMedia accepts only valid Media Queries.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HideAtMedia"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets the unique identifier value of the column. It is used to get the object.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            You can use this property to freeze selected columns in grid.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsFrozen"}},{"Kind":"Components.Component","Name":"IsIdentity","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If IsIdentity is set to true, then this column is considered as identity column.\n            This column will be in disabled state in add form.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsIdentity"}},{"Kind":"Components.Component","Name":"IsPrimaryKey","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If IsPrimaryKey is set to true, considers this column as the primary key constraint.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsPrimaryKey"}},{"Kind":"Components.Component","Name":"LockColumn","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Defines the mapping column name of the foreign data source.\n            If it is not defined then the Field will be considered as mapping column name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LockColumn"}},{"Kind":"Components.Component","Name":"MaxWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the maximum width of the column in pixel or percentage, which will restrict resizing beyond this pixel or percentage.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MaxWidth"}},{"Kind":"Components.Component","Name":"MinWidth","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the minimum width of the column in pixels or percentage.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MinWidth"}},{"Kind":"Components.Component","Name":"ShowColumnMenu","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowColumnMenu set to false, then it disable the column menu of a particular column.\n            By default column menu will show for all columns.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowColumnMenu"}},{"Kind":"Components.Component","Name":"ShowInColumnChooser","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If ShowInColumnChooser set to false, then hides the particular column in column chooser.\n            By default all columns are displayed in column chooser.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowInColumnChooser"}},{"Kind":"Components.Component","Name":"SortComparer","TypeName":"System.Collections.Generic.IComparer<System.Object>","Documentation":"\n            <summary>\n            Gets or sets the custom sort comparer function to implement own sort logic for a particular column.\n            For foreign key column with local data source a sort comparer will be assigned by default to sort it by text(ForeignKeyValue) instead of the underlying field value.\n            </summary>\n            <remarks>\n            Custom sort comparer cannot be used with remote data and Entity framework data source.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"SortComparer"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the column template that renders customized element in each cell of the column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <c>TValue</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Template","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"TextAlign","TypeName":"Syncfusion.Blazor.Grids.TextAlign","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the alignment of the column in both header and content cells.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TextAlign"}},{"Kind":"Components.Component","Name":"Freeze","TypeName":"Syncfusion.Blazor.Grids.FreezeDirection","IsEnum":true,"Documentation":"\n            <summary>\n            Defines which side the column need to freeze.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Freeze"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Grids.ColumnType","IsEnum":true,"Documentation":"\n            <summary>\n            Defines the data type of the column.\n            </summary>\n            <remarks>If Type is not provided then the Type will be inferred from the\n            property type of the TValue.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"Uid","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets the unique identifier value of the column. It is used to get the object.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Uid"}},{"Kind":"Components.Component","Name":"ValidationRules","TypeName":"Syncfusion.Blazor.Grids.ValidationRules","Documentation":"\n            <summary>\n            Defines rules to validate data before creating and updating. The validation rules can be set\n            as instance of <see cref=\"T:Syncfusion.Blazor.Grids.ValidationRules\" />.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ValidationRules"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If Visible is set to false, hides the particular column. By default, all columns are displayed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Visible"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the width of the column in pixels or percentage.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"FilterItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n            <summary>\n            Defines the Checkbox Item template that renders customized element/value in each checkbox of the Filter column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.FilterItemTemplateContext\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FilterItemTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-30863993,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridForeignColumn"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-943578721,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.GridForeignColumn"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1793250749,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.EditTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the cell edit template that used as editor for a particular column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EditTemplate","ParentTag":"GridForeignColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'EditTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.EditTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1620787455,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.EditTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the cell edit template that used as editor for a particular column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type TValue.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EditTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridForeignColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'EditTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.EditTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1832294280,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.FilterTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the filter template that used as filter UI for a particular column in FilterBar and Menu.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.PredicateModel\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FilterTemplate","ParentTag":"GridForeignColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FilterTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.FilterTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":597942652,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.FilterTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the filter template that used as filter UI for a particular column in FilterBar and Menu.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.PredicateModel\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FilterTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridForeignColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FilterTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.FilterTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-540497205,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the column template which is used to add customized element in the column header.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.GridColumn\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"GridForeignColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'HeaderTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.HeaderTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":2019729830,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the column template which is used to add customized element in the column header.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.GridColumn\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridForeignColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'HeaderTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.HeaderTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":918001692,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.Template","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the column template that renders customized element in each cell of the column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <c>TValue</c>.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"GridForeignColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.Template","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":520384793,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.Template","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the column template that renders customized element in each cell of the column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <c>TValue</c>.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"Syncfusion.Blazor.Grids.GridForeignColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.Template","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":542063565,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.FilterItemTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the Checkbox Item template that renders customized element/value in each checkbox of the Filter column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.FilterItemTemplateContext\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FilterItemTemplate","ParentTag":"GridForeignColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FilterItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.FilterItemTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":505982000,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.FilterItemTemplate","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"\n            <summary>\n            Defines the Checkbox Item template that renders customized element/value in each checkbox of the Filter column.\n            </summary>\n            <remarks>\n            The parameters passed to the templates can be accessed using implicit parameter named <c>context</c>.\n            The context is of type <see cref=\"T:Syncfusion.Blazor.Grids.FilterItemTemplateContext\" />.\n            </remarks>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FilterItemTemplate","ParentTag":"Syncfusion.Blazor.Grids.GridForeignColumn"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FilterItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.GridForeignColumn<TValue>.FilterItemTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1143585733,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.RefreshAggregate<TValue>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"RefreshAggregate"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Grids.RefreshAggregate<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.RefreshAggregate<TValue>","Components.GenericTyped":"True"}},{"HashCode":-2044015918,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.RefreshAggregate<TValue>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.RefreshAggregate"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Grids.RefreshAggregate<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.RefreshAggregate<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1260521349,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids._Imports","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"_Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids._Imports"}},{"HashCode":41652340,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids._Imports","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids._Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids._Imports","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1688756421,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.EditorCellBase<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EditorCellBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.EditorCellBase<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column"}},{"Kind":"Components.Component","Name":"RowData","TypeName":"T","Metadata":{"Common.PropertyName":"RowData","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.EditorCellBase<T>","Components.GenericTyped":"True"}},{"HashCode":-63211474,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.EditorCellBase<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.EditorCellBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.EditorCellBase<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column"}},{"Kind":"Components.Component","Name":"RowData","TypeName":"T","Metadata":{"Common.PropertyName":"RowData","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.EditorCellBase<T>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1116848290,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FilterCheckBoxRenderer<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FilterCheckBoxRenderer"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FilterCheckBoxRenderer<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FilterCheckBoxRenderer<TContent>","Components.GenericTyped":"True"}},{"HashCode":-1849295250,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FilterCheckBoxRenderer<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.FilterCheckBoxRenderer"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FilterCheckBoxRenderer<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FilterCheckBoxRenderer<TContent>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-39506801,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FilterMenuRenderer<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FilterMenuRenderer"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FilterMenuRenderer<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Xvalue","TypeName":"System.String","Metadata":{"Common.PropertyName":"Xvalue"}},{"Kind":"Components.Component","Name":"Yvalue","TypeName":"System.String","Metadata":{"Common.PropertyName":"Yvalue"}},{"Kind":"Components.Component","Name":"IsVisible","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsVisible"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FilterMenuRenderer<TContent>","Components.GenericTyped":"True"}},{"HashCode":-906865398,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FilterMenuRenderer<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.FilterMenuRenderer"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FilterMenuRenderer<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Xvalue","TypeName":"System.String","Metadata":{"Common.PropertyName":"Xvalue"}},{"Kind":"Components.Component","Name":"Yvalue","TypeName":"System.String","Metadata":{"Common.PropertyName":"Yvalue"}},{"Kind":"Components.Component","Name":"IsVisible","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsVisible"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FilterMenuRenderer<TContent>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1884220317,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridCellBase<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridCellBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.GridCellBase<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"CellParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"CellParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridCellBase<TCell>","Components.GenericTyped":"True"}},{"HashCode":-1676508014,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridCellBase<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.GridCellBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.GridCellBase<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"CellParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"CellParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridCellBase<TCell>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":971794453,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridHeaderBase<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridHeaderBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.GridHeaderBase<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridHeaderBase<TContent>","Components.GenericTyped":"True"}},{"HashCode":-1029615397,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridHeaderBase<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.GridHeaderBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.GridHeaderBase<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridHeaderBase<TContent>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1853880757,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridRowBase<TRow>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridRowBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TRow","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TRow for the Syncfusion.Blazor.Grids.Internal.GridRowBase<TRow> component.","Metadata":{"Common.PropertyName":"TRow","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"RowParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"RowParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridRowBase<TRow>","Components.GenericTyped":"True"}},{"HashCode":1998890755,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridRowBase<TRow>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.GridRowBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TRow","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TRow for the Syncfusion.Blazor.Grids.Internal.GridRowBase<TRow> component.","Metadata":{"Common.PropertyName":"TRow","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"RowParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"RowParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridRowBase<TRow>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1440431490,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.BooleanEditCell<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BooleanEditCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.BooleanEditCell<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column"}},{"Kind":"Components.Component","Name":"RowData","TypeName":"T","Metadata":{"Common.PropertyName":"RowData","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.BooleanEditCell<T>","Components.GenericTyped":"True"}},{"HashCode":627503159,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.BooleanEditCell<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.BooleanEditCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.BooleanEditCell<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column"}},{"Kind":"Components.Component","Name":"RowData","TypeName":"T","Metadata":{"Common.PropertyName":"RowData","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.BooleanEditCell<T>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1431857079,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.DatePickerEditCell<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DatePickerEditCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.DatePickerEditCell<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column"}},{"Kind":"Components.Component","Name":"RowData","TypeName":"TCell","Metadata":{"Common.PropertyName":"RowData","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.DatePickerEditCell<TCell>","Components.GenericTyped":"True"}},{"HashCode":1349480102,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.DatePickerEditCell<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.DatePickerEditCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.DatePickerEditCell<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column"}},{"Kind":"Components.Component","Name":"RowData","TypeName":"TCell","Metadata":{"Common.PropertyName":"RowData","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.DatePickerEditCell<TCell>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1155418190,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.DropDownEditCell<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DropDownEditCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.DropDownEditCell<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column"}},{"Kind":"Components.Component","Name":"RowData","TypeName":"TCell","Metadata":{"Common.PropertyName":"RowData","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.DropDownEditCell<TCell>","Components.GenericTyped":"True"}},{"HashCode":-1304427840,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.DropDownEditCell<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.DropDownEditCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.DropDownEditCell<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column"}},{"Kind":"Components.Component","Name":"RowData","TypeName":"TCell","Metadata":{"Common.PropertyName":"RowData","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.DropDownEditCell<TCell>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1017948693,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.ForeignKeyEditCell<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ForeignKeyEditCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Grids.Internal.ForeignKeyEditCell<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.Grids.Internal.ForeignKeyEditCell<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Model","TypeName":"Syncfusion.Blazor.Grids.Internal.EditorDropDownModel","Metadata":{"Common.PropertyName":"Model"}},{"Kind":"Components.Component","Name":"ForeignKeyColumnParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"ForeignKeyColumnParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ForeignKeyEditCell<TValue, TItem>","Components.GenericTyped":"True"}},{"HashCode":-1530651064,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.ForeignKeyEditCell<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.ForeignKeyEditCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Grids.Internal.ForeignKeyEditCell<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.Grids.Internal.ForeignKeyEditCell<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Model","TypeName":"Syncfusion.Blazor.Grids.Internal.EditorDropDownModel","Metadata":{"Common.PropertyName":"Model"}},{"Kind":"Components.Component","Name":"ForeignKeyColumnParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"ForeignKeyColumnParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ForeignKeyEditCell<TValue, TItem>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1720097591,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.NumericEditCell<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NumericEditCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.NumericEditCell<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column"}},{"Kind":"Components.Component","Name":"RowData","TypeName":"TCell","Metadata":{"Common.PropertyName":"RowData","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.NumericEditCell<TCell>","Components.GenericTyped":"True"}},{"HashCode":-1827679494,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.NumericEditCell<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.NumericEditCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.NumericEditCell<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column"}},{"Kind":"Components.Component","Name":"RowData","TypeName":"TCell","Metadata":{"Common.PropertyName":"RowData","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.NumericEditCell<TCell>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-462796366,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.TextBoxEditCell<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TextBoxEditCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.TextBoxEditCell<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column"}},{"Kind":"Components.Component","Name":"RowData","TypeName":"T","Metadata":{"Common.PropertyName":"RowData","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.TextBoxEditCell<T>","Components.GenericTyped":"True"}},{"HashCode":-1592257995,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.TextBoxEditCell<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.TextBoxEditCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.TextBoxEditCell<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column"}},{"Kind":"Components.Component","Name":"RowData","TypeName":"T","Metadata":{"Common.PropertyName":"RowData","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.TextBoxEditCell<T>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1078008870,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.AdaptiveDialogRenderer<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AdaptiveDialogRenderer"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.AdaptiveDialogRenderer<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"IsSortIconClicked","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsSortIconClicked"}},{"Kind":"Components.Component","Name":"IsFilterIconClicked","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFilterIconClicked"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.AdaptiveDialogRenderer<TContent>","Components.GenericTyped":"True"}},{"HashCode":2060440315,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.AdaptiveDialogRenderer<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.AdaptiveDialogRenderer"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.AdaptiveDialogRenderer<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"IsSortIconClicked","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsSortIconClicked"}},{"Kind":"Components.Component","Name":"IsFilterIconClicked","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFilterIconClicked"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.AdaptiveDialogRenderer<TContent>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-95770101,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.BatchEdit<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BatchEdit"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.BatchEdit<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"CellParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"CellParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.BatchEdit<TCell>","Components.GenericTyped":"True"}},{"HashCode":663692365,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.BatchEdit<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.BatchEdit"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.BatchEdit<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"CellParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"CellParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.BatchEdit<TCell>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":250029354,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.CaptionSummary<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CaptionSummary"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.CaptionSummary<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"CellParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"CellParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.CaptionSummary<TCell>","Components.GenericTyped":"True"}},{"HashCode":-874013682,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.CaptionSummary<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.CaptionSummary"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.CaptionSummary<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"CellParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"CellParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.CaptionSummary<TCell>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-914357535,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.CellRender<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CellRender"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.CellRender<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Metadata":{"Common.PropertyName":"Name"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.CellRender<T>","Components.GenericTyped":"True"}},{"HashCode":-881179165,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.CellRender<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.CellRender"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.CellRender<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Metadata":{"Common.PropertyName":"Name"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.CellRender<T>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1329090251,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.Internal.CellRender<T>.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"CellRender"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.CellRender<T>.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1547901093,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.Internal.CellRender<T>.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.Internal.CellRender"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.CellRender<T>.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1728239979,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.CheckBoxRenderer","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CheckBoxRenderer"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Checked","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"Checked"}},{"Kind":"Components.Component","Name":"CheckBoxClass","TypeName":"System.String","Metadata":{"Common.PropertyName":"CheckBoxClass"}},{"Kind":"Components.Component","Name":"WrapperClass","TypeName":"System.String","Metadata":{"Common.PropertyName":"WrapperClass"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column"}},{"Kind":"Components.Component","Name":"RequireInput","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"RequireInput"}},{"Kind":"Components.Component","Name":"Lable","TypeName":"System.String","Metadata":{"Common.PropertyName":"Lable"}},{"Kind":"Components.Component","Name":"CCSelectAll","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"CCSelectAll"}},{"Kind":"Components.Component","Name":"Intermediate","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"Intermediate"}},{"Kind":"Components.Component","Name":"CCClass","TypeName":"System.String","Metadata":{"Common.PropertyName":"CCClass"}},{"Kind":"Components.Component","Name":"CBSelectAllClass","TypeName":"System.String","Metadata":{"Common.PropertyName":"CBSelectAllClass"}},{"Kind":"Components.Component","Name":"IsDisabled","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsDisabled"}},{"Kind":"Components.Component","Name":"IsRtl","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsRtl"}},{"Kind":"Components.Component","Name":"Records","TypeName":"System.Object","Metadata":{"Common.PropertyName":"Records"}},{"Kind":"Components.Component","Name":"AriaLabel","TypeName":"System.Collections.Generic.Dictionary<System.String, System.String>","Metadata":{"Common.PropertyName":"AriaLabel"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"System.Action<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Metadata":{"Common.PropertyName":"OnClick","Components.DelegateSignature":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.CheckBoxRenderer"}},{"HashCode":-1336415919,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.CheckBoxRenderer","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.CheckBoxRenderer"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Checked","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"Checked"}},{"Kind":"Components.Component","Name":"CheckBoxClass","TypeName":"System.String","Metadata":{"Common.PropertyName":"CheckBoxClass"}},{"Kind":"Components.Component","Name":"WrapperClass","TypeName":"System.String","Metadata":{"Common.PropertyName":"WrapperClass"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column"}},{"Kind":"Components.Component","Name":"RequireInput","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"RequireInput"}},{"Kind":"Components.Component","Name":"Lable","TypeName":"System.String","Metadata":{"Common.PropertyName":"Lable"}},{"Kind":"Components.Component","Name":"CCSelectAll","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"CCSelectAll"}},{"Kind":"Components.Component","Name":"Intermediate","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"Intermediate"}},{"Kind":"Components.Component","Name":"CCClass","TypeName":"System.String","Metadata":{"Common.PropertyName":"CCClass"}},{"Kind":"Components.Component","Name":"CBSelectAllClass","TypeName":"System.String","Metadata":{"Common.PropertyName":"CBSelectAllClass"}},{"Kind":"Components.Component","Name":"IsDisabled","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsDisabled"}},{"Kind":"Components.Component","Name":"IsRtl","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsRtl"}},{"Kind":"Components.Component","Name":"Records","TypeName":"System.Object","Metadata":{"Common.PropertyName":"Records"}},{"Kind":"Components.Component","Name":"AriaLabel","TypeName":"System.Collections.Generic.Dictionary<System.String, System.String>","Metadata":{"Common.PropertyName":"AriaLabel"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"System.Action<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Metadata":{"Common.PropertyName":"OnClick","Components.DelegateSignature":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.CheckBoxRenderer","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1356475915,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.ColumnChooser<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ColumnChooser"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.ColumnChooser<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ColumnChooser<TContent>","Components.GenericTyped":"True"}},{"HashCode":-2119971107,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.ColumnChooser<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.ColumnChooser"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.ColumnChooser<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ColumnChooser<TContent>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1473882270,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.ColumnMenu<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ColumnMenu"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.ColumnMenu<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ColumnMenu<TContent>","Components.GenericTyped":"True"}},{"HashCode":1028439009,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.ColumnMenu<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.ColumnMenu"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.ColumnMenu<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ColumnMenu<TContent>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2117148584,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.CommandColumn<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CommandColumn"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.CommandColumn<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"CellParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"CellParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.CommandColumn<TCell>","Components.GenericTyped":"True"}},{"HashCode":222636163,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.CommandColumn<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.CommandColumn"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.CommandColumn<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"CellParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"CellParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.CommandColumn<TCell>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":404165580,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.ContextMenu<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ContextMenu"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.ContextMenu<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ContextMenu<TContent>","Components.GenericTyped":"True"}},{"HashCode":-2080013697,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.ContextMenu<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.ContextMenu"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.ContextMenu<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ContextMenu<TContent>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-571980408,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.DetailCell<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DetailCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.DetailCell<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"CellParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"CellParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.DetailCell<TCell>","Components.GenericTyped":"True"}},{"HashCode":74439565,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.DetailCell<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.DetailCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.DetailCell<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"CellParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"CellParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.DetailCell<TCell>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":122243726,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.DialogEdit<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DialogEdit"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.DialogEdit<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"CellParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"CellParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.DialogEdit<TCell>","Components.GenericTyped":"True"}},{"HashCode":-1361648354,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.DialogEdit<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.DialogEdit"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.DialogEdit<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"CellParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"CellParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.DialogEdit<TCell>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1053216813,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.EventRegister<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EventRegister"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.EventRegister<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Metadata":{"Common.PropertyName":"Name"}},{"Kind":"Components.Component","Name":"Handler","TypeName":"System.Action<System.Object>","Metadata":{"Common.PropertyName":"Handler","Components.DelegateSignature":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.EventRegister<T>","Components.GenericTyped":"True"}},{"HashCode":324672613,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.EventRegister<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.EventRegister"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.EventRegister<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Metadata":{"Common.PropertyName":"Name"}},{"Kind":"Components.Component","Name":"Handler","TypeName":"System.Action<System.Object>","Metadata":{"Common.PropertyName":"Handler","Components.DelegateSignature":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.EventRegister<T>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1642361059,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.ExpandCell<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ExpandCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.ExpandCell<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"CellParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"CellParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ExpandCell<TCell>","Components.GenericTyped":"True"}},{"HashCode":-1459099468,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.ExpandCell<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.ExpandCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.ExpandCell<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"CellParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"CellParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ExpandCell<TCell>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1945674087,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.ExcelBase<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ExcelBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.ExcelBase<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column"}},{"Kind":"Components.Component","Name":"isFiltered","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"isFiltered"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ExcelBase<TContent>","Components.GenericTyped":"True"}},{"HashCode":-362134711,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.ExcelBase<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.ExcelBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.ExcelBase<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Column","TypeName":"Syncfusion.Blazor.Grids.GridColumn","Metadata":{"Common.PropertyName":"Column"}},{"Kind":"Components.Component","Name":"isFiltered","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"isFiltered"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ExcelBase<TContent>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-543320721,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FilterBarRenderer<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FilterBarRenderer"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FilterBarRenderer<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"FilterBarParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"FilterBarParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FilterBarRenderer<TContent>","Components.GenericTyped":"True"}},{"HashCode":925931660,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FilterBarRenderer<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.FilterBarRenderer"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FilterBarRenderer<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"FilterBarParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"FilterBarParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FilterBarRenderer<TContent>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1391107189,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FilterInput<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FilterInput"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FilterInput<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"FilterInputParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"FilterInputParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FilterInput<TContent>","Components.GenericTyped":"True"}},{"HashCode":-1611712872,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FilterInput<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.FilterInput"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FilterInput<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"FilterInputParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"FilterInputParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FilterInput<TContent>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1343235739,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FilterType<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FilterType"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FilterType<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FilterType<TContent>","Components.GenericTyped":"True"}},{"HashCode":-222908815,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FilterType<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.FilterType"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FilterType<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FilterType<TContent>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1859494719,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FooterContent<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FooterContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FooterContent<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Metadata":{"Common.PropertyName":"Data"}},{"Kind":"Components.Component","Name":"Aggregate","TypeName":"System.Object","Metadata":{"Common.PropertyName":"Aggregate"}},{"Kind":"Components.Component","Name":"Rows","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.Internal.Row<System.Object>>","Metadata":{"Common.PropertyName":"Rows"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FooterContent<TContent>","Components.GenericTyped":"True"}},{"HashCode":1991766885,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FooterContent<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.FooterContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FooterContent<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Metadata":{"Common.PropertyName":"Data"}},{"Kind":"Components.Component","Name":"Aggregate","TypeName":"System.Object","Metadata":{"Common.PropertyName":"Aggregate"}},{"Kind":"Components.Component","Name":"Rows","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.Internal.Row<System.Object>>","Metadata":{"Common.PropertyName":"Rows"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FooterContent<TContent>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-767681810,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.ForeignKeySubComponents<TValue>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ForeignKeySubComponents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Grids.Internal.ForeignKeySubComponents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"FilterComponent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Metadata":{"Common.PropertyName":"FilterComponent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"EditorComponent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Metadata":{"Common.PropertyName":"EditorComponent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ForeignKeySubComponents<TValue>","Components.GenericTyped":"True"}},{"HashCode":-497398889,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.ForeignKeySubComponents<TValue>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.ForeignKeySubComponents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Grids.Internal.ForeignKeySubComponents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"FilterComponent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Metadata":{"Common.PropertyName":"FilterComponent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"EditorComponent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Metadata":{"Common.PropertyName":"EditorComponent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ForeignKeySubComponents<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1396142792,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.Internal.ForeignKeySubComponents<TValue>.FilterComponent","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FilterComponent","ParentTag":"ForeignKeySubComponents"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FilterComponent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ForeignKeySubComponents<TValue>.FilterComponent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1187446533,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.Internal.ForeignKeySubComponents<TValue>.FilterComponent","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FilterComponent","ParentTag":"Syncfusion.Blazor.Grids.Internal.ForeignKeySubComponents"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'FilterComponent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ForeignKeySubComponents<TValue>.FilterComponent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1263432439,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.Internal.ForeignKeySubComponents<TValue>.EditorComponent","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EditorComponent","ParentTag":"ForeignKeySubComponents"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'EditorComponent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ForeignKeySubComponents<TValue>.EditorComponent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":300652136,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.Internal.ForeignKeySubComponents<TValue>.EditorComponent","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EditorComponent","ParentTag":"Syncfusion.Blazor.Grids.Internal.ForeignKeySubComponents"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'EditorComponent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ForeignKeySubComponents<TValue>.EditorComponent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-458022377,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FrozenContent<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FrozenContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FrozenContent<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"FrozenContentParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"FrozenContentParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FrozenContent<TContent>","Components.GenericTyped":"True"}},{"HashCode":-1544672705,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FrozenContent<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.FrozenContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FrozenContent<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"FrozenContentParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"FrozenContentParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FrozenContent<TContent>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-581931574,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FrozenFooterContent<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FrozenFooterContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FrozenFooterContent<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Metadata":{"Common.PropertyName":"Data"}},{"Kind":"Components.Component","Name":"Aggregate","TypeName":"System.Object","Metadata":{"Common.PropertyName":"Aggregate"}},{"Kind":"Components.Component","Name":"Rows","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.Internal.Row<System.Object>>","Metadata":{"Common.PropertyName":"Rows"}},{"Kind":"Components.Component","Name":"CellParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"CellParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FrozenFooterContent<TContent>","Components.GenericTyped":"True"}},{"HashCode":-1276753467,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FrozenFooterContent<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.FrozenFooterContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FrozenFooterContent<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Metadata":{"Common.PropertyName":"Data"}},{"Kind":"Components.Component","Name":"Aggregate","TypeName":"System.Object","Metadata":{"Common.PropertyName":"Aggregate"}},{"Kind":"Components.Component","Name":"Rows","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.Internal.Row<System.Object>>","Metadata":{"Common.PropertyName":"Rows"}},{"Kind":"Components.Component","Name":"CellParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"CellParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FrozenFooterContent<TContent>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1813379146,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FrozenHeader<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FrozenHeader"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FrozenHeader<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"FrozenHeaderParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"FrozenHeaderParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FrozenHeader<TContent>","Components.GenericTyped":"True"}},{"HashCode":-296095371,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FrozenHeader<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.FrozenHeader"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FrozenHeader<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"FrozenHeaderParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"FrozenHeaderParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FrozenHeader<TContent>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":391297132,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FrozenVirtual<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"FrozenVirtual"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FrozenVirtual<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"FrozenVirtualParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"FrozenVirtualParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FrozenVirtual<TContent>","Components.GenericTyped":"True"}},{"HashCode":9206313,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.FrozenVirtual<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.FrozenVirtual"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.FrozenVirtual<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"FrozenVirtualParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"FrozenVirtualParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.FrozenVirtual<TContent>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-231849229,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridCell<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.GridCell<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"CellParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"CellParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridCell<TCell>","Components.GenericTyped":"True"}},{"HashCode":1355328396,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridCell<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.GridCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.GridCell<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"CellParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"CellParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridCell<TCell>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-593228416,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridCellRegister<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridCellRegister"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.GridCellRegister<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CellSelector","TypeName":"System.Func<Syncfusion.Blazor.Grids.Internal.Row<System.Object>, Syncfusion.Blazor.Grids.Internal.Cell<System.Object>, System.String>","Metadata":{"Common.PropertyName":"CellSelector","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridCellRegister<T>","Components.GenericTyped":"True"}},{"HashCode":1051360221,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridCellRegister<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.GridCellRegister"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.GridCellRegister<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CellSelector","TypeName":"System.Func<Syncfusion.Blazor.Grids.Internal.Row<System.Object>, Syncfusion.Blazor.Grids.Internal.Cell<System.Object>, System.String>","Metadata":{"Common.PropertyName":"CellSelector","Components.DelegateSignature":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridCellRegister<T>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2092864107,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.Internal.GridCellRegister<T>.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"GridCellRegister"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridCellRegister<T>.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":458514043,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.Internal.GridCellRegister<T>.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.Internal.GridCellRegister"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ChildContent' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridCellRegister<T>.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1780861373,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridContent<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.GridContent<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ContentParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"ContentParameters"}},{"Kind":"Components.Component","Name":"Rows","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.Internal.Row<System.Object>>","Metadata":{"Common.PropertyName":"Rows"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridContent<TContent>","Components.GenericTyped":"True"}},{"HashCode":999789085,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridContent<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.GridContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.GridContent<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ContentParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"ContentParameters"}},{"Kind":"Components.Component","Name":"Rows","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.Internal.Row<System.Object>>","Metadata":{"Common.PropertyName":"Rows"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridContent<TContent>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1441382848,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridDetailRow<TRow>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridDetailRow"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TRow","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TRow for the Syncfusion.Blazor.Grids.Internal.GridDetailRow<TRow> component.","Metadata":{"Common.PropertyName":"TRow","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"RowParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"RowParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridDetailRow<TRow>","Components.GenericTyped":"True"}},{"HashCode":-1651214856,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridDetailRow<TRow>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.GridDetailRow"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TRow","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TRow for the Syncfusion.Blazor.Grids.Internal.GridDetailRow<TRow> component.","Metadata":{"Common.PropertyName":"TRow","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"RowParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"RowParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridDetailRow<TRow>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1768840348,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridHeader<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridHeader"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.GridHeader<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"HeaderParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"HeaderParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridHeader<TContent>","Components.GenericTyped":"True"}},{"HashCode":429602973,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridHeader<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.GridHeader"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.GridHeader<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"HeaderParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"HeaderParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridHeader<TContent>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":96499825,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridHeaderCell<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridHeaderCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.GridHeaderCell<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"HeaderCellParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"HeaderCellParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridHeaderCell<TContent>","Components.GenericTyped":"True"}},{"HashCode":-988108243,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridHeaderCell<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.GridHeaderCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.GridHeaderCell<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"HeaderCellParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"HeaderCellParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridHeaderCell<TContent>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1075628979,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridRow<TRow>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridRow"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TRow","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TRow for the Syncfusion.Blazor.Grids.Internal.GridRow<TRow> component.","Metadata":{"Common.PropertyName":"TRow","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"RowParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"RowParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridRow<TRow>","Components.GenericTyped":"True"}},{"HashCode":-1371855618,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridRow<TRow>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.GridRow"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TRow","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TRow for the Syncfusion.Blazor.Grids.Internal.GridRow<TRow> component.","Metadata":{"Common.PropertyName":"TRow","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"RowParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"RowParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridRow<TRow>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":36211532,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridToolbar<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridToolbar"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.GridToolbar<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Metadata":{"Common.PropertyName":"Data"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridToolbar<T>","Components.GenericTyped":"True"}},{"HashCode":-1582623879,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridToolbar<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.GridToolbar"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.GridToolbar<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Metadata":{"Common.PropertyName":"Data"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridToolbar<T>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1846229970,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridVirtualContent<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridVirtualContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.GridVirtualContent<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"VirtualContentParameter","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"VirtualContentParameter"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridVirtualContent<TContent>","Components.GenericTyped":"True"}},{"HashCode":-369055564,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridVirtualContent<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.GridVirtualContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.GridVirtualContent<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"VirtualContentParameter","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"VirtualContentParameter"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridVirtualContent<TContent>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1072004283,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridVirtualHeader<THeader>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GridVirtualHeader"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"THeader","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter THeader for the Syncfusion.Blazor.Grids.Internal.GridVirtualHeader<THeader> component.","Metadata":{"Common.PropertyName":"THeader","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"VirtualHeaderParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"VirtualHeaderParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridVirtualHeader<THeader>","Components.GenericTyped":"True"}},{"HashCode":-1636407325,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GridVirtualHeader<THeader>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.GridVirtualHeader"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"THeader","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter THeader for the Syncfusion.Blazor.Grids.Internal.GridVirtualHeader<THeader> component.","Metadata":{"Common.PropertyName":"THeader","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"VirtualHeaderParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"VirtualHeaderParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GridVirtualHeader<THeader>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-343286504,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GroupCaption<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupCaption"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.GroupCaption<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"CellParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"CellParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GroupCaption<TCell>","Components.GenericTyped":"True"}},{"HashCode":-1725879695,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GroupCaption<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.GroupCaption"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.GroupCaption<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"CellParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"CellParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GroupCaption<TCell>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-702253311,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GroupDropArea<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupDropArea"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.GroupDropArea<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GroupDropArea<T>","Components.GenericTyped":"True"}},{"HashCode":491298863,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GroupDropArea<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.GroupDropArea"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.GroupDropArea<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GroupDropArea<T>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1906017222,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GroupedHeader<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupedHeader"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.GroupedHeader<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Column","TypeName":"System.String","Metadata":{"Common.PropertyName":"Column"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GroupedHeader<TContent>","Components.GenericTyped":"True"}},{"HashCode":746907713,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.GroupedHeader<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.GroupedHeader"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.GroupedHeader<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Column","TypeName":"System.String","Metadata":{"Common.PropertyName":"Column"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.GroupedHeader<TContent>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1481581540,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.IndentCell<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"IndentCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.IndentCell<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"CellParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"CellParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.IndentCell<TCell>","Components.GenericTyped":"True"}},{"HashCode":-675857565,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.IndentCell<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.IndentCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.IndentCell<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"CellParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"CellParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.IndentCell<TCell>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-536299823,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.NormalEdit<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NormalEdit"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.NormalEdit<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Cells","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.Internal.Cell<System.Object>>","Metadata":{"Common.PropertyName":"Cells"}},{"Kind":"Components.Component","Name":"CellParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"CellParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.NormalEdit<TCell>","Components.GenericTyped":"True"}},{"HashCode":222331847,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.NormalEdit<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.NormalEdit"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.NormalEdit<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Cells","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.Internal.Cell<System.Object>>","Metadata":{"Common.PropertyName":"Cells"}},{"Kind":"Components.Component","Name":"CellParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"CellParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.NormalEdit<TCell>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-792842317,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.Preloader<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Preloader"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.Preloader<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Metadata":{"Common.PropertyName":"Data"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.Preloader<TContent>","Components.GenericTyped":"True"}},{"HashCode":1073136260,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.Preloader<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.Preloader"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.Preloader<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Data","TypeName":"System.Collections.Generic.IEnumerable<System.Object>","Metadata":{"Common.PropertyName":"Data"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.Preloader<TContent>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1470207921,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.Internal.Preloader<TContent>.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Preloader"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.Preloader<TContent>.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-818586758,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Grids.Internal.Preloader<TContent>.ChildContent","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Grids.Internal.Preloader"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.Preloader<TContent>.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1767269056,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.PrintLayout<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PrintLayout"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.PrintLayout<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Parent","TypeName":"Syncfusion.Blazor.Grids.SfGrid<T>","Metadata":{"Common.PropertyName":"Parent","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.PrintLayout<T>","Components.GenericTyped":"True"}},{"HashCode":-1483660134,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.PrintLayout<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.PrintLayout"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.PrintLayout<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Parent","TypeName":"Syncfusion.Blazor.Grids.SfGrid<T>","Metadata":{"Common.PropertyName":"Parent","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.PrintLayout<T>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1315473801,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.RowDragCell<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"RowDragCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.RowDragCell<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"CellParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"CellParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.RowDragCell<TCell>","Components.GenericTyped":"True"}},{"HashCode":606700578,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.RowDragCell<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.RowDragCell"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.RowDragCell<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"CellParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"CellParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.RowDragCell<TCell>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1156302857,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.Summary<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Summary"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.Summary<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"CellParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"CellParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.Summary<TCell>","Components.GenericTyped":"True"}},{"HashCode":-848045816,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.Summary<TCell>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.Summary"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TCell","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TCell for the Syncfusion.Blazor.Grids.Internal.Summary<TCell> component.","Metadata":{"Common.PropertyName":"TCell","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"CellParameters","TypeName":"Syncfusion.Blazor.Grids.Internal.ComponentParameters","Metadata":{"Common.PropertyName":"CellParameters"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.Summary<TCell>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1195406008,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.ValidationDialog<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValidationDialog"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.ValidationDialog<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ValidationDialog<T>","Components.GenericTyped":"True"}},{"HashCode":1129701717,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.ValidationDialog<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.ValidationDialog"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.ValidationDialog<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ValidationDialog<T>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1894746324,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.ValidationTooltip<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ValidationTooltip"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.ValidationTooltip<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridColumn>","Metadata":{"Common.PropertyName":"Columns"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ValidationTooltip<T>","Components.GenericTyped":"True"}},{"HashCode":734564098,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.ValidationTooltip<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.ValidationTooltip"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.ValidationTooltip<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridColumn>","Metadata":{"Common.PropertyName":"Columns"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.ValidationTooltip<T>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2016325004,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.WidthController<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"WidthController"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.WidthController<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridColumn>","Metadata":{"Common.PropertyName":"Columns"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Metadata":{"Common.PropertyName":"ID"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.WidthController<TContent>","Components.GenericTyped":"True"}},{"HashCode":919681909,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.WidthController<TContent>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.WidthController"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TContent","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TContent for the Syncfusion.Blazor.Grids.Internal.WidthController<TContent> component.","Metadata":{"Common.PropertyName":"TContent","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Columns","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Grids.GridColumn>","Metadata":{"Common.PropertyName":"Columns"}},{"Kind":"Components.Component","Name":"IsFrozen","TypeName":"System.Boolean?","Metadata":{"Common.PropertyName":"IsFrozen"}},{"Kind":"Components.Component","Name":"IsFrozenRight","TypeName":"System.Boolean","Metadata":{"Common.PropertyName":"IsFrozenRight"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Metadata":{"Common.PropertyName":"ID"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.WidthController<TContent>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":520324640,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.Editors.ColumnsValidator<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ColumnsValidator"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.Editors.ColumnsValidator<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ValidationRules","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Metadata":{"Common.PropertyName":"ValidationRules"}},{"Kind":"Components.Component","Name":"OnValidated","TypeName":"System.Action<Syncfusion.Blazor.Internal.ValidationResult>","Metadata":{"Common.PropertyName":"OnValidated","Components.DelegateSignature":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.Editors.ColumnsValidator<T>","Components.GenericTyped":"True"}},{"HashCode":-852055921,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Grids.Internal.Editors.ColumnsValidator<T>","AssemblyName":"Syncfusion.Blazor.Grids","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.Internal.Editors.ColumnsValidator"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Grids.Internal.Editors.ColumnsValidator<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ValidationRules","TypeName":"System.Collections.Generic.IDictionary<System.String, System.Object>","Metadata":{"Common.PropertyName":"ValidationRules"}},{"Kind":"Components.Component","Name":"OnValidated","TypeName":"System.Action<Syncfusion.Blazor.Internal.ValidationResult>","Metadata":{"Common.PropertyName":"OnValidated","Components.DelegateSignature":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Grids.Internal.Editors.ColumnsValidator<T>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-409071340,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.ListViewEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            Configure handlers to handle the events with the ListView component.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListViewEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.ListViewEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Lists.ActionEventsArgs>","Documentation":"\n            <summary>\n            Triggers when each ListView action begins.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Lists.ActionEventsArgs>","Documentation":"\n            <summary>\n            Triggers when each ListView action is completed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Lists.ActionFailureEventsArgs>","Documentation":"\n            <summary>\n            Triggers when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Clicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Lists.ClickEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when a list item in the component is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Clicked","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnBack","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Lists.BackEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the back icon is clicked in the nested list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBack","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.ListViewEvents<TValue>","Components.GenericTyped":"True"}},{"HashCode":-670828705,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.ListViewEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            Configure handlers to handle the events with the ListView component.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists.ListViewEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.ListViewEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionBegin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Lists.ActionEventsArgs>","Documentation":"\n            <summary>\n            Triggers when each ListView action begins.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionBegin","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionComplete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Lists.ActionEventsArgs>","Documentation":"\n            <summary>\n            Triggers when each ListView action is completed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionComplete","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Lists.ActionFailureEventsArgs>","Documentation":"\n            <summary>\n            Triggers when the data fetch request from the remote server fails.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Clicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Lists.ClickEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when a list item in the component is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Clicked","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnBack","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Lists.BackEventArgs<TValue>>","Documentation":"\n            <summary>\n            Triggers when the back icon is clicked in the nested list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBack","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.ListViewEvents<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1781791867,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.ListViewFieldSettings<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            Configure handlers to handle the field settings with the ListView component.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListViewFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.ListViewFieldSettings<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Child","TypeName":"System.String","Documentation":"\n            <summary>\n            The `Child` property is used for nested navigation of listed items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Child"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the enabled state of the ListView component.\n            You can disable the component using this property by setting its value as false.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            The `GroupBy` property is used to wraps the ListView elements into a group based on the field value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupBy"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            The `HtmlAttributes` allows additional attributes such as id, class, etc., and\n             accepts n number of attributes in a key-value pair format.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            The `IconCss` is used to customize the icon fo the list items dynamically.\n             You can add a specific image to the icons using the `iconCss` property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id field mapped in data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"IsChecked","TypeName":"System.String","Documentation":"\n            <summary>\n            The `IsChecked` property is used to check whether the list items are in a checked state or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsChecked"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            The `Text` property is used to map the text value from the data source for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"\n            <summary>\n            The `Tooltip` is used to display the information about the target element while hovering on list items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Tooltip"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.ListViewFieldSettings<TValue>","Components.GenericTyped":"True"}},{"HashCode":-864883096,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.ListViewFieldSettings<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            Configure handlers to handle the field settings with the ListView component.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists.ListViewFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.ListViewFieldSettings<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Child","TypeName":"System.String","Documentation":"\n            <summary>\n            The `Child` property is used for nested navigation of listed items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Child"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the enabled state of the ListView component.\n            You can disable the component using this property by setting its value as false.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            The `GroupBy` property is used to wraps the ListView elements into a group based on the field value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupBy"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            The `HtmlAttributes` allows additional attributes such as id, class, etc., and\n             accepts n number of attributes in a key-value pair format.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            The `IconCss` is used to customize the icon fo the list items dynamically.\n             You can add a specific image to the icons using the `iconCss` property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the id field mapped in data source.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"IsChecked","TypeName":"System.String","Documentation":"\n            <summary>\n            The `IsChecked` property is used to check whether the list items are in a checked state or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsChecked"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            The `Text` property is used to map the text value from the data source for each list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"\n            <summary>\n            The `Tooltip` is used to display the information about the target element while hovering on list items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Tooltip"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.ListViewFieldSettings<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2084875108,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            Configure templates of the ListView component.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListViewTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.ListViewTemplates<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TValue>","Documentation":"\n            <summary>\n            The ListView component supports to customize the content of each list items with the help of Template property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Template","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Lists.ComposedItemModel<TValue>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the ListView.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The ListView has an option to custom design the ListView header title with the help of HeaderTemplate property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>","Components.GenericTyped":"True"}},{"HashCode":-61536094,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            Configure templates of the ListView component.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists.ListViewTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.ListViewTemplates<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TValue>","Documentation":"\n            <summary>\n            The ListView component supports to customize the content of each list items with the help of Template property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Template","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Lists.ComposedItemModel<TValue>>","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the ListView.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The ListView has an option to custom design the ListView header title with the help of HeaderTemplate property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1857008546,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>.Template","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            The ListView component supports to customize the content of each list items with the help of Template property.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"ListViewTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>.Template","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":964407351,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>.Template","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            The ListView component supports to customize the content of each list items with the help of Template property.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"Syncfusion.Blazor.Lists.ListViewTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>.Template","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1073573451,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the ListView.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"ListViewTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>.GroupTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":955738260,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            Accepts the template design and assigns it to the group headers present in the ListView.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.Lists.ListViewTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>.GroupTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-509515990,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            The ListView has an option to custom design the ListView header title with the help of HeaderTemplate property.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"ListViewTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>.HeaderTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":983252993,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            The ListView has an option to custom design the ListView header title with the help of HeaderTemplate property.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.Lists.ListViewTemplates"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.ListViewTemplates<TValue>.HeaderTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":420384704,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.SfListView<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            The SfListView control represents the data in interactive hierarchical structure interface across different layouts or views,\n            that also has features such as data-binding, template, grouping and virtualization.\n            </summary>\n            <summary>\n            Component for executing complex list items common functionalities.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n            <summary>\n            Configure member properties of the ListView component.\n            </summary>\n            <summary>\n            The SfListView control represents the data in interactive hierarchical structure interface across different layouts or views,\n            that also has features such as data-binding, template, grouping and virtualization.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfListView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.SfListView<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            The `ID` property is used as a key to identify our element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Update child content from parent component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Animation","TypeName":"Syncfusion.Blazor.Lists.AnimationSettings","Documentation":"\n            <summary>\n            The `Animation` property provides an option to apply different\n             animations to the ListView component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Animation"}},{"Kind":"Components.Component","Name":"CheckBoxPosition","TypeName":"Syncfusion.Blazor.Lists.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            The `CheckBoxPosition` is used to set the position of the check box in a list item.\n            By default, the `checkBoxPosition` is Left, which will appear before the text content in a list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckBoxPosition"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            The `CssClass` property is used to add a user-preferred class name in the root element of the ListView,\n             using which you can customize the component (both CSS and functionality customization).\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            The `DataSource` provides the data to render the ListView component which is mapped with the fields of ListView.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If `Enabled` is set to true, the list items will be enabled. \n            You can disable the component using this property by setting its value as false.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable persisting component's state between page reloads.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"EnableVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If `EnableVirtualization` is set to true, the ListView’s performance will improve when loading a large amount of data.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualization"}},{"Kind":"Components.Component","Name":"HeaderTitle","TypeName":"System.String","Documentation":"\n            <summary>\n            The `HeaderTitle` is used to set the title of the ListView component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTitle"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the height of the ListView component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Height"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            The `HtmlAttributes` allows additional attributes such as id, class, etc., and\n             accepts n number of attributes in a key-value pair format.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            The `Query` is used to fetch specific data from the data source by using the where and select keywords.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Query"}},{"Kind":"Components.Component","Name":"ShowCheckBox","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If `ShowCheckBox` is set to true, the checkbox will  be shown or hidden.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowCheckBox"}},{"Kind":"Components.Component","Name":"ShowHeader","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If `ShowHeader` is set to true, the header of the ListView component will  be shown or hidden.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowHeader"}},{"Kind":"Components.Component","Name":"ShowIcon","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If `ShowIcon` is set to true, the icon of the list item will  be shown or hidden.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowIcon"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.Lists.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            The `SortOrder` is used to sort the data source. The available type of sort orders are,\n             `None` - The data source will not be sorted.\n             `Ascending` - The data source will be sorted in ascending order.\n             `Descending` - The data source will be sorted in descending order.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SortOrder"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the width of the ListView component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Lists.ComposedItemModel<TValue>>","Documentation":"\n            <summary>\n            The ListView has an option to custom design the group header title with the help of the groupTemplate property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The ListView has an option to custom design the ListView header title with the help of the headerTemplate property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TValue>","Documentation":"\n            <summary>\n            The ListView supports customizing the content of each list item with the help of template property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Template","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.SfListView<TValue>","Components.GenericTyped":"True"}},{"HashCode":2008175136,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.SfListView<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            The SfListView control represents the data in interactive hierarchical structure interface across different layouts or views,\n            that also has features such as data-binding, template, grouping and virtualization.\n            </summary>\n            <summary>\n            Component for executing complex list items common functionalities.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n            <summary>\n            Configure member properties of the ListView component.\n            </summary>\n            <summary>\n            The SfListView control represents the data in interactive hierarchical structure interface across different layouts or views,\n            that also has features such as data-binding, template, grouping and virtualization.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists.SfListView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.SfListView<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            The `ID` property is used as a key to identify our element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Update child content from parent component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Animation","TypeName":"Syncfusion.Blazor.Lists.AnimationSettings","Documentation":"\n            <summary>\n            The `Animation` property provides an option to apply different\n             animations to the ListView component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Animation"}},{"Kind":"Components.Component","Name":"CheckBoxPosition","TypeName":"Syncfusion.Blazor.Lists.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            The `CheckBoxPosition` is used to set the position of the check box in a list item.\n            By default, the `checkBoxPosition` is Left, which will appear before the text content in a list item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckBoxPosition"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            The `CssClass` property is used to add a user-preferred class name in the root element of the ListView,\n             using which you can customize the component (both CSS and functionality customization).\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            The `DataSource` provides the data to render the ListView component which is mapped with the fields of ListView.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If `Enabled` is set to true, the list items will be enabled. \n            You can disable the component using this property by setting its value as false.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable persisting component's state between page reloads.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"EnableVirtualization","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If `EnableVirtualization` is set to true, the ListView’s performance will improve when loading a large amount of data.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableVirtualization"}},{"Kind":"Components.Component","Name":"HeaderTitle","TypeName":"System.String","Documentation":"\n            <summary>\n            The `HeaderTitle` is used to set the title of the ListView component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTitle"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the height of the ListView component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Height"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            The `HtmlAttributes` allows additional attributes such as id, class, etc., and\n             accepts n number of attributes in a key-value pair format.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            The `Query` is used to fetch specific data from the data source by using the where and select keywords.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Query"}},{"Kind":"Components.Component","Name":"ShowCheckBox","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If `ShowCheckBox` is set to true, the checkbox will  be shown or hidden.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowCheckBox"}},{"Kind":"Components.Component","Name":"ShowHeader","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If `ShowHeader` is set to true, the header of the ListView component will  be shown or hidden.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowHeader"}},{"Kind":"Components.Component","Name":"ShowIcon","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            If `ShowIcon` is set to true, the icon of the list item will  be shown or hidden.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowIcon"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.Lists.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            The `SortOrder` is used to sort the data source. The available type of sort orders are,\n             `None` - The data source will not be sorted.\n             `Ascending` - The data source will be sorted in ascending order.\n             `Descending` - The data source will be sorted in descending order.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SortOrder"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the width of the ListView component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"GroupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Lists.ComposedItemModel<TValue>>","Documentation":"\n            <summary>\n            The ListView has an option to custom design the group header title with the help of the groupTemplate property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            The ListView has an option to custom design the ListView header title with the help of the headerTemplate property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TValue>","Documentation":"\n            <summary>\n            The ListView supports customizing the content of each list item with the help of template property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Template","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.SfListView<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1390017864,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.SfListView<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <exclude />\n            <summary>\n            Update child content from parent component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfListView"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.SfListView<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1213587665,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.SfListView<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <exclude />\n            <summary>\n            Update child content from parent component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Lists.SfListView"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.SfListView<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-246647632,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.SfListView<TValue>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            The ListView has an option to custom design the group header title with the help of the groupTemplate property.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"SfListView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.SfListView<TValue>.GroupTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":950636860,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.SfListView<TValue>.GroupTemplate","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            The ListView has an option to custom design the group header title with the help of the groupTemplate property.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"GroupTemplate","ParentTag":"Syncfusion.Blazor.Lists.SfListView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'GroupTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.SfListView<TValue>.GroupTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-943684790,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.SfListView<TValue>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            The ListView has an option to custom design the ListView header title with the help of the headerTemplate property.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"SfListView"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.SfListView<TValue>.HeaderTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1930223552,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.SfListView<TValue>.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            The ListView has an option to custom design the ListView header title with the help of the headerTemplate property.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.Lists.SfListView"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.SfListView<TValue>.HeaderTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2013674027,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.SfListView<TValue>.Template","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            The ListView supports customizing the content of each list item with the help of template property.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"SfListView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.SfListView<TValue>.Template","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":264186219,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.SfListView<TValue>.Template","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            The ListView supports customizing the content of each list item with the help of template property.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"Syncfusion.Blazor.Lists.SfListView"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.SfListView<TValue>.Template","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1903574372,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists._Imports","AssemblyName":"Syncfusion.Blazor.Lists","CaseSensitive":true,"TagMatchingRules":[{"TagName":"_Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists._Imports"}},{"HashCode":-1192512839,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists._Imports","AssemblyName":"Syncfusion.Blazor.Lists","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists._Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists._Imports","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1275451407,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.CreateListFromComplex<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <exclude />\n            <summary>\n            Component to create list from complex data for executing complex list items common functionalities.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CreateListFromComplex"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.Internal.CreateListFromComplex<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the content which has to be passed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"LiElementPosition","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the li element position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LiElementPosition"}},{"Kind":"Components.Component","Name":"ListId","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the id property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListId"}},{"Kind":"Components.Component","Name":"MappedData","TypeName":"Syncfusion.Blazor.Lists.Internal.FieldsValueMapping<System.Collections.Generic.List<TValue>>","Documentation":"\n            <summary>\n            Gets or sets MappedData.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MappedData","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListIsGroupItem","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets IsGroupItem field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListIsGroupItem"}},{"Kind":"Components.Component","Name":"Data","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets Data field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Data","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupItemData","TypeName":"Syncfusion.Blazor.Lists.ComposedItemModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets GroupItemData field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupItemData","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListIsItemTemplate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the item template field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListIsItemTemplate"}},{"Kind":"Components.Component","Name":"RandomID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the random id field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RandomID"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the index field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index"}},{"Kind":"Components.Component","Name":"ListClassNames","TypeName":"Syncfusion.Blazor.Lists.Internal.ClassList","Documentation":"\n            <summary>\n            Gets or sets the class names field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListClassNames"}},{"Kind":"Components.Component","Name":"SfListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets the ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SfListBaseOptionModel","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Gets or sets DataSource field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Level","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Level"}},{"Kind":"Components.Component","Name":"ItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered before each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreating","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemCreated","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered after each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreated","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets item template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplatePropertyName"}},{"Kind":"Components.Component","Name":"GroupTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets group template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplatePropertyName"}},{"Kind":"Components.Component","Name":"StartingPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets starting position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartingPosition"}},{"Kind":"Components.Component","Name":"LiElementHeight","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets list element height.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LiElementHeight"}},{"Kind":"Components.Component","Name":"EndPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets end position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndPosition"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"VirtualScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the virtual scrolling.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VirtualScrolling"}},{"Kind":"Components.Component","Name":"CheckBoxPosition","TypeName":"Syncfusion.Blazor.Lists.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the checkbox position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckBoxPosition"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.CreateListFromComplex<TValue>","Components.GenericTyped":"True"}},{"HashCode":-1624455334,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.CreateListFromComplex<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <exclude />\n            <summary>\n            Component to create list from complex data for executing complex list items common functionalities.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists.Internal.CreateListFromComplex"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.Internal.CreateListFromComplex<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the content which has to be passed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"LiElementPosition","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the li element position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LiElementPosition"}},{"Kind":"Components.Component","Name":"ListId","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the id property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListId"}},{"Kind":"Components.Component","Name":"MappedData","TypeName":"Syncfusion.Blazor.Lists.Internal.FieldsValueMapping<System.Collections.Generic.List<TValue>>","Documentation":"\n            <summary>\n            Gets or sets MappedData.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MappedData","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListIsGroupItem","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets IsGroupItem field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListIsGroupItem"}},{"Kind":"Components.Component","Name":"Data","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets Data field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Data","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupItemData","TypeName":"Syncfusion.Blazor.Lists.ComposedItemModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets GroupItemData field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupItemData","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListIsItemTemplate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the item template field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListIsItemTemplate"}},{"Kind":"Components.Component","Name":"RandomID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the random id field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RandomID"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the index field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index"}},{"Kind":"Components.Component","Name":"ListClassNames","TypeName":"Syncfusion.Blazor.Lists.Internal.ClassList","Documentation":"\n            <summary>\n            Gets or sets the class names field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListClassNames"}},{"Kind":"Components.Component","Name":"SfListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets the ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SfListBaseOptionModel","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Gets or sets DataSource field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Level","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Level"}},{"Kind":"Components.Component","Name":"ItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered before each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreating","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemCreated","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered after each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreated","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets item template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplatePropertyName"}},{"Kind":"Components.Component","Name":"GroupTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets group template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplatePropertyName"}},{"Kind":"Components.Component","Name":"StartingPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets starting position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartingPosition"}},{"Kind":"Components.Component","Name":"LiElementHeight","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets list element height.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LiElementHeight"}},{"Kind":"Components.Component","Name":"EndPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets end position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndPosition"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"VirtualScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the virtual scrolling.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VirtualScrolling"}},{"Kind":"Components.Component","Name":"CheckBoxPosition","TypeName":"Syncfusion.Blazor.Lists.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the checkbox position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckBoxPosition"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.CreateListFromComplex<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-160391493,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.Internal.CreateListFromComplex<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            Defines the content which has to be passed.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"CreateListFromComplex"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.CreateListFromComplex<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":76187712,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.Internal.CreateListFromComplex<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            Defines the content which has to be passed.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Lists.Internal.CreateListFromComplex"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.CreateListFromComplex<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1231666187,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.CreateListFromPrimitive<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <exclude />\n            /// <summary>\n            Component for executing primitive list items common functionalities.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CreateListFromPrimitive"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.Internal.CreateListFromPrimitive<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Gets or sets DataSource field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Level","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Level"}},{"Kind":"Components.Component","Name":"ItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered before each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreating","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemCreated","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered after each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreated","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets item template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplatePropertyName"}},{"Kind":"Components.Component","Name":"GroupTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets group template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplatePropertyName"}},{"Kind":"Components.Component","Name":"StartingPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets starting position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartingPosition"}},{"Kind":"Components.Component","Name":"LiElementHeight","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets list element height.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LiElementHeight"}},{"Kind":"Components.Component","Name":"EndPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets end position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndPosition"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"VirtualScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the virtual scrolling.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VirtualScrolling"}},{"Kind":"Components.Component","Name":"CheckBoxPosition","TypeName":"Syncfusion.Blazor.Lists.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the checkbox position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckBoxPosition"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.CreateListFromPrimitive<TValue>","Components.GenericTyped":"True"}},{"HashCode":-42847901,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.CreateListFromPrimitive<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <exclude />\n            /// <summary>\n            Component for executing primitive list items common functionalities.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists.Internal.CreateListFromPrimitive"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.Internal.CreateListFromPrimitive<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Gets or sets DataSource field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Level","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Level"}},{"Kind":"Components.Component","Name":"ItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered before each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreating","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemCreated","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered after each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreated","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets item template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplatePropertyName"}},{"Kind":"Components.Component","Name":"GroupTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets group template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplatePropertyName"}},{"Kind":"Components.Component","Name":"StartingPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets starting position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartingPosition"}},{"Kind":"Components.Component","Name":"LiElementHeight","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets list element height.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LiElementHeight"}},{"Kind":"Components.Component","Name":"EndPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets end position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndPosition"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"VirtualScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the virtual scrolling.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VirtualScrolling"}},{"Kind":"Components.Component","Name":"CheckBoxPosition","TypeName":"Syncfusion.Blazor.Lists.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the checkbox position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckBoxPosition"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.CreateListFromPrimitive<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":502871585,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.ListBaseFoundation<T>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <exclude />\n            <summary>\n            A list base component for all the Syncfusion Blazor List dependant components to implement the common functionalities.\n            </summary>\n            <typeparam name=\"T\">The first generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListBaseFoundation"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Lists.Internal.ListBaseFoundation<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<T>","Documentation":"\n            <summary>\n            Gets or sets DataSource field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<T>","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Level","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Level"}},{"Kind":"Components.Component","Name":"ItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered before each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreating","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemCreated","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered after each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreated","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets item template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplatePropertyName"}},{"Kind":"Components.Component","Name":"GroupTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets group template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplatePropertyName"}},{"Kind":"Components.Component","Name":"StartingPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets starting position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartingPosition"}},{"Kind":"Components.Component","Name":"LiElementHeight","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets list element height.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LiElementHeight"}},{"Kind":"Components.Component","Name":"EndPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets end position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndPosition"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"VirtualScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the virtual scrolling.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VirtualScrolling"}},{"Kind":"Components.Component","Name":"CheckBoxPosition","TypeName":"Syncfusion.Blazor.Lists.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the checkbox position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckBoxPosition"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseFoundation<T>","Components.GenericTyped":"True"}},{"HashCode":-1393735651,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.ListBaseFoundation<T>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <exclude />\n            <summary>\n            A list base component for all the Syncfusion Blazor List dependant components to implement the common functionalities.\n            </summary>\n            <typeparam name=\"T\">The first generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists.Internal.ListBaseFoundation"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Lists.Internal.ListBaseFoundation<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<T>","Documentation":"\n            <summary>\n            Gets or sets DataSource field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<T>","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Level","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Level"}},{"Kind":"Components.Component","Name":"ItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered before each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreating","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemCreated","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered after each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreated","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets item template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplatePropertyName"}},{"Kind":"Components.Component","Name":"GroupTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets group template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplatePropertyName"}},{"Kind":"Components.Component","Name":"StartingPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets starting position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartingPosition"}},{"Kind":"Components.Component","Name":"LiElementHeight","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets list element height.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LiElementHeight"}},{"Kind":"Components.Component","Name":"EndPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets end position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndPosition"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"VirtualScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the virtual scrolling.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VirtualScrolling"}},{"Kind":"Components.Component","Name":"CheckBoxPosition","TypeName":"Syncfusion.Blazor.Lists.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the checkbox position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckBoxPosition"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseFoundation<T>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":683437438,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.ListBaseFields<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            List base fields class.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListBaseFields"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.Internal.ListBaseFields<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Child","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in Child.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Child"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in Enabled.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in GroupBy.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupBy"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in HtmlAttributes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in IconCss.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"IsChecked","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in IsChecked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsChecked"}},{"Kind":"Components.Component","Name":"IsVisible","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in IsVisible.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsVisible"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in Text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in Tooltip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Tooltip"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in Value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseFields<TValue>","Components.GenericTyped":"True"}},{"HashCode":264119707,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.ListBaseFields<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            List base fields class.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists.Internal.ListBaseFields"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.Internal.ListBaseFields<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Child","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in Child.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Child"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in Enabled.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"GroupBy","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in GroupBy.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupBy"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in HtmlAttributes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in IconCss.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"IsChecked","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in IsChecked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsChecked"}},{"Kind":"Components.Component","Name":"IsVisible","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in IsVisible.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsVisible"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in Text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in Tooltip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Tooltip"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies that fields that mapped in Value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseFields<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":425246176,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.ListItemBase<T>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            An class that holds list Item properties related arguments.\n            </summary>\n            <typeparam name=\"T\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListItemBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Lists.Internal.ListItemBase<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"MappedData","TypeName":"Syncfusion.Blazor.Lists.Internal.FieldsValueMapping<System.Collections.Generic.List<T>>","Documentation":"\n            <summary>\n            Gets or sets MappedData.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MappedData","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"IsGroupItem","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets IsGroupItem field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsGroupItem"}},{"Kind":"Components.Component","Name":"Data","TypeName":"T","Documentation":"\n            <summary>\n            Gets or sets Data field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Data","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupItemData","TypeName":"Syncfusion.Blazor.Lists.ComposedItemModel<T>","Documentation":"\n            <summary>\n            Gets or sets GroupItemData field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupItemData","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"IsItemTemplate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the item template field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsItemTemplate"}},{"Kind":"Components.Component","Name":"IsGroupTemplate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the group item template field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsGroupTemplate"}},{"Kind":"Components.Component","Name":"RandomID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the random id field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RandomID"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the index field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index"}},{"Kind":"Components.Component","Name":"ClassNames","TypeName":"Syncfusion.Blazor.Lists.Internal.ClassList","Documentation":"\n            <summary>\n            Gets or sets the class names field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ClassNames"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<T>","Documentation":"\n            <summary>\n            Gets or sets the ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.ListItemBase<T>","Components.GenericTyped":"True"}},{"HashCode":339892462,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.ListItemBase<T>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            An class that holds list Item properties related arguments.\n            </summary>\n            <typeparam name=\"T\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists.Internal.ListItemBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Lists.Internal.ListItemBase<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"MappedData","TypeName":"Syncfusion.Blazor.Lists.Internal.FieldsValueMapping<System.Collections.Generic.List<T>>","Documentation":"\n            <summary>\n            Gets or sets MappedData.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MappedData","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"IsGroupItem","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets IsGroupItem field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsGroupItem"}},{"Kind":"Components.Component","Name":"Data","TypeName":"T","Documentation":"\n            <summary>\n            Gets or sets Data field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Data","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupItemData","TypeName":"Syncfusion.Blazor.Lists.ComposedItemModel<T>","Documentation":"\n            <summary>\n            Gets or sets GroupItemData field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupItemData","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"IsItemTemplate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the item template field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsItemTemplate"}},{"Kind":"Components.Component","Name":"IsGroupTemplate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the group item template field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsGroupTemplate"}},{"Kind":"Components.Component","Name":"RandomID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the random id field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RandomID"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the index field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index"}},{"Kind":"Components.Component","Name":"ClassNames","TypeName":"Syncfusion.Blazor.Lists.Internal.ClassList","Documentation":"\n            <summary>\n            Gets or sets the class names field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ClassNames"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<T>","Documentation":"\n            <summary>\n            Gets or sets the ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.ListItemBase<T>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1546514232,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.ListCommonBase<T>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            This class holds listbase properties related arguments.\n            </summary>\n            <typeparam name=\"T\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListCommonBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Lists.Internal.ListCommonBase<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<T>","Documentation":"\n            <summary>\n            Gets or sets DataSource field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<T>","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Level","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Level"}},{"Kind":"Components.Component","Name":"ItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered before each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreating","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemCreated","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered after each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreated","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets item template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplatePropertyName"}},{"Kind":"Components.Component","Name":"GroupTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets group template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplatePropertyName"}},{"Kind":"Components.Component","Name":"StartingPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets starting position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartingPosition"}},{"Kind":"Components.Component","Name":"LiElementHeight","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets list element height.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LiElementHeight"}},{"Kind":"Components.Component","Name":"EndPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets end position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndPosition"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"VirtualScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the virtual scrolling.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VirtualScrolling"}},{"Kind":"Components.Component","Name":"CheckBoxPosition","TypeName":"Syncfusion.Blazor.Lists.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the checkbox position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckBoxPosition"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.ListCommonBase<T>","Components.GenericTyped":"True"}},{"HashCode":1340358017,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.ListCommonBase<T>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            This class holds listbase properties related arguments.\n            </summary>\n            <typeparam name=\"T\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists.Internal.ListCommonBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"T","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter T for the Syncfusion.Blazor.Lists.Internal.ListCommonBase<T> component.","Metadata":{"Common.PropertyName":"T","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<T>","Documentation":"\n            <summary>\n            Gets or sets DataSource field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<T>","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Level","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Level"}},{"Kind":"Components.Component","Name":"ItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered before each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreating","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemCreated","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<T>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered after each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreated","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets item template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplatePropertyName"}},{"Kind":"Components.Component","Name":"GroupTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets group template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplatePropertyName"}},{"Kind":"Components.Component","Name":"StartingPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets starting position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartingPosition"}},{"Kind":"Components.Component","Name":"LiElementHeight","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets list element height.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LiElementHeight"}},{"Kind":"Components.Component","Name":"EndPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets end position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndPosition"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"VirtualScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the virtual scrolling.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VirtualScrolling"}},{"Kind":"Components.Component","Name":"CheckBoxPosition","TypeName":"Syncfusion.Blazor.Lists.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the checkbox position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckBoxPosition"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.ListCommonBase<T>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":858412961,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.PrimitiveListItem<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            Component to create list from primitive data for executing primitive list items common functionalities.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PrimitiveListItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.Internal.PrimitiveListItem<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"MappedData","TypeName":"Syncfusion.Blazor.Lists.Internal.FieldsValueMapping<System.Collections.Generic.List<TValue>>","Documentation":"\n            <summary>\n            Gets or sets MappedData.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MappedData","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"IsGroupItem","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets IsGroupItem field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsGroupItem"}},{"Kind":"Components.Component","Name":"Data","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets Data field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Data","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupItemData","TypeName":"Syncfusion.Blazor.Lists.ComposedItemModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets GroupItemData field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupItemData","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"IsItemTemplate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the item template field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsItemTemplate"}},{"Kind":"Components.Component","Name":"IsGroupTemplate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the group item template field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsGroupTemplate"}},{"Kind":"Components.Component","Name":"RandomID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the random id field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RandomID"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the index field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index"}},{"Kind":"Components.Component","Name":"ClassNames","TypeName":"Syncfusion.Blazor.Lists.Internal.ClassList","Documentation":"\n            <summary>\n            Gets or sets the class names field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ClassNames"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets the ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.PrimitiveListItem<TValue>","Components.GenericTyped":"True"}},{"HashCode":1251780768,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.PrimitiveListItem<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <summary>\n            Component to create list from primitive data for executing primitive list items common functionalities.\n            </summary>\n            <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists.Internal.PrimitiveListItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.Internal.PrimitiveListItem<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"MappedData","TypeName":"Syncfusion.Blazor.Lists.Internal.FieldsValueMapping<System.Collections.Generic.List<TValue>>","Documentation":"\n            <summary>\n            Gets or sets MappedData.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MappedData","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"IsGroupItem","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets IsGroupItem field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsGroupItem"}},{"Kind":"Components.Component","Name":"Data","TypeName":"TValue","Documentation":"\n            <summary>\n            Gets or sets Data field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Data","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"GroupItemData","TypeName":"Syncfusion.Blazor.Lists.ComposedItemModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets GroupItemData field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupItemData","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"IsItemTemplate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the item template field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsItemTemplate"}},{"Kind":"Components.Component","Name":"IsGroupTemplate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the group item template field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsGroupTemplate"}},{"Kind":"Components.Component","Name":"RandomID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the random id field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RandomID"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the index field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index"}},{"Kind":"Components.Component","Name":"ClassNames","TypeName":"Syncfusion.Blazor.Lists.Internal.ClassList","Documentation":"\n            <summary>\n            Gets or sets the class names field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ClassNames"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets the ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.PrimitiveListItem<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1706813473,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.SfListBase<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <exclude />\n            <summary>\n            A list base component for all the Syncfusion Blazor List dependant components to implement the common functionalities.\n            </summary>\n            /// <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfListBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.Internal.SfListBase<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Update child content from parent component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Gets or sets DataSource field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Level","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Level"}},{"Kind":"Components.Component","Name":"ItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered before each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreating","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemCreated","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered after each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreated","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets item template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplatePropertyName"}},{"Kind":"Components.Component","Name":"GroupTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets group template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplatePropertyName"}},{"Kind":"Components.Component","Name":"StartingPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets starting position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartingPosition"}},{"Kind":"Components.Component","Name":"LiElementHeight","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets list element height.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LiElementHeight"}},{"Kind":"Components.Component","Name":"EndPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets end position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndPosition"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"VirtualScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the virtual scrolling.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VirtualScrolling"}},{"Kind":"Components.Component","Name":"CheckBoxPosition","TypeName":"Syncfusion.Blazor.Lists.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the checkbox position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckBoxPosition"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.SfListBase<TValue>","Components.GenericTyped":"True"}},{"HashCode":390608970,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Lists.Internal.SfListBase<TValue>","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <exclude />\n            <summary>\n            A list base component for all the Syncfusion Blazor List dependant components to implement the common functionalities.\n            </summary>\n            /// <typeparam name=\"TValue\">The generic type parameter.</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Lists.Internal.SfListBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Lists.Internal.SfListBase<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Update child content from parent component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Gets or sets DataSource field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ListBaseOptionModel","TypeName":"Syncfusion.Blazor.Lists.Internal.ListBaseOptionModel<TValue>","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListBaseOptionModel","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Level","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets ListBaseOptionModel field.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Level"}},{"Kind":"Components.Component","Name":"ItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered before each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreating","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemCreated","TypeName":"System.Action<Syncfusion.Blazor.Lists.Internal.ItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the callback function that triggered after each list creation.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemCreated","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets item template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemTemplatePropertyName"}},{"Kind":"Components.Component","Name":"GroupTemplatePropertyName","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets group template property name.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"GroupTemplatePropertyName"}},{"Kind":"Components.Component","Name":"StartingPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets starting position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"StartingPosition"}},{"Kind":"Components.Component","Name":"LiElementHeight","TypeName":"System.Double","Documentation":"\n            <summary>\n            Gets or sets list element height.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LiElementHeight"}},{"Kind":"Components.Component","Name":"EndPosition","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets end position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EndPosition"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets Id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"VirtualScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the virtual scrolling.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"VirtualScrolling"}},{"Kind":"Components.Component","Name":"CheckBoxPosition","TypeName":"Syncfusion.Blazor.Lists.CheckBoxPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the checkbox position.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckBoxPosition"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.SfListBase<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-911569071,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.Internal.SfListBase<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <exclude />\n            <summary>\n            Update child content from parent component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfListBase"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.SfListBase<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":927017131,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Lists.Internal.SfListBase<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Lists","Documentation":"\n            <exclude />\n            <summary>\n            Update child content from parent component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Lists.Internal.SfListBase"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Lists.Internal.SfListBase<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1723901846,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.AccordionAnimationCollapse","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A class that represents the animation to appear while collapsing the <see cref=\"T:Syncfusion.Blazor.Navigations.AccordionItem\" />.\n            </summary>\n            <remarks>\n            You can apply the animation effect and transform duration for accordion collapse action by specifying value to corresponding property.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfAccordion>\n                <AccordionAnimationSettings>\n                    <AccordionAnimationCollapse Effect=\"AnimationEffect.FadeOut\" Duration=\"300\"></AccordionAnimationCollapse>\n                </AccordionAnimationSettings>\n            </SfAccordion> \n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AccordionAnimationCollapse"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary> \n            Gets or sets the time duration to transform content on collapse action. \n            </summary> \n            <value> \n            If we set the duration value, then the content transforms with in specified duration otherwise the default duration value `400` is set.\n            </value> \n            <remarks> \n            The interval value accepts in milliseconds. \n            </remarks>\n            <example> \n            <code><![CDATA[ \n            <SfAccordion>\n                <AccordionAnimationSettings>\n                    <AccordionAnimationCollapse Duration=\"500\"></AccordionAnimationCollapse>\n                </AccordionAnimationSettings>\n            </SfAccordion> \n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Duration"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the easing effect applied when transforming the content.\n            </summary>\n            <value>\n            If we set the easing value, then the specified easing effect is applied for expand action otherwise the default easing value <c>linear</c> is set.\n            </value>\n            <remarks>\n            This property will accepts the `animation-timing-function` css values to apply content transition accordingly.   \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Easing"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets the animation effect for accordion item collapse action. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.AnimationEffect\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.AnimationEffect.SlideUp\" /> \n            </value> \n            <remarks>\n            Animation effect were disabled by setting <see cref=\"F:Syncfusion.Blazor.AnimationEffect.None\" /> to <c>Effect</c> property.\n            </remarks>\n            <example> \n            <code><![CDATA[ \n            <SfAccordion>\n                <AccordionAnimationSettings>\n                    <AccordionAnimationCollapse Effect=\"AnimationEffect.SlideDown\"></AccordionAnimationCollapse>\n                </AccordionAnimationSettings>\n            </SfAccordion> \n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Effect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionAnimationCollapse"}},{"HashCode":-1301367709,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.AccordionAnimationCollapse","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A class that represents the animation to appear while collapsing the <see cref=\"T:Syncfusion.Blazor.Navigations.AccordionItem\" />.\n            </summary>\n            <remarks>\n            You can apply the animation effect and transform duration for accordion collapse action by specifying value to corresponding property.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfAccordion>\n                <AccordionAnimationSettings>\n                    <AccordionAnimationCollapse Effect=\"AnimationEffect.FadeOut\" Duration=\"300\"></AccordionAnimationCollapse>\n                </AccordionAnimationSettings>\n            </SfAccordion> \n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.AccordionAnimationCollapse"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary> \n            Gets or sets the time duration to transform content on collapse action. \n            </summary> \n            <value> \n            If we set the duration value, then the content transforms with in specified duration otherwise the default duration value `400` is set.\n            </value> \n            <remarks> \n            The interval value accepts in milliseconds. \n            </remarks>\n            <example> \n            <code><![CDATA[ \n            <SfAccordion>\n                <AccordionAnimationSettings>\n                    <AccordionAnimationCollapse Duration=\"500\"></AccordionAnimationCollapse>\n                </AccordionAnimationSettings>\n            </SfAccordion> \n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Duration"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the easing effect applied when transforming the content.\n            </summary>\n            <value>\n            If we set the easing value, then the specified easing effect is applied for expand action otherwise the default easing value <c>linear</c> is set.\n            </value>\n            <remarks>\n            This property will accepts the `animation-timing-function` css values to apply content transition accordingly.   \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Easing"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets the animation effect for accordion item collapse action. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.AnimationEffect\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.AnimationEffect.SlideUp\" /> \n            </value> \n            <remarks>\n            Animation effect were disabled by setting <see cref=\"F:Syncfusion.Blazor.AnimationEffect.None\" /> to <c>Effect</c> property.\n            </remarks>\n            <example> \n            <code><![CDATA[ \n            <SfAccordion>\n                <AccordionAnimationSettings>\n                    <AccordionAnimationCollapse Effect=\"AnimationEffect.SlideDown\"></AccordionAnimationCollapse>\n                </AccordionAnimationSettings>\n            </SfAccordion> \n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Effect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionAnimationCollapse","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1643654316,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.AccordionAnimationExpand","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A class that represents the animation to appear while expanding the <see cref=\"T:Syncfusion.Blazor.Navigations.AccordionItem\" />.\n            </summary>\n            <remarks>\n            You can apply the animation effect and transform duration for accordion expand action by specifying value to corresponding property.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfAccordion>\n                <AccordionAnimationSettings>\n                    <AccordionAnimationExpand Effect=\"AnimationEffect.FadeIn\" Duration=\"300\"></AccordionAnimationExpand>\n                </AccordionAnimationSettings>\n            </SfAccordion> \n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AccordionAnimationExpand"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary> \n            Gets or sets the time duration to transform content on expand action. \n            </summary> \n            <value> \n            If we set the duration value, then the content transforms with in specified duration otherwise the default duration value `400` is set.\n            </value> \n            <remarks> \n            The interval value accepts in milliseconds. \n            </remarks>\n            <example> \n            <code><![CDATA[ \n            <SfAccordion>\n                <AccordionAnimationSettings>\n                    <AccordionAnimationExpand Duration=\"500\"></AccordionAnimationExpand>\n                </AccordionAnimationSettings>\n            </SfAccordion> \n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Duration"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the easing effect applied when transforming the content.\n            </summary>\n            <value>\n            If we set the easing value, then the specified easing effect is applied for expand action otherwise the default easing value <c>linear</c> is set.\n            </value>\n            <remarks>\n            This property will accepts the `animation-timing-function` css values to apply content transition accordingly.   \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Easing"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the animation effect for accordion item expand action. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.AnimationEffect\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.AnimationEffect.SlideDown\" /> \n            </value> \n            <remarks>\n            Animation effect were disabled by setting <see cref=\"F:Syncfusion.Blazor.AnimationEffect.None\" /> to <c>Effect</c> property.\n            </remarks>\n            <example> \n            <code><![CDATA[ \n            <SfAccordion>\n                <AccordionAnimationSettings>\n                    <AccordionAnimationExpand Effect=\"AnimationEffect.SlideUp\"></AccordionAnimationExpand>\n                </AccordionAnimationSettings>\n            </SfAccordion> \n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Effect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionAnimationExpand"}},{"HashCode":654768553,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.AccordionAnimationExpand","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A class that represents the animation to appear while expanding the <see cref=\"T:Syncfusion.Blazor.Navigations.AccordionItem\" />.\n            </summary>\n            <remarks>\n            You can apply the animation effect and transform duration for accordion expand action by specifying value to corresponding property.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfAccordion>\n                <AccordionAnimationSettings>\n                    <AccordionAnimationExpand Effect=\"AnimationEffect.FadeIn\" Duration=\"300\"></AccordionAnimationExpand>\n                </AccordionAnimationSettings>\n            </SfAccordion> \n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.AccordionAnimationExpand"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary> \n            Gets or sets the time duration to transform content on expand action. \n            </summary> \n            <value> \n            If we set the duration value, then the content transforms with in specified duration otherwise the default duration value `400` is set.\n            </value> \n            <remarks> \n            The interval value accepts in milliseconds. \n            </remarks>\n            <example> \n            <code><![CDATA[ \n            <SfAccordion>\n                <AccordionAnimationSettings>\n                    <AccordionAnimationExpand Duration=\"500\"></AccordionAnimationExpand>\n                </AccordionAnimationSettings>\n            </SfAccordion> \n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Duration"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the easing effect applied when transforming the content.\n            </summary>\n            <value>\n            If we set the easing value, then the specified easing effect is applied for expand action otherwise the default easing value <c>linear</c> is set.\n            </value>\n            <remarks>\n            This property will accepts the `animation-timing-function` css values to apply content transition accordingly.   \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Easing"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the animation effect for accordion item expand action. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.AnimationEffect\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.AnimationEffect.SlideDown\" /> \n            </value> \n            <remarks>\n            Animation effect were disabled by setting <see cref=\"F:Syncfusion.Blazor.AnimationEffect.None\" /> to <c>Effect</c> property.\n            </remarks>\n            <example> \n            <code><![CDATA[ \n            <SfAccordion>\n                <AccordionAnimationSettings>\n                    <AccordionAnimationExpand Effect=\"AnimationEffect.SlideUp\"></AccordionAnimationExpand>\n                </AccordionAnimationSettings>\n            </SfAccordion> \n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Effect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionAnimationExpand","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":56401446,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.AccordionAnimationSettings","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A class that represents the animations to appear on expand and collapse action of <see cref=\"T:Syncfusion.Blazor.Navigations.AccordionItem\" />.\n            </summary>\n            <remarks>\n            <see cref=\"T:Syncfusion.Blazor.Navigations.AccordionAnimationExpand\" /> and <see cref=\"T:Syncfusion.Blazor.Navigations.AccordionAnimationCollapse\" /> can be used to set expand and collapse animation for accordion item respectively.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfAccordion>\n                <AccordionAnimationSettings>\n                    <AccordionAnimationExpand Effect=\"AnimationEffect.FadeIn\" Duration=\"500\"></AccordionAnimationExpand>\n                    <AccordionAnimationCollapse Effect=\"AnimationEffect.FadeOut\" Duration=\"500\"></AccordionAnimationCollapse>\n                </AccordionAnimationSettings>\n            </SfAccordion> \n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AccordionAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the Child Content for the Accordion Animation Settings.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionAnimationSettings"}},{"HashCode":-1692110329,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.AccordionAnimationSettings","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A class that represents the animations to appear on expand and collapse action of <see cref=\"T:Syncfusion.Blazor.Navigations.AccordionItem\" />.\n            </summary>\n            <remarks>\n            <see cref=\"T:Syncfusion.Blazor.Navigations.AccordionAnimationExpand\" /> and <see cref=\"T:Syncfusion.Blazor.Navigations.AccordionAnimationCollapse\" /> can be used to set expand and collapse animation for accordion item respectively.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfAccordion>\n                <AccordionAnimationSettings>\n                    <AccordionAnimationExpand Effect=\"AnimationEffect.FadeIn\" Duration=\"500\"></AccordionAnimationExpand>\n                    <AccordionAnimationCollapse Effect=\"AnimationEffect.FadeOut\" Duration=\"500\"></AccordionAnimationCollapse>\n                </AccordionAnimationSettings>\n            </SfAccordion> \n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.AccordionAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the Child Content for the Accordion Animation Settings.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionAnimationSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1211227024,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.AccordionAnimationSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets the Child Content for the Accordion Animation Settings.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"AccordionAnimationSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionAnimationSettings.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-615541696,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.AccordionAnimationSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets the Child Content for the Accordion Animation Settings.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.AccordionAnimationSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionAnimationSettings.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":222328740,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.AccordionEvents","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Configure event handlers to handle the events with the Accordion component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AccordionEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Clicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.AccordionClickArgs>","Documentation":"\n            <summary>\n            The event triggers when clicking anywhere within the Accordion.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Clicked","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            The event triggers once the control rendering is completed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            The event triggers when the control gets destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Expanded","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.ExpandedEventArgs>","Documentation":"\n            <summary>\n            The event triggers after the item gets expanded.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Expanded","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Expanding","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.ExpandEventArgs>","Documentation":"\n            <summary>\n            The event triggers before the item gets expanded.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Expanding","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Collapsed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.CollapsedEventArgs>","Documentation":"\n            <summary>\n            The event triggers after the item gets collapsed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Collapsed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Collapsing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.CollapseEventArgs>","Documentation":"\n            <summary>\n            The event triggers before the item gets collapsed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Collapsing","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionEvents"}},{"HashCode":-2121734904,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.AccordionEvents","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Configure event handlers to handle the events with the Accordion component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.AccordionEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Clicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.AccordionClickArgs>","Documentation":"\n            <summary>\n            The event triggers when clicking anywhere within the Accordion.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Clicked","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            The event triggers once the control rendering is completed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            The event triggers when the control gets destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Expanded","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.ExpandedEventArgs>","Documentation":"\n            <summary>\n            The event triggers after the item gets expanded.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Expanded","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Expanding","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.ExpandEventArgs>","Documentation":"\n            <summary>\n            The event triggers before the item gets expanded.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Expanding","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Collapsed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.CollapsedEventArgs>","Documentation":"\n            <summary>\n            The event triggers after the item gets collapsed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Collapsed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Collapsing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.CollapseEventArgs>","Documentation":"\n            <summary>\n            The event triggers before the item gets collapsed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Collapsing","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionEvents","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1323510711,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.AccordionItem","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A class that represents accordion panels of <see cref=\"T:Syncfusion.Blazor.Navigations.SfAccordion\" /> component.\n            </summary>\n            <remarks>\n            You can render header and content of accordion by specifying value to corresponding property.=\n            </remarks>\n            <example>\n            In the below code example, a basic accordion panel has been added using <see cref=\"T:Syncfusion.Blazor.Navigations.AccordionItem\" /> tag directive.\n            <code><![CDATA[\n            <SfAccordion>\n                <AccordionItems>\n                    <AccordionItem Header=\"ASP.NET\">\n                        <ContentTemplate>\n                            Microsoft ASP.NET is a set of technologies in the Microsoft .NET Framework for building Web applications and XML Web services.\n                        </ContentTemplate>\n                    </AccordionItem>\n                    <AccordionItem Header=\"ASP.NET MVC\">\n                        <ContentTemplate>\n                            The Model-View-Controller (MVC) architectural pattern separates an application into three main components: the model, the view, and the controller.\n                        </ContentTemplate>\n                    </AccordionItem>\n                    <AccordionItem Header=\"JavaScript\">\n                        <ContentTemplate>\n                            JavaScript (JS) is an interpreted computer programming language. It was originally implemented as part of web browsers so that client-side scripts could interact with the user, control the browser, communicate asynchronously, and alter the document content that was displayed.\n                        </ContentTemplate>\n                    </AccordionItem>\n                </AccordionItems>\n            </SfAccordion>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AccordionItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content for the accordion item.\n            </summary>\n            <value>\n            The value used to build the content.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of accordion header.\n            </summary>\n            <value>\n            A template content that specifies the visualization of accordion header. The default value is <c>null</c>.\n            </value>        \n            <example>\n            <code><![CDATA[\n            <SfAccordion>\n                <AccordionItems>\n                    <AccordionItem Content=\"C# is intended to be a simple, modern, general-purpose, object-oriented programming language. Its development team is led by Anders Hejlsberg. The most recent version is C# 5.0, which was released on August 15, 2012.\">\n                        <HeaderTemplate>\n                            <div class=\"header-text\">C Sharp(C#)</div>\n                        </HeaderTemplate>\n                    </AccordionItem>\n                </AccordionItems>\n            </SfAccordion>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ContentTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of accordion content.\n            </summary>\n            <value>\n            A template content that specifies the visualization of accordion content. The default value is <c>null</c>.\n            </value>        \n            <example>\n            <code><![CDATA[\n            <SfAccordion>\n                <AccordionItems>\n                    <AccordionItem Header=\"C Sharp(C#)\">\n                        <ContentTemplate>\n                            <div class=\"content-text\">C# is intended to be a simple, modern, general-purpose, object-oriented programming language. Its development team is led by Anders Hejlsberg. The most recent version is C# 5.0, which was released on August 15, 2012.</div>\n                        </ContentTemplate>     \n                    </AccordionItem>\n                </AccordionItems>\n            </SfAccordion>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ContentTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text content to be displayed for accordion item.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>null</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Content"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the classes for accordion item to customize the accordion header and content.\n            </summary>\n            <value> \n            If we set the css class, then the custom class is applied for accordion item. The default value is <c>null</c>. \n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfAccordion>\n                <AccordionItems>\n                    <AccordionItem CssClass=\"item1\">\n                        <HeaderTemplate>\n                            Margeret Peacock\n                        </HeaderTemplate>\n                        <ContentTemplate>\n                            Microsoft ASP.NET is a set of technologies in the Microsoft .NET Framework for building Web applications and XML Web services.\n                        </ContentTemplate>\n                    </AccordionItem>\n                </AccordionItems>\n            </SfAccordion>\n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the accordion panel is disabled or not.\n            </summary>\n            <value>\n            <c>true</c>, to disable the accordion panel. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"Expanded","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether the accordion panel is expanded or not.\n            </summary>\n            <value>\n            <c>true</c>, to expand the accordion panel. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Expanded"}},{"Kind":"Components.Component","Name":"Header","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the header text to be displayed for accordion item.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>null</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Header"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to include an icon or image for accordion header. \n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to include an icon or image for the accordion item. The default value is <c>null</c>.\n            </value>\n            <remarks>\n            This property value is only applied for accordion header. \n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfAccordion>\n                <AccordionItems>\n                    <AccordionItem  IconCss=\"e-icons e-home\" Content=\"Home icon rendered in header\"></AccordionItem>\n                </AccordionItems>\n            </SfAccordion>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the accordion panel is hidden or not.\n            </summary>\n            <value>\n            <c>false</c>, to hide the accordion panel. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Visible"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the unique ID for accordion item.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>null</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"ExpandedChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <summary>\n            Gets or sets a callback when <see cref=\"P:Syncfusion.Blazor.Navigations.AccordionItem.Expanded\" /> property changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExpandedChanged","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionItem"}},{"HashCode":821558963,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.AccordionItem","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A class that represents accordion panels of <see cref=\"T:Syncfusion.Blazor.Navigations.SfAccordion\" /> component.\n            </summary>\n            <remarks>\n            You can render header and content of accordion by specifying value to corresponding property.=\n            </remarks>\n            <example>\n            In the below code example, a basic accordion panel has been added using <see cref=\"T:Syncfusion.Blazor.Navigations.AccordionItem\" /> tag directive.\n            <code><![CDATA[\n            <SfAccordion>\n                <AccordionItems>\n                    <AccordionItem Header=\"ASP.NET\">\n                        <ContentTemplate>\n                            Microsoft ASP.NET is a set of technologies in the Microsoft .NET Framework for building Web applications and XML Web services.\n                        </ContentTemplate>\n                    </AccordionItem>\n                    <AccordionItem Header=\"ASP.NET MVC\">\n                        <ContentTemplate>\n                            The Model-View-Controller (MVC) architectural pattern separates an application into three main components: the model, the view, and the controller.\n                        </ContentTemplate>\n                    </AccordionItem>\n                    <AccordionItem Header=\"JavaScript\">\n                        <ContentTemplate>\n                            JavaScript (JS) is an interpreted computer programming language. It was originally implemented as part of web browsers so that client-side scripts could interact with the user, control the browser, communicate asynchronously, and alter the document content that was displayed.\n                        </ContentTemplate>\n                    </AccordionItem>\n                </AccordionItems>\n            </SfAccordion>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.AccordionItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content for the accordion item.\n            </summary>\n            <value>\n            The value used to build the content.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of accordion header.\n            </summary>\n            <value>\n            A template content that specifies the visualization of accordion header. The default value is <c>null</c>.\n            </value>        \n            <example>\n            <code><![CDATA[\n            <SfAccordion>\n                <AccordionItems>\n                    <AccordionItem Content=\"C# is intended to be a simple, modern, general-purpose, object-oriented programming language. Its development team is led by Anders Hejlsberg. The most recent version is C# 5.0, which was released on August 15, 2012.\">\n                        <HeaderTemplate>\n                            <div class=\"header-text\">C Sharp(C#)</div>\n                        </HeaderTemplate>\n                    </AccordionItem>\n                </AccordionItems>\n            </SfAccordion>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ContentTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of accordion content.\n            </summary>\n            <value>\n            A template content that specifies the visualization of accordion content. The default value is <c>null</c>.\n            </value>        \n            <example>\n            <code><![CDATA[\n            <SfAccordion>\n                <AccordionItems>\n                    <AccordionItem Header=\"C Sharp(C#)\">\n                        <ContentTemplate>\n                            <div class=\"content-text\">C# is intended to be a simple, modern, general-purpose, object-oriented programming language. Its development team is led by Anders Hejlsberg. The most recent version is C# 5.0, which was released on August 15, 2012.</div>\n                        </ContentTemplate>     \n                    </AccordionItem>\n                </AccordionItems>\n            </SfAccordion>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ContentTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text content to be displayed for accordion item.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>null</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Content"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the classes for accordion item to customize the accordion header and content.\n            </summary>\n            <value> \n            If we set the css class, then the custom class is applied for accordion item. The default value is <c>null</c>. \n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfAccordion>\n                <AccordionItems>\n                    <AccordionItem CssClass=\"item1\">\n                        <HeaderTemplate>\n                            Margeret Peacock\n                        </HeaderTemplate>\n                        <ContentTemplate>\n                            Microsoft ASP.NET is a set of technologies in the Microsoft .NET Framework for building Web applications and XML Web services.\n                        </ContentTemplate>\n                    </AccordionItem>\n                </AccordionItems>\n            </SfAccordion>\n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the accordion panel is disabled or not.\n            </summary>\n            <value>\n            <c>true</c>, to disable the accordion panel. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"Expanded","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether the accordion panel is expanded or not.\n            </summary>\n            <value>\n            <c>true</c>, to expand the accordion panel. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Expanded"}},{"Kind":"Components.Component","Name":"Header","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the header text to be displayed for accordion item.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>null</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Header"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to include an icon or image for accordion header. \n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to include an icon or image for the accordion item. The default value is <c>null</c>.\n            </value>\n            <remarks>\n            This property value is only applied for accordion header. \n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfAccordion>\n                <AccordionItems>\n                    <AccordionItem  IconCss=\"e-icons e-home\" Content=\"Home icon rendered in header\"></AccordionItem>\n                </AccordionItems>\n            </SfAccordion>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the accordion panel is hidden or not.\n            </summary>\n            <value>\n            <c>false</c>, to hide the accordion panel. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Visible"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the unique ID for accordion item.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>null</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"ExpandedChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <summary>\n            Gets or sets a callback when <see cref=\"P:Syncfusion.Blazor.Navigations.AccordionItem.Expanded\" /> property changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExpandedChanged","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionItem","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1896093856,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.AccordionItem.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets the child content for the accordion item.\n            </summary>\n            <value>\n            The value used to build the content.\n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"AccordionItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionItem.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-82352081,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.AccordionItem.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets the child content for the accordion item.\n            </summary>\n            <value>\n            The value used to build the content.\n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.AccordionItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionItem.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-529587262,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.AccordionItem.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of accordion header.\n            </summary>\n            <value>\n            A template content that specifies the visualization of accordion header. The default value is <c>null</c>.\n            </value>        \n            <example>\n            <code><![CDATA[\n            <SfAccordion>\n                <AccordionItems>\n                    <AccordionItem Content=\"C# is intended to be a simple, modern, general-purpose, object-oriented programming language. Its development team is led by Anders Hejlsberg. The most recent version is C# 5.0, which was released on August 15, 2012.\">\n                        <HeaderTemplate>\n                            <div class=\"header-text\">C Sharp(C#)</div>\n                        </HeaderTemplate>\n                    </AccordionItem>\n                </AccordionItems>\n            </SfAccordion>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"AccordionItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionItem.HeaderTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":345119298,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.AccordionItem.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of accordion header.\n            </summary>\n            <value>\n            A template content that specifies the visualization of accordion header. The default value is <c>null</c>.\n            </value>        \n            <example>\n            <code><![CDATA[\n            <SfAccordion>\n                <AccordionItems>\n                    <AccordionItem Content=\"C# is intended to be a simple, modern, general-purpose, object-oriented programming language. Its development team is led by Anders Hejlsberg. The most recent version is C# 5.0, which was released on August 15, 2012.\">\n                        <HeaderTemplate>\n                            <div class=\"header-text\">C Sharp(C#)</div>\n                        </HeaderTemplate>\n                    </AccordionItem>\n                </AccordionItems>\n            </SfAccordion>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.Navigations.AccordionItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionItem.HeaderTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1671304841,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.AccordionItem.ContentTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of accordion content.\n            </summary>\n            <value>\n            A template content that specifies the visualization of accordion content. The default value is <c>null</c>.\n            </value>        \n            <example>\n            <code><![CDATA[\n            <SfAccordion>\n                <AccordionItems>\n                    <AccordionItem Header=\"C Sharp(C#)\">\n                        <ContentTemplate>\n                            <div class=\"content-text\">C# is intended to be a simple, modern, general-purpose, object-oriented programming language. Its development team is led by Anders Hejlsberg. The most recent version is C# 5.0, which was released on August 15, 2012.</div>\n                        </ContentTemplate>     \n                    </AccordionItem>\n                </AccordionItems>\n            </SfAccordion>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ContentTemplate","ParentTag":"AccordionItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionItem.ContentTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":731241740,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.AccordionItem.ContentTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of accordion content.\n            </summary>\n            <value>\n            A template content that specifies the visualization of accordion content. The default value is <c>null</c>.\n            </value>        \n            <example>\n            <code><![CDATA[\n            <SfAccordion>\n                <AccordionItems>\n                    <AccordionItem Header=\"C Sharp(C#)\">\n                        <ContentTemplate>\n                            <div class=\"content-text\">C# is intended to be a simple, modern, general-purpose, object-oriented programming language. Its development team is led by Anders Hejlsberg. The most recent version is C# 5.0, which was released on August 15, 2012.</div>\n                        </ContentTemplate>     \n                    </AccordionItem>\n                </AccordionItems>\n            </SfAccordion>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ContentTemplate","ParentTag":"Syncfusion.Blazor.Navigations.AccordionItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionItem.ContentTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":637601780,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.AccordionItems","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Represents a collection of <see cref=\"T:Syncfusion.Blazor.Navigations.AccordionItem\" />.\n            </summary>\n            <remarks>\n            To generate dynamic <see cref=\"T:Syncfusion.Blazor.Navigations.AccordionItem\" /> based on collection, use <c>@foreach</c> within <see cref=\"T:Syncfusion.Blazor.Navigations.AccordionItems\" /> tag directive.\n            </remarks>\n            <example>\n            In the below code example, a basic accordion has been rendered using <see cref=\"T:Syncfusion.Blazor.Navigations.AccordionItems\" /> tag directive.\n            <code><![CDATA[\n            <SfAccordion>\n                <AccordionItems>\n                    <AccordionItem Header=\"ASP.NET\">\n                        <ContentTemplate>\n                            Microsoft ASP.NET is a set of technologies in the Microsoft .NET Framework for building Web applications and XML Web services.\n                        </ContentTemplate>\n                    </AccordionItem>\n                    <AccordionItem Header=\"ASP.NET MVC\">\n                        <ContentTemplate>\n                            The Model-View-Controller (MVC) architectural pattern separates an application into three main components: the model, the view, and the controller.\n                        </ContentTemplate>\n                    </AccordionItem>\n                    <AccordionItem Header=\"JavaScript\">\n                        <ContentTemplate>\n                            JavaScript (JS) is an interpreted computer programming language. It was originally implemented as part of web browsers so that client-side scripts could interact with the user, control the browser, communicate asynchronously, and alter the document content that was displayed.\n                        </ContentTemplate>\n                    </AccordionItem>\n                </AccordionItems>\n            </SfAccordion>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AccordionItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content for the accordion items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionItems"}},{"HashCode":-304808202,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.AccordionItems","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Represents a collection of <see cref=\"T:Syncfusion.Blazor.Navigations.AccordionItem\" />.\n            </summary>\n            <remarks>\n            To generate dynamic <see cref=\"T:Syncfusion.Blazor.Navigations.AccordionItem\" /> based on collection, use <c>@foreach</c> within <see cref=\"T:Syncfusion.Blazor.Navigations.AccordionItems\" /> tag directive.\n            </remarks>\n            <example>\n            In the below code example, a basic accordion has been rendered using <see cref=\"T:Syncfusion.Blazor.Navigations.AccordionItems\" /> tag directive.\n            <code><![CDATA[\n            <SfAccordion>\n                <AccordionItems>\n                    <AccordionItem Header=\"ASP.NET\">\n                        <ContentTemplate>\n                            Microsoft ASP.NET is a set of technologies in the Microsoft .NET Framework for building Web applications and XML Web services.\n                        </ContentTemplate>\n                    </AccordionItem>\n                    <AccordionItem Header=\"ASP.NET MVC\">\n                        <ContentTemplate>\n                            The Model-View-Controller (MVC) architectural pattern separates an application into three main components: the model, the view, and the controller.\n                        </ContentTemplate>\n                    </AccordionItem>\n                    <AccordionItem Header=\"JavaScript\">\n                        <ContentTemplate>\n                            JavaScript (JS) is an interpreted computer programming language. It was originally implemented as part of web browsers so that client-side scripts could interact with the user, control the browser, communicate asynchronously, and alter the document content that was displayed.\n                        </ContentTemplate>\n                    </AccordionItem>\n                </AccordionItems>\n            </SfAccordion>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.AccordionItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content for the accordion items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionItems","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":942104316,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.AccordionItems.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets the child content for the accordion items.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"AccordionItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionItems.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1679899827,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.AccordionItems.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets the child content for the accordion items.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.AccordionItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionItems.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1473197388,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfAccordion","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Accordion is a vertically collapsible panel that displays one or more panels at a time.\n            </summary>\n            <remarks>\n            Accordion items can be populated by specifying <see cref=\"T:Syncfusion.Blazor.Navigations.AccordionItem\" /> within <see cref=\"T:Syncfusion.Blazor.Navigations.AccordionItems\" /> tag directive.\n            </remarks>\n            <example>\n            In the below code example, a basic accordion component initialized with <see cref=\"T:Syncfusion.Blazor.Navigations.AccordionItems\" /> tag directive.\n            <code><![CDATA[\n            <SfAccordion>\n                <AccordionItems>\n                    <AccordionItem Header=\"ASP.NET\">\n                        <ContentTemplate>\n                            Microsoft ASP.NET is a set of technologies in the Microsoft .NET Framework for building Web applications and XML Web services.\n                        </ContentTemplate>\n                    </AccordionItem>\n                    <AccordionItem Header=\"ASP.NET MVC\">\n                        <ContentTemplate>\n                            The Model-View-Controller (MVC) architectural pattern separates an application into three main components: the model, the view, and the controller.\n                        </ContentTemplate>\n                    </AccordionItem>\n                    <AccordionItem Header=\"JavaScript\">\n                        <ContentTemplate>\n                            JavaScript (JS) is an interpreted computer programming language. It was originally implemented as part of web browsers so that client-side scripts could interact with the user, control the browser, communicate asynchronously, and alter the document content that was displayed.\n                        </ContentTemplate>\n                    </AccordionItem>\n                </AccordionItems>\n            </SfAccordion>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfAccordion"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the unique Id value for accordion component.\n            </summary>\n            <value>\n            If we set the id, then the id value set for accordion element. The default value is `null`.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content of accordion component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Navigations.SfAccordion.ExpandedIndices\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.Navigations.SfAccordion.ExpandedIndices\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            It is mandatory to provide <see cref=\"P:Syncfusion.Blazor.Navigations.SfAccordion.ID\" /> to persist <c>ExpandedIndices</c> property.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"LoadOnDemand","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to render all the accordion content on initial load or not.\n            </summary>\n            <value>\n            If we set <c>false</c>, then all the contents are rendered on initial load, The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"LoadOnDemand"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right to left direction is enabled for accordion component.\n            </summary>\n            <value> \n            true, the right to left direction is enabled for accordion component. The default value is `false`. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"ExpandMode","TypeName":"Syncfusion.Blazor.Navigations.ExpandMode","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates options to expand a single or multiple panels at a time.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Navigations.ExpandMode\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Navigations.ExpandMode.Multiple\" />\n            </value>\n            <remarks>\n            If the <c>ExpandMode</c> is <c>Single</c>, only one <see cref=\"T:Syncfusion.Blazor.Navigations.AccordionItem\" /> will expand at a time.\n            If the <c>ExpandMode</c> is <c>Multiple</c>, more than one <see cref=\"T:Syncfusion.Blazor.Navigations.AccordionItem\" /> will expand at a time.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ExpandMode"}},{"Kind":"Components.Component","Name":"ExpandedIndices","TypeName":"System.Int32[]","Documentation":"\n            <summary> \n            Gets or sets the index of items that is expanded on the initial load. \n            </summary> \n            <value> \n            If we set the index value, then specified index items were expanded otherwise the default <c>null</c> value is set.  \n            </value> \n            <example> \n            <code><![CDATA[ \n            <SfAccordion @bind-ExpandedIndices=\"@ExpandedIndices\">\n                <AccordionItems>\n                    <AccordionItem Header=\"ASP.NET\">\n                        <ContentTemplate>\n                            Microsoft ASP.NET is a set of technologies in the Microsoft .NET Framework for building Web applications and XML Web services.\n                        </ContentTemplate>\n                    </AccordionItem>\n                    <AccordionItem Header=\"ASP.NET MVC\">\n                        <ContentTemplate>\n                            The Model-View-Controller (MVC) architectural pattern separates an application into three main components: the model, the view, and the controller.\n                        </ContentTemplate>\n                    </AccordionItem>\n                    <AccordionItem Header=\"JavaScript\">\n                        <ContentTemplate>\n                            JavaScript (JS) is an interpreted computer programming language. It was originally implemented as part of web browsers so that client-side scripts could interact with the user, control the browser, communicate asynchronously, and alter the document content that was displayed.\n                        </ContentTemplate>\n                    </AccordionItem>\n                </AccordionItems>\n            </SfAccordion>\n            @code{\n                int[] ExpandedIndices = new int[] { 0, 1 };\n            }\n            ]]></code>\n            </example> \n        ","Metadata":{"Common.PropertyName":"ExpandedIndices"}},{"Kind":"Components.Component","Name":"ExpandedIndicesChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32[]>","Documentation":"\n            <summary>\n            Invokes when index of expanded items were changed.\n            </summary>\n            <value> \n            Fired when expanded item index changes.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ExpandedIndicesChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the height of the accordion element in pixels/number/percentage. \n            </summary> \n            <value> \n            If we set the height value, then the accordion will render based on specified height otherwise the default height value `auto` is set.  \n            </value> \n            <example> \n            <code><![CDATA[ \n            <SfAccordion Height=\"500px\"></SfAccordion> \n            ]]></code>\n            </example> \n            <remarks>\n            If we set number values, then it is considered as pixels.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Height"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the width of the accordion element in pixels/number/percentage. \n            </summary> \n            <value> \n            If we set the width value, then the accordion will render based on specified width otherwise the default width value `100%` is set.  \n            </value>\n            <example>\n            <code><![CDATA[\n            <SfAccordion Width=\"500px\"></SfAccordion>\n            ]]></code>\n            </example>\n            <remarks>\n            If we set number values, then it is considered as pixels.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary> \n            Gets or sets a collection of additional attributes that will applied to the accordion element. \n            </summary> \n            <remarks>\n            Additional attributes can be added by specifying as in-line attributes or by specifying <c>@attributes</c> directive.\n            </remarks> \n            <value> \n            It allows the accordion component to render non-declared attributes. The default value is `null`. \n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfAccordion name=\"accordion\"></SfAccordion>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfAccordion"}},{"HashCode":-1116717997,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfAccordion","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Accordion is a vertically collapsible panel that displays one or more panels at a time.\n            </summary>\n            <remarks>\n            Accordion items can be populated by specifying <see cref=\"T:Syncfusion.Blazor.Navigations.AccordionItem\" /> within <see cref=\"T:Syncfusion.Blazor.Navigations.AccordionItems\" /> tag directive.\n            </remarks>\n            <example>\n            In the below code example, a basic accordion component initialized with <see cref=\"T:Syncfusion.Blazor.Navigations.AccordionItems\" /> tag directive.\n            <code><![CDATA[\n            <SfAccordion>\n                <AccordionItems>\n                    <AccordionItem Header=\"ASP.NET\">\n                        <ContentTemplate>\n                            Microsoft ASP.NET is a set of technologies in the Microsoft .NET Framework for building Web applications and XML Web services.\n                        </ContentTemplate>\n                    </AccordionItem>\n                    <AccordionItem Header=\"ASP.NET MVC\">\n                        <ContentTemplate>\n                            The Model-View-Controller (MVC) architectural pattern separates an application into three main components: the model, the view, and the controller.\n                        </ContentTemplate>\n                    </AccordionItem>\n                    <AccordionItem Header=\"JavaScript\">\n                        <ContentTemplate>\n                            JavaScript (JS) is an interpreted computer programming language. It was originally implemented as part of web browsers so that client-side scripts could interact with the user, control the browser, communicate asynchronously, and alter the document content that was displayed.\n                        </ContentTemplate>\n                    </AccordionItem>\n                </AccordionItems>\n            </SfAccordion>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfAccordion"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the unique Id value for accordion component.\n            </summary>\n            <value>\n            If we set the id, then the id value set for accordion element. The default value is `null`.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content of accordion component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Navigations.SfAccordion.ExpandedIndices\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.Navigations.SfAccordion.ExpandedIndices\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            It is mandatory to provide <see cref=\"P:Syncfusion.Blazor.Navigations.SfAccordion.ID\" /> to persist <c>ExpandedIndices</c> property.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"LoadOnDemand","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to render all the accordion content on initial load or not.\n            </summary>\n            <value>\n            If we set <c>false</c>, then all the contents are rendered on initial load, The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"LoadOnDemand"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right to left direction is enabled for accordion component.\n            </summary>\n            <value> \n            true, the right to left direction is enabled for accordion component. The default value is `false`. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"ExpandMode","TypeName":"Syncfusion.Blazor.Navigations.ExpandMode","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates options to expand a single or multiple panels at a time.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Navigations.ExpandMode\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Navigations.ExpandMode.Multiple\" />\n            </value>\n            <remarks>\n            If the <c>ExpandMode</c> is <c>Single</c>, only one <see cref=\"T:Syncfusion.Blazor.Navigations.AccordionItem\" /> will expand at a time.\n            If the <c>ExpandMode</c> is <c>Multiple</c>, more than one <see cref=\"T:Syncfusion.Blazor.Navigations.AccordionItem\" /> will expand at a time.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ExpandMode"}},{"Kind":"Components.Component","Name":"ExpandedIndices","TypeName":"System.Int32[]","Documentation":"\n            <summary> \n            Gets or sets the index of items that is expanded on the initial load. \n            </summary> \n            <value> \n            If we set the index value, then specified index items were expanded otherwise the default <c>null</c> value is set.  \n            </value> \n            <example> \n            <code><![CDATA[ \n            <SfAccordion @bind-ExpandedIndices=\"@ExpandedIndices\">\n                <AccordionItems>\n                    <AccordionItem Header=\"ASP.NET\">\n                        <ContentTemplate>\n                            Microsoft ASP.NET is a set of technologies in the Microsoft .NET Framework for building Web applications and XML Web services.\n                        </ContentTemplate>\n                    </AccordionItem>\n                    <AccordionItem Header=\"ASP.NET MVC\">\n                        <ContentTemplate>\n                            The Model-View-Controller (MVC) architectural pattern separates an application into three main components: the model, the view, and the controller.\n                        </ContentTemplate>\n                    </AccordionItem>\n                    <AccordionItem Header=\"JavaScript\">\n                        <ContentTemplate>\n                            JavaScript (JS) is an interpreted computer programming language. It was originally implemented as part of web browsers so that client-side scripts could interact with the user, control the browser, communicate asynchronously, and alter the document content that was displayed.\n                        </ContentTemplate>\n                    </AccordionItem>\n                </AccordionItems>\n            </SfAccordion>\n            @code{\n                int[] ExpandedIndices = new int[] { 0, 1 };\n            }\n            ]]></code>\n            </example> \n        ","Metadata":{"Common.PropertyName":"ExpandedIndices"}},{"Kind":"Components.Component","Name":"ExpandedIndicesChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32[]>","Documentation":"\n            <summary>\n            Invokes when index of expanded items were changed.\n            </summary>\n            <value> \n            Fired when expanded item index changes.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ExpandedIndicesChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the height of the accordion element in pixels/number/percentage. \n            </summary> \n            <value> \n            If we set the height value, then the accordion will render based on specified height otherwise the default height value `auto` is set.  \n            </value> \n            <example> \n            <code><![CDATA[ \n            <SfAccordion Height=\"500px\"></SfAccordion> \n            ]]></code>\n            </example> \n            <remarks>\n            If we set number values, then it is considered as pixels.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Height"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the width of the accordion element in pixels/number/percentage. \n            </summary> \n            <value> \n            If we set the width value, then the accordion will render based on specified width otherwise the default width value `100%` is set.  \n            </value>\n            <example>\n            <code><![CDATA[\n            <SfAccordion Width=\"500px\"></SfAccordion>\n            ]]></code>\n            </example>\n            <remarks>\n            If we set number values, then it is considered as pixels.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary> \n            Gets or sets a collection of additional attributes that will applied to the accordion element. \n            </summary> \n            <remarks>\n            Additional attributes can be added by specifying as in-line attributes or by specifying <c>@attributes</c> directive.\n            </remarks> \n            <value> \n            It allows the accordion component to render non-declared attributes. The default value is `null`. \n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfAccordion name=\"accordion\"></SfAccordion>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfAccordion","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1273062344,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfAccordion.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets the child content of accordion component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfAccordion"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfAccordion.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1674020848,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfAccordion.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets the child content of accordion component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.SfAccordion"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfAccordion.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":176831066,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.AppBarSeparator","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Represents a component which displays a line to visually group or separate the AppBar contents.\n            </summary>\n            <remarks>\n            <c>AppBarSeparator</c> shows a vertical line which used to group AppBar contents \n            by separating single or group of AppBar contents.\n            </remarks>\n            <value> \n            It allows to group the Appbar contents. \n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfAppBar>\n            <SfButton CssClass=\"e-inherit\" IconCss=\"e-icons e-home\"></SfButton>\n            <AppBarSeparator />\n            <SfButton CssClass=\"e-inherit\" IconCss=\"e-icons e-pan\"></SfButton>\n            </SfAppBar>\n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AppBarSeparator"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.AppBarSeparator"}},{"HashCode":438650591,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.AppBarSeparator","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Represents a component which displays a line to visually group or separate the AppBar contents.\n            </summary>\n            <remarks>\n            <c>AppBarSeparator</c> shows a vertical line which used to group AppBar contents \n            by separating single or group of AppBar contents.\n            </remarks>\n            <value> \n            It allows to group the Appbar contents. \n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfAppBar>\n            <SfButton CssClass=\"e-inherit\" IconCss=\"e-icons e-home\"></SfButton>\n            <AppBarSeparator />\n            <SfButton CssClass=\"e-inherit\" IconCss=\"e-icons e-pan\"></SfButton>\n            </SfAppBar>\n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.AppBarSeparator"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.AppBarSeparator","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":451634490,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.AppBarSpacer","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Represents a component that introduce spacing between the AppBar contents which gives an additional space on content layout.\n            </summary>\n            <remarks>\n            <c>AppBarSpacer</c> provides the space between the components. \n            So, user can tune the spacing between the content like right or left.\n            </remarks>\n            <value> \n            It provides space between the Appbar contents. \n            </value>\n            <example> \n            <code><![CDATA[\n            <SfAppBar>\n            <SfButton CssClass=\"e-inherit\" IconCss=\"e-icons e-home\"></SfButton>\n            <AppBarSpacer />\n            <SfButton CssClass=\"e-inherit\" IconCss=\"e-icons e-pan\"></SfButton>\n            </SfAppBar>\n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AppBarSpacer"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.AppBarSpacer"}},{"HashCode":-434924837,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.AppBarSpacer","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Represents a component that introduce spacing between the AppBar contents which gives an additional space on content layout.\n            </summary>\n            <remarks>\n            <c>AppBarSpacer</c> provides the space between the components. \n            So, user can tune the spacing between the content like right or left.\n            </remarks>\n            <value> \n            It provides space between the Appbar contents. \n            </value>\n            <example> \n            <code><![CDATA[\n            <SfAppBar>\n            <SfButton CssClass=\"e-inherit\" IconCss=\"e-icons e-home\"></SfButton>\n            <AppBarSpacer />\n            <SfButton CssClass=\"e-inherit\" IconCss=\"e-icons e-pan\"></SfButton>\n            </SfAppBar>\n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.AppBarSpacer"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.AppBarSpacer","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-632571891,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfAppBar","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            The AppBar displays the information and actions related to the current application screen. It is used to show branding, screen titles, navigation, and actions.\n            </summary>\n            <remarks>\n            AppBar component can be populated by specifying the child components within <see cref=\"T:Syncfusion.Blazor.Navigations.SfAppBar\" /> tag directive.\n            Support to inherit colors from AppBar provided to <c>SfButton</c>, <c>SfDropDownButton</c>, <c>SfMenu</c> and <c>SfTextBox</c>. \n            Set <c>CssClass</c> property with <code>e-inherit</code> CSS class to inherit the background and color from AppBar. \n            </remarks>\n            <example>\n            The below example shows AppBar with Primary Button.\n            <code><![CDATA[\n            <SfAppBar> \n                <SfButton IsPrimary=\"true\">Primary</SfButton>\n            </SfAppBar>\n            ]]></code>\n            The below example shows AppBar with Buttons which inherits colors from AppBar.\n            <code><![CDATA[\n            <SfAppBar>\n            <SfButton CssClass=\"e-inherit\" IconCss=\"e-icons e-home\"></SfButton>\n            <AppBarSeparator />\n            <SfButton CssClass=\"e-inherit\" IconCss=\"e-icons e-pan\"></SfButton>\n            </SfAppBar>\n            ]]></code>\n            The below example, AppBarSpacer component used to align the Buttons on left and right.\n            <code><![CDATA[\n            <SfAppBar>\n            <SfButton CssClass=\"e-inherit\" IconCss=\"e-icons e-home\"></SfButton>\n            <AppBarSpacer />\n            <SfButton CssClass=\"e-inherit\" IconCss=\"e-icons e-pan\"></SfButton>\n            <SfButton CssClass=\"e-inherit\" IconCss=\"e-icons e-close\"></SfButton>\n            </SfAppBar>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfAppBar"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.Navigations.AppBarMode","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets mode of the AppBar that defines the AppBar height. \n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Navigations.AppBarMode\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Navigations.AppBarMode.Regular\" />\n            </value>\n        ","Metadata":{"Common.PropertyName":"Mode"}},{"Kind":"Components.Component","Name":"Position","TypeName":"Syncfusion.Blazor.Navigations.AppBarPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets position of the AppBar.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Navigations.AppBarPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Navigations.AppBarPosition.Top\" />\n            </value>\n        ","Metadata":{"Common.PropertyName":"Position"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the custom classes to customize the AppBar component.  \n            </summary>\n            <remarks> \n            Accepts single/multiple classes (separated by a space) to be used for AppBar customization. \n            </remarks>\n            <value> \n            If we set the css class, then the custom class is applied for AppBar. The default value is <c>string.Empty</c>. \n            </value>\n            <example>\n            In the below example AppBar background and color is customized using <c>CssClass</c> property.\n            <code><![CDATA[ \n            <SfAppBar CssClass=\"custom-appbar\">\n            <SfButton CssClass=\"e-inherit\" IconCss=\"e-icons e-menu\"></SfButton>\n            </SfAppBar>\n            <style>\n            .custom-appbar {\n            background: #adadb1;\n            color: #fff;\n            }\n            </style>\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"IsSticky","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the AppBar position is fixed or not while scrolling the page. \n            </summary> \n            <value> \n            <c>true</c>, The AppBar will be sticky while scrolling. The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"IsSticky"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary> \n            Gets or sets a collection of additional attributes that will be applied to the AppBar element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <value> \n            It allows the AppBar component to render non-declared attributes. The default value is `null`. \n            </value>\n            <example>\n            In the below code example, Elevation of the AppBar customized using <c>@attributes</c> directive.\n            <code><![CDATA[ \n            <SfAppBar @attributes=\"customAttribute\">\n            <SfButton CssClass=\"e-inherit\" IconCss=\"e-icons e-home\"></SfButton>\n            </SfAppBar> \n            @code{ \n               Dictionary<string, object> customAttribute = new Dictionary<string, object>() \n               { \n                   { \"style\", \"box-shadow: 0 5px 5px -3px rgba(0,0,0,.06), 0 8px 10px 1px rgba(0,0,0,.042), 0 3px 14px 2px rgba(0,0,0,.036)\" } \n               }; \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"ColorMode","TypeName":"Syncfusion.Blazor.Navigations.AppBarColor","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the color mode that defines the color of AppBar component.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Navigations.AppBarColor\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Navigations.AppBarColor.Light\" />\n            </value>\n        ","Metadata":{"Common.PropertyName":"ColorMode"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content of AppBar component.\n            </summary>\n            <value>\n            The value used to build the content.\n            </value>\n            <example>\n            The below example, AppBarSpacer component used to align the Buttons on left and right.\n            <code><![CDATA[\n            <SfAppBar>\n            <SfButton CssClass=\"e-inherit\" IconCss=\"e-icons e-home\"></SfButton>\n            <AppBarSpacer />\n            <SfButton CssClass=\"e-inherit\" IconCss=\"e-icons e-pan\"></SfButton>\n            <SfButton CssClass=\"e-inherit\" IconCss=\"e-icons e-close\"></SfButton>\n            </SfAppBar>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Triggers when the component is created.  \n            </summary> \n            <value> \n            Fired when AppBar created. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n            <value> \n            Fired when AppBar destroyed. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfAppBar"}},{"HashCode":-452099376,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfAppBar","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            The AppBar displays the information and actions related to the current application screen. It is used to show branding, screen titles, navigation, and actions.\n            </summary>\n            <remarks>\n            AppBar component can be populated by specifying the child components within <see cref=\"T:Syncfusion.Blazor.Navigations.SfAppBar\" /> tag directive.\n            Support to inherit colors from AppBar provided to <c>SfButton</c>, <c>SfDropDownButton</c>, <c>SfMenu</c> and <c>SfTextBox</c>. \n            Set <c>CssClass</c> property with <code>e-inherit</code> CSS class to inherit the background and color from AppBar. \n            </remarks>\n            <example>\n            The below example shows AppBar with Primary Button.\n            <code><![CDATA[\n            <SfAppBar> \n                <SfButton IsPrimary=\"true\">Primary</SfButton>\n            </SfAppBar>\n            ]]></code>\n            The below example shows AppBar with Buttons which inherits colors from AppBar.\n            <code><![CDATA[\n            <SfAppBar>\n            <SfButton CssClass=\"e-inherit\" IconCss=\"e-icons e-home\"></SfButton>\n            <AppBarSeparator />\n            <SfButton CssClass=\"e-inherit\" IconCss=\"e-icons e-pan\"></SfButton>\n            </SfAppBar>\n            ]]></code>\n            The below example, AppBarSpacer component used to align the Buttons on left and right.\n            <code><![CDATA[\n            <SfAppBar>\n            <SfButton CssClass=\"e-inherit\" IconCss=\"e-icons e-home\"></SfButton>\n            <AppBarSpacer />\n            <SfButton CssClass=\"e-inherit\" IconCss=\"e-icons e-pan\"></SfButton>\n            <SfButton CssClass=\"e-inherit\" IconCss=\"e-icons e-close\"></SfButton>\n            </SfAppBar>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfAppBar"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.Navigations.AppBarMode","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets mode of the AppBar that defines the AppBar height. \n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Navigations.AppBarMode\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Navigations.AppBarMode.Regular\" />\n            </value>\n        ","Metadata":{"Common.PropertyName":"Mode"}},{"Kind":"Components.Component","Name":"Position","TypeName":"Syncfusion.Blazor.Navigations.AppBarPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets position of the AppBar.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Navigations.AppBarPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Navigations.AppBarPosition.Top\" />\n            </value>\n        ","Metadata":{"Common.PropertyName":"Position"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the custom classes to customize the AppBar component.  \n            </summary>\n            <remarks> \n            Accepts single/multiple classes (separated by a space) to be used for AppBar customization. \n            </remarks>\n            <value> \n            If we set the css class, then the custom class is applied for AppBar. The default value is <c>string.Empty</c>. \n            </value>\n            <example>\n            In the below example AppBar background and color is customized using <c>CssClass</c> property.\n            <code><![CDATA[ \n            <SfAppBar CssClass=\"custom-appbar\">\n            <SfButton CssClass=\"e-inherit\" IconCss=\"e-icons e-menu\"></SfButton>\n            </SfAppBar>\n            <style>\n            .custom-appbar {\n            background: #adadb1;\n            color: #fff;\n            }\n            </style>\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"IsSticky","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the AppBar position is fixed or not while scrolling the page. \n            </summary> \n            <value> \n            <c>true</c>, The AppBar will be sticky while scrolling. The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"IsSticky"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary> \n            Gets or sets a collection of additional attributes that will be applied to the AppBar element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <value> \n            It allows the AppBar component to render non-declared attributes. The default value is `null`. \n            </value>\n            <example>\n            In the below code example, Elevation of the AppBar customized using <c>@attributes</c> directive.\n            <code><![CDATA[ \n            <SfAppBar @attributes=\"customAttribute\">\n            <SfButton CssClass=\"e-inherit\" IconCss=\"e-icons e-home\"></SfButton>\n            </SfAppBar> \n            @code{ \n               Dictionary<string, object> customAttribute = new Dictionary<string, object>() \n               { \n                   { \"style\", \"box-shadow: 0 5px 5px -3px rgba(0,0,0,.06), 0 8px 10px 1px rgba(0,0,0,.042), 0 3px 14px 2px rgba(0,0,0,.036)\" } \n               }; \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"ColorMode","TypeName":"Syncfusion.Blazor.Navigations.AppBarColor","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the color mode that defines the color of AppBar component.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Navigations.AppBarColor\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Navigations.AppBarColor.Light\" />\n            </value>\n        ","Metadata":{"Common.PropertyName":"ColorMode"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content of AppBar component.\n            </summary>\n            <value>\n            The value used to build the content.\n            </value>\n            <example>\n            The below example, AppBarSpacer component used to align the Buttons on left and right.\n            <code><![CDATA[\n            <SfAppBar>\n            <SfButton CssClass=\"e-inherit\" IconCss=\"e-icons e-home\"></SfButton>\n            <AppBarSpacer />\n            <SfButton CssClass=\"e-inherit\" IconCss=\"e-icons e-pan\"></SfButton>\n            <SfButton CssClass=\"e-inherit\" IconCss=\"e-icons e-close\"></SfButton>\n            </SfAppBar>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Triggers when the component is created.  \n            </summary> \n            <value> \n            Fired when AppBar created. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is destroyed.\n            </summary>\n            <value> \n            Fired when AppBar destroyed. \n            </value>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfAppBar","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-786969342,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfAppBar.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets the child content of AppBar component.\n            </summary>\n            <value>\n            The value used to build the content.\n            </value>\n            <example>\n            The below example, AppBarSpacer component used to align the Buttons on left and right.\n            <code><![CDATA[\n            <SfAppBar>\n            <SfButton CssClass=\"e-inherit\" IconCss=\"e-icons e-home\"></SfButton>\n            <AppBarSpacer />\n            <SfButton CssClass=\"e-inherit\" IconCss=\"e-icons e-pan\"></SfButton>\n            <SfButton CssClass=\"e-inherit\" IconCss=\"e-icons e-close\"></SfButton>\n            </SfAppBar>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfAppBar"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfAppBar.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1725504500,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfAppBar.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets the child content of AppBar component.\n            </summary>\n            <value>\n            The value used to build the content.\n            </value>\n            <example>\n            The below example, AppBarSpacer component used to align the Buttons on left and right.\n            <code><![CDATA[\n            <SfAppBar>\n            <SfButton CssClass=\"e-inherit\" IconCss=\"e-icons e-home\"></SfButton>\n            <AppBarSpacer />\n            <SfButton CssClass=\"e-inherit\" IconCss=\"e-icons e-pan\"></SfButton>\n            <SfButton CssClass=\"e-inherit\" IconCss=\"e-icons e-close\"></SfButton>\n            </SfAppBar>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.SfAppBar"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfAppBar.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":653569411,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.BreadcrumbItem","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A class that represents breadcrumb component item of <see cref=\"T:Syncfusion.Blazor.Navigations.SfBreadcrumb\" /> component.\n            </summary>\n            <remarks>\n            You can render icon only, text only, icon and text breadcrumb item by specifying value to corresponding property.\n            Additional attributes can be added to Breadcrumb item using <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            In the below code example, a basic Breadcrumb item has been added using <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> tag directive.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\" Url=\"https://blazor.syncfusion.com/demos/\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\" Url=\"https://blazor.syncfusion.com/demos/datagrid/overview\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\" Url=\"https://blazor.syncfusion.com/demos/menu-bar/default-functionalities\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Breadcrumb\" Url=\"https://blazor.syncfusion.com/demos/breadcrumb/default-functionalities\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BreadcrumbItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content for the Breadcrumb item. If the child content is not specified breadcrumb item is rendered using <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Text\" /> content.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            In the below code example, content has been set to <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> using <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Text\" /> property and <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbItem.ChildContent\" /> property.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem><span>Components</span></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text content of the Breadcrumb item.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            Set child content within <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> tag directive, to render as HTML content.\n            </remarks>\n            <example>\n            In the below code example, content has been set to <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> using <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Text\" /> property and <c>ChildContent</c> property.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem>Home</BreadcrumbItem>\n                    <BreadcrumbItem><span>Components</span></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Url","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the Url of the Breadcrumb item and that will be navigated when clicked.\n            </summary>\n            <value>\n            Accepts Url string value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            When Url has not been set, you can customize the item navigation using <see cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ItemClicked\" /> event.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfBreadcrumb\">\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\" Url=\"https://blazor.syncfusion.com/demos/\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\" Url=\"https://blazor.syncfusion.com/demos/datagrid/overview\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\" Url=\"https://blazor.syncfusion.com/demos/menu-bar/default-functionalities\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Url"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to include an icon or image for the breadcrumb item. \n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to include an icon or image for the breadcrumb item. The default value is <c>String.Empty</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem IconCss=\"e-icons e-home\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the Breadcrumb item is disabled or not.\n            </summary>\n            <value>\n            <c>true</c>, if the Breadcrumb item is disabled. The default value is <c>false</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfBreadcrumb\">\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\" Url=\"https://blazor.syncfusion.com/demos/\"></BreadcrumbItem>\n                    <BreadcrumbItem Disabled=\"true\" Text=\"Components\" Url=\"https://blazor.syncfusion.com/demos/datagrid/overview\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\" Url=\"https://blazor.syncfusion.com/demos/menu-bar/default-functionalities\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the breadcrumb item element.\n            </summary>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            In the below code example, title attribute added as inline in <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> tag directive.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\" title=\"Home\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.BreadcrumbItem"}},{"HashCode":-389035999,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.BreadcrumbItem","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A class that represents breadcrumb component item of <see cref=\"T:Syncfusion.Blazor.Navigations.SfBreadcrumb\" /> component.\n            </summary>\n            <remarks>\n            You can render icon only, text only, icon and text breadcrumb item by specifying value to corresponding property.\n            Additional attributes can be added to Breadcrumb item using <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            In the below code example, a basic Breadcrumb item has been added using <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> tag directive.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\" Url=\"https://blazor.syncfusion.com/demos/\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\" Url=\"https://blazor.syncfusion.com/demos/datagrid/overview\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\" Url=\"https://blazor.syncfusion.com/demos/menu-bar/default-functionalities\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Breadcrumb\" Url=\"https://blazor.syncfusion.com/demos/breadcrumb/default-functionalities\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.BreadcrumbItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content for the Breadcrumb item. If the child content is not specified breadcrumb item is rendered using <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Text\" /> content.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            In the below code example, content has been set to <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> using <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Text\" /> property and <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbItem.ChildContent\" /> property.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem><span>Components</span></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text content of the Breadcrumb item.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            Set child content within <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> tag directive, to render as HTML content.\n            </remarks>\n            <example>\n            In the below code example, content has been set to <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> using <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Text\" /> property and <c>ChildContent</c> property.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem>Home</BreadcrumbItem>\n                    <BreadcrumbItem><span>Components</span></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Url","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the Url of the Breadcrumb item and that will be navigated when clicked.\n            </summary>\n            <value>\n            Accepts Url string value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            When Url has not been set, you can customize the item navigation using <see cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ItemClicked\" /> event.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfBreadcrumb\">\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\" Url=\"https://blazor.syncfusion.com/demos/\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\" Url=\"https://blazor.syncfusion.com/demos/datagrid/overview\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\" Url=\"https://blazor.syncfusion.com/demos/menu-bar/default-functionalities\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Url"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string to include an icon or image for the breadcrumb item. \n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to include an icon or image for the breadcrumb item. The default value is <c>String.Empty</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem IconCss=\"e-icons e-home\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the Breadcrumb item is disabled or not.\n            </summary>\n            <value>\n            <c>true</c>, if the Breadcrumb item is disabled. The default value is <c>false</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfBreadcrumb\">\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\" Url=\"https://blazor.syncfusion.com/demos/\"></BreadcrumbItem>\n                    <BreadcrumbItem Disabled=\"true\" Text=\"Components\" Url=\"https://blazor.syncfusion.com/demos/datagrid/overview\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\" Url=\"https://blazor.syncfusion.com/demos/menu-bar/default-functionalities\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the breadcrumb item element.\n            </summary>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            In the below code example, title attribute added as inline in <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> tag directive.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\" title=\"Home\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.BreadcrumbItem","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1467822394,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.BreadcrumbItem.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets the child content for the Breadcrumb item. If the child content is not specified breadcrumb item is rendered using <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Text\" /> content.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            In the below code example, content has been set to <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> using <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Text\" /> property and <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbItem.ChildContent\" /> property.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem><span>Components</span></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"BreadcrumbItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.BreadcrumbItem.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1558330061,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.BreadcrumbItem.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets the child content for the Breadcrumb item. If the child content is not specified breadcrumb item is rendered using <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Text\" /> content.\n            </summary>\n            <value>\n            The template content. The default value in <c>null</c>.\n            </value>\n            <example>\n            In the below code example, content has been set to <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> using <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Text\" /> property and <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbItem.ChildContent\" /> property.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem><span>Components</span></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.BreadcrumbItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.BreadcrumbItem.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1223168560,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.BreadcrumbItems","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Represents a collection of <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" />.\n            </summary>\n            <remarks>\n            To generate dynamic <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> based on collection, use <c>@foreach</c> within <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItems\" /> tag directive.\n            </remarks>\n            <example>\n            In the below code example, a basic Breadcrumb has been rendered using <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItems\" /> tag directive.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BreadcrumbItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Specifies the child content for the Breadcrumb items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.BreadcrumbItems"}},{"HashCode":-1262150141,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.BreadcrumbItems","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Represents a collection of <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" />.\n            </summary>\n            <remarks>\n            To generate dynamic <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> based on collection, use <c>@foreach</c> within <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItems\" /> tag directive.\n            </remarks>\n            <example>\n            In the below code example, a basic Breadcrumb has been rendered using <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItems\" /> tag directive.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.BreadcrumbItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Specifies the child content for the Breadcrumb items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.BreadcrumbItems","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-38273129,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.BreadcrumbItems.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <exclude />\n            <summary>\n            Specifies the child content for the Breadcrumb items.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"BreadcrumbItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.BreadcrumbItems.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1351644155,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.BreadcrumbItems.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <exclude />\n            <summary>\n            Specifies the child content for the Breadcrumb items.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.BreadcrumbItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.BreadcrumbItems.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1909723327,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.BreadcrumbTemplates","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Represents template options in <see cref=\"T:Syncfusion.Blazor.Navigations.SfBreadcrumb\" /> component.\n            </summary>\n            <remarks>\n            <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate\" /> or <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate\" /> can be set <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbTemplates\" /> tag directive.\n            To access template's context parameter use <c>@context</c> in both <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate\" /> and <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate\" />.\n            </remarks>\n            <example>\n            In the below code example, both <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate\" /> and <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate\" /> has been specified.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\"></BreadcrumbItem>\n                </BreadcrumbItems>\n                <BreadcrumbTemplates>\n                    <ItemTemplate>\n                        <i>@context.Text</i>\n                    </ItemTemplate>\n                    <SeparatorTemplate>\n                        <span class=\"e-icons e-arrow\"></span>\n                    </SeparatorTemplate>\n                </BreadcrumbTemplates>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BreadcrumbTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Navigations.BreadcrumbItem>","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of breadcrumb items.\n            Here, context refers to the <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> for which the template is applied.\n            </summary>\n            <value>\n            A template content that specifies the visualization of breadcrumb items. The default value in <c>null</c>.\n            </value>\n            <remarks>\n            The <c>ItemTemplate</c> used to define appearance of breadcrumb items. Use the template’s context parameter to access the <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> properties.\n            Specify <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate\" /> within <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbTemplates\" /> tag directive.\n            </remarks>        \n            <example>\n            In the below code example, <b>italic</b> style Breadcrumb item text has been rendered using <c>ItemTemplate</c>.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\"></BreadcrumbItem>\n                </BreadcrumbItems>\n                <BreadcrumbTemplates>\n                    <ItemTemplate>\n                        <i>@context.Text</i>\n                    </ItemTemplate>\n                </BreadcrumbTemplates>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SeparatorTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<(Syncfusion.Blazor.Navigations.BreadcrumbItem PreviousItem, Syncfusion.Blazor.Navigations.BreadcrumbItem NextItem)>","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of breadcrumb items separator.\n            Here, context refers to the <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> for previous and current item which the template is applied.\n            </summary>\n            <value>\n            A template content that specifies the visualization of breadcrumb items separator. The default value in <c>null</c>.\n            </value>\n            <remarks>\n            The <c>SeparatorTemplate</c> used to define appearance of breadcrumb items separator. Use the template’s context parameter to access the previous and current <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> properties.\n            Specify <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate\" /> within <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbTemplates\" /> tag directive.\n            </remarks>\n            <example>\n            In the below code example, caret icon is rendered as Breadcrumb items separator using <c>SeparatorTemplate</c>.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\"></BreadcrumbItem>\n                </BreadcrumbItems>\n                <BreadcrumbTemplates>\n                    <SeparatorTemplate>\n                        <span class=\"e-icons e-arrow\"></span>\n                    </SeparatorTemplate>\n                </BreadcrumbTemplates>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"SeparatorTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.BreadcrumbTemplates"}},{"HashCode":272078671,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.BreadcrumbTemplates","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Represents template options in <see cref=\"T:Syncfusion.Blazor.Navigations.SfBreadcrumb\" /> component.\n            </summary>\n            <remarks>\n            <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate\" /> or <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate\" /> can be set <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbTemplates\" /> tag directive.\n            To access template's context parameter use <c>@context</c> in both <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate\" /> and <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate\" />.\n            </remarks>\n            <example>\n            In the below code example, both <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate\" /> and <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate\" /> has been specified.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\"></BreadcrumbItem>\n                </BreadcrumbItems>\n                <BreadcrumbTemplates>\n                    <ItemTemplate>\n                        <i>@context.Text</i>\n                    </ItemTemplate>\n                    <SeparatorTemplate>\n                        <span class=\"e-icons e-arrow\"></span>\n                    </SeparatorTemplate>\n                </BreadcrumbTemplates>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.BreadcrumbTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Navigations.BreadcrumbItem>","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of breadcrumb items.\n            Here, context refers to the <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> for which the template is applied.\n            </summary>\n            <value>\n            A template content that specifies the visualization of breadcrumb items. The default value in <c>null</c>.\n            </value>\n            <remarks>\n            The <c>ItemTemplate</c> used to define appearance of breadcrumb items. Use the template’s context parameter to access the <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> properties.\n            Specify <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate\" /> within <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbTemplates\" /> tag directive.\n            </remarks>        \n            <example>\n            In the below code example, <b>italic</b> style Breadcrumb item text has been rendered using <c>ItemTemplate</c>.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\"></BreadcrumbItem>\n                </BreadcrumbItems>\n                <BreadcrumbTemplates>\n                    <ItemTemplate>\n                        <i>@context.Text</i>\n                    </ItemTemplate>\n                </BreadcrumbTemplates>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"SeparatorTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<(Syncfusion.Blazor.Navigations.BreadcrumbItem PreviousItem, Syncfusion.Blazor.Navigations.BreadcrumbItem NextItem)>","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of breadcrumb items separator.\n            Here, context refers to the <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> for previous and current item which the template is applied.\n            </summary>\n            <value>\n            A template content that specifies the visualization of breadcrumb items separator. The default value in <c>null</c>.\n            </value>\n            <remarks>\n            The <c>SeparatorTemplate</c> used to define appearance of breadcrumb items separator. Use the template’s context parameter to access the previous and current <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> properties.\n            Specify <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate\" /> within <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbTemplates\" /> tag directive.\n            </remarks>\n            <example>\n            In the below code example, caret icon is rendered as Breadcrumb items separator using <c>SeparatorTemplate</c>.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\"></BreadcrumbItem>\n                </BreadcrumbItems>\n                <BreadcrumbTemplates>\n                    <SeparatorTemplate>\n                        <span class=\"e-icons e-arrow\"></span>\n                    </SeparatorTemplate>\n                </BreadcrumbTemplates>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"SeparatorTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.BreadcrumbTemplates","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":982404947,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of breadcrumb items.\n            Here, context refers to the <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> for which the template is applied.\n            </summary>\n            <value>\n            A template content that specifies the visualization of breadcrumb items. The default value in <c>null</c>.\n            </value>\n            <remarks>\n            The <c>ItemTemplate</c> used to define appearance of breadcrumb items. Use the template’s context parameter to access the <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> properties.\n            Specify <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate\" /> within <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbTemplates\" /> tag directive.\n            </remarks>        \n            <example>\n            In the below code example, <b>italic</b> style Breadcrumb item text has been rendered using <c>ItemTemplate</c>.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\"></BreadcrumbItem>\n                </BreadcrumbItems>\n                <BreadcrumbTemplates>\n                    <ItemTemplate>\n                        <i>@context.Text</i>\n                    </ItemTemplate>\n                </BreadcrumbTemplates>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"BreadcrumbTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1553191238,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of breadcrumb items.\n            Here, context refers to the <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> for which the template is applied.\n            </summary>\n            <value>\n            A template content that specifies the visualization of breadcrumb items. The default value in <c>null</c>.\n            </value>\n            <remarks>\n            The <c>ItemTemplate</c> used to define appearance of breadcrumb items. Use the template’s context parameter to access the <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> properties.\n            Specify <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate\" /> within <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbTemplates\" /> tag directive.\n            </remarks>        \n            <example>\n            In the below code example, <b>italic</b> style Breadcrumb item text has been rendered using <c>ItemTemplate</c>.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\"></BreadcrumbItem>\n                </BreadcrumbItems>\n                <BreadcrumbTemplates>\n                    <ItemTemplate>\n                        <i>@context.Text</i>\n                    </ItemTemplate>\n                </BreadcrumbTemplates>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.Navigations.BreadcrumbTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":185963632,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of breadcrumb items separator.\n            Here, context refers to the <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> for previous and current item which the template is applied.\n            </summary>\n            <value>\n            A template content that specifies the visualization of breadcrumb items separator. The default value in <c>null</c>.\n            </value>\n            <remarks>\n            The <c>SeparatorTemplate</c> used to define appearance of breadcrumb items separator. Use the template’s context parameter to access the previous and current <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> properties.\n            Specify <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate\" /> within <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbTemplates\" /> tag directive.\n            </remarks>\n            <example>\n            In the below code example, caret icon is rendered as Breadcrumb items separator using <c>SeparatorTemplate</c>.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\"></BreadcrumbItem>\n                </BreadcrumbItems>\n                <BreadcrumbTemplates>\n                    <SeparatorTemplate>\n                        <span class=\"e-icons e-arrow\"></span>\n                    </SeparatorTemplate>\n                </BreadcrumbTemplates>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SeparatorTemplate","ParentTag":"BreadcrumbTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'SeparatorTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-824949381,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of breadcrumb items separator.\n            Here, context refers to the <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> for previous and current item which the template is applied.\n            </summary>\n            <value>\n            A template content that specifies the visualization of breadcrumb items separator. The default value in <c>null</c>.\n            </value>\n            <remarks>\n            The <c>SeparatorTemplate</c> used to define appearance of breadcrumb items separator. Use the template’s context parameter to access the previous and current <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> properties.\n            Specify <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate\" /> within <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbTemplates\" /> tag directive.\n            </remarks>\n            <example>\n            In the below code example, caret icon is rendered as Breadcrumb items separator using <c>SeparatorTemplate</c>.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\"></BreadcrumbItem>\n                </BreadcrumbItems>\n                <BreadcrumbTemplates>\n                    <SeparatorTemplate>\n                        <span class=\"e-icons e-arrow\"></span>\n                    </SeparatorTemplate>\n                </BreadcrumbTemplates>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SeparatorTemplate","ParentTag":"Syncfusion.Blazor.Navigations.BreadcrumbTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'SeparatorTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-324878197,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfBreadcrumb","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Breadcrumb component is a graphical user interface that helps to identify or highlight the current location within a hierarchical structure of websites.\n            The aim is to make the user aware of their current position in a hierarchy of website links.\n            </summary>\n            <remarks>\n            Breadcrumb items can be populated either by specifying <see cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.Url\" /> property or by specifying <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> within <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItems\" /> tag directive.\n            <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate\" /> and <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate\" /> can be used to customize the Breadcrumb component UI using <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbTemplates\" /> tag directive.\n            </remarks>\n            <example>\n            In the below code example, a basic Breadcrumb component initialized with <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItems\" /> tag directive.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\" Url=\"https://blazor.syncfusion.com/demos/\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\" Url=\"https://blazor.syncfusion.com/demos/datagrid/overview\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\" Url=\"https://blazor.syncfusion.com/demos/menu-bar/default-functionalities\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Breadcrumb\" Url=\"https://blazor.syncfusion.com/demos/breadcrumb/default-functionalities\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfBreadcrumb"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Url","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the Url based on which the Breadcrumb items are generated.\n            </summary>\n            <value>\n            The value as a Url string to generate Breadcrumb items. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            You can specify only absolute Url to this property.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfBreadcrumb Url=\"https://blazor.syncfusion.com/demos/breadcrumb/navigation\">\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n            <seealso cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItems\" />\n        ","Metadata":{"Common.PropertyName":"Url"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Navigations.BreadcrumbItem>","Documentation":"\n            <summary>\n            Gets or sets the list of breadcrumb items that will be populated using the <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItems\" /> tag directive. \n            </summary>\n            <value>\n            <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItems\" />\n            </value>\n        ","Metadata":{"Common.PropertyName":"Items"}},{"Kind":"Components.Component","Name":"ActiveItem","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Url\" /> of the active breadcrumb item.\n            </summary>\n            <value>\n            This property contains Url string of active breadcrumb item.\n            </value>\n            <remarks>\n            This property is updated only when the <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Url\" /> has value.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems ActiveItem=\"@activeItem\">\n                    <BreadcrumbItem Text=\"Home\" Url=\"https://blazor.syncfusion.com/demos/\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\" Url=\"https://blazor.syncfusion.com/demos/datagrid/overview\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\" Url=\"https://blazor.syncfusion.com/demos/menu-bar/default-functionalities\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Breadcrumb\" Url=\"https://blazor.syncfusion.com/demos/breadcrumb/default-functionalities\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            @code {\n                private string activeItem = \"https://blazor.syncfusion.com/demos/menu-bar/default-functionalities\";\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ActiveItem"}},{"Kind":"Components.Component","Name":"MaxItems","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the maximum number of breadcrumb items to be visible in the breadcrumb component.\n            If the number of items exceeds this count, then items are rendered based on <see cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.OverflowMode\" /> property. \n            </summary>\n            <value>\n            The number of breadcrumb items to be visible in breadcrumb component. The default value is <c>0</c>. \n            </value>\n            <remarks>\n            The <see cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.MaxItems\" /> is applicable only if the number of <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> is greater than <c>2</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"MaxItems"}},{"Kind":"Components.Component","Name":"OverflowMode","TypeName":"Syncfusion.Blazor.Navigations.BreadcrumbOverflowMode","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates how to display breadcrumb items when the breadcrumb items count exceeds <see cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.MaxItems\" />.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbOverflowMode\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Navigations.BreadcrumbOverflowMode.Menu\" />\n            </value>\n            <remarks>\n            If the <c>OverflowMode</c> is <c>Hidden</c>, the exceeded items will be hidden and while clicking on the previous item, the hidden item will become visible.\n            If the <c>OverflowMode</c> is <c>Collapsed</c>,  only the first and last items will be visible, and the remaining items will be hidden with collapsed icon.\n            When the collapsed icon is clicked, all items become visible and scroll will be enabled if the space is not enough to show all items. \n            If the <c>OverflowMode</c> is <c>Menu</c>, it shows the number of breadcrumb items that can be accommodated within the container space, and creates a sub menu with the remaining items.\n            If the <c>OverflowMode</c> is <c>Wrap</c>, it wraps the items on multiple lines when the Breadcrumb’s width exceeds the container space.\n            If the <c>OverflowMode</c> is <c>Scroll</c>, it shows an HTML scroll bar when the Breadcrumb’s width exceeds the container space.\n            If the <c>OverflowMode</c> is <c>None</c>, it shows all the items on a single line.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OverflowMode"}},{"Kind":"Components.Component","Name":"EnableNavigation","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the built-in item navigation is enabled or not. The breadcrumb component navigates to url based on the item clicked by user.\n            </summary>\n            <value>\n            <c>true</c>, if built-in item navigation is enabled; otherwise, <b>false</b>.The default value is <c>true</c>.\n            </value>\n            <remarks>\n            You can handle navigation in using <see cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ItemClicked\" /> event by setting <see cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.EnableNavigation\" /> as <c>false</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableNavigation"}},{"Kind":"Components.Component","Name":"EnableActiveItemNavigation","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the navigation is enabled for active item (last breadcrumb item).\n            </summary>\n            <value>\n            <c>true</c>, if the navigation is enabled for last breadcrumb item and it is clickable. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableActiveItemNavigation"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ActiveItem\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ActiveItem\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right to left direction is enabled for breadcrumb component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for breadcrumb component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the breadcrumb component is disabled or not.\n            </summary>\n            <value>\n            <c>true</c>, if the breadcrumb component is disabled. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will applied to the Breadcrumb container element.\n            </summary>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            In the below code example, Breadcrumb width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.Navigations.SfBreadcrumb\" /> tag directive.\n            <code><![CDATA[\n            <SfBreadcrumb style=\"width:200px\">\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\" Url=\"https://blazor.syncfusion.com/demos/\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\" Url=\"https://blazor.syncfusion.com/demos/datagrid/overview\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\" Url=\"https://blazor.syncfusion.com/demos/menu-bar/default-functionalities\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Breadcrumb\" Url=\"https://blazor.syncfusion.com/demos/breadcrumb/default-functionalities\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content of Breadcrumb component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActiveItemChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a callback that updates the bound active item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActiveItemChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemRendering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.BreadcrumbItemRenderingEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised while rendering <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" />.\n            </summary>\n            <remarks>\n            You can customize the breadcrumb items rendering using <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItemRenderingEventArgs\" />.\n            </remarks>\n            <example>\n            In the below code example, the breadcrumb item text is changed to lower casing using <c>ItemRendering</c> event.\n            <code><![CDATA[\n            <SfBreadcrumb ItemRendering=\"@ItemRendering\">\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Program Files\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Commom Files\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Services\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Config.json\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            @code {\n                private void ItemRendering(BreadcrumbItemRenderingEventArgs args) {\n                    args.Item.Text = args.Item.Text.ToLower();\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ItemRendering","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemClicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.BreadcrumbClickedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> is clicked. \n            </summary>\n            <remarks>\n            You can customize the item navigation using <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbClickedEventArgs\" /> by setting <seealso cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.EnableNavigation\" /> as <c>false</c>.\n            The event is raised for UI based click only.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            @inject NavigationManager NavigationManager\n            <SfBreadcrumb ItemClicked=\"@ItemClicked\" EnableNavigation=\"false\">\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Program Files\" Url=\"programfiles\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Commom Files\" Url=\"commomfiles\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Services\" Url=\"services\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Config\" Url=\"config\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            @code {\n                private void ItemClicked(BreadcrumbClickedEventArgs args) {\n                    NavigationManager.NavigateTo(args.Item.Url);\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ItemClicked","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfBreadcrumb"}},{"HashCode":-1944172386,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfBreadcrumb","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Breadcrumb component is a graphical user interface that helps to identify or highlight the current location within a hierarchical structure of websites.\n            The aim is to make the user aware of their current position in a hierarchy of website links.\n            </summary>\n            <remarks>\n            Breadcrumb items can be populated either by specifying <see cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.Url\" /> property or by specifying <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> within <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItems\" /> tag directive.\n            <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.ItemTemplate\" /> and <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbTemplates.SeparatorTemplate\" /> can be used to customize the Breadcrumb component UI using <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbTemplates\" /> tag directive.\n            </remarks>\n            <example>\n            In the below code example, a basic Breadcrumb component initialized with <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItems\" /> tag directive.\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\" Url=\"https://blazor.syncfusion.com/demos/\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\" Url=\"https://blazor.syncfusion.com/demos/datagrid/overview\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\" Url=\"https://blazor.syncfusion.com/demos/menu-bar/default-functionalities\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Breadcrumb\" Url=\"https://blazor.syncfusion.com/demos/breadcrumb/default-functionalities\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfBreadcrumb"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Url","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the Url based on which the Breadcrumb items are generated.\n            </summary>\n            <value>\n            The value as a Url string to generate Breadcrumb items. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            You can specify only absolute Url to this property.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfBreadcrumb Url=\"https://blazor.syncfusion.com/demos/breadcrumb/navigation\">\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n            <seealso cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItems\" />\n        ","Metadata":{"Common.PropertyName":"Url"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Navigations.BreadcrumbItem>","Documentation":"\n            <summary>\n            Gets or sets the list of breadcrumb items that will be populated using the <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItems\" /> tag directive. \n            </summary>\n            <value>\n            <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItems\" />\n            </value>\n        ","Metadata":{"Common.PropertyName":"Items"}},{"Kind":"Components.Component","Name":"ActiveItem","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Url\" /> of the active breadcrumb item.\n            </summary>\n            <value>\n            This property contains Url string of active breadcrumb item.\n            </value>\n            <remarks>\n            This property is updated only when the <see cref=\"P:Syncfusion.Blazor.Navigations.BreadcrumbItem.Url\" /> has value.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfBreadcrumb>\n                <BreadcrumbItems ActiveItem=\"@activeItem\">\n                    <BreadcrumbItem Text=\"Home\" Url=\"https://blazor.syncfusion.com/demos/\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\" Url=\"https://blazor.syncfusion.com/demos/datagrid/overview\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\" Url=\"https://blazor.syncfusion.com/demos/menu-bar/default-functionalities\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Breadcrumb\" Url=\"https://blazor.syncfusion.com/demos/breadcrumb/default-functionalities\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            @code {\n                private string activeItem = \"https://blazor.syncfusion.com/demos/menu-bar/default-functionalities\";\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ActiveItem"}},{"Kind":"Components.Component","Name":"MaxItems","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the maximum number of breadcrumb items to be visible in the breadcrumb component.\n            If the number of items exceeds this count, then items are rendered based on <see cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.OverflowMode\" /> property. \n            </summary>\n            <value>\n            The number of breadcrumb items to be visible in breadcrumb component. The default value is <c>0</c>. \n            </value>\n            <remarks>\n            The <see cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.MaxItems\" /> is applicable only if the number of <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> is greater than <c>2</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"MaxItems"}},{"Kind":"Components.Component","Name":"OverflowMode","TypeName":"Syncfusion.Blazor.Navigations.BreadcrumbOverflowMode","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates how to display breadcrumb items when the breadcrumb items count exceeds <see cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.MaxItems\" />.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbOverflowMode\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Navigations.BreadcrumbOverflowMode.Menu\" />\n            </value>\n            <remarks>\n            If the <c>OverflowMode</c> is <c>Hidden</c>, the exceeded items will be hidden and while clicking on the previous item, the hidden item will become visible.\n            If the <c>OverflowMode</c> is <c>Collapsed</c>,  only the first and last items will be visible, and the remaining items will be hidden with collapsed icon.\n            When the collapsed icon is clicked, all items become visible and scroll will be enabled if the space is not enough to show all items. \n            If the <c>OverflowMode</c> is <c>Menu</c>, it shows the number of breadcrumb items that can be accommodated within the container space, and creates a sub menu with the remaining items.\n            If the <c>OverflowMode</c> is <c>Wrap</c>, it wraps the items on multiple lines when the Breadcrumb’s width exceeds the container space.\n            If the <c>OverflowMode</c> is <c>Scroll</c>, it shows an HTML scroll bar when the Breadcrumb’s width exceeds the container space.\n            If the <c>OverflowMode</c> is <c>None</c>, it shows all the items on a single line.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OverflowMode"}},{"Kind":"Components.Component","Name":"EnableNavigation","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the built-in item navigation is enabled or not. The breadcrumb component navigates to url based on the item clicked by user.\n            </summary>\n            <value>\n            <c>true</c>, if built-in item navigation is enabled; otherwise, <b>false</b>.The default value is <c>true</c>.\n            </value>\n            <remarks>\n            You can handle navigation in using <see cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ItemClicked\" /> event by setting <see cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.EnableNavigation\" /> as <c>false</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableNavigation"}},{"Kind":"Components.Component","Name":"EnableActiveItemNavigation","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the navigation is enabled for active item (last breadcrumb item).\n            </summary>\n            <value>\n            <c>true</c>, if the navigation is enabled for last breadcrumb item and it is clickable. otherwise, <b>false</b>.The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableActiveItemNavigation"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ActiveItem\" /> property is persisted.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            Component's <see cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.ActiveItem\" /> property will be stored in browser local storage to persist component's state when page reloads.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right to left direction is enabled for breadcrumb component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for breadcrumb component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the breadcrumb component is disabled or not.\n            </summary>\n            <value>\n            <c>true</c>, if the breadcrumb component is disabled. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will applied to the Breadcrumb container element.\n            </summary>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            In the below code example, Breadcrumb width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.Navigations.SfBreadcrumb\" /> tag directive.\n            <code><![CDATA[\n            <SfBreadcrumb style=\"width:200px\">\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Home\" Url=\"https://blazor.syncfusion.com/demos/\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Components\" Url=\"https://blazor.syncfusion.com/demos/datagrid/overview\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Navigations\" Url=\"https://blazor.syncfusion.com/demos/menu-bar/default-functionalities\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Breadcrumb\" Url=\"https://blazor.syncfusion.com/demos/breadcrumb/default-functionalities\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content of Breadcrumb component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ActiveItemChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a callback that updates the bound active item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ActiveItemChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemRendering","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.BreadcrumbItemRenderingEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised while rendering <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" />.\n            </summary>\n            <remarks>\n            You can customize the breadcrumb items rendering using <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItemRenderingEventArgs\" />.\n            </remarks>\n            <example>\n            In the below code example, the breadcrumb item text is changed to lower casing using <c>ItemRendering</c> event.\n            <code><![CDATA[\n            <SfBreadcrumb ItemRendering=\"@ItemRendering\">\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Program Files\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Commom Files\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Services\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Config.json\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            @code {\n                private void ItemRendering(BreadcrumbItemRenderingEventArgs args) {\n                    args.Item.Text = args.Item.Text.ToLower();\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ItemRendering","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemClicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.BreadcrumbClickedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbItem\" /> is clicked. \n            </summary>\n            <remarks>\n            You can customize the item navigation using <see cref=\"T:Syncfusion.Blazor.Navigations.BreadcrumbClickedEventArgs\" /> by setting <seealso cref=\"P:Syncfusion.Blazor.Navigations.SfBreadcrumb.EnableNavigation\" /> as <c>false</c>.\n            The event is raised for UI based click only.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            @inject NavigationManager NavigationManager\n            <SfBreadcrumb ItemClicked=\"@ItemClicked\" EnableNavigation=\"false\">\n                <BreadcrumbItems>\n                    <BreadcrumbItem Text=\"Program Files\" Url=\"programfiles\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Commom Files\" Url=\"commomfiles\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Services\" Url=\"services\"></BreadcrumbItem>\n                    <BreadcrumbItem Text=\"Config\" Url=\"config\"></BreadcrumbItem>\n                </BreadcrumbItems>\n            </SfBreadcrumb>\n            @code {\n                private void ItemClicked(BreadcrumbClickedEventArgs args) {\n                    NavigationManager.NavigateTo(args.Item.Url);\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ItemClicked","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfBreadcrumb","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-420593610,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfBreadcrumb.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content of Breadcrumb component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfBreadcrumb"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfBreadcrumb.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1249647001,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfBreadcrumb.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content of Breadcrumb component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.SfBreadcrumb"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfBreadcrumb.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-250634433,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.CarouselItem","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A class that represents the Carousel item of <see cref=\"T:Syncfusion.Blazor.Navigations.SfCarousel\" /> component.\n            </summary>\n            <example> \n            In the below code example, a basic Carousel has been rendered using <see cref=\"T:Syncfusion.Blazor.Navigations.CarouselItem\" /> tag directive. \n            <code><![CDATA[ \n            <SfCarousel>\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n            </SfCarousel>\n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CarouselItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Child Content for the Carousel item.\n            </summary>\n            <value>\n            The value used to build the content.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the classes for carousel item to customize the carousel item.\n            </summary>\n            <value> \n            If we set the css class, then the custom class is applied for carousel item. The default value is `null`. \n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfCarousel> \n                <CarouselItem CssClass=\"item1\"><div>Slide 1</div></CarouselItem>\n                <CarouselItem CssClass=\"item2\"><div>Slide 2</div></CarouselItem>\n                <CarouselItem CssClass=\"item3\"><div>Slide 3</div></CarouselItem>\n            </SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the carousel item element.\n            </summary>\n            <value> \n            It allows the carousel item element to render non-declared attributes. The default value is `null`. \n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfCarousel>\n                <CarouselItem HtmlAttributes=\"customAttribute\"><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n            </SfCarousel>\n            @code{ \n               Dictionary<string, object> customAttribute = new Dictionary<string, object>() \n               { \n                   { \"aria-label\", \"slide1\" } \n               }; \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"Interval","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the auto transition time in milliseconds for individual carousel items. \n            </summary>\n            <value> \n            If we set the interval value, then the slide transition begins after the specified time interval for individual carousel items otherwise the default interval value 5000 is set.  \n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfCarousel> \n                <CarouselItem Interval=\"3000\"><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n            </SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Interval"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets template to customize the carousel item.\n            </summary>\n            <value>\n            A template content that specifies the visualization of carousel item. The default value is <c>null</c>.\n            </value> \n            <example> \n            <code><![CDATA[ \n            <SfCarousel> \n                <CarouselItem><Template><div>Slide 1</div></Template></CarouselItem>\n                <CarouselItem><Template><div>Slide 2</div></Template></CarouselItem>\n                <CarouselItem><Template><div>Slide 3</div></Template></CarouselItem>\n            </SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Template","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.CarouselItem"}},{"HashCode":-380602745,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.CarouselItem","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A class that represents the Carousel item of <see cref=\"T:Syncfusion.Blazor.Navigations.SfCarousel\" /> component.\n            </summary>\n            <example> \n            In the below code example, a basic Carousel has been rendered using <see cref=\"T:Syncfusion.Blazor.Navigations.CarouselItem\" /> tag directive. \n            <code><![CDATA[ \n            <SfCarousel>\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n            </SfCarousel>\n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.CarouselItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Child Content for the Carousel item.\n            </summary>\n            <value>\n            The value used to build the content.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the classes for carousel item to customize the carousel item.\n            </summary>\n            <value> \n            If we set the css class, then the custom class is applied for carousel item. The default value is `null`. \n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfCarousel> \n                <CarouselItem CssClass=\"item1\"><div>Slide 1</div></CarouselItem>\n                <CarouselItem CssClass=\"item2\"><div>Slide 2</div></CarouselItem>\n                <CarouselItem CssClass=\"item3\"><div>Slide 3</div></CarouselItem>\n            </SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the carousel item element.\n            </summary>\n            <value> \n            It allows the carousel item element to render non-declared attributes. The default value is `null`. \n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfCarousel>\n                <CarouselItem HtmlAttributes=\"customAttribute\"><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n            </SfCarousel>\n            @code{ \n               Dictionary<string, object> customAttribute = new Dictionary<string, object>() \n               { \n                   { \"aria-label\", \"slide1\" } \n               }; \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"Interval","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the auto transition time in milliseconds for individual carousel items. \n            </summary>\n            <value> \n            If we set the interval value, then the slide transition begins after the specified time interval for individual carousel items otherwise the default interval value 5000 is set.  \n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfCarousel> \n                <CarouselItem Interval=\"3000\"><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n            </SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Interval"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets template to customize the carousel item.\n            </summary>\n            <value>\n            A template content that specifies the visualization of carousel item. The default value is <c>null</c>.\n            </value> \n            <example> \n            <code><![CDATA[ \n            <SfCarousel> \n                <CarouselItem><Template><div>Slide 1</div></Template></CarouselItem>\n                <CarouselItem><Template><div>Slide 2</div></Template></CarouselItem>\n                <CarouselItem><Template><div>Slide 3</div></Template></CarouselItem>\n            </SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Template","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.CarouselItem","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-613238213,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.CarouselItem.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Child Content for the Carousel item.\n            </summary>\n            <value>\n            The value used to build the content.\n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"CarouselItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.CarouselItem.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":960782344,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.CarouselItem.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Child Content for the Carousel item.\n            </summary>\n            <value>\n            The value used to build the content.\n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.CarouselItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.CarouselItem.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2065755657,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.CarouselItem.Template","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets template to customize the carousel item.\n            </summary>\n            <value>\n            A template content that specifies the visualization of carousel item. The default value is <c>null</c>.\n            </value> \n            <example> \n            <code><![CDATA[ \n            <SfCarousel> \n                <CarouselItem><Template><div>Slide 1</div></Template></CarouselItem>\n                <CarouselItem><Template><div>Slide 2</div></Template></CarouselItem>\n                <CarouselItem><Template><div>Slide 3</div></Template></CarouselItem>\n            </SfCarousel> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"CarouselItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.CarouselItem.Template","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-300601905,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.CarouselItem.Template","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets template to customize the carousel item.\n            </summary>\n            <value>\n            A template content that specifies the visualization of carousel item. The default value is <c>null</c>.\n            </value> \n            <example> \n            <code><![CDATA[ \n            <SfCarousel> \n                <CarouselItem><Template><div>Slide 1</div></Template></CarouselItem>\n                <CarouselItem><Template><div>Slide 2</div></Template></CarouselItem>\n                <CarouselItem><Template><div>Slide 3</div></Template></CarouselItem>\n            </SfCarousel> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"Syncfusion.Blazor.Navigations.CarouselItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.CarouselItem.Template","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":245540745,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfCarousel","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            The carousel component is a slide show of images, contents or images with contents.\n            </summary>\n            <remarks>\n            Carousel items can be populated by specifying <see cref=\"T:Syncfusion.Blazor.Navigations.CarouselItem\" /> within <see cref=\"T:Syncfusion.Blazor.Navigations.SfCarousel\" /> tag directive.\n            </remarks>\n            <example>\n            In the below code example, a basic Carousel component initialized with <see cref=\"T:Syncfusion.Blazor.Navigations.CarouselItem\" /> tag directive.\n            <code><![CDATA[\n            <SfCarousel>\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n            </SfCarousel>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfCarousel"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content of Carousel component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AutoPlay","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the slide transition is automatic or manual. \n            </summary> \n            <value> \n            false, the slide transition has been stopped otherwise the slide transition plays. The default value is `true`. \n            </value> \n        ","Metadata":{"Common.PropertyName":"AutoPlay"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the custom classes to customize the Carousel component.  \n            </summary> \n            <value> \n            If we set the css class, then the custom class is applied for carousel. The default value is `null`. \n            </value> \n            <example> \n            <code><![CDATA[ \n            <SfCarousel CssClass=\"custom-carousel e-custom-animation\"></SfCarousel> \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads.\n            </summary>\n            <value> \n            true, the <see cref=\"P:Syncfusion.Blazor.Navigations.SfCarousel.SelectedIndex\" /> property is persisted. The default value is `false`. \n            </value>\n            <remarks> \n            To persist the <see cref=\"P:Syncfusion.Blazor.Navigations.SfCarousel.SelectedIndex\" /> property, it is mandatory to provide the <see cref=\"P:Syncfusion.Blazor.Navigations.SfCarousel.ID\" /> property.\n            </remarks> \n            <example>\n            <code><![CDATA[ \n            <SfCarousel Id=\"CarouselSlide\" EnablePersistence=\"true\"></SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right to left direction is enabled for Carousel component.\n            </summary>\n            <value> \n            true, the right to left direction is enabled for carousel component. The default value is `false`. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"EnableTouchSwipe","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the slide transition should occur or not when performing swipe action. \n            </summary> \n            <value> \n            true, the slide transition with swipe action in touch screen works otherwise touch swipe action does not work. The default value is `true`. \n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableTouchSwipe"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the height of the Carousel in pixels/number/percentage. Number value is considered as pixels. \n            </summary> \n            <value> \n            If we set the height value, then the carousel will render based on specified height otherwise the default height value `auto` is set.  \n            </value> \n            <example> \n            <code><![CDATA[ \n            <SfCarousel Height=\"500px\"></SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Height"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary> \n            Gets or sets a collection of additional attributes that will applied to the carousel element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying <c>HtmlAttributes</c> directive. \n            </remarks> \n            <value> \n            It allows the carousel component to render non-declared attributes. The default value is `null`. \n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfCarousel HtmlAttributes=\"customAttribute\"></SfCarousel> \n            @code{ \n               Dictionary<string, object> customAttribute = new Dictionary<string, object>() \n               { \n                   { \"aria-label\", \"Slide show of current News\" } \n               }; \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the unique Id value for carousel component.\n            </summary>\n            <value>\n            If we set the id, then the id value set for carousel element. The default value is `null`.\n            </value>\n            <example>\n            <code><![CDATA[ \n            <SfCarousel Id=\"CarouselForNews\"></SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"AnimationEffect","TypeName":"Syncfusion.Blazor.Navigations.CarouselAnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the animation effects applies to the slide transition. \n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Navigations.CarouselAnimationEffect\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Navigations.CarouselAnimationEffect.Slide\" />\n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfCarousel AnimationEffect=\"CarouselAnimationEffect.Fade\">\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n            </SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"AnimationEffect"}},{"Kind":"Components.Component","Name":"Loop","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the slide transition should loop or end when reaches the last slide of the carousel. \n            </summary> \n            <value> \n            false, the slide transition has been stopped at end of the last slide otherwise the slide transition plays continuously. The default value is `true`. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Loop"}},{"Kind":"Components.Component","Name":"Interval","TypeName":"System.Int32","Documentation":"\n            <summary> \n            Gets or sets the amount of delay time to transition slides automatically. \n            </summary> \n            <value> \n            If we set the interval value, then the slide transition begins after the specified time interval otherwise the default interval value 5000 is set.  \n            </value> \n            <remarks> \n            The interval value accepts in milliseconds. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfCarousel Interval=\"4000\"></SfCarousel> \n            ]]></code>\n            </example> \n        ","Metadata":{"Common.PropertyName":"Interval"}},{"Kind":"Components.Component","Name":"PartialVisible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the partial slides are rendered or not. \n            </summary>\n            <value>\n            true, the partial slides are rendered. The default value is `false`.\n            </value>\n            <remarks>Shows the next and previous slides partially. So, user can identify that more slides are yet to display. Slide animation only applicable if the PartialVisible is enabled.\n            </remarks>\n            In the below example, Previous/next slides visible range can be customized using the css class.\n            <example> \n            <code><![CDATA[ \n            <SfCarousel PartialVisible=\"true\"></SfCarousel> \n            <style \n             .e-partial .e-carousel-slide-container {\n               padding: 0 150px;\n             }\n            </style>\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"PartialVisible"}},{"Kind":"Components.Component","Name":"SelectedIndex","TypeName":"System.Int32","Documentation":"\n            <summary> \n            Gets or sets the index of the current carousel item. \n            </summary> \n            <value> \n            If we set the index value, then the slides begin from specified index otherwise the default index value 0 is set.  \n            </value> \n            <example> \n            <code><![CDATA[ \n            <SfCarousel SelectedIndex=\"1\"></SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"SelectedIndex"}},{"Kind":"Components.Component","Name":"SelectedIndexChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32>","Documentation":"\n            <summary>\n            Invokes when index of the active slide changed.\n            </summary>\n            <value> \n            Fired when SelectedSlideIndex changes. \n            </value>\n        ","Metadata":{"Common.PropertyName":"SelectedIndexChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ButtonsVisibility","TypeName":"Syncfusion.Blazor.Navigations.CarouselButtonVisibility","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets whether to show previous/next navigation buttons or not. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Navigations.CarouselButtonVisibility\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Navigations.CarouselButtonVisibility.Visible\" /> \n            </value> \n            <example>\n            <code><![CDATA[ \n            <SfCarousel ButtonsVisibility=\"CarouselButtonVisibility.VisibleOnHover\"></SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"ButtonsVisibility"}},{"Kind":"Components.Component","Name":"ShowIndicators","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether to show indicators or not. \n            </summary> \n            <value> \n            false, the slide transition indicators will not be shown otherwise the indicators is shown. The default value is `true`. \n            </value> \n        ","Metadata":{"Common.PropertyName":"ShowIndicators"}},{"Kind":"Components.Component","Name":"ShowPlayButton","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether to show play button or not to play or pause the transitions. \n            </summary> \n            <value> \n            true, the slide transition play/pause button will be shown otherwise the button is not shown. The default value is `false`. \n            </value> \n        ","Metadata":{"Common.PropertyName":"ShowPlayButton"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the width of the Carousel in pixels/number/percentage. Number value is considered as pixels. \n            </summary> \n            <value> \n            If we set the width value, then the carousel will render based on specified width otherwise the default width value `auto` is set.  \n            </value> \n            <example> \n            <code><![CDATA[ \n            <SfCarousel Width=\"500px\"></SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"PreviousButtonTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of previous navigation button.\n            </summary>\n            <value>\n            A template content that specifies the visualization of previous navigation button. The default value is <c>null</c>.\n            </value>        \n            <example>\n            In the below code example, previous navigation button are customized with chevron double icons.\n            <code><![CDATA[\n            <SfCarousel>\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n                <PreviousButtonTemplate>\n                    <SfButton CssClass=\"e-flat e-round\" IconCss=\"e-icons e-chevron-left-double\"></SfButton >\n                </PreviousButtonTemplate>\n            </SfCarousel>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"PreviousButtonTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"NextButtonTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of next navigation button.\n            </summary>\n            <value>\n            A template content that specifies the visualization of next navigation button. The default value is <c>null</c>.\n            </value>        \n            <example>\n            In the below code example, next navigation button are customized with chevron double icons.\n            <code><![CDATA[\n            <SfCarousel>\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n                <NextButtonTemplate>\n                    <SfButton CssClass=\"e-flat e-round\" IconCss=\"e-icons e-chevron-right-double\"></SfButton >\n                </NextButtonTemplate>\n            </SfCarousel>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"NextButtonTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"IndicatorsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Navigations.IndicatorsTemplateContext>","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of indicators.\n            Here, context refers to the Index and SelectedIndex value.\n            </summary>\n            <value>\n            A template content that specifies the visualization of indicators. The default value is <c>null</c>.\n            </value>\n            <remarks>\n            Use the template's context parameter <c>Index</c> which returns current index of the slide and <c>SelectedIndex</c> which returns the index of active slide.\n            With the <c>SelectedIndex</c> parameter, you can differentiate the active indicator.\n            </remarks>        \n            <example>\n            <code><![CDATA[\n            <SfCarousel>\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n                <IndicatorsTemplate>\n                    @if(context.SelectedIndex == context.Index)\n                    {\n                        <div class=\"indicator active\" indicator-index=\"@context.Index\"></div>\n                    }\n                    else\n                    {\n                        <div class=\"indicator\" indicator-index=\"@context.Index\"></div>\n                    }\n                </IndicatorsTemplate>\n            </SfCarousel>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"IndicatorsTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"PlayButtonTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of play/pause button.\n            </summary>\n            <value>\n            A template content that specifies the visualization of play/pause button. The default value is <c>null</c>.\n            </value>\n            <remarks>\n            Based on AutoPlay value or click action of the play/pause button, you can decide whether the play or pause button to be rendered.\n            </remarks>        \n            <example>\n            <code><![CDATA[\n            <SfCarousel @ref=\"CarouselRef\">\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n                <PlayButtonTemplate>\n                    <SfButton CssClass=\"e-flat e-round\" IconCss=\"@playPauseIcon\" @onclick=\"@OnPlayClick\" IsToggle=\"true\"></SfButton>\n                </PlayButtonTemplate>\n            </SfCarousel>\n            @code{\n               SfCarousel CarouselRef;\n               private string playPauseIcon = \"e-icons e-pause\";\n               private void OnPlayClick()\n                {\n                    if (!CarouselRef.AutoPlay)\n                    {\n                        playPauseIcon = \"e-icons e-pause\";\n                        CarouselRef.Play();\n                    }\n                    else\n                    {\n                        playPauseIcon = \"e-icons e-play\";\n                        CarouselRef.Pause();\n                    }\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"PlayButtonTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"PauseOnHover","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the auto play slides pause on mouse hover or not.\n            </summary>\n            <value>\n            false, the slide transition has been played on mouse enters to carousel otherwise the slide transition paused. The default value is `true`.\n            </value>\n            <remarks>\n            This property applicable when <see cref=\"P:Syncfusion.Blazor.Navigations.SfCarousel.AutoPlay\" /> value is true.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfCarousel PauseOnHover=\"false\"></SfCarousel>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"PauseOnHover"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfCarousel"}},{"HashCode":-1072908407,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfCarousel","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            The carousel component is a slide show of images, contents or images with contents.\n            </summary>\n            <remarks>\n            Carousel items can be populated by specifying <see cref=\"T:Syncfusion.Blazor.Navigations.CarouselItem\" /> within <see cref=\"T:Syncfusion.Blazor.Navigations.SfCarousel\" /> tag directive.\n            </remarks>\n            <example>\n            In the below code example, a basic Carousel component initialized with <see cref=\"T:Syncfusion.Blazor.Navigations.CarouselItem\" /> tag directive.\n            <code><![CDATA[\n            <SfCarousel>\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n            </SfCarousel>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfCarousel"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content of Carousel component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AutoPlay","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the slide transition is automatic or manual. \n            </summary> \n            <value> \n            false, the slide transition has been stopped otherwise the slide transition plays. The default value is `true`. \n            </value> \n        ","Metadata":{"Common.PropertyName":"AutoPlay"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the custom classes to customize the Carousel component.  \n            </summary> \n            <value> \n            If we set the css class, then the custom class is applied for carousel. The default value is `null`. \n            </value> \n            <example> \n            <code><![CDATA[ \n            <SfCarousel CssClass=\"custom-carousel e-custom-animation\"></SfCarousel> \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads.\n            </summary>\n            <value> \n            true, the <see cref=\"P:Syncfusion.Blazor.Navigations.SfCarousel.SelectedIndex\" /> property is persisted. The default value is `false`. \n            </value>\n            <remarks> \n            To persist the <see cref=\"P:Syncfusion.Blazor.Navigations.SfCarousel.SelectedIndex\" /> property, it is mandatory to provide the <see cref=\"P:Syncfusion.Blazor.Navigations.SfCarousel.ID\" /> property.\n            </remarks> \n            <example>\n            <code><![CDATA[ \n            <SfCarousel Id=\"CarouselSlide\" EnablePersistence=\"true\"></SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right to left direction is enabled for Carousel component.\n            </summary>\n            <value> \n            true, the right to left direction is enabled for carousel component. The default value is `false`. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"EnableTouchSwipe","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the slide transition should occur or not when performing swipe action. \n            </summary> \n            <value> \n            true, the slide transition with swipe action in touch screen works otherwise touch swipe action does not work. The default value is `true`. \n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableTouchSwipe"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the height of the Carousel in pixels/number/percentage. Number value is considered as pixels. \n            </summary> \n            <value> \n            If we set the height value, then the carousel will render based on specified height otherwise the default height value `auto` is set.  \n            </value> \n            <example> \n            <code><![CDATA[ \n            <SfCarousel Height=\"500px\"></SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Height"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary> \n            Gets or sets a collection of additional attributes that will applied to the carousel element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying <c>HtmlAttributes</c> directive. \n            </remarks> \n            <value> \n            It allows the carousel component to render non-declared attributes. The default value is `null`. \n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfCarousel HtmlAttributes=\"customAttribute\"></SfCarousel> \n            @code{ \n               Dictionary<string, object> customAttribute = new Dictionary<string, object>() \n               { \n                   { \"aria-label\", \"Slide show of current News\" } \n               }; \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the unique Id value for carousel component.\n            </summary>\n            <value>\n            If we set the id, then the id value set for carousel element. The default value is `null`.\n            </value>\n            <example>\n            <code><![CDATA[ \n            <SfCarousel Id=\"CarouselForNews\"></SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"AnimationEffect","TypeName":"Syncfusion.Blazor.Navigations.CarouselAnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the animation effects applies to the slide transition. \n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Navigations.CarouselAnimationEffect\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Navigations.CarouselAnimationEffect.Slide\" />\n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfCarousel AnimationEffect=\"CarouselAnimationEffect.Fade\">\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n            </SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"AnimationEffect"}},{"Kind":"Components.Component","Name":"Loop","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the slide transition should loop or end when reaches the last slide of the carousel. \n            </summary> \n            <value> \n            false, the slide transition has been stopped at end of the last slide otherwise the slide transition plays continuously. The default value is `true`. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Loop"}},{"Kind":"Components.Component","Name":"Interval","TypeName":"System.Int32","Documentation":"\n            <summary> \n            Gets or sets the amount of delay time to transition slides automatically. \n            </summary> \n            <value> \n            If we set the interval value, then the slide transition begins after the specified time interval otherwise the default interval value 5000 is set.  \n            </value> \n            <remarks> \n            The interval value accepts in milliseconds. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfCarousel Interval=\"4000\"></SfCarousel> \n            ]]></code>\n            </example> \n        ","Metadata":{"Common.PropertyName":"Interval"}},{"Kind":"Components.Component","Name":"PartialVisible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the partial slides are rendered or not. \n            </summary>\n            <value>\n            true, the partial slides are rendered. The default value is `false`.\n            </value>\n            <remarks>Shows the next and previous slides partially. So, user can identify that more slides are yet to display. Slide animation only applicable if the PartialVisible is enabled.\n            </remarks>\n            In the below example, Previous/next slides visible range can be customized using the css class.\n            <example> \n            <code><![CDATA[ \n            <SfCarousel PartialVisible=\"true\"></SfCarousel> \n            <style \n             .e-partial .e-carousel-slide-container {\n               padding: 0 150px;\n             }\n            </style>\n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"PartialVisible"}},{"Kind":"Components.Component","Name":"SelectedIndex","TypeName":"System.Int32","Documentation":"\n            <summary> \n            Gets or sets the index of the current carousel item. \n            </summary> \n            <value> \n            If we set the index value, then the slides begin from specified index otherwise the default index value 0 is set.  \n            </value> \n            <example> \n            <code><![CDATA[ \n            <SfCarousel SelectedIndex=\"1\"></SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"SelectedIndex"}},{"Kind":"Components.Component","Name":"SelectedIndexChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32>","Documentation":"\n            <summary>\n            Invokes when index of the active slide changed.\n            </summary>\n            <value> \n            Fired when SelectedSlideIndex changes. \n            </value>\n        ","Metadata":{"Common.PropertyName":"SelectedIndexChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ButtonsVisibility","TypeName":"Syncfusion.Blazor.Navigations.CarouselButtonVisibility","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets whether to show previous/next navigation buttons or not. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Navigations.CarouselButtonVisibility\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Navigations.CarouselButtonVisibility.Visible\" /> \n            </value> \n            <example>\n            <code><![CDATA[ \n            <SfCarousel ButtonsVisibility=\"CarouselButtonVisibility.VisibleOnHover\"></SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"ButtonsVisibility"}},{"Kind":"Components.Component","Name":"ShowIndicators","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether to show indicators or not. \n            </summary> \n            <value> \n            false, the slide transition indicators will not be shown otherwise the indicators is shown. The default value is `true`. \n            </value> \n        ","Metadata":{"Common.PropertyName":"ShowIndicators"}},{"Kind":"Components.Component","Name":"ShowPlayButton","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether to show play button or not to play or pause the transitions. \n            </summary> \n            <value> \n            true, the slide transition play/pause button will be shown otherwise the button is not shown. The default value is `false`. \n            </value> \n        ","Metadata":{"Common.PropertyName":"ShowPlayButton"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the width of the Carousel in pixels/number/percentage. Number value is considered as pixels. \n            </summary> \n            <value> \n            If we set the width value, then the carousel will render based on specified width otherwise the default width value `auto` is set.  \n            </value> \n            <example> \n            <code><![CDATA[ \n            <SfCarousel Width=\"500px\"></SfCarousel> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"PreviousButtonTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of previous navigation button.\n            </summary>\n            <value>\n            A template content that specifies the visualization of previous navigation button. The default value is <c>null</c>.\n            </value>        \n            <example>\n            In the below code example, previous navigation button are customized with chevron double icons.\n            <code><![CDATA[\n            <SfCarousel>\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n                <PreviousButtonTemplate>\n                    <SfButton CssClass=\"e-flat e-round\" IconCss=\"e-icons e-chevron-left-double\"></SfButton >\n                </PreviousButtonTemplate>\n            </SfCarousel>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"PreviousButtonTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"NextButtonTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of next navigation button.\n            </summary>\n            <value>\n            A template content that specifies the visualization of next navigation button. The default value is <c>null</c>.\n            </value>        \n            <example>\n            In the below code example, next navigation button are customized with chevron double icons.\n            <code><![CDATA[\n            <SfCarousel>\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n                <NextButtonTemplate>\n                    <SfButton CssClass=\"e-flat e-round\" IconCss=\"e-icons e-chevron-right-double\"></SfButton >\n                </NextButtonTemplate>\n            </SfCarousel>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"NextButtonTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"IndicatorsTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Navigations.IndicatorsTemplateContext>","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of indicators.\n            Here, context refers to the Index and SelectedIndex value.\n            </summary>\n            <value>\n            A template content that specifies the visualization of indicators. The default value is <c>null</c>.\n            </value>\n            <remarks>\n            Use the template's context parameter <c>Index</c> which returns current index of the slide and <c>SelectedIndex</c> which returns the index of active slide.\n            With the <c>SelectedIndex</c> parameter, you can differentiate the active indicator.\n            </remarks>        \n            <example>\n            <code><![CDATA[\n            <SfCarousel>\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n                <IndicatorsTemplate>\n                    @if(context.SelectedIndex == context.Index)\n                    {\n                        <div class=\"indicator active\" indicator-index=\"@context.Index\"></div>\n                    }\n                    else\n                    {\n                        <div class=\"indicator\" indicator-index=\"@context.Index\"></div>\n                    }\n                </IndicatorsTemplate>\n            </SfCarousel>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"IndicatorsTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"PlayButtonTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of play/pause button.\n            </summary>\n            <value>\n            A template content that specifies the visualization of play/pause button. The default value is <c>null</c>.\n            </value>\n            <remarks>\n            Based on AutoPlay value or click action of the play/pause button, you can decide whether the play or pause button to be rendered.\n            </remarks>        \n            <example>\n            <code><![CDATA[\n            <SfCarousel @ref=\"CarouselRef\">\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n                <PlayButtonTemplate>\n                    <SfButton CssClass=\"e-flat e-round\" IconCss=\"@playPauseIcon\" @onclick=\"@OnPlayClick\" IsToggle=\"true\"></SfButton>\n                </PlayButtonTemplate>\n            </SfCarousel>\n            @code{\n               SfCarousel CarouselRef;\n               private string playPauseIcon = \"e-icons e-pause\";\n               private void OnPlayClick()\n                {\n                    if (!CarouselRef.AutoPlay)\n                    {\n                        playPauseIcon = \"e-icons e-pause\";\n                        CarouselRef.Play();\n                    }\n                    else\n                    {\n                        playPauseIcon = \"e-icons e-play\";\n                        CarouselRef.Pause();\n                    }\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"PlayButtonTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"PauseOnHover","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the auto play slides pause on mouse hover or not.\n            </summary>\n            <value>\n            false, the slide transition has been played on mouse enters to carousel otherwise the slide transition paused. The default value is `true`.\n            </value>\n            <remarks>\n            This property applicable when <see cref=\"P:Syncfusion.Blazor.Navigations.SfCarousel.AutoPlay\" /> value is true.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfCarousel PauseOnHover=\"false\"></SfCarousel>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"PauseOnHover"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfCarousel","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-617382631,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfCarousel.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content of Carousel component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfCarousel"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfCarousel.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1472342513,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfCarousel.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content of Carousel component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.SfCarousel"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfCarousel.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1922396486,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfCarousel.PreviousButtonTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of previous navigation button.\n            </summary>\n            <value>\n            A template content that specifies the visualization of previous navigation button. The default value is <c>null</c>.\n            </value>        \n            <example>\n            In the below code example, previous navigation button are customized with chevron double icons.\n            <code><![CDATA[\n            <SfCarousel>\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n                <PreviousButtonTemplate>\n                    <SfButton CssClass=\"e-flat e-round\" IconCss=\"e-icons e-chevron-left-double\"></SfButton >\n                </PreviousButtonTemplate>\n            </SfCarousel>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PreviousButtonTemplate","ParentTag":"SfCarousel"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfCarousel.PreviousButtonTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1239583794,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfCarousel.PreviousButtonTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of previous navigation button.\n            </summary>\n            <value>\n            A template content that specifies the visualization of previous navigation button. The default value is <c>null</c>.\n            </value>        \n            <example>\n            In the below code example, previous navigation button are customized with chevron double icons.\n            <code><![CDATA[\n            <SfCarousel>\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n                <PreviousButtonTemplate>\n                    <SfButton CssClass=\"e-flat e-round\" IconCss=\"e-icons e-chevron-left-double\"></SfButton >\n                </PreviousButtonTemplate>\n            </SfCarousel>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PreviousButtonTemplate","ParentTag":"Syncfusion.Blazor.Navigations.SfCarousel"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfCarousel.PreviousButtonTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-515774251,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfCarousel.NextButtonTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of next navigation button.\n            </summary>\n            <value>\n            A template content that specifies the visualization of next navigation button. The default value is <c>null</c>.\n            </value>        \n            <example>\n            In the below code example, next navigation button are customized with chevron double icons.\n            <code><![CDATA[\n            <SfCarousel>\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n                <NextButtonTemplate>\n                    <SfButton CssClass=\"e-flat e-round\" IconCss=\"e-icons e-chevron-right-double\"></SfButton >\n                </NextButtonTemplate>\n            </SfCarousel>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NextButtonTemplate","ParentTag":"SfCarousel"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfCarousel.NextButtonTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1110581191,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfCarousel.NextButtonTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of next navigation button.\n            </summary>\n            <value>\n            A template content that specifies the visualization of next navigation button. The default value is <c>null</c>.\n            </value>        \n            <example>\n            In the below code example, next navigation button are customized with chevron double icons.\n            <code><![CDATA[\n            <SfCarousel>\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n                <NextButtonTemplate>\n                    <SfButton CssClass=\"e-flat e-round\" IconCss=\"e-icons e-chevron-right-double\"></SfButton >\n                </NextButtonTemplate>\n            </SfCarousel>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NextButtonTemplate","ParentTag":"Syncfusion.Blazor.Navigations.SfCarousel"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfCarousel.NextButtonTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1870210906,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfCarousel.IndicatorsTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of indicators.\n            Here, context refers to the Index and SelectedIndex value.\n            </summary>\n            <value>\n            A template content that specifies the visualization of indicators. The default value is <c>null</c>.\n            </value>\n            <remarks>\n            Use the template's context parameter <c>Index</c> which returns current index of the slide and <c>SelectedIndex</c> which returns the index of active slide.\n            With the <c>SelectedIndex</c> parameter, you can differentiate the active indicator.\n            </remarks>        \n            <example>\n            <code><![CDATA[\n            <SfCarousel>\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n                <IndicatorsTemplate>\n                    @if(context.SelectedIndex == context.Index)\n                    {\n                        <div class=\"indicator active\" indicator-index=\"@context.Index\"></div>\n                    }\n                    else\n                    {\n                        <div class=\"indicator\" indicator-index=\"@context.Index\"></div>\n                    }\n                </IndicatorsTemplate>\n            </SfCarousel>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"IndicatorsTemplate","ParentTag":"SfCarousel"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'IndicatorsTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfCarousel.IndicatorsTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-404238791,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfCarousel.IndicatorsTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of indicators.\n            Here, context refers to the Index and SelectedIndex value.\n            </summary>\n            <value>\n            A template content that specifies the visualization of indicators. The default value is <c>null</c>.\n            </value>\n            <remarks>\n            Use the template's context parameter <c>Index</c> which returns current index of the slide and <c>SelectedIndex</c> which returns the index of active slide.\n            With the <c>SelectedIndex</c> parameter, you can differentiate the active indicator.\n            </remarks>        \n            <example>\n            <code><![CDATA[\n            <SfCarousel>\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n                <IndicatorsTemplate>\n                    @if(context.SelectedIndex == context.Index)\n                    {\n                        <div class=\"indicator active\" indicator-index=\"@context.Index\"></div>\n                    }\n                    else\n                    {\n                        <div class=\"indicator\" indicator-index=\"@context.Index\"></div>\n                    }\n                </IndicatorsTemplate>\n            </SfCarousel>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"IndicatorsTemplate","ParentTag":"Syncfusion.Blazor.Navigations.SfCarousel"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'IndicatorsTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfCarousel.IndicatorsTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-705866354,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfCarousel.PlayButtonTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of play/pause button.\n            </summary>\n            <value>\n            A template content that specifies the visualization of play/pause button. The default value is <c>null</c>.\n            </value>\n            <remarks>\n            Based on AutoPlay value or click action of the play/pause button, you can decide whether the play or pause button to be rendered.\n            </remarks>        \n            <example>\n            <code><![CDATA[\n            <SfCarousel @ref=\"CarouselRef\">\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n                <PlayButtonTemplate>\n                    <SfButton CssClass=\"e-flat e-round\" IconCss=\"@playPauseIcon\" @onclick=\"@OnPlayClick\" IsToggle=\"true\"></SfButton>\n                </PlayButtonTemplate>\n            </SfCarousel>\n            @code{\n               SfCarousel CarouselRef;\n               private string playPauseIcon = \"e-icons e-pause\";\n               private void OnPlayClick()\n                {\n                    if (!CarouselRef.AutoPlay)\n                    {\n                        playPauseIcon = \"e-icons e-pause\";\n                        CarouselRef.Play();\n                    }\n                    else\n                    {\n                        playPauseIcon = \"e-icons e-play\";\n                        CarouselRef.Pause();\n                    }\n                }\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PlayButtonTemplate","ParentTag":"SfCarousel"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfCarousel.PlayButtonTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-811083650,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfCarousel.PlayButtonTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets template as <see cref=\"T:Microsoft.AspNetCore.Components.RenderFragment\" />, that defines custom appearance of play/pause button.\n            </summary>\n            <value>\n            A template content that specifies the visualization of play/pause button. The default value is <c>null</c>.\n            </value>\n            <remarks>\n            Based on AutoPlay value or click action of the play/pause button, you can decide whether the play or pause button to be rendered.\n            </remarks>        \n            <example>\n            <code><![CDATA[\n            <SfCarousel @ref=\"CarouselRef\">\n                <CarouselItem><div>Slide 1</div></CarouselItem>\n                <CarouselItem><div>Slide 2</div></CarouselItem>\n                <CarouselItem><div>Slide 3</div></CarouselItem>\n                <PlayButtonTemplate>\n                    <SfButton CssClass=\"e-flat e-round\" IconCss=\"@playPauseIcon\" @onclick=\"@OnPlayClick\" IsToggle=\"true\"></SfButton>\n                </PlayButtonTemplate>\n            </SfCarousel>\n            @code{\n               SfCarousel CarouselRef;\n               private string playPauseIcon = \"e-icons e-pause\";\n               private void OnPlayClick()\n                {\n                    if (!CarouselRef.AutoPlay)\n                    {\n                        playPauseIcon = \"e-icons e-pause\";\n                        CarouselRef.Play();\n                    }\n                    else\n                    {\n                        playPauseIcon = \"e-icons e-play\";\n                        CarouselRef.Pause();\n                    }\n                }\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PlayButtonTemplate","ParentTag":"Syncfusion.Blazor.Navigations.SfCarousel"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfCarousel.PlayButtonTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1645672220,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfContextMenu<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.\n            </summary>\n            <summary>\n            ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.\n            </summary>\n            <summary>\n            ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.\n            </summary>\n            <example>\n            In the below code example, showcases a basic context menu.\n            <code><![CDATA[\n            <SfContextMenu Target=\"#contextmenutarget\" TValue=\"MenuItem\">\n            <MenuItems>\n            <MenuItem Text=\"Cut\" IconCss=\"e-cm-icons e-cut\"></MenuItem>\n            <MenuItem Text=\"Copy\" IconCss=\"e-cm-icons e-copy\"></MenuItem>\n            <MenuItem Text=\"Paste\" IconCss=\"e-cm-icons e-paste\"></MenuItem>\n            </MenuItems>\n            </SfContextMenu>\n            ]]></code>\n            </example>\n            <summary>\n            ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.\n            </summary>\n            <summary>\n            ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.\n            </summary>\n            <example>\n            In the below code example, showcases a basic context menu.\n            <code><![CDATA[\n            <SfContextMenu Target=\"#contextmenutarget\" TValue=\"MenuItem\">\n            <MenuItems>\n            <MenuItem Text=\"Cut\" IconCss=\"e-cm-icons e-cut\"></MenuItem>\n            <MenuItem Text=\"Copy\" IconCss=\"e-cm-icons e-copy\"></MenuItem>\n            <MenuItem Text=\"Paste\" IconCss=\"e-cm-icons e-paste\"></MenuItem>\n            </MenuItems>\n            </SfContextMenu>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfContextMenu"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.SfContextMenu<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Filter","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the filter selector in which element the context menu should be opened inside the sepcified target.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Filter"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the target element selector in which the context menu should be opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Target"}},{"Kind":"Components.Component","Name":"ShowOn","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates an event to open the context menu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowOn"}},{"Kind":"Components.Component","Name":"OpenActionEvents","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates an event to open the context menu.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>contextmenu</c>.\n            </value>\n            <remarks>\n            The list of events supports to open the context menu are contextmenu, mousedown, mouseup, touchstart, mouseleave etc. The event must be different from <c> CloseActionEvents. </c>\n            </remarks>\n            <example>\n            In the below code example, <c>contextmenu</c> event is set to open the context menu.\n            <code><![CDATA[\n            <div id=\"target\">Right click or touch hold to open the context menu.</div>\n            <SfContextMenu Target=\"#target\" TValue=\"MenuItem\" OpenActionEvents=”OpenAction”>\n            <MenuItems>\n                <MenuItem Text=\"Cut\"></MenuItem>\n                <MenuItem Text=\"Copy\"></MenuItem>\n                <MenuItem Text=\"Paste\"></MenuItem>\n            </MenuItems>\n            </SfContextMenu>\n            @code {\n                private string OpenAction = “contextmenu”;\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OpenActionEvents"}},{"Kind":"Components.Component","Name":"CloseActionEvents","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates an event to close the context menu.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>mousedown, touchstart</c>.\n            </value>\n            <remarks>\n            The list of events supports to close the context menu are mousedown, mouseup, click, touchstart, mouseleave, touchend. The event must be different from <c> OpenActionEvents. </c>\n            </remarks>\n            <example>\n            In the below code example, <c>contextmenu</c> event is set to close the context menu.\n            <code><![CDATA[\n            <div id=\"target\">Right click or touch hold to open the context menu.</div>\n            <SfContextMenu Target=\"#target\" TValue=\"MenuItem\" CloseActionEvents=”CloseAction”>\n            <MenuItems>\n                <MenuItem Text=\"Cut\"></MenuItem>\n                <MenuItem Text=\"Copy\"></MenuItem>\n                <MenuItem Text=\"Paste\"></MenuItem>\n            </MenuItems>\n            </SfContextMenu>\n            @code {\n                private string CloseAction = “mousedown touchstart”;\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"CloseActionEvents"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets the child content for the menu including HTML element. If the child content is not specified, menu is rendered using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <c>SfMenu</c> tag directive is either a string or HTML Element. The menu item is also specified using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets CSS class string to customize the appearance of menu. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of menu. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the right to left direction in menu bar.\n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for menu bar. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<TValue>","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the menu items with its properties which will be rendered as ContextMenu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Items","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ShowItemOnClick","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the mouse click option to show the sub menu. \n            </summary> \n            <value> \n            <c>true</c>, if the sub menu will open only on mouse click. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"ShowItemOnClick"}},{"Kind":"Components.Component","Name":"EnableScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the scrollable option in menu bar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableScrolling"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfContextMenu<TValue>","Components.GenericTyped":"True"}},{"HashCode":-536430165,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfContextMenu<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.\n            </summary>\n            <summary>\n            ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.\n            </summary>\n            <summary>\n            ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.\n            </summary>\n            <example>\n            In the below code example, showcases a basic context menu.\n            <code><![CDATA[\n            <SfContextMenu Target=\"#contextmenutarget\" TValue=\"MenuItem\">\n            <MenuItems>\n            <MenuItem Text=\"Cut\" IconCss=\"e-cm-icons e-cut\"></MenuItem>\n            <MenuItem Text=\"Copy\" IconCss=\"e-cm-icons e-copy\"></MenuItem>\n            <MenuItem Text=\"Paste\" IconCss=\"e-cm-icons e-paste\"></MenuItem>\n            </MenuItems>\n            </SfContextMenu>\n            ]]></code>\n            </example>\n            <summary>\n            ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.\n            </summary>\n            <summary>\n            ContextMenu is a graphical user interface that appears on the user right click/touch hold operation.\n            </summary>\n            <example>\n            In the below code example, showcases a basic context menu.\n            <code><![CDATA[\n            <SfContextMenu Target=\"#contextmenutarget\" TValue=\"MenuItem\">\n            <MenuItems>\n            <MenuItem Text=\"Cut\" IconCss=\"e-cm-icons e-cut\"></MenuItem>\n            <MenuItem Text=\"Copy\" IconCss=\"e-cm-icons e-copy\"></MenuItem>\n            <MenuItem Text=\"Paste\" IconCss=\"e-cm-icons e-paste\"></MenuItem>\n            </MenuItems>\n            </SfContextMenu>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfContextMenu"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.SfContextMenu<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Filter","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the filter selector in which element the context menu should be opened inside the sepcified target.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Filter"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the target element selector in which the context menu should be opened.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Target"}},{"Kind":"Components.Component","Name":"ShowOn","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates an event to open the context menu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowOn"}},{"Kind":"Components.Component","Name":"OpenActionEvents","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates an event to open the context menu.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>contextmenu</c>.\n            </value>\n            <remarks>\n            The list of events supports to open the context menu are contextmenu, mousedown, mouseup, touchstart, mouseleave etc. The event must be different from <c> CloseActionEvents. </c>\n            </remarks>\n            <example>\n            In the below code example, <c>contextmenu</c> event is set to open the context menu.\n            <code><![CDATA[\n            <div id=\"target\">Right click or touch hold to open the context menu.</div>\n            <SfContextMenu Target=\"#target\" TValue=\"MenuItem\" OpenActionEvents=”OpenAction”>\n            <MenuItems>\n                <MenuItem Text=\"Cut\"></MenuItem>\n                <MenuItem Text=\"Copy\"></MenuItem>\n                <MenuItem Text=\"Paste\"></MenuItem>\n            </MenuItems>\n            </SfContextMenu>\n            @code {\n                private string OpenAction = “contextmenu”;\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OpenActionEvents"}},{"Kind":"Components.Component","Name":"CloseActionEvents","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates an event to close the context menu.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>mousedown, touchstart</c>.\n            </value>\n            <remarks>\n            The list of events supports to close the context menu are mousedown, mouseup, click, touchstart, mouseleave, touchend. The event must be different from <c> OpenActionEvents. </c>\n            </remarks>\n            <example>\n            In the below code example, <c>contextmenu</c> event is set to close the context menu.\n            <code><![CDATA[\n            <div id=\"target\">Right click or touch hold to open the context menu.</div>\n            <SfContextMenu Target=\"#target\" TValue=\"MenuItem\" CloseActionEvents=”CloseAction”>\n            <MenuItems>\n                <MenuItem Text=\"Cut\"></MenuItem>\n                <MenuItem Text=\"Copy\"></MenuItem>\n                <MenuItem Text=\"Paste\"></MenuItem>\n            </MenuItems>\n            </SfContextMenu>\n            @code {\n                private string CloseAction = “mousedown touchstart”;\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"CloseActionEvents"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets the child content for the menu including HTML element. If the child content is not specified, menu is rendered using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <c>SfMenu</c> tag directive is either a string or HTML Element. The menu item is also specified using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets CSS class string to customize the appearance of menu. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of menu. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the right to left direction in menu bar.\n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for menu bar. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<TValue>","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the menu items with its properties which will be rendered as ContextMenu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Items","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ShowItemOnClick","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the mouse click option to show the sub menu. \n            </summary> \n            <value> \n            <c>true</c>, if the sub menu will open only on mouse click. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"ShowItemOnClick"}},{"Kind":"Components.Component","Name":"EnableScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the scrollable option in menu bar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableScrolling"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfContextMenu<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1762994707,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfContextMenu<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary> \n            Gets or sets the child content for the menu including HTML element. If the child content is not specified, menu is rendered using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <c>SfMenu</c> tag directive is either a string or HTML Element. The menu item is also specified using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfContextMenu"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfContextMenu<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1974600595,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfContextMenu<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary> \n            Gets or sets the child content for the menu including HTML element. If the child content is not specified, menu is rendered using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <c>SfMenu</c> tag directive is either a string or HTML Element. The menu item is also specified using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.SfContextMenu"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfContextMenu<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1755892929,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.MenuAnimationSettings","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the animation settings for the menu open.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"MenuAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the time duration to transform object.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the easing effect applied while transform.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.Navigations.MenuEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the effect that shown in the sub menu transform.\n            The possible effects are:\n             None: Specifies the sub menu transform with no animation effect.\n             SlideDown: Specifies the sub menu transform with slide down effect.\n             ZoomIn: Specifies the sub menu transform with zoom in effect.\n             FadeIn: Specifies the sub menu transform with fade in effect.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.MenuAnimationSettings"}},{"HashCode":-1724780915,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.MenuAnimationSettings","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the animation settings for the menu open.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.MenuAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Double","Documentation":"\n            <summary>\n            Specifies the time duration to transform object.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the easing effect applied while transform.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.Navigations.MenuEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the effect that shown in the sub menu transform.\n            The possible effects are:\n             None: Specifies the sub menu transform with no animation effect.\n             SlideDown: Specifies the sub menu transform with slide down effect.\n             ZoomIn: Specifies the sub menu transform with zoom in effect.\n             FadeIn: Specifies the sub menu transform with fade in effect.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.MenuAnimationSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":353706412,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.MenuEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Used to configure the menu events.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"MenuEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.MenuEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before closing the sub menu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnItemRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.MenuEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised while rendering each menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnItemRender","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before  opening the menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when rendering is completed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.OpenCloseMenuEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised after closing the menu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.OpenCloseMenuEventArgs<TValue>>","Documentation":"\n            <summary>\n             Gets or sets an event callback that is raised after opening the menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.MenuEventArgs<TValue>>","Documentation":"\n            <summary>\n             Gets or sets an event callback that is raised after selecting menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemSelected","Components.EventCallback":"True","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.MenuEvents<TValue>","Components.GenericTyped":"True"}},{"HashCode":-1779483814,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.MenuEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Used to configure the menu events.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.MenuEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.MenuEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before closing the sub menu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnItemRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.MenuEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised while rendering each menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnItemRender","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.BeforeOpenCloseMenuEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before  opening the menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when rendering is completed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.OpenCloseMenuEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised after closing the menu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Closed","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.OpenCloseMenuEventArgs<TValue>>","Documentation":"\n            <summary>\n             Gets or sets an event callback that is raised after opening the menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Opened","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ItemSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.MenuEventArgs<TValue>>","Documentation":"\n            <summary>\n             Gets or sets an event callback that is raised after selecting menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemSelected","Components.EventCallback":"True","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.MenuEvents<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-891870002,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.MenuFieldSettings","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Configures the field options of the Menu.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"MenuFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Children","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the children field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Children"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the CSS icon field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"ItemId","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the itemId field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemId"}},{"Kind":"Components.Component","Name":"ParentId","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the parentId field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ParentId"}},{"Kind":"Components.Component","Name":"Separator","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the separator field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Separator"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the disabled field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"Hidden","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the hidden field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Hidden"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the text field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Url","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the URL field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Url"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the @attributes (additional attributes) field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.MenuFieldSettings"}},{"HashCode":2002176897,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.MenuFieldSettings","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Configures the field options of the Menu.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.MenuFieldSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Children","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the children field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Children"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the CSS icon field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"ItemId","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the itemId field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ItemId"}},{"Kind":"Components.Component","Name":"ParentId","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the parentId field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ParentId"}},{"Kind":"Components.Component","Name":"Separator","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the separator field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Separator"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the disabled field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"Hidden","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the hidden field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Hidden"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the text field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Url","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the URL field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Url"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the @attributes (additional attributes) field for Menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.MenuFieldSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":942981206,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.MenuItem","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Used to configure the items which is going to render as menu.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"MenuItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines class/multiple classes separated by a space for the menu Item that is used to include an icon.\n            Menu Item can include font icon and sprite image.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the id for menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Navigations.MenuItem>","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the sub menu items that is the array of MenuItem.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Items"}},{"Kind":"Components.Component","Name":"Separator","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to enable/disable separator between the menu items.\n            </summary>\n            <remarks>\n            Separator are either horizontal or vertical lines used to group menu items.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Separator"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to enable or disable the menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"Hidden","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to hide or show the menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Hidden"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the text for menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Url","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the URL for menu item that creates the anchor link to navigate to the url provided.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Url"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the additional HTML attributes such as style, title etc., to the menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.MenuItem"}},{"HashCode":-1709932194,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.MenuItem","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Used to configure the items which is going to render as menu.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.MenuItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines class/multiple classes separated by a space for the menu Item that is used to include an icon.\n            Menu Item can include font icon and sprite image.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the id for menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Navigations.MenuItem>","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the sub menu items that is the array of MenuItem.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Items"}},{"Kind":"Components.Component","Name":"Separator","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to enable/disable separator between the menu items.\n            </summary>\n            <remarks>\n            Separator are either horizontal or vertical lines used to group menu items.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Separator"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to enable or disable the menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"Hidden","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to hide or show the menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Hidden"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the text for menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Url","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the URL for menu item that creates the anchor link to navigate to the url provided.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Url"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the additional HTML attributes such as style, title etc., to the menu item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.MenuItem","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":208899597,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.MenuItem.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"MenuItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.MenuItem.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-869010442,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.MenuItem.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.MenuItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.MenuItem.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1641932962,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.MenuItems","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            List of items that is used to configure menu items.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"MenuItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.MenuItems"}},{"HashCode":-959287179,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.MenuItems","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            List of items that is used to configure menu items.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.MenuItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.MenuItems","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-155905355,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.MenuItems.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"MenuItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.MenuItems.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1316312756,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.MenuItems.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.MenuItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.MenuItems.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-879233468,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.MenuTemplates<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Used to specify templates for rendering menu items.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"MenuTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.MenuTemplates<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TValue>","Documentation":"\n            <summary>\n            Specifies the template for Menu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Template","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.MenuTemplates<TValue>","Components.GenericTyped":"True"}},{"HashCode":-966820383,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.MenuTemplates<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Used to specify templates for rendering menu items.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.MenuTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.MenuTemplates<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TValue>","Documentation":"\n            <summary>\n            Specifies the template for Menu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Template","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.MenuTemplates<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1114964265,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.MenuTemplates<TValue>.Template","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the template for Menu.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"MenuTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.MenuTemplates<TValue>.Template","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-546476424,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.MenuTemplates<TValue>.Template","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the template for Menu.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"Syncfusion.Blazor.Navigations.MenuTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.MenuTemplates<TValue>.Template","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1355201889,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfMenu<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Menu is a graphical user interface that serve as navigation headers for your application.\n            </summary>\n            <summary>\n            Menu is a graphical user interface that serve as navigation headers for your application.\n            </summary>\n            <summary>\n            Menu is a graphical user interface that serve as navigation headers for your application.\n            </summary>\n            <summary>\n            Menu is a graphical user interface that serve as navigation headers for your application.\n            </summary>\n            <summary>\n            Menu is a graphical user interface that serve as navigation headers for your application.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfMenu"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.SfMenu<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"HamburgerMode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the hamburger mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HamburgerMode"}},{"Kind":"Components.Component","Name":"Orientation","TypeName":"Syncfusion.Blazor.Navigations.Orientation","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates the orientation of menu whether it can be horizontal or vertical.\n            </summary>\n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.Navigations.SfMenu`1.Orientation\" /> enumeration. The default value is <c>Orientation.Horizontal</c>/&gt; \n            </value> \n            <remarks> \n            If the <c>Orientation</c> is <c>Horizontal</c>, the menu items will be aligned horizontally. \n            If the <c>Orientation</c> is <c>Vertical</c>, the menu items will be aligned vertically. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Orientation"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the target element to open/close Menu while click in Hamburger mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Target"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the title text for hamburger mode in Menu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Title"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets the child content for the menu including HTML element. If the child content is not specified, menu is rendered using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <c>SfMenu</c> tag directive is either a string or HTML Element. The menu item is also specified using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets CSS class string to customize the appearance of menu. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of menu. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the right to left direction in menu bar.\n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for menu bar. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<TValue>","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the menu items with its properties which will be rendered as ContextMenu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Items","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ShowItemOnClick","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the mouse click option to show the sub menu. \n            </summary> \n            <value> \n            <c>true</c>, if the sub menu will open only on mouse click. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"ShowItemOnClick"}},{"Kind":"Components.Component","Name":"EnableScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the scrollable option in menu bar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableScrolling"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfMenu<TValue>","Components.GenericTyped":"True"}},{"HashCode":501675628,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfMenu<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Menu is a graphical user interface that serve as navigation headers for your application.\n            </summary>\n            <summary>\n            Menu is a graphical user interface that serve as navigation headers for your application.\n            </summary>\n            <summary>\n            Menu is a graphical user interface that serve as navigation headers for your application.\n            </summary>\n            <summary>\n            Menu is a graphical user interface that serve as navigation headers for your application.\n            </summary>\n            <summary>\n            Menu is a graphical user interface that serve as navigation headers for your application.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfMenu"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.SfMenu<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"HamburgerMode","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the hamburger mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HamburgerMode"}},{"Kind":"Components.Component","Name":"Orientation","TypeName":"Syncfusion.Blazor.Navigations.Orientation","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates the orientation of menu whether it can be horizontal or vertical.\n            </summary>\n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.Navigations.SfMenu`1.Orientation\" /> enumeration. The default value is <c>Orientation.Horizontal</c>/&gt; \n            </value> \n            <remarks> \n            If the <c>Orientation</c> is <c>Horizontal</c>, the menu items will be aligned horizontally. \n            If the <c>Orientation</c> is <c>Vertical</c>, the menu items will be aligned vertically. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Orientation"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the target element to open/close Menu while click in Hamburger mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Target"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the title text for hamburger mode in Menu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Title"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets the child content for the menu including HTML element. If the child content is not specified, menu is rendered using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <c>SfMenu</c> tag directive is either a string or HTML Element. The menu item is also specified using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets CSS class string to customize the appearance of menu. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of menu. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the right to left direction in menu bar.\n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for menu bar. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<TValue>","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the menu items with its properties which will be rendered as ContextMenu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Items","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ShowItemOnClick","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the mouse click option to show the sub menu. \n            </summary> \n            <value> \n            <c>true</c>, if the sub menu will open only on mouse click. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"ShowItemOnClick"}},{"Kind":"Components.Component","Name":"EnableScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the scrollable option in menu bar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableScrolling"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfMenu<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1608115810,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfMenu<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary> \n            Gets or sets the child content for the menu including HTML element. If the child content is not specified, menu is rendered using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <c>SfMenu</c> tag directive is either a string or HTML Element. The menu item is also specified using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfMenu"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfMenu<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1015367028,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfMenu<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary> \n            Gets or sets the child content for the menu including HTML element. If the child content is not specified, menu is rendered using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <c>SfMenu</c> tag directive is either a string or HTML Element. The menu item is also specified using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.SfMenu"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfMenu<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1376604355,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfPager","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Methods partial class\n            </summary>    \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfPager"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the ID of the Pager component.\n            </summary>\n            <value>\n            Property which maps the given value to the Pager ID.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content which is given inside the pager component.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CurrentPage","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the current page number of the Pager.\n            </summary>\n            <value>\n            The entered page number is shown when the Pager is rendered, by default the value is 1.\n            </value>\n            <remarks>\n            If the given current page number is greater than the total number of pages present in the pager, then by default the first page will be the current page.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"CurrentPage"}},{"Kind":"Components.Component","Name":"NumericItemPrefix","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text to append as a prefix with numeric values in the Pager.\n            </summary>\n            <value>\n            A prefix for numeric item. The default value is <c>string.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"NumericItemPrefix"}},{"Kind":"Components.Component","Name":"ShowPagerMessage","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to enable or disable the Pager message, displayed on the right side of the Pager icons.\n            </summary>\n            <value>\n            <b>true</b> If `ShowPagerMessage` is set to true, the pager information such as the current page, total pages, and total records count is displayed.\n            </value>\n            <remarks>\n            By default the ShowPagerMessage is set to true.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ShowPagerMessage"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to enable the persistence in the Pager, It will allow access to store the current state of the Pager.\n            </summary>\n            <value>\n            <b>true</b> If `EnablePersistence` is set to true, It will store the pager state such as current page, page size, current focus, and pager dropdown in the \n            window.localStorage when the component is disposed.\n            </value>\n            <remarks>\n            By default the EnablePersistence is set to false.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"NumericItemsCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the number of page numeric buttons shown on the pager user interface.\n            </summary>\n            <value>\n            The number of page numeric buttons shown on the pager UI.\n            </value>\n            <remarks>\n            If <code>NumericItemsCount</code> is 5 and the total number of pages is <c>20</c>, \n            then the pager will display numeric buttons for pages 1 to 5. \n            Users can navigate beyond this range using the next page and end-page buttons. \n            Also, if the given numeric items count is greater than the total number of pages, \n            then all the pages are shown in the Pager component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"NumericItemsCount"}},{"Kind":"Components.Component","Name":"PageSize","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the number of items shown on a single page.\n            </summary>\n            <value>\n            The number of items shown on a single page, by default the value is 12. \n            </value>\n            <remarks>\n            When the given page size is greater than the total items present in the Pager, then all the items are dispalyed in the current page.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"PageSize"}},{"Kind":"Components.Component","Name":"PageSizes","TypeName":"System.Collections.Generic.List<System.Int32>","Documentation":"\n            <summary>\n            Gets or sets the list of items in the Pager dropdown. \n            Update what number of items can be rendered on a page by changing the dropdown value.\n            </summary>\n            <value>\n             The list of items to be shown in the Pager dropdown, by default the value is set to null.\n            </value>\n            <remarks>\n            When one of the given page sizes is greater than the total items present in the Pager, when the particular dropdown is chosen all the items are dispalyed in the current page.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfPager PageSizes=@pagesizes PageSize=10 TotalItemsCount=100 >\n            </SfPager>\n            @code{\n               public List<int> pagesizes = new List<int> { 5, 10, 12, 20 };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"PageSizes"}},{"Kind":"Components.Component","Name":"ShowAllInPageSizes","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to add a All as one of the option in the Pager dropdown list.\n            Total items can be rendered while changing the Pager dropdown value as All.\n            </summary>\n            <value>\n            <b>true</b> If `ShowAllInPageSizes` is set to true, then added All value as one of the option in <see cref=\"P:Syncfusion.Blazor.Navigations.SfPager.PageSizes\" />.\n            </value>\n            <remarks>\n            <see cref=\"P:Syncfusion.Blazor.Navigations.SfPager.PageSizes\" /> should be updated with list items for this property, otherwise it's not needed. The default value is false.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ShowAllInPageSizes"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n             <summary>\n             Gets or sets the template to customize the pager UI with customized elements instead of the default UI.\n             </summary>\n             <value>\n             The template content.\n             </value>\n             <remarks>\n             Use the template’s context parameter to access a <see cref=\"T:Syncfusion.Blazor.Navigations.PagerTemplateContext\" /> and its fields.\n             </remarks>\n             <example>\n             <code>\n             <![CDATA[\n             <SfPager @ref = \"Page\" TotalItemsCount=\"100\" PageSize=\"10\">\n            <Template>\n             @{\n                 var pagerContext = (context as PagerTemplateContext);\n                 <span>\n                     Page<SfNumericTextBox TValue=\"int\" Value=@pagerContext.CurrentPage Width=\"40px\" ShowSpinButton=\"false\">\n                         <NumericTextBoxEvents TValue = \"int\" ValueChange=\"PageValueHandler\"></NumericTextBoxEvents>\n                     </SfNumericTextBox> of<b> @pagerContext.TotalPages</b> pages.\n                 </span>\n             }\n             </Template>\n             </SfPager>\n             @code {\n             SfPager Page;\n             private async Task PageValueHandler(ChangeEventArgs<int> args)\n             {\n                  await Page.GoToPageAsync(args.Value);\n             }\n             }\n             ]]>\n             </code>\n             </example>\n        ","Metadata":{"Common.PropertyName":"Template","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"TotalItemsCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the total number of items, to calculate <see cref=\"P:Syncfusion.Blazor.Navigations.SfPager.TotalPages\" /> count based on <see cref=\"P:Syncfusion.Blazor.Navigations.SfPager.PageSize\" />.\n            </summary>\n            <value>\n            The number of total items present in the pager component to calculate <see cref=\"P:Syncfusion.Blazor.Navigations.SfPager.TotalPages\" />.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TotalItemsCount"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the CSS class name, that can be appended with the root element of the Pager. One or more custom CSS classes can be added to the Pager.\n            </summary>\n            <value>\n            Property in which the CSS classes are added. The default value is an empty string.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ItemClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.PagerItemClickEventArgs>","Documentation":"\n            <summary>\n            An event that is raised when the numeric item is clicked.\n            </summary>\n            <remarks>\n            This event handler receives a <see cref=\"!:Syncfusion.Blazor.Navigationgs.Pager.PagerItemClickEventArgs\" /> object which provides the details of new page navigation.\n            </remarks>\n            <example>\n            <code>\n            <![CDATA[\n            <SfPager ItemClick=\"HandletemClick\" PageSize=5 NumericItemsCount=4 TotalItemsCount=100>\n            </SfPager>\n            @code{\n               public void HandletemClick(PagerItemClickEventArgs args)\n               {\n                  // Enter the code here\n               }\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ItemClick","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"PageChanging","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.PageChangingEventArgs>","Documentation":"\n            <summary>\n            An event that is raised when navigating to a new page.\n            </summary>\n            <remarks>\n            This event handler receives a <see cref=\"!:Syncfusion.Blazor.Navigationgs.Pager.PageChangingEventArgs\" /> object which provides the details of new page navigation.\n            </remarks>\n            <example>\n            <code>\n            <![CDATA[\n            <SfPager PageSize=5 PageChanging=\"HandlePageChanging\" NumericItemsCount=4 TotalItemsCount=100>\n            </SfPager>\n            @code{\n               public void HandlePageChanging(PageChangingEventArgs args)\n               {\n                  // Enter the code here \n               }\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"PageChanging","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"PageChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.PageChangedEventArgs>","Documentation":"\n            <summary>\n            An event that is raised when navigated to a new page.\n            </summary>\n            <remarks>\n            This event handler receives a <see cref=\"!:Syncfusion.Blazor.Navigationgs.Pager.PageChangedEventArgs\" /> object which provides the details of navigated page.\n            </remarks>\n            <example>\n            <code>\n            <![CDATA[\n            <SfPager PageSize=5 PageChanged=\"HandlePageChanged\" NumericItemsCount=4 TotalItemsCount=100>\n            </SfPager>\n            @code{\n               public void HandlePageChanged(PageChangedEventArgs args)\n               {\n                  // Enter the code here  \n               }\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"PageChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Documentation":"\n            <summary>\n            An event that is raised when Pager component is created.\n            </summary>\n            <example>\n            <code>\n            <![CDATA[\n            <SfPager PageSize=5 Created=\"HandlePagerCreated\" TotalItemsCount=100>\n            </SfPager>\n            @code{\n               public void HandlePagerCreated()\n               {\n                // Enter the code here...\n               }\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"PageSizeChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.PageSizeChangedArgs>","Documentation":"\n            <summary>\n            An event that is raised, While dynamically change the pager size by using pager dropdown.\n            </summary>\n            <remarks>\n            This event handler receives a <see cref=\"!:Syncfusion.Blazor.Navigationgs.Pager.PageSizeChangedArgs\" /> object which provides the details of updated pagesize.\n            </remarks>\n            <example>\n            <code>\n            <![CDATA[\n            <SfPager PageSize=5 PageSizes=@pagesizes PageSizeChanged=\"HandlePageSizeChanged\" TotalItemsCount=100>\n            </SfPager>\n            @code{\n               public List<int> pagesizes = new List<int> { 5, 10, 12, 20 }; \n               public void HandlePageSizeChanged(PageSizeChangedArgs args)\n               {\n                // Enter the code here...\n               }\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"PageSizeChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"PageSizeChanging","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.PageSizeChangingArgs>","Documentation":"\n            <summary>\n            An event that is raised, when dynamically changing the page size using the page sizes dropdown.\n            </summary>\n            <remarks>\n            This event handler receives a <see cref=\"!:Syncfusion.Blazor.Navigationgs.Pager.PageSizeChangingArgs\" /> object which provides the details of current pagesize.\n            </remarks>\n            <example>\n            <code>\n            <![CDATA[\n            <SfPager PageSize=5 PageSizes=@pagesizes PageSizeChanging=\"HandlePageSizeChanging\" TotalItemsCount=100 >\n            </SfPager>\n            @code{\n               public List<int> pagesizes = new List<int> { 5, 10, 12, 20 };    \n               public void HandlePageSizeChanging(PageSizeChangingArgs args)\n               {\n                // Enter the code here...    \n               }\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"PageSizeChanging","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfPager"}},{"HashCode":1135634950,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfPager","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Methods partial class\n            </summary>    \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfPager"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the ID of the Pager component.\n            </summary>\n            <value>\n            Property which maps the given value to the Pager ID.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Defines the child content which is given inside the pager component.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CurrentPage","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the current page number of the Pager.\n            </summary>\n            <value>\n            The entered page number is shown when the Pager is rendered, by default the value is 1.\n            </value>\n            <remarks>\n            If the given current page number is greater than the total number of pages present in the pager, then by default the first page will be the current page.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"CurrentPage"}},{"Kind":"Components.Component","Name":"NumericItemPrefix","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text to append as a prefix with numeric values in the Pager.\n            </summary>\n            <value>\n            A prefix for numeric item. The default value is <c>string.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"NumericItemPrefix"}},{"Kind":"Components.Component","Name":"ShowPagerMessage","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to enable or disable the Pager message, displayed on the right side of the Pager icons.\n            </summary>\n            <value>\n            <b>true</b> If `ShowPagerMessage` is set to true, the pager information such as the current page, total pages, and total records count is displayed.\n            </value>\n            <remarks>\n            By default the ShowPagerMessage is set to true.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ShowPagerMessage"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to enable the persistence in the Pager, It will allow access to store the current state of the Pager.\n            </summary>\n            <value>\n            <b>true</b> If `EnablePersistence` is set to true, It will store the pager state such as current page, page size, current focus, and pager dropdown in the \n            window.localStorage when the component is disposed.\n            </value>\n            <remarks>\n            By default the EnablePersistence is set to false.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"NumericItemsCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the number of page numeric buttons shown on the pager user interface.\n            </summary>\n            <value>\n            The number of page numeric buttons shown on the pager UI.\n            </value>\n            <remarks>\n            If <code>NumericItemsCount</code> is 5 and the total number of pages is <c>20</c>, \n            then the pager will display numeric buttons for pages 1 to 5. \n            Users can navigate beyond this range using the next page and end-page buttons. \n            Also, if the given numeric items count is greater than the total number of pages, \n            then all the pages are shown in the Pager component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"NumericItemsCount"}},{"Kind":"Components.Component","Name":"PageSize","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the number of items shown on a single page.\n            </summary>\n            <value>\n            The number of items shown on a single page, by default the value is 12. \n            </value>\n            <remarks>\n            When the given page size is greater than the total items present in the Pager, then all the items are dispalyed in the current page.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"PageSize"}},{"Kind":"Components.Component","Name":"PageSizes","TypeName":"System.Collections.Generic.List<System.Int32>","Documentation":"\n            <summary>\n            Gets or sets the list of items in the Pager dropdown. \n            Update what number of items can be rendered on a page by changing the dropdown value.\n            </summary>\n            <value>\n             The list of items to be shown in the Pager dropdown, by default the value is set to null.\n            </value>\n            <remarks>\n            When one of the given page sizes is greater than the total items present in the Pager, when the particular dropdown is chosen all the items are dispalyed in the current page.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfPager PageSizes=@pagesizes PageSize=10 TotalItemsCount=100 >\n            </SfPager>\n            @code{\n               public List<int> pagesizes = new List<int> { 5, 10, 12, 20 };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"PageSizes"}},{"Kind":"Components.Component","Name":"ShowAllInPageSizes","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to add a All as one of the option in the Pager dropdown list.\n            Total items can be rendered while changing the Pager dropdown value as All.\n            </summary>\n            <value>\n            <b>true</b> If `ShowAllInPageSizes` is set to true, then added All value as one of the option in <see cref=\"P:Syncfusion.Blazor.Navigations.SfPager.PageSizes\" />.\n            </value>\n            <remarks>\n            <see cref=\"P:Syncfusion.Blazor.Navigations.SfPager.PageSizes\" /> should be updated with list items for this property, otherwise it's not needed. The default value is false.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ShowAllInPageSizes"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<System.Object>","Documentation":"\n             <summary>\n             Gets or sets the template to customize the pager UI with customized elements instead of the default UI.\n             </summary>\n             <value>\n             The template content.\n             </value>\n             <remarks>\n             Use the template’s context parameter to access a <see cref=\"T:Syncfusion.Blazor.Navigations.PagerTemplateContext\" /> and its fields.\n             </remarks>\n             <example>\n             <code>\n             <![CDATA[\n             <SfPager @ref = \"Page\" TotalItemsCount=\"100\" PageSize=\"10\">\n            <Template>\n             @{\n                 var pagerContext = (context as PagerTemplateContext);\n                 <span>\n                     Page<SfNumericTextBox TValue=\"int\" Value=@pagerContext.CurrentPage Width=\"40px\" ShowSpinButton=\"false\">\n                         <NumericTextBoxEvents TValue = \"int\" ValueChange=\"PageValueHandler\"></NumericTextBoxEvents>\n                     </SfNumericTextBox> of<b> @pagerContext.TotalPages</b> pages.\n                 </span>\n             }\n             </Template>\n             </SfPager>\n             @code {\n             SfPager Page;\n             private async Task PageValueHandler(ChangeEventArgs<int> args)\n             {\n                  await Page.GoToPageAsync(args.Value);\n             }\n             }\n             ]]>\n             </code>\n             </example>\n        ","Metadata":{"Common.PropertyName":"Template","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"TotalItemsCount","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the total number of items, to calculate <see cref=\"P:Syncfusion.Blazor.Navigations.SfPager.TotalPages\" /> count based on <see cref=\"P:Syncfusion.Blazor.Navigations.SfPager.PageSize\" />.\n            </summary>\n            <value>\n            The number of total items present in the pager component to calculate <see cref=\"P:Syncfusion.Blazor.Navigations.SfPager.TotalPages\" />.\n            </value>\n        ","Metadata":{"Common.PropertyName":"TotalItemsCount"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the CSS class name, that can be appended with the root element of the Pager. One or more custom CSS classes can be added to the Pager.\n            </summary>\n            <value>\n            Property in which the CSS classes are added. The default value is an empty string.\n            </value>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"ItemClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.PagerItemClickEventArgs>","Documentation":"\n            <summary>\n            An event that is raised when the numeric item is clicked.\n            </summary>\n            <remarks>\n            This event handler receives a <see cref=\"!:Syncfusion.Blazor.Navigationgs.Pager.PagerItemClickEventArgs\" /> object which provides the details of new page navigation.\n            </remarks>\n            <example>\n            <code>\n            <![CDATA[\n            <SfPager ItemClick=\"HandletemClick\" PageSize=5 NumericItemsCount=4 TotalItemsCount=100>\n            </SfPager>\n            @code{\n               public void HandletemClick(PagerItemClickEventArgs args)\n               {\n                  // Enter the code here\n               }\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"ItemClick","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"PageChanging","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.PageChangingEventArgs>","Documentation":"\n            <summary>\n            An event that is raised when navigating to a new page.\n            </summary>\n            <remarks>\n            This event handler receives a <see cref=\"!:Syncfusion.Blazor.Navigationgs.Pager.PageChangingEventArgs\" /> object which provides the details of new page navigation.\n            </remarks>\n            <example>\n            <code>\n            <![CDATA[\n            <SfPager PageSize=5 PageChanging=\"HandlePageChanging\" NumericItemsCount=4 TotalItemsCount=100>\n            </SfPager>\n            @code{\n               public void HandlePageChanging(PageChangingEventArgs args)\n               {\n                  // Enter the code here \n               }\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"PageChanging","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"PageChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.PageChangedEventArgs>","Documentation":"\n            <summary>\n            An event that is raised when navigated to a new page.\n            </summary>\n            <remarks>\n            This event handler receives a <see cref=\"!:Syncfusion.Blazor.Navigationgs.Pager.PageChangedEventArgs\" /> object which provides the details of navigated page.\n            </remarks>\n            <example>\n            <code>\n            <![CDATA[\n            <SfPager PageSize=5 PageChanged=\"HandlePageChanged\" NumericItemsCount=4 TotalItemsCount=100>\n            </SfPager>\n            @code{\n               public void HandlePageChanged(PageChangedEventArgs args)\n               {\n                  // Enter the code here  \n               }\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"PageChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback","Documentation":"\n            <summary>\n            An event that is raised when Pager component is created.\n            </summary>\n            <example>\n            <code>\n            <![CDATA[\n            <SfPager PageSize=5 Created=\"HandlePagerCreated\" TotalItemsCount=100>\n            </SfPager>\n            @code{\n               public void HandlePagerCreated()\n               {\n                // Enter the code here...\n               }\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"PageSizeChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.PageSizeChangedArgs>","Documentation":"\n            <summary>\n            An event that is raised, While dynamically change the pager size by using pager dropdown.\n            </summary>\n            <remarks>\n            This event handler receives a <see cref=\"!:Syncfusion.Blazor.Navigationgs.Pager.PageSizeChangedArgs\" /> object which provides the details of updated pagesize.\n            </remarks>\n            <example>\n            <code>\n            <![CDATA[\n            <SfPager PageSize=5 PageSizes=@pagesizes PageSizeChanged=\"HandlePageSizeChanged\" TotalItemsCount=100>\n            </SfPager>\n            @code{\n               public List<int> pagesizes = new List<int> { 5, 10, 12, 20 }; \n               public void HandlePageSizeChanged(PageSizeChangedArgs args)\n               {\n                // Enter the code here...\n               }\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"PageSizeChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"PageSizeChanging","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.PageSizeChangingArgs>","Documentation":"\n            <summary>\n            An event that is raised, when dynamically changing the page size using the page sizes dropdown.\n            </summary>\n            <remarks>\n            This event handler receives a <see cref=\"!:Syncfusion.Blazor.Navigationgs.Pager.PageSizeChangingArgs\" /> object which provides the details of current pagesize.\n            </remarks>\n            <example>\n            <code>\n            <![CDATA[\n            <SfPager PageSize=5 PageSizes=@pagesizes PageSizeChanging=\"HandlePageSizeChanging\" TotalItemsCount=100 >\n            </SfPager>\n            @code{\n               public List<int> pagesizes = new List<int> { 5, 10, 12, 20 };    \n               public void HandlePageSizeChanging(PageSizeChangingArgs args)\n               {\n                // Enter the code here...    \n               }\n            }\n            ]]>\n            </code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"PageSizeChanging","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfPager","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1276659439,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfPager.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Defines the child content which is given inside the pager component.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfPager"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfPager.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1251242588,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfPager.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Defines the child content which is given inside the pager component.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.SfPager"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfPager.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1814365658,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfPager.Template","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n             <summary>\n             Gets or sets the template to customize the pager UI with customized elements instead of the default UI.\n             </summary>\n             <value>\n             The template content.\n             </value>\n             <remarks>\n             Use the template’s context parameter to access a <see cref=\"T:Syncfusion.Blazor.Navigations.PagerTemplateContext\" /> and its fields.\n             </remarks>\n             <example>\n             <code>\n             <![CDATA[\n             <SfPager @ref = \"Page\" TotalItemsCount=\"100\" PageSize=\"10\">\n            <Template>\n             @{\n                 var pagerContext = (context as PagerTemplateContext);\n                 <span>\n                     Page<SfNumericTextBox TValue=\"int\" Value=@pagerContext.CurrentPage Width=\"40px\" ShowSpinButton=\"false\">\n                         <NumericTextBoxEvents TValue = \"int\" ValueChange=\"PageValueHandler\"></NumericTextBoxEvents>\n                     </SfNumericTextBox> of<b> @pagerContext.TotalPages</b> pages.\n                 </span>\n             }\n             </Template>\n             </SfPager>\n             @code {\n             SfPager Page;\n             private async Task PageValueHandler(ChangeEventArgs<int> args)\n             {\n                  await Page.GoToPageAsync(args.Value);\n             }\n             }\n             ]]>\n             </code>\n             </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"SfPager"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfPager.Template","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":439887122,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfPager.Template","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n             <summary>\n             Gets or sets the template to customize the pager UI with customized elements instead of the default UI.\n             </summary>\n             <value>\n             The template content.\n             </value>\n             <remarks>\n             Use the template’s context parameter to access a <see cref=\"T:Syncfusion.Blazor.Navigations.PagerTemplateContext\" /> and its fields.\n             </remarks>\n             <example>\n             <code>\n             <![CDATA[\n             <SfPager @ref = \"Page\" TotalItemsCount=\"100\" PageSize=\"10\">\n            <Template>\n             @{\n                 var pagerContext = (context as PagerTemplateContext);\n                 <span>\n                     Page<SfNumericTextBox TValue=\"int\" Value=@pagerContext.CurrentPage Width=\"40px\" ShowSpinButton=\"false\">\n                         <NumericTextBoxEvents TValue = \"int\" ValueChange=\"PageValueHandler\"></NumericTextBoxEvents>\n                     </SfNumericTextBox> of<b> @pagerContext.TotalPages</b> pages.\n                 </span>\n             }\n             </Template>\n             </SfPager>\n             @code {\n             SfPager Page;\n             private async Task PageValueHandler(ChangeEventArgs<int> args)\n             {\n                  await Page.GoToPageAsync(args.Value);\n             }\n             }\n             ]]>\n             </code>\n             </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"Syncfusion.Blazor.Navigations.SfPager"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'Template' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfPager.Template","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-711623849,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfSidebar","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            The SfSidebar component is an expandable and collapsible component that typically acts as a side container to place primary or secondary content alongside the main content.\n            </summary>\n            <summary>\n            Partial Class SfSidebar.\n            </summary>\n            <summary>\n            Partial Class SfSidebar.\n            </summary>\n            <summary>\n            Partial Class SfSidebar.\n            </summary>\n            <summary>\n            Partial Class SfSidebar.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSidebar"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Changed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the state(expand/collapse) of the component is changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Changed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.EventArgs>","Documentation":"\n            <summary>\n            Triggers when the component is ready to close.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component gets destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.EventArgs>","Documentation":"\n            <summary>\n            Triggers when the component is ready to open.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets id attribute for the sidebar element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the child content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Animate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the animation transitions on expanding or collapsing the Sidebar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Animate"}},{"Kind":"Components.Component","Name":"CloseOnDocumentClick","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the Sidebar needs to be closed or not when the document area is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CloseOnDocumentClick"}},{"Kind":"Components.Component","Name":"DockSize","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the size of the Sidebar in dock state. Dock size can be set in pixel values.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DockSize"}},{"Kind":"Components.Component","Name":"EnableDock","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the docking state of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableDock"}},{"Kind":"Components.Component","Name":"EnableGestures","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables the expand or collapse while swiping in the touch devices.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableGestures"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting component's state between page reloads. If enabled, isOpen state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering Sidebar in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"IsOpen","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the Sidebar component is open or close.\n            When the Sidebar type is set to `Auto`,\n            the component will be expanded in the desktop and collapsed in the mobile mode regardless of the isOpen property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsOpen"}},{"Kind":"Components.Component","Name":"IsOpenChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <summary>\n            Gets or sets a callback of the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsOpenChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"MediaQuery","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the media query string for resolution, when opens the Sidebar.\n            Example: assigning media query value to '(min-width: 600px)' will open the sidebar component only when the provided resolution is met else the sidebar will be in closed state.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MediaQuery"}},{"Kind":"Components.Component","Name":"Position","TypeName":"Syncfusion.Blazor.Navigations.SidebarPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the position of the Sidebar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Position"}},{"Kind":"Components.Component","Name":"ShowBackdrop","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether to apply overlay options to the main content or not when the Sidebar is in an open state.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowBackdrop"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary>\n            Allows to place the sidebar inside the target element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Target"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Navigations.SidebarType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the expanding types of the Sidebar.\n            `Over` - The sidebar floats over the main content area.\n            `Push` - The sidebar pushes the main content area to appear side-by-side and shrinks the main content within the screen width.\n            `Slide` - The sidebar translates the x and y positions of the main content area based on the sidebar width.\n            The main content area will not be adjusted within the screen width.\n             `Auto` - Sidebar with `Over` type in mobile resolution and `Push` type in other higher resolutions.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the Sidebar. By default, the width of the Sidebar sets based on the size of its content.\n            Width can also be set in pixel values.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the z-index of the Sidebar. It is applicable only when sidebar act as the overlay type.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfSidebar"}},{"HashCode":-1508611534,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfSidebar","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            The SfSidebar component is an expandable and collapsible component that typically acts as a side container to place primary or secondary content alongside the main content.\n            </summary>\n            <summary>\n            Partial Class SfSidebar.\n            </summary>\n            <summary>\n            Partial Class SfSidebar.\n            </summary>\n            <summary>\n            Partial Class SfSidebar.\n            </summary>\n            <summary>\n            Partial Class SfSidebar.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfSidebar"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Changed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.ChangeEventArgs>","Documentation":"\n            <summary>\n            Triggers when the state(expand/collapse) of the component is changed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Changed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClose","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.EventArgs>","Documentation":"\n            <summary>\n            Triggers when the component is ready to close.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClose","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component is created.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            Triggers when the component gets destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.EventArgs>","Documentation":"\n            <summary>\n            Triggers when the component is ready to open.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnOpen","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets id attribute for the sidebar element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the child content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Animate","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the animation transitions on expanding or collapsing the Sidebar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Animate"}},{"Kind":"Components.Component","Name":"CloseOnDocumentClick","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether the Sidebar needs to be closed or not when the document area is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CloseOnDocumentClick"}},{"Kind":"Components.Component","Name":"DockSize","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the size of the Sidebar in dock state. Dock size can be set in pixel values.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DockSize"}},{"Kind":"Components.Component","Name":"EnableDock","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the docking state of the component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableDock"}},{"Kind":"Components.Component","Name":"EnableGestures","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enables the expand or collapse while swiping in the touch devices.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableGestures"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable the persisting component's state between page reloads. If enabled, isOpen state will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering Sidebar in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"IsOpen","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the Sidebar component is open or close.\n            When the Sidebar type is set to `Auto`,\n            the component will be expanded in the desktop and collapsed in the mobile mode regardless of the isOpen property.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsOpen"}},{"Kind":"Components.Component","Name":"IsOpenChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <summary>\n            Gets or sets a callback of the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsOpenChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"MediaQuery","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the media query string for resolution, when opens the Sidebar.\n            Example: assigning media query value to '(min-width: 600px)' will open the sidebar component only when the provided resolution is met else the sidebar will be in closed state.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MediaQuery"}},{"Kind":"Components.Component","Name":"Position","TypeName":"Syncfusion.Blazor.Navigations.SidebarPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the position of the Sidebar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Position"}},{"Kind":"Components.Component","Name":"ShowBackdrop","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies whether to apply overlay options to the main content or not when the Sidebar is in an open state.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowBackdrop"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary>\n            Allows to place the sidebar inside the target element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Target"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Navigations.SidebarType","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the expanding types of the Sidebar.\n            `Over` - The sidebar floats over the main content area.\n            `Push` - The sidebar pushes the main content area to appear side-by-side and shrinks the main content within the screen width.\n            `Slide` - The sidebar translates the x and y positions of the main content area based on the sidebar width.\n            The main content area will not be adjusted within the screen width.\n             `Auto` - Sidebar with `Over` type in mobile resolution and `Push` type in other higher resolutions.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the Sidebar. By default, the width of the Sidebar sets based on the size of its content.\n            Width can also be set in pixel values.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"ZIndex","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the z-index of the Sidebar. It is applicable only when sidebar act as the overlay type.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ZIndex"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional input attributes such as disabled, value, and more to the root element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfSidebar","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-188770671,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfSidebar.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the child content.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfSidebar"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfSidebar.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1144131927,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfSidebar.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the child content.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.SfSidebar"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfSidebar.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":274317922,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfTab","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Tab is a content panel to show multiple contents in a compact space. Also, only one tab is active at a time. Each Tab item has an associated content, that will be displayed based on the active Tab.\n            </summary>\n            <summary>\n            Tab is a content panel to show multiple contents in a compact space. Also, only one tab is active at a time. Each Tab item has an associated content, that will be displayed based on the active Tab.\n            </summary>\n            <summary>\n            Tab is a content panel to show multiple contents in a compact space. Also, only one tab is active at a time. Each Tab item has an associated content, that will be displayed based on the active Tab.\n            </summary>\n            <summary>\n            Tab is a content panel to show multiple contents in a compact space. Also, only one tab is active at a time. Each Tab item has an associated content, that will be displayed based on the active Tab.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfTab"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets ID attribute for the tab element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Child Content for Tab.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Animation","TypeName":"Syncfusion.Blazor.Navigations.TabAnimationSettings","Documentation":"\n            <summary>\n            Specifies the animation settings of the Tabs component. The animation effect can be applied to activate the tab with duration and delay.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Animation"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets the CSS classes to the root element of the Tabs that helps to customize the component styles.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable persisting component's state between page reloads.\n            If enabled, the tab’s selected item will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"AllowDragAndDrop","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Indicates whether the Tab allows drag and drop over tab items. Tab item has been reordered based on the dropped item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowDragAndDrop"}},{"Kind":"Components.Component","Name":"DragArea","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the area in which the draggable element movement will be occurring. Outside that area will be restricted\n            for the draggable element movement. By default, the draggable element movement occurs with Tabitems.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DragArea"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left (RTL) direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"HeaderPlacement","TypeName":"Syncfusion.Blazor.Navigations.HeaderPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the orientation of the Tab header.\n            The possible values are:\n            - Top: Places the Tab header on the top.\n            - Bottom: Places the Tab header at the bottom.\n            - Left: Places the Tab header at the left.\n            - Right: Places the Tab header at the right.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderPlacement"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the height of the Tabs component. By default, Tab height is set based on the height of its parent.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Height"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Navigations.TabItem>","Documentation":"\n            <summary>\n            A list of items that are used to configure the Tabs component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Items"}},{"Kind":"Components.Component","Name":"LoadOn","TypeName":"Syncfusion.Blazor.Navigations.ContentLoad","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the modes for the Tab content.\n            The possible modes are:\n            `Dynamic` Load the Tab content dynamically, which is rendering its content when switching its header.\n            `Init` Loads all the tab contents on initial loading.\n            `Demand` Loads the Tab content when required but keeps the content once it is rendered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LoadOn"}},{"Kind":"Components.Component","Name":"Locale","TypeName":"System.String","Documentation":"\n            <summary>\n            Overrides the global culture and localization value for this component. Default global culture is 'en-US'.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Locale"}},{"Kind":"Components.Component","Name":"OverflowMode","TypeName":"Syncfusion.Blazor.Navigations.OverflowMode","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the display mode which will be applied when the Tabs exceeds the viewing area.\n            The possible modes are:\n            - Scrollable: All the elements will be displayed in a single line with horizontal scrolling enabled.\n            - Popup: Tab container will hold the items that can be placed within the available space and the rest of the items will be moved to the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OverflowMode"}},{"Kind":"Components.Component","Name":"ScrollStep","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the scrolling distance that applies when scrolling in Tab and enabled Scrollable mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ScrollStep"}},{"Kind":"Components.Component","Name":"SelectedItem","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the index for activating the Tab item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectedItem"}},{"Kind":"Components.Component","Name":"SelectedItemChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32>","Documentation":"\n            <summary>\n            Gets or sets a callback of the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectedItemChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ShowCloseButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a value that indicates whether to show the close button in the Tab header or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowCloseButton"}},{"Kind":"Components.Component","Name":"ReorderActiveTab","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to re-order tab items to show active tab item in the header area or popup when OverflowMode is Popup.\n            </summary>\n            <value>\n            true, if active tab item should be visible in header area instead of pop-up; otherwise, false. The default value is true.\n            </value>\n            <remarks>\n            <see cref=\"P:Syncfusion.Blazor.Navigations.SfTab.ReorderActiveTab\" /> Property is only applicable when OverflowMode is popup.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ReorderActiveTab"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the Tabs component. By default, Tab width sets based on the width of its parent.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as id, title etc., to the tab element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfTab"}},{"HashCode":1360850139,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfTab","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Tab is a content panel to show multiple contents in a compact space. Also, only one tab is active at a time. Each Tab item has an associated content, that will be displayed based on the active Tab.\n            </summary>\n            <summary>\n            Tab is a content panel to show multiple contents in a compact space. Also, only one tab is active at a time. Each Tab item has an associated content, that will be displayed based on the active Tab.\n            </summary>\n            <summary>\n            Tab is a content panel to show multiple contents in a compact space. Also, only one tab is active at a time. Each Tab item has an associated content, that will be displayed based on the active Tab.\n            </summary>\n            <summary>\n            Tab is a content panel to show multiple contents in a compact space. Also, only one tab is active at a time. Each Tab item has an associated content, that will be displayed based on the active Tab.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfTab"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets ID attribute for the tab element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Child Content for Tab.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Animation","TypeName":"Syncfusion.Blazor.Navigations.TabAnimationSettings","Documentation":"\n            <summary>\n            Specifies the animation settings of the Tabs component. The animation effect can be applied to activate the tab with duration and delay.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Animation"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets the CSS classes to the root element of the Tabs that helps to customize the component styles.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable persisting component's state between page reloads.\n            If enabled, the tab’s selected item will be persisted.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"AllowDragAndDrop","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Indicates whether the Tab allows drag and drop over tab items. Tab item has been reordered based on the dropped item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"AllowDragAndDrop"}},{"Kind":"Components.Component","Name":"DragArea","TypeName":"System.String","Documentation":"\n            <summary>\n            Defines the area in which the draggable element movement will be occurring. Outside that area will be restricted\n            for the draggable element movement. By default, the draggable element movement occurs with Tabitems.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DragArea"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in the right to left (RTL) direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"HeaderPlacement","TypeName":"Syncfusion.Blazor.Navigations.HeaderPosition","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the orientation of the Tab header.\n            The possible values are:\n            - Top: Places the Tab header on the top.\n            - Bottom: Places the Tab header at the bottom.\n            - Left: Places the Tab header at the left.\n            - Right: Places the Tab header at the right.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderPlacement"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the height of the Tabs component. By default, Tab height is set based on the height of its parent.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Height"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Navigations.TabItem>","Documentation":"\n            <summary>\n            A list of items that are used to configure the Tabs component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Items"}},{"Kind":"Components.Component","Name":"LoadOn","TypeName":"Syncfusion.Blazor.Navigations.ContentLoad","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the modes for the Tab content.\n            The possible modes are:\n            `Dynamic` Load the Tab content dynamically, which is rendering its content when switching its header.\n            `Init` Loads all the tab contents on initial loading.\n            `Demand` Loads the Tab content when required but keeps the content once it is rendered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LoadOn"}},{"Kind":"Components.Component","Name":"Locale","TypeName":"System.String","Documentation":"\n            <summary>\n            Overrides the global culture and localization value for this component. Default global culture is 'en-US'.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Locale"}},{"Kind":"Components.Component","Name":"OverflowMode","TypeName":"Syncfusion.Blazor.Navigations.OverflowMode","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the display mode which will be applied when the Tabs exceeds the viewing area.\n            The possible modes are:\n            - Scrollable: All the elements will be displayed in a single line with horizontal scrolling enabled.\n            - Popup: Tab container will hold the items that can be placed within the available space and the rest of the items will be moved to the popup.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OverflowMode"}},{"Kind":"Components.Component","Name":"ScrollStep","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the scrolling distance that applies when scrolling in Tab and enabled Scrollable mode.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ScrollStep"}},{"Kind":"Components.Component","Name":"SelectedItem","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the index for activating the Tab item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectedItem"}},{"Kind":"Components.Component","Name":"SelectedItemChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32>","Documentation":"\n            <summary>\n            Gets or sets a callback of the bound value.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectedItemChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ShowCloseButton","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a value that indicates whether to show the close button in the Tab header or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ShowCloseButton"}},{"Kind":"Components.Component","Name":"ReorderActiveTab","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to re-order tab items to show active tab item in the header area or popup when OverflowMode is Popup.\n            </summary>\n            <value>\n            true, if active tab item should be visible in header area instead of pop-up; otherwise, false. The default value is true.\n            </value>\n            <remarks>\n            <see cref=\"P:Syncfusion.Blazor.Navigations.SfTab.ReorderActiveTab\" /> Property is only applicable when OverflowMode is popup.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ReorderActiveTab"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the width of the Tabs component. By default, Tab width sets based on the width of its parent.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as id, title etc., to the tab element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfTab","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-63986076,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfTab.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Child Content for Tab.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfTab"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfTab.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1520917539,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfTab.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Child Content for Tab.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.SfTab"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfTab.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1547283588,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TabAnimationNext","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the animation to appear when moving to the next Tab content.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TabAnimationNext"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time duration to transform content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the easing effect applied when transforming the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation effect for displaying the next Tab content.\n            Default animation is given as SlideRightIn for next tab animation. You can also disable the animation by setting the animation effect as none.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TabAnimationNext"}},{"HashCode":667288384,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TabAnimationNext","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the animation to appear when moving to the next Tab content.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.TabAnimationNext"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time duration to transform content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the easing effect applied when transforming the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation effect for displaying the next Tab content.\n            Default animation is given as SlideRightIn for next tab animation. You can also disable the animation by setting the animation effect as none.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TabAnimationNext","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":771832014,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TabAnimationPrevious","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the animation to appear when moving to the previous Tab content.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TabAnimationPrevious"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time duration to transform the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the easing effect applied when transforming the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation effect for displaying the previous Tab content.\n            Default animation is given as SlideLeftIn for previous tab animation. You can also disable the animation by setting the animation effect as none.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TabAnimationPrevious"}},{"HashCode":274321022,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TabAnimationPrevious","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the animation to appear when moving to the previous Tab content.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.TabAnimationPrevious"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time duration to transform the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the easing effect applied when transforming the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation effect for displaying the previous Tab content.\n            Default animation is given as SlideLeftIn for previous tab animation. You can also disable the animation by setting the animation effect as none.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TabAnimationPrevious","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1156034261,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TabAnimationSettings","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A class used for configuring the Tab animation properties.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TabAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Child Content for the Tab Animation Settings.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Next","TypeName":"Syncfusion.Blazor.Navigations.TabAnimationNext","Documentation":"\n            <summary>\n            Specifies the animation to appear when moving to the next Tab content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Next"}},{"Kind":"Components.Component","Name":"Previous","TypeName":"Syncfusion.Blazor.Navigations.TabAnimationPrevious","Documentation":"\n            <summary>\n            Specifies the animation to appear when moving to the previous Tab content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Previous"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TabAnimationSettings"}},{"HashCode":544323958,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TabAnimationSettings","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A class used for configuring the Tab animation properties.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.TabAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Child Content for the Tab Animation Settings.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Next","TypeName":"Syncfusion.Blazor.Navigations.TabAnimationNext","Documentation":"\n            <summary>\n            Specifies the animation to appear when moving to the next Tab content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Next"}},{"Kind":"Components.Component","Name":"Previous","TypeName":"Syncfusion.Blazor.Navigations.TabAnimationPrevious","Documentation":"\n            <summary>\n            Specifies the animation to appear when moving to the previous Tab content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Previous"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TabAnimationSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1705629733,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.TabAnimationSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Child Content for the Tab Animation Settings.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"TabAnimationSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.TabAnimationSettings.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-861963242,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.TabAnimationSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Child Content for the Tab Animation Settings.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.TabAnimationSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.TabAnimationSettings.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-980980178,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TabEvents","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Configure event handlers to handle the events with the Tabs component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TabEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Added","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.AddEventArgs>","Documentation":"\n            <summary>\n            The event triggers after adding the item to the Tabs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Added","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Adding","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.AddEventArgs>","Documentation":"\n            <summary>\n            The event triggers before adding the tab item to the Tabs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Adding","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            The event triggers once the component rendering is completed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            The event triggers when the component gets destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Removed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.RemoveEventArgs>","Documentation":"\n            <summary>\n            The event triggers after removing the item from the Tabs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Removed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Removing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.RemoveEventArgs>","Documentation":"\n            <summary>\n            The event triggers before removing the item from the Tabs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Removing","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.SelectEventArgs>","Documentation":"\n            <summary>\n            The event triggers after the tab item gets selected.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selected","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Selecting","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.SelectingEventArgs>","Documentation":"\n            <summary>\n            The event triggers before the tab item gets selected.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selecting","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnDragStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.DragEventArgs>","Documentation":"\n            <summary>\n            The event triggers when the Tab item drag starts.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnDragStart","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Dragged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.DragEventArgs>","Documentation":"\n            <summary>\n            The event triggers after the tab item gets dropped.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Dragged","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TabEvents"}},{"HashCode":798337091,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TabEvents","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Configure event handlers to handle the events with the Tabs component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.TabEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Added","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.AddEventArgs>","Documentation":"\n            <summary>\n            The event triggers after adding the item to the Tabs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Added","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Adding","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.AddEventArgs>","Documentation":"\n            <summary>\n            The event triggers before adding the tab item to the Tabs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Adding","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            The event triggers once the component rendering is completed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            The event triggers when the component gets destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Removed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.RemoveEventArgs>","Documentation":"\n            <summary>\n            The event triggers after removing the item from the Tabs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Removed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Removing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.RemoveEventArgs>","Documentation":"\n            <summary>\n            The event triggers before removing the item from the Tabs.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Removing","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.SelectEventArgs>","Documentation":"\n            <summary>\n            The event triggers after the tab item gets selected.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selected","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Selecting","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.SelectingEventArgs>","Documentation":"\n            <summary>\n            The event triggers before the tab item gets selected.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selecting","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnDragStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.DragEventArgs>","Documentation":"\n            <summary>\n            The event triggers when the Tab item drag starts.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnDragStart","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Dragged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.DragEventArgs>","Documentation":"\n            <summary>\n            The event triggers after the tab item gets dropped.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Dragged","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TabEvents","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1931407981,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TabHeader","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A class used for configuring the Tab header properties.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TabHeader"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the icon class that is used to render an icon in the Tab header.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"System.String","Documentation":"\n            <summary>\n            Options for positioning the icon in the Tab item header. This property depends on the `IconCss` property.\n            The possible values are:\n            - left: Places the icon to the `left` of the item.\n            - top: Places the icon on the `top` of the item.\n            - right: Places the icon to the `right` end of the item.\n            - bottom: Places the icon at the `bottom` of the item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconPosition"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the display text of the Tab header.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TabHeader"}},{"HashCode":382318613,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TabHeader","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A class used for configuring the Tab header properties.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.TabHeader"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the icon class that is used to render an icon in the Tab header.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"System.String","Documentation":"\n            <summary>\n            Options for positioning the icon in the Tab item header. This property depends on the `IconCss` property.\n            The possible values are:\n            - left: Places the icon to the `left` of the item.\n            - top: Places the icon on the `top` of the item.\n            - right: Places the icon to the `right` end of the item.\n            - bottom: Places the icon at the `bottom` of the item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconPosition"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the display text of the Tab header.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TabHeader","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1063086664,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TabItem","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            An item object that is used to configure the Tab.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TabItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Child Content for the Tab item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ContentTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content template of the Tab item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ContentTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the content of Tab item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary> \n            Gets or sets the tab order of the Tab items. When positive values assigned, it allows to switch focus to the next/previous tabs items with Tab/ShiftTab keys.\n            </summary> \n            <value> \n            Tab index of tabs item. The default value is `-1`. \n            </value> \n        ","Metadata":{"Common.PropertyName":"TabIndex"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets the CSS classes to the Tab item to customize its styles.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a value that indicates whether the control is disabled or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"Header","TypeName":"Syncfusion.Blazor.Navigations.TabHeader","Documentation":"\n            <summary>\n            The object used for configuring the Tab item header properties.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Header"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the header content of the Tab item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a value that indicates whether the tab is visible or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Visible"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or Sets the unique ID of the Tab item\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TabItem"}},{"HashCode":-803600001,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TabItem","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            An item object that is used to configure the Tab.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.TabItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Child Content for the Tab item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"ContentTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the content template of the Tab item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ContentTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the content of Tab item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Content"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary> \n            Gets or sets the tab order of the Tab items. When positive values assigned, it allows to switch focus to the next/previous tabs items with Tab/ShiftTab keys.\n            </summary> \n            <value> \n            Tab index of tabs item. The default value is `-1`. \n            </value> \n        ","Metadata":{"Common.PropertyName":"TabIndex"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets the CSS classes to the Tab item to customize its styles.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a value that indicates whether the control is disabled or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"Header","TypeName":"Syncfusion.Blazor.Navigations.TabHeader","Documentation":"\n            <summary>\n            The object used for configuring the Tab item header properties.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Header"}},{"Kind":"Components.Component","Name":"HeaderTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the header content of the Tab item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HeaderTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a value that indicates whether the tab is visible or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Visible"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or Sets the unique ID of the Tab item\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TabItem","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1094992251,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.TabItem.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Child Content for the Tab item.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"TabItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.TabItem.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1894157127,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.TabItem.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Child Content for the Tab item.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.TabItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.TabItem.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1729412738,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.TabItem.ContentTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the content template of the Tab item.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ContentTemplate","ParentTag":"TabItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.TabItem.ContentTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":707934321,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.TabItem.ContentTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the content template of the Tab item.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ContentTemplate","ParentTag":"Syncfusion.Blazor.Navigations.TabItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.TabItem.ContentTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2011935448,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.TabItem.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the header content of the Tab item.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"TabItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.TabItem.HeaderTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":978924506,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.TabItem.HeaderTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the header content of the Tab item.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"HeaderTemplate","ParentTag":"Syncfusion.Blazor.Navigations.TabItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.TabItem.HeaderTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1860116023,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TabItems","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A list of items that are used to configure the Tabs component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TabItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Child Content for the Tab items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TabItems"}},{"HashCode":-73422441,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TabItems","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A list of items that are used to configure the Tabs component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.TabItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Child Content for the Tab items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TabItems","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1362792318,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.TabItems.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Child Content for the Tab items.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"TabItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.TabItems.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-222637809,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.TabItems.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Child Content for the Tab items.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.TabItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.TabItems.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1137664059,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfToolbar","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            The Toolbar control contains a list of toolbar items that are aligned horizontally.\n            </summary>\n            <remarks>\n            Toolbar items can be populated by specifying <see cref=\"T:Syncfusion.Blazor.Navigations.ToolbarItem\" /> within <see cref=\"T:Syncfusion.Blazor.Navigations.ToolbarItems\" /> tag directive.\n            </remarks>\n            <example>\n            In the below code example, a basic toolbar component initialized with <see cref=\"T:Syncfusion.Blazor.Navigations.ToolbarItems\" /> tag directive.\n            <code><![CDATA[\n            <SfToolbar>\n                <ToolbarItems>\n                    <ToolbarItem Type=\"ItemType.Button\" Text=\"Cut\" PrefixIcon=\"e-icons e-cut\"></ToolbarItem>\n                    <ToolbarItem Type=\"ItemType.Button\" Text=\"Copy\" PrefixIcon=\"e-icons e-copy\"></ToolbarItem>\n                    <ToolbarItem Type=\"ItemType.Button\" Text=\"Paste\" PrefixIcon=\"e-icons e-paste\"></ToolbarItem>\n                    <ToolbarItem Type=\"ItemType.Separator\"></ToolbarItem>\n                    <ToolbarItem Type=\"ItemType.Input\">\n                        <Template>\n                            <input @bind=\"inputValue\" type=\"text\" />\n                        </Template>\n                    </ToolbarItem>\n                </ToolbarItems>\n            </SfToolbar>\n            @code {\n                private string inputValue { get; set; }\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfToolbar"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the unique Id value for toolbar component.\n            </summary>\n            <value>\n            If we set the id, then the id value set for toolbar element. The default value is `null`.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content of toolbar component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowKeyboard","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the allow keyboard interaction in toolbar. \n            </summary> \n            <value>\n            false, the keyboard interaction in toolbar, The default value is `true`.\n            </value>\n        ","Metadata":{"Common.PropertyName":"AllowKeyboard"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the custom classes to customize the toolbar component.  \n            </summary>\n            <value>\n            If we set the css class, then the custom class is applied for toolbar element. The default value is `null`. \n            </value> \n            <example>\n            <code><![CDATA[ \n            <SfToolbar CssClass=\"custom-toolbar\"></SfToolbar> \n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnableCollision","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether enable or disable popup collision to display the popup based on viewport window. \n            </summary>\n            <value>\n            false, the popup collision is disabled. The default value is `true`. \n            </value>\n            <remarks>\n            This property is applicable only when <see cref=\"F:Syncfusion.Blazor.Navigations.OverflowMode.Popup\" /> or <see cref=\"F:Syncfusion.Blazor.Navigations.OverflowMode.Extended\" /> is used.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableCollision"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right to left direction is enabled for toolbar component.\n            </summary>\n            <value> \n            true, the right to left direction is enabled for toolbar component. The default value is `false`. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the height of the toolbar element in pixels/number/percentage. \n            </summary> \n            <value> \n            If we set the height value, then the toolbar will render based on specified height otherwise the default height value `auto` is set.  \n            </value> \n            <example> \n            <code><![CDATA[ \n            <SfToolbar Height=\"500px\"></SfToolbar> \n            ]]></code> \n            </example> \n            <remarks>\n            If we set number values, then it is considered as pixels.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Height"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Navigations.ToolbarItem>","Documentation":"\n            <summary>\n            Gets or sets the list of toolbar items that will be populated using the <see cref=\"T:Syncfusion.Blazor.Navigations.ToolbarItems\" /> tag directive. \n            </summary>\n            <value>\n            <see cref=\"T:Syncfusion.Blazor.Navigations.ToolbarItems\" />\n            </value>\n        ","Metadata":{"Common.PropertyName":"Items"}},{"Kind":"Components.Component","Name":"OverflowMode","TypeName":"Syncfusion.Blazor.Navigations.OverflowMode","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates how to display toolbar items when the toolbar content exceeds the viewing area.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Navigations.OverflowMode\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Navigations.OverflowMode.Scrollable\" />\n            </value>\n            <remarks>\n            If the <c>OverflowMode</c> is <c>Scrollable</c>, all the elements are displayed in a single line with enabled horizontal scrolling.\n            If the <c>OverflowMode</c> is <c>Popup</c>, prioritized elements are displayed on the toolbar and the rest of elements are moved to the popup.\n            If the popup content overflows the height of the page, the rest of the elements will be hidden.\n            If the <c>OverflowMode</c> is <c>MultiRow</c>, overflow toolbar items are displayed as in-line of toolbar.\n            If the <c>OverflowMode</c> is <c>Extended</c>, hides the overflow items in next row. The extended content were shown when click on the expand icon.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OverflowMode"}},{"Kind":"Components.Component","Name":"ScrollStep","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the scrolling distance of toolbar scroller.\n            </summary>\n            <value> \n            When the left/right navigation icon is clicked, then the toolbar scrolled based on the specified value otherwise the default value `0` is set.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfToolbar ScrollStep=\"50\"></SfToolbar> \n            ]]></code>\n            </example>\n            <remarks>\n            This property is applicable only when <see cref=\"F:Syncfusion.Blazor.Navigations.OverflowMode.Scrollable\" /> is set.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ScrollStep"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the width of the toolbar element in pixels/number/percentage. \n            </summary> \n            <value> \n            If we set the width value, then the toolbar will render based on specified width otherwise the default width value `auto` is set.  \n            </value> \n            <example>\n            <code><![CDATA[ \n            <SfToolbar Width=\"500px\"></SfToolbar> \n            ]]></code> \n            </example> \n            <remarks>\n            If we set number values, then it is considered as pixels.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary> \n            Gets or sets a collection of additional attributes that will applied to the toolbar element. \n            </summary> \n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks> \n            <value> \n            It allows the toolbar component to render non-declared attributes. The default value is `null`. \n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfToolbar title=\"Search toolbar\"></SfToolbar> \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfToolbar"}},{"HashCode":-572247000,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfToolbar","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            The Toolbar control contains a list of toolbar items that are aligned horizontally.\n            </summary>\n            <remarks>\n            Toolbar items can be populated by specifying <see cref=\"T:Syncfusion.Blazor.Navigations.ToolbarItem\" /> within <see cref=\"T:Syncfusion.Blazor.Navigations.ToolbarItems\" /> tag directive.\n            </remarks>\n            <example>\n            In the below code example, a basic toolbar component initialized with <see cref=\"T:Syncfusion.Blazor.Navigations.ToolbarItems\" /> tag directive.\n            <code><![CDATA[\n            <SfToolbar>\n                <ToolbarItems>\n                    <ToolbarItem Type=\"ItemType.Button\" Text=\"Cut\" PrefixIcon=\"e-icons e-cut\"></ToolbarItem>\n                    <ToolbarItem Type=\"ItemType.Button\" Text=\"Copy\" PrefixIcon=\"e-icons e-copy\"></ToolbarItem>\n                    <ToolbarItem Type=\"ItemType.Button\" Text=\"Paste\" PrefixIcon=\"e-icons e-paste\"></ToolbarItem>\n                    <ToolbarItem Type=\"ItemType.Separator\"></ToolbarItem>\n                    <ToolbarItem Type=\"ItemType.Input\">\n                        <Template>\n                            <input @bind=\"inputValue\" type=\"text\" />\n                        </Template>\n                    </ToolbarItem>\n                </ToolbarItems>\n            </SfToolbar>\n            @code {\n                private string inputValue { get; set; }\n            }\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfToolbar"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the unique Id value for toolbar component.\n            </summary>\n            <value>\n            If we set the id, then the id value set for toolbar element. The default value is `null`.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content of toolbar component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowKeyboard","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets whether the allow keyboard interaction in toolbar. \n            </summary> \n            <value>\n            false, the keyboard interaction in toolbar, The default value is `true`.\n            </value>\n        ","Metadata":{"Common.PropertyName":"AllowKeyboard"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the custom classes to customize the toolbar component.  \n            </summary>\n            <value>\n            If we set the css class, then the custom class is applied for toolbar element. The default value is `null`. \n            </value> \n            <example>\n            <code><![CDATA[ \n            <SfToolbar CssClass=\"custom-toolbar\"></SfToolbar> \n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnableCollision","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether enable or disable popup collision to display the popup based on viewport window. \n            </summary>\n            <value>\n            false, the popup collision is disabled. The default value is `true`. \n            </value>\n            <remarks>\n            This property is applicable only when <see cref=\"F:Syncfusion.Blazor.Navigations.OverflowMode.Popup\" /> or <see cref=\"F:Syncfusion.Blazor.Navigations.OverflowMode.Extended\" /> is used.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnableCollision"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right to left direction is enabled for toolbar component.\n            </summary>\n            <value> \n            true, the right to left direction is enabled for toolbar component. The default value is `false`. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Height","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the height of the toolbar element in pixels/number/percentage. \n            </summary> \n            <value> \n            If we set the height value, then the toolbar will render based on specified height otherwise the default height value `auto` is set.  \n            </value> \n            <example> \n            <code><![CDATA[ \n            <SfToolbar Height=\"500px\"></SfToolbar> \n            ]]></code> \n            </example> \n            <remarks>\n            If we set number values, then it is considered as pixels.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Height"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Navigations.ToolbarItem>","Documentation":"\n            <summary>\n            Gets or sets the list of toolbar items that will be populated using the <see cref=\"T:Syncfusion.Blazor.Navigations.ToolbarItems\" /> tag directive. \n            </summary>\n            <value>\n            <see cref=\"T:Syncfusion.Blazor.Navigations.ToolbarItems\" />\n            </value>\n        ","Metadata":{"Common.PropertyName":"Items"}},{"Kind":"Components.Component","Name":"OverflowMode","TypeName":"Syncfusion.Blazor.Navigations.OverflowMode","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates how to display toolbar items when the toolbar content exceeds the viewing area.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Navigations.OverflowMode\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Navigations.OverflowMode.Scrollable\" />\n            </value>\n            <remarks>\n            If the <c>OverflowMode</c> is <c>Scrollable</c>, all the elements are displayed in a single line with enabled horizontal scrolling.\n            If the <c>OverflowMode</c> is <c>Popup</c>, prioritized elements are displayed on the toolbar and the rest of elements are moved to the popup.\n            If the popup content overflows the height of the page, the rest of the elements will be hidden.\n            If the <c>OverflowMode</c> is <c>MultiRow</c>, overflow toolbar items are displayed as in-line of toolbar.\n            If the <c>OverflowMode</c> is <c>Extended</c>, hides the overflow items in next row. The extended content were shown when click on the expand icon.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OverflowMode"}},{"Kind":"Components.Component","Name":"ScrollStep","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the scrolling distance of toolbar scroller.\n            </summary>\n            <value> \n            When the left/right navigation icon is clicked, then the toolbar scrolled based on the specified value otherwise the default value `0` is set.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfToolbar ScrollStep=\"50\"></SfToolbar> \n            ]]></code>\n            </example>\n            <remarks>\n            This property is applicable only when <see cref=\"F:Syncfusion.Blazor.Navigations.OverflowMode.Scrollable\" /> is set.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ScrollStep"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the width of the toolbar element in pixels/number/percentage. \n            </summary> \n            <value> \n            If we set the width value, then the toolbar will render based on specified width otherwise the default width value `auto` is set.  \n            </value> \n            <example>\n            <code><![CDATA[ \n            <SfToolbar Width=\"500px\"></SfToolbar> \n            ]]></code> \n            </example> \n            <remarks>\n            If we set number values, then it is considered as pixels.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Width"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary> \n            Gets or sets a collection of additional attributes that will applied to the toolbar element. \n            </summary> \n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks> \n            <value> \n            It allows the toolbar component to render non-declared attributes. The default value is `null`. \n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfToolbar title=\"Search toolbar\"></SfToolbar> \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfToolbar","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":698982239,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfToolbar.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets the child content of toolbar component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfToolbar"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfToolbar.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-601021394,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfToolbar.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets the child content of toolbar component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.SfToolbar"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfToolbar.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1061363461,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.ToolbarItem","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A class that represents toolbar component item of <see cref=\"T:Syncfusion.Blazor.Navigations.SfToolbar\" /> component.\n            </summary>\n            <remarks>\n            You can render icon only, text only, icon and text toolbar item by specifying value to corresponding property.\n            </remarks>\n            <example>\n            In the below code example, a basic toolbar item has been added using <see cref=\"T:Syncfusion.Blazor.Navigations.ToolbarItem\" /> tag directive.\n            <code><![CDATA[\n            <SfToolbar>\n                <ToolbarItems>\n                    <ToolbarItem Text=\"Cut\" PrefixIcon=\"e-icons e-cut\"></ToolbarItem>\n                    <ToolbarItem Text=\"Copy\" PrefixIcon=\"e-icons e-copy\"></ToolbarItem>\n                    <ToolbarItem Text=\"Paste\" PrefixIcon=\"e-icons e-paste\"></ToolbarItem>\n                </ToolbarItems>\n            </SfToolbar>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ToolbarItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content for the toolbar item.\n            </summary>\n            <value>\n            The value used to build the content.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.ClickEventArgs>","Documentation":"\n            <summary>\n            Event triggers when click the toolbar item.\n            </summary>\n            <remarks>\n            You can get the clicked toolbar item details.\n            </remarks>\n            <example>\n            In the below code example, the clicked toolbar item text can be obtained from the <c>OnClick</c> event.\n            <code><![CDATA[\n            <SfToolbar>\n                <ToolbarItems>\n                    <ToolbarItem Text=\"Cut\" TooltipText=\"Cut\" OnClick=\"ItemClick\"></ToolbarItem>\n                    <ToolbarItem Text=\"Copy\" TooltipText=\"Copy\"></ToolbarItem>\n                    <ToolbarItem Text=\"Paste\" TooltipText=\"Paste\"></ToolbarItem>\n                </ToolbarItems>\n            </SfToolbar>\n            @code {\n                public void ItemClick(ClickEventArgs args)\n                    string clickedText = args.Item.Text;\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClick","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Align","TypeName":"Syncfusion.Blazor.Navigations.ItemAlign","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the location for aligning toolbar items on the toolbar.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Navigations.ItemAlign\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Navigations.ItemAlign.Left\" />\n            </value>\n            <remarks>\n            If the <c>ItemAlign</c> is <c>Left</c>, the toolbar item aligned from left side of toolbar.\n            If the <c>ItemAlign</c> is <c>Center</c>, the toolbar item aligned from center of toolbar.\n            If the <c>ItemAlign</c> is <c>Right</c>, the toolbar item aligned from right side of toolbar.\n            Each item will be aligned according to the <c>Align</c> property.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Align"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the classes for toolbar item to customize the toolbar item.\n            </summary>\n            <value> \n            If we set the css class, then the custom class is applied for toolbar item. The default value is <c>string.Empty</c>. \n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfToolbar>\n                <ToolbarItems>\n                    <ToolbarItem Text=\"Cut\" CssClass=\"item1\"></ToolbarItem>\n                </ToolbarItems>\n            </SfToolbar>\n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the toolbar item is disabled or not.\n            </summary>\n            <value>\n            <c>true</c>, to disable the toolbar item. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the toolbar item element.\n            </summary>\n            <value> \n            It allows the toolbar item to render non-declared attributes. The default value is `null`. \n            </value>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            In the below code example, title attribute were added for toolbar item.\n            <code><![CDATA[\n            <SfToolbar>\n                <ToolbarItems>\n                    <ToolbarItem Text=\"Cut\" id=\"item1\"></ToolbarItem>\n                </ToolbarItems>\n            </SfToolbar>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the unique ID for toolbar button or input element.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"Overflow","TypeName":"Syncfusion.Blazor.Navigations.OverflowOption","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to display the toolbar item on toolbar or not, when the content is too large to fit available space.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Navigations.OverflowOption\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Navigations.OverflowOption.None\" />\n            </value>\n            <remarks>\n            If the <c>OverflowOption</c> is <c>Show</c>, always shows the toolbar item as the primary priority on the Toolbar.\n            If the <c>OverflowOption</c> is <c>Hide</c>, always shows the toolbar item as the secondary priority on the popup.\n            If the <c>OverflowOption</c> is <c>None</c>, no priority were set for toolbar item, as per normal order moves to popup when content exceeds.\n            This property is applicable only when <see cref=\"T:Syncfusion.Blazor.Navigations.OverflowMode\" /> is <c>Popup</c> of <c>Extended</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Overflow"}},{"Kind":"Components.Component","Name":"PrefixIcon","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the classes to display an icon for toolbar button item.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            The icon will be positioned before the text content if <see cref=\"P:Syncfusion.Blazor.Navigations.ToolbarItem.Text\" /> is available, otherwise the icon alone will be rendered.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfToolbar>\n                <ToolbarItems>\n                    <ToolbarItem Text=\"Cut\" PrefixIcon=\"e-icons e-cut\"></ToolbarItem>\n                </ToolbarItems>\n            </SfToolbar>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"PrefixIcon"}},{"Kind":"Components.Component","Name":"ShowAlwaysInPopup","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the toolbar items whether to display always in popup or not.\n            </summary>\n            <value>\n            <c>true</c>, to render the toolbar item in popup. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            It allows to maintain toolbar item on popup always but it does not work for toolbar priority items.\n            This property is applicable only when <see cref=\"T:Syncfusion.Blazor.Navigations.OverflowMode\" /> is <c>Popup</c> of <c>Extended</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ShowAlwaysInPopup"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary> \n            Gets or sets the tab order of the Toolbar items. When positive values assigned, it allows to switch focus to the next/previous toolbar items with Tab/ShiftTab keys.\n            </summary> \n            <value> \n            Tab index of toolbar item. The default value is `-1`. \n            </value> \n            <remarks>\n            By default, user can able to switch between items only via arrow keys.\n            If the value is set to 0 for all tool bar items, then tab switches based on element order.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"TabIndex"}},{"Kind":"Components.Component","Name":"ShowTextOn","TypeName":"Syncfusion.Blazor.Navigations.DisplayMode","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to display the button text on toolbar or popup.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Navigations.DisplayMode\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Navigations.DisplayMode.Both\" />\n            </value>\n            <remarks>\n            If the <c>DisplayMode</c> is <c>Toolbar</c>, text will be displayed on Toolbar only.\n            If the <c>DisplayMode</c> is <c>Overflow</c>, text will be displayed only when content overflows to popup.\n            If the <c>DisplayMode</c> is <c>Both</c>, text will be displayed on both popup and Toolbar.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ShowTextOn"}},{"Kind":"Components.Component","Name":"SuffixIcon","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the classes to display an icon for toolbar button item.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            The icon will be positioned after the text content if <see cref=\"P:Syncfusion.Blazor.Navigations.ToolbarItem.Text\" /> is available, otherwise the icon alone will be rendered.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfToolbar>\n                <ToolbarItems>\n                    <ToolbarItem Text=\"Cut\" SuffixIcon=\"e-icons e-cut\"></ToolbarItem>\n                </ToolbarItems>\n            </SfToolbar>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"SuffixIcon"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the HTML element content for the toolbar item.\n            </summary>\n            <value>\n            The value used to build the content.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfToolbar>\n                <ToolbarItems>\n                    <ToolbarItem>\n                        <Template>\n                            <input type='checkbox' title=\"Accept\" checked/>\n                        </Template>\n                    </ToolbarItem>\n                </ToolbarItems>\n            </SfToolbar>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Template","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text content for toolbar button item.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfToolbar>\n                <ToolbarItems>\n                    <ToolbarItem Text=\"Cut\"></ToolbarItem>\n                </ToolbarItems>\n            </SfToolbar>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"TooltipText","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the tooltip text content to be displayed on hovering the toolbar button item.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfToolbar>\n                <ToolbarItems>\n                    <ToolbarItem Text=\"Cut\" TooltipText=\"Cut\"></ToolbarItem>\n                </ToolbarItems>\n            </SfToolbar>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"TooltipText"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Navigations.ItemType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates the type of toolbar item to be rendered in toolbar.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Navigations.ItemType\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Navigations.ItemType.Button\" />\n            </value>\n            <remarks>\n            If the <c>ItemType</c> is <c>Button</c>, creates the Button control with its given properties like text, prefixIcon, etc.\n            If the <c>ItemType</c> is <c>Separator</c>, adds a horizontal line that separates the toolbar item.\n            If the <c>ItemType</c> is <c>Input</c>, creates an input element that is applicable to template rendering with Syncfusion controls like DropDownList, AutoComplete, etc.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the toolbar item is hidden or not.\n            </summary>\n            <value>\n            <c>false</c>, to hide the toolbar item. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Visible"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the width of the toolbar button item in pixels/number/percentage. \n            </summary> \n            <value> \n            If we set the width value, then the toolbar button item will render based on specified width otherwise the default width value <c>auto</c> is set.  \n            </value>\n        ","Metadata":{"Common.PropertyName":"Width"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.ToolbarItem"}},{"HashCode":2012414490,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.ToolbarItem","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A class that represents toolbar component item of <see cref=\"T:Syncfusion.Blazor.Navigations.SfToolbar\" /> component.\n            </summary>\n            <remarks>\n            You can render icon only, text only, icon and text toolbar item by specifying value to corresponding property.\n            </remarks>\n            <example>\n            In the below code example, a basic toolbar item has been added using <see cref=\"T:Syncfusion.Blazor.Navigations.ToolbarItem\" /> tag directive.\n            <code><![CDATA[\n            <SfToolbar>\n                <ToolbarItems>\n                    <ToolbarItem Text=\"Cut\" PrefixIcon=\"e-icons e-cut\"></ToolbarItem>\n                    <ToolbarItem Text=\"Copy\" PrefixIcon=\"e-icons e-copy\"></ToolbarItem>\n                    <ToolbarItem Text=\"Paste\" PrefixIcon=\"e-icons e-paste\"></ToolbarItem>\n                </ToolbarItems>\n            </SfToolbar>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.ToolbarItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content for the toolbar item.\n            </summary>\n            <value>\n            The value used to build the content.\n            </value>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.ClickEventArgs>","Documentation":"\n            <summary>\n            Event triggers when click the toolbar item.\n            </summary>\n            <remarks>\n            You can get the clicked toolbar item details.\n            </remarks>\n            <example>\n            In the below code example, the clicked toolbar item text can be obtained from the <c>OnClick</c> event.\n            <code><![CDATA[\n            <SfToolbar>\n                <ToolbarItems>\n                    <ToolbarItem Text=\"Cut\" TooltipText=\"Cut\" OnClick=\"ItemClick\"></ToolbarItem>\n                    <ToolbarItem Text=\"Copy\" TooltipText=\"Copy\"></ToolbarItem>\n                    <ToolbarItem Text=\"Paste\" TooltipText=\"Paste\"></ToolbarItem>\n                </ToolbarItems>\n            </SfToolbar>\n            @code {\n                public void ItemClick(ClickEventArgs args)\n                    string clickedText = args.Item.Text;\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClick","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Align","TypeName":"Syncfusion.Blazor.Navigations.ItemAlign","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the location for aligning toolbar items on the toolbar.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Navigations.ItemAlign\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Navigations.ItemAlign.Left\" />\n            </value>\n            <remarks>\n            If the <c>ItemAlign</c> is <c>Left</c>, the toolbar item aligned from left side of toolbar.\n            If the <c>ItemAlign</c> is <c>Center</c>, the toolbar item aligned from center of toolbar.\n            If the <c>ItemAlign</c> is <c>Right</c>, the toolbar item aligned from right side of toolbar.\n            Each item will be aligned according to the <c>Align</c> property.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Align"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the classes for toolbar item to customize the toolbar item.\n            </summary>\n            <value> \n            If we set the css class, then the custom class is applied for toolbar item. The default value is <c>string.Empty</c>. \n            </value>\n            <example> \n            <code><![CDATA[ \n            <SfToolbar>\n                <ToolbarItems>\n                    <ToolbarItem Text=\"Cut\" CssClass=\"item1\"></ToolbarItem>\n                </ToolbarItems>\n            </SfToolbar>\n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the toolbar item is disabled or not.\n            </summary>\n            <value>\n            <c>true</c>, to disable the toolbar item. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the toolbar item element.\n            </summary>\n            <value> \n            It allows the toolbar item to render non-declared attributes. The default value is `null`. \n            </value>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            In the below code example, title attribute were added for toolbar item.\n            <code><![CDATA[\n            <SfToolbar>\n                <ToolbarItems>\n                    <ToolbarItem Text=\"Cut\" id=\"item1\"></ToolbarItem>\n                </ToolbarItems>\n            </SfToolbar>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the unique ID for toolbar button or input element.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"Overflow","TypeName":"Syncfusion.Blazor.Navigations.OverflowOption","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to display the toolbar item on toolbar or not, when the content is too large to fit available space.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Navigations.OverflowOption\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Navigations.OverflowOption.None\" />\n            </value>\n            <remarks>\n            If the <c>OverflowOption</c> is <c>Show</c>, always shows the toolbar item as the primary priority on the Toolbar.\n            If the <c>OverflowOption</c> is <c>Hide</c>, always shows the toolbar item as the secondary priority on the popup.\n            If the <c>OverflowOption</c> is <c>None</c>, no priority were set for toolbar item, as per normal order moves to popup when content exceeds.\n            This property is applicable only when <see cref=\"T:Syncfusion.Blazor.Navigations.OverflowMode\" /> is <c>Popup</c> of <c>Extended</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Overflow"}},{"Kind":"Components.Component","Name":"PrefixIcon","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the classes to display an icon for toolbar button item.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            The icon will be positioned before the text content if <see cref=\"P:Syncfusion.Blazor.Navigations.ToolbarItem.Text\" /> is available, otherwise the icon alone will be rendered.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfToolbar>\n                <ToolbarItems>\n                    <ToolbarItem Text=\"Cut\" PrefixIcon=\"e-icons e-cut\"></ToolbarItem>\n                </ToolbarItems>\n            </SfToolbar>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"PrefixIcon"}},{"Kind":"Components.Component","Name":"ShowAlwaysInPopup","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the toolbar items whether to display always in popup or not.\n            </summary>\n            <value>\n            <c>true</c>, to render the toolbar item in popup. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            It allows to maintain toolbar item on popup always but it does not work for toolbar priority items.\n            This property is applicable only when <see cref=\"T:Syncfusion.Blazor.Navigations.OverflowMode\" /> is <c>Popup</c> of <c>Extended</c>.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ShowAlwaysInPopup"}},{"Kind":"Components.Component","Name":"TabIndex","TypeName":"System.Int32","Documentation":"\n            <summary> \n            Gets or sets the tab order of the Toolbar items. When positive values assigned, it allows to switch focus to the next/previous toolbar items with Tab/ShiftTab keys.\n            </summary> \n            <value> \n            Tab index of toolbar item. The default value is `-1`. \n            </value> \n            <remarks>\n            By default, user can able to switch between items only via arrow keys.\n            If the value is set to 0 for all tool bar items, then tab switches based on element order.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"TabIndex"}},{"Kind":"Components.Component","Name":"ShowTextOn","TypeName":"Syncfusion.Blazor.Navigations.DisplayMode","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to display the button text on toolbar or popup.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Navigations.DisplayMode\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Navigations.DisplayMode.Both\" />\n            </value>\n            <remarks>\n            If the <c>DisplayMode</c> is <c>Toolbar</c>, text will be displayed on Toolbar only.\n            If the <c>DisplayMode</c> is <c>Overflow</c>, text will be displayed only when content overflows to popup.\n            If the <c>DisplayMode</c> is <c>Both</c>, text will be displayed on both popup and Toolbar.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ShowTextOn"}},{"Kind":"Components.Component","Name":"SuffixIcon","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the classes to display an icon for toolbar button item.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            The icon will be positioned after the text content if <see cref=\"P:Syncfusion.Blazor.Navigations.ToolbarItem.Text\" /> is available, otherwise the icon alone will be rendered.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfToolbar>\n                <ToolbarItems>\n                    <ToolbarItem Text=\"Cut\" SuffixIcon=\"e-icons e-cut\"></ToolbarItem>\n                </ToolbarItems>\n            </SfToolbar>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"SuffixIcon"}},{"Kind":"Components.Component","Name":"Template","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the HTML element content for the toolbar item.\n            </summary>\n            <value>\n            The value used to build the content.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfToolbar>\n                <ToolbarItems>\n                    <ToolbarItem>\n                        <Template>\n                            <input type='checkbox' title=\"Accept\" checked/>\n                        </Template>\n                    </ToolbarItem>\n                </ToolbarItems>\n            </SfToolbar>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Template","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the text content for toolbar button item.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfToolbar>\n                <ToolbarItems>\n                    <ToolbarItem Text=\"Cut\"></ToolbarItem>\n                </ToolbarItems>\n            </SfToolbar>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"TooltipText","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets the tooltip text content to be displayed on hovering the toolbar button item.\n            </summary>\n            <value>\n            Accepts a string value. The default value is <c>String.Empty</c>.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfToolbar>\n                <ToolbarItems>\n                    <ToolbarItem Text=\"Cut\" TooltipText=\"Cut\"></ToolbarItem>\n                </ToolbarItems>\n            </SfToolbar>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"TooltipText"}},{"Kind":"Components.Component","Name":"Type","TypeName":"Syncfusion.Blazor.Navigations.ItemType","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates the type of toolbar item to be rendered in toolbar.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Navigations.ItemType\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Navigations.ItemType.Button\" />\n            </value>\n            <remarks>\n            If the <c>ItemType</c> is <c>Button</c>, creates the Button control with its given properties like text, prefixIcon, etc.\n            If the <c>ItemType</c> is <c>Separator</c>, adds a horizontal line that separates the toolbar item.\n            If the <c>ItemType</c> is <c>Input</c>, creates an input element that is applicable to template rendering with Syncfusion controls like DropDownList, AutoComplete, etc.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Type"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the toolbar item is hidden or not.\n            </summary>\n            <value>\n            <c>false</c>, to hide the toolbar item. The default value is <c>true</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"Visible"}},{"Kind":"Components.Component","Name":"Width","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the width of the toolbar button item in pixels/number/percentage. \n            </summary> \n            <value> \n            If we set the width value, then the toolbar button item will render based on specified width otherwise the default width value <c>auto</c> is set.  \n            </value>\n        ","Metadata":{"Common.PropertyName":"Width"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.ToolbarItem","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1955757721,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.ToolbarItem.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets the child content for the toolbar item.\n            </summary>\n            <value>\n            The value used to build the content.\n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"ToolbarItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.ToolbarItem.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1906533551,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.ToolbarItem.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets the child content for the toolbar item.\n            </summary>\n            <value>\n            The value used to build the content.\n            </value>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.ToolbarItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.ToolbarItem.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1034405706,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.ToolbarItem.Template","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets the HTML element content for the toolbar item.\n            </summary>\n            <value>\n            The value used to build the content.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfToolbar>\n                <ToolbarItems>\n                    <ToolbarItem>\n                        <Template>\n                            <input type='checkbox' title=\"Accept\" checked/>\n                        </Template>\n                    </ToolbarItem>\n                </ToolbarItems>\n            </SfToolbar>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"ToolbarItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.ToolbarItem.Template","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-2054916650,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.ToolbarItem.Template","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets the HTML element content for the toolbar item.\n            </summary>\n            <value>\n            The value used to build the content.\n            </value>\n            <example>\n            <code><![CDATA[\n            <SfToolbar>\n                <ToolbarItems>\n                    <ToolbarItem>\n                        <Template>\n                            <input type='checkbox' title=\"Accept\" checked/>\n                        </Template>\n                    </ToolbarItem>\n                </ToolbarItems>\n            </SfToolbar>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Template","ParentTag":"Syncfusion.Blazor.Navigations.ToolbarItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.ToolbarItem.Template","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-69395019,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.ToolbarItems","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Represents a collection of <see cref=\"T:Syncfusion.Blazor.Navigations.ToolbarItem\" />.\n            </summary>\n            <remarks>\n            To generate dynamic <see cref=\"T:Syncfusion.Blazor.Navigations.ToolbarItem\" /> based on collection, use <c>@foreach</c> within <see cref=\"T:Syncfusion.Blazor.Navigations.ToolbarItems\" /> tag directive.\n            </remarks>\n            <example>\n            In the below code example, a basic toolbar has been rendered using <see cref=\"T:Syncfusion.Blazor.Navigations.ToolbarItems\" /> tag directive.\n            <code><![CDATA[\n            <SfToolbar>\n                <ToolbarItems>\n                    <ToolbarItem Text=\"Cut\"></ToolbarItem>\n                    <ToolbarItem Text=\"Copy\"></ToolbarItem>\n                    <ToolbarItem Text=\"Paste\"></ToolbarItem>\n                </ToolbarItems>\n            </SfToolbar>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ToolbarItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content for the toolbar items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.ToolbarItems"}},{"HashCode":-1064010487,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.ToolbarItems","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Represents a collection of <see cref=\"T:Syncfusion.Blazor.Navigations.ToolbarItem\" />.\n            </summary>\n            <remarks>\n            To generate dynamic <see cref=\"T:Syncfusion.Blazor.Navigations.ToolbarItem\" /> based on collection, use <c>@foreach</c> within <see cref=\"T:Syncfusion.Blazor.Navigations.ToolbarItems\" /> tag directive.\n            </remarks>\n            <example>\n            In the below code example, a basic toolbar has been rendered using <see cref=\"T:Syncfusion.Blazor.Navigations.ToolbarItems\" /> tag directive.\n            <code><![CDATA[\n            <SfToolbar>\n                <ToolbarItems>\n                    <ToolbarItem Text=\"Cut\"></ToolbarItem>\n                    <ToolbarItem Text=\"Copy\"></ToolbarItem>\n                    <ToolbarItem Text=\"Paste\"></ToolbarItem>\n                </ToolbarItems>\n            </SfToolbar>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.ToolbarItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Gets or sets the child content for the toolbar items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.ToolbarItems","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-593666527,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.ToolbarItems.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets the child content for the toolbar items.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"ToolbarItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.ToolbarItems.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":270567737,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.ToolbarItems.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Gets or sets the child content for the toolbar items.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.ToolbarItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.ToolbarItems.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-310984635,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            The TreeView component is used to represent hierarchical data in a tree like structure with editing, drag and drop, checkboxes, expand and collapse, and more.\n            </summary>\n            <typeparam name=\"TValue\">\"TValue parameter\".</typeparam>\n            <summary>\n            Specifies the TreeView component.\n            </summary>\n            <summary>\n            The TreeView component is used to represent hierarchical data in a tree like structure with editing, drag and drop, checkboxes, expand and collapse, and more.\n            </summary>\n            <summary>\n            The TreeView component is used to represent hierarchical data in a tree like structure with editing, drag and drop, checkboxes, expand and collapse, and more.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfTreeView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.SfTreeView<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the content to display within a TreeView component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowDragAndDrop","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the TreeView allows drag and drop of nodes to reordering the nodes. \n            </summary>\n            <value> \n            <c>true</c>, if drag and drop operation is allowed; otherwise 'false'. The default value is <c>false</c>. \n            </value> \n            <remarks>\n            In desktop device, drag and drop a node using mouse down on the node and drag it to the target node\n            and drop the node by releasing the mouse.\n            In touch device, drag and drop nodes using touch start, touch move and and touch end events.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowDragAndDrop"}},{"Kind":"Components.Component","Name":"AllowEditing","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether allow to edit a node's text by pressing F2 key or double-click on a TreeView node. \n            </summary>\n            <value> \n            <c>true</c>, if editing is allowed; otherwise 'false'. The default value is <c>false</c>. \n            </value> \n            <remarks>\n            When `AllowEditing` property is set to true, the TreeView allows to edit a node\n            by double clicking on the node or by navigating to the node and pressing F2 key. \n            When the property is set to false, the TreeView allows to read the node'text only. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowEditing"}},{"Kind":"Components.Component","Name":"AllowMultiSelection","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable multi-selection of nodes. \n            </summary>\n            <value> \n            <c>true</c>, if multiple nodes can be selected. The default value is <c>false</c>. \n            </value> \n            <remarks>\n            To select multiple nodes, select the nodes by holding down the CTRL key and clicking on the nodes.\n            To select consecutive nodes, select initial node and hold down the SHIFT key and click on the final node .\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowMultiSelection"}},{"Kind":"Components.Component","Name":"AllowTextWrap","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to wrap the node's text in the TreeView. \n            </summary>\n            <value> \n            <c>true</c>, if node's text can be wrapped around a node. The default value is <c>false</c>. \n            </value> \n            <remarks>\n            When the `AllowTextWrap` property is set to true, the TreeView node's text wrap to the next line\n            when its text content exceeds the width of the TreeView node.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowTextWrap"}},{"Kind":"Components.Component","Name":"Animation","TypeName":"Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings","Documentation":"\n            <summary>\n            Specifies the type of animation applied on expanding and collapsing the nodes along with duration.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Animation"}},{"Kind":"Components.Component","Name":"AutoCheck","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether allow to update a parent checkbox state based on child's checked state.\n            </summary>\n            <value> \n            'false' if the parent and child node relation is not required. The default value is <c>true</c>. \n            </value> \n            <remarks>\n            This property works when <see cref=\"P:Syncfusion.Blazor.Navigations.SfTreeView`1.ShowCheckBox\" /> is set to true.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AutoCheck"}},{"Kind":"Components.Component","Name":"CheckedNodes","TypeName":"System.String[]","Documentation":"\n             <summary>\n             Gets or sets the ID of checked nodes in the TreeView component.\n             </summary>\n             <value> \n             Pass the node's ID as string array collection.\n             </value> \n             <remarks> \n             Supports two-way binding. This property returns the checked nodes ID in the TreeView component.\n             </remarks> \n             <example> \n             A TreeView with checked nodes.\n             <code><![CDATA[ \n             <SfTreeView TValue=\"MusicAlbum\" ShowCheckBox=\"true\" @bind-CheckedNodes=\"@CheckedNodes\">\n             <TreeViewFieldsSettings TValue=\"MusicAlbum\" Id=\"Id\" DataSource=\"@Albums\" Text=\"Name\" ParentID=\"ParentId\" HasChildren=\"HasChild\" Expanded=\"Expanded\" IsChecked=\"IsChecked\"></TreeViewFieldsSettings>\n            </SfTreeView>\n             \n               @code{\n                public class MusicAlbum\n                {\n                    public int Id { get; set; }\n                    public int? ParentId { get; set; }\n                    public string Name { get; set; }\n                    public bool Expanded { get; set; }\n                    public bool? IsChecked { get; set; }\n                    public bool HasChild { get; set; }\n                }\n                SfTreeView<MusicAlbum> tree;\n                string[] CheckedNodes = new string[] { \"16\",\"18\" };\n                List<MusicAlbum> Albums = new List<MusicAlbum>();\n               protected override void OnInitialized()\n               {\n                    base.OnInitialized();\n                    Albums.Add(new MusicAlbum\n                 {\n                   Id = 14,\n                    HasChild = true,\n                    Name = \"MP3 Albums\",\n                    Expanded = true\n                });\n                 Albums.Add(new MusicAlbum\n                {\n                    Id = 15,\n                    ParentId = 14,\n                    Name = \"Rock\"\n                });\n                 Albums.Add(new MusicAlbum\n                {\n                     Id = 16,\n                     Name = \"Gospel\",\n                     ParentId = 14,\n                 });\n                Albums.Add(new MusicAlbum\n                {\n                     Id = 17,\n                     ParentId = 14,\n                     Name = \"Latin Music\"\n                });\n                Albums.Add(new MusicAlbum\n                {\n                    Id = 18,\n                    ParentId = 14,\n                    Name = \"Jazz\"\n                 });\n                }\n             } \n            ]]></code>         \n             </example> \n        ","Metadata":{"Common.PropertyName":"CheckedNodes"}},{"Kind":"Components.Component","Name":"CheckedNodesChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the checked nodes changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckedNodesChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n             <summary> \n             Gets or sets one or more CSS classes to customize the appearance of TreeView. \n             </summary> \n             <value> \n             Accepts a CSS class string separated by space to customize the appearance of TreeView. The default value is <c>String.Empty</c>. \n             </value> \n             <remarks> \n             Setting styles through CssClass will be reflected in the corresponding TreeView. \n             </remarks>\n             <example> \n             A TreeView with custom class attribute.\n             <code><![CDATA[ \n             <SfTreeView TValue=\"MusicAlbum\" CssClass=\"e-custom e-tree\">\n             <TreeViewFieldsSettings TValue=\"MusicAlbum\" Id=\"Id\" DataSource=\"@Albums\" Text=\"Name\" ParentID=\"ParentId\" HasChildren=\"HasChild\" Expanded=\"Expanded\" IsChecked=\"IsChecked\"></TreeViewFieldsSettings>\n            </SfTreeView>\n             \n               @code{\n                public class MusicAlbum\n                {\n                    public int Id { get; set; }\n                    public int? ParentId { get; set; }\n                    public string Name { get; set; }\n                    public bool Expanded { get; set; }\n                    public bool? IsChecked { get; set; }\n                    public bool HasChild { get; set; }\n                }\n                SfTreeView<MusicAlbum> tree;\n                List<MusicAlbum> Albums = new List<MusicAlbum>();\n               protected override void OnInitialized()\n               {\n                    base.OnInitialized();\n                    Albums.Add(new MusicAlbum\n                 {\n                   Id = 14,\n                    HasChild = true,\n                    Name = \"MP3 Albums\",\n                    Expanded = true\n                });\n                 Albums.Add(new MusicAlbum\n                {\n                    Id = 15,\n                    ParentId = 14,\n                    Name = \"Rock\"\n                });\n                 Albums.Add(new MusicAlbum\n                {\n                     Id = 16,\n                     Name = \"Gospel\",\n                     ParentId = 14,\n                 });\n                Albums.Add(new MusicAlbum\n                {\n                     Id = 17,\n                     ParentId = 14,\n                     Name = \"Latin Music\"\n                });\n                Albums.Add(new MusicAlbum\n                {\n                    Id = 18,\n                    ParentId = 14,\n                    Name = \"Jazz\"\n                 });\n                }\n               }\n                <style>\n                .e-custom .e-tree {\n                  padding: 10px 0;\n                  font-weight: 800;\n                }\n                .custom.e-treeview .e-fullrow {\n                  height: 200px;\n                }\n                </ style >\n            ]]></code>         \n             </example> \n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the TreeView component.\n            </summary>\n            <value> \n            <c>true</c>, if the TreeView component is disabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            When set to true, the user interaction with the TreeView will be prevented. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"DropArea","TypeName":"System.String","Documentation":"\n             <summary>\n             Gets or sets the target in which the draggable element can be moved and dropped.\n             </summary>\n             <remarks> \n             By default, the draggable element movement occurs in the page.\n             </remarks> \n             <example> \n             A TreeView with drop area target attribute.\n             <code><![CDATA[ \n             <div class=\"treeParent\">\n                 <SfTreeView TValue=\"MusicAlbum\" DropArea=\".treeParent\">\n                     <TreeViewFieldsSettings TValue=\"MusicAlbum\" Id=\"Id\" DataSource=\"@Albums\" Text=\"Name\" ParentID=\"ParentId\" HasChildren=\"HasChild\" Expanded=\"Expanded\" IsChecked=\"IsChecked\"></TreeViewFieldsSettings>\n                 </SfTreeView>\n             <div>\n               @code{\n                public class MusicAlbum\n                {\n                    public int Id { get; set; }\n                    public int? ParentId { get; set; }\n                    public string Name { get; set; }\n                    public bool Expanded { get; set; }\n                    public bool? IsChecked { get; set; }\n                    public bool HasChild { get; set; }\n                }\n                SfTreeView<MusicAlbum> tree;\n                List<MusicAlbum> Albums = new List<MusicAlbum>();\n               protected override void OnInitialized()\n               {\n                    base.OnInitialized();\n                    Albums.Add(new MusicAlbum\n                 {\n                   Id = 14,\n                    HasChild = true,\n                    Name = \"MP3 Albums\",\n                    Expanded = true\n                });\n                 Albums.Add(new MusicAlbum\n                {\n                    Id = 15,\n                    ParentId = 14,\n                    Name = \"Rock\"\n                });\n                 Albums.Add(new MusicAlbum\n                {\n                     Id = 16,\n                     Name = \"Gospel\",\n                     ParentId = 14,\n                 });\n                Albums.Add(new MusicAlbum\n                {\n                     Id = 17,\n                     ParentId = 14,\n                     Name = \"Latin Music\"\n                });\n                Albums.Add(new MusicAlbum\n                {\n                    Id = 18,\n                    ParentId = 14,\n                    Name = \"Jazz\"\n                 });\n                }\n               }\n                <style>\n                .treeParent {\n                  height: 200px;\n                  width: 200px;\n                 }   \n                </ style > \n            ]]></code>         \n             </example> \n        ","Metadata":{"Common.PropertyName":"DropArea"}},{"Kind":"Components.Component","Name":"EnableHtmlSanitizer","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to allow the cross-scripting site or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableHtmlSanitizer"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            The following component's property will be stored in browser local storage to persist component's state when page reloads.\n            1. `SelectedNodes` - Represents the nodes that are selected in the TreeView component.\n            2. `checkedNodes`  - Represents the nodes that are checked in the TreeView component.\n            3. `expandedNodes` - Represents the nodes that are expanded in the TreeView component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right to left direction is enabled for TreeView component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for TreeView component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"ExpandOn","TypeName":"Syncfusion.Blazor.Navigations.ExpandAction","IsEnum":true,"Documentation":"\n             <summary>\n              Gets or sets the value that indicates the action on which the node expands or collapses.\n             </summary> \n             <value>\n             The default value is <c>DblClick</c>.\n             </value>\n             <remarks>\n              The available actions:\n              `Click` - The expand/collapse operation happens when you single-click on the node in desktop.\n              `DblClick` - The expand/collapse operation happens when you double-click on the node in desktop.\n              `None` - The expand/collapse operation will not happen.\n              In mobile devices, the node expand/collapse action happens on single tap.\n             </remarks>\n             <example> \n             A TreeView with ExpandOn attribute. \n             Here ExpandOn attribute is set to single click.\n             <code><![CDATA[ \n             <SfTreeView TValue=\"MusicAlbum\" ExpandOn=\"ExpandAction.Click\">\n                <TreeViewFieldsSettings TValue=\"MusicAlbum\" Id=\"Id\" DataSource=\"@Albums\" Text=\"Name\" ParentID=\"ParentId\" HasChildren=\"HasChild\" Expanded=\"Expanded\" IsChecked=\"IsChecked\"></TreeViewFieldsSettings>\n             </SfTreeView>\n               @code{\n                public class MusicAlbum\n                {\n                    public int Id { get; set; }\n                    public int? ParentId { get; set; }\n                    public string Name { get; set; }\n                    public bool Expanded { get; set; }\n                    public bool? IsChecked { get; set; }\n                    public bool HasChild { get; set; }\n                }\n                SfTreeView<MusicAlbum> tree;\n                List<MusicAlbum> Albums = new List<MusicAlbum>();\n               protected override void OnInitialized()\n               {\n                    base.OnInitialized();\n                    Albums.Add(new MusicAlbum\n                 {\n                   Id = 14,\n                    HasChild = true,\n                    Name = \"MP3 Albums\",\n                    Expanded = true\n                });\n                 Albums.Add(new MusicAlbum\n                {\n                    Id = 15,\n                    ParentId = 14,\n                    Name = \"Rock\"\n                });\n                 Albums.Add(new MusicAlbum\n                {\n                     Id = 16,\n                     Name = \"Gospel\",\n                     ParentId = 14,\n                 });\n                Albums.Add(new MusicAlbum\n                {\n                     Id = 17,\n                     ParentId = 14,\n                     Name = \"Latin Music\"\n                });\n                Albums.Add(new MusicAlbum\n                {\n                    Id = 18,\n                    ParentId = 14,\n                    Name = \"Jazz\"\n                 });\n                }\n              } \n            ]]></code>         \n             </example> \n        ","Metadata":{"Common.PropertyName":"ExpandOn"}},{"Kind":"Components.Component","Name":"ExpandedNodes","TypeName":"System.String[]","Documentation":"\n             <summary>\n             Gets or sets the ID of expanded nodes in the TreeView component.\n             </summary>\n             <value> \n             Pass the node's ID as string array collection.\n             </value> \n             <remarks> \n             Supports two-way binding. This property returns the expanded nodes ID in the TreeView component.\n             </remarks> \n             <example> \n             A TreeView with expanded nodes.\n             <code><![CDATA[ \n             <SfTreeView TValue=\"MusicAlbum\" ShowCheckBox=\"true\" @bind-ExpandedNodes=\"@ExpandedNodes\">\n             <TreeViewFieldsSettings TValue=\"MusicAlbum\" Id=\"Id\" DataSource=\"@Albums\" Text=\"Name\" ParentID=\"ParentId\" HasChildren=\"HasChild\" Expanded=\"Expanded\" IsChecked=\"IsChecked\"></TreeViewFieldsSettings>\n            </SfTreeView>\n             \n               @code{\n                public class MusicAlbum\n                {\n                    public int Id { get; set; }\n                    public int? ParentId { get; set; }\n                    public string Name { get; set; }\n                    public bool Expanded { get; set; }\n                    public bool? IsChecked { get; set; }\n                    public bool HasChild { get; set; }\n                }\n                SfTreeView<MusicAlbum> tree;\n                string[] ExpandedNodes = new string[] { \"16\",\"18\" };\n                List<MusicAlbum> Albums = new List<MusicAlbum>();\n               protected override void OnInitialized()\n               {\n                    base.OnInitialized();\n                    Albums.Add(new MusicAlbum\n                 {\n                   Id = 14,\n                    HasChild = true,\n                    Name = \"MP3 Albums\"\n                });\n                 Albums.Add(new MusicAlbum\n                {\n                    Id = 15,\n                    ParentId = 14,\n                    Name = \"Rock\"\n                });\n                 Albums.Add(new MusicAlbum\n                {\n                     Id = 16,\n                     Name = \"Gospel\",\n                     ParentId = 14,\n                 });\n                Albums.Add(new MusicAlbum\n                {\n                     Id = 17,\n                     ParentId = 14,\n                     Name = \"Latin Music\"\n                });\n                Albums.Add(new MusicAlbum\n                {\n                    Id = 18,\n                    ParentId = 14,\n                    Name = \"Jazz\"\n                 });\n                }\n             } \n            ]]></code>         \n             </example> \n        ","Metadata":{"Common.PropertyName":"ExpandedNodes"}},{"Kind":"Components.Component","Name":"ExpandedNodesChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the expanded nodes changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExpandedNodesChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Fields","TypeName":"Syncfusion.Blazor.Navigations.TreeViewFieldsSettings<TValue>","Documentation":"\n            <summary>\n            Gets or sets the data source and mapping fields to render TreeView nodes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Fields","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"FullRowNavigable","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the value that indicates whether the entire TreeView node will be navigate-able instead of text element.\n            </summary>\n            <value>\n            'true' to make the entire TreeView node navigate-able; Otherwise 'false'. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            When this property is set to true, the navigation occurs when clicked on any part of the TreeView node. \n            Otherwise the navigation occurs while clicking on the TreeView node's text only.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FullRowNavigable"}},{"Kind":"Components.Component","Name":"FullRowSelect","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the value that indicates whether the entire row of the TreeView node gets selected by clicking a node.\n            </summary>\n            <value>\n            'true' to select the entire node; otherwise,node's text section only selected. The default value is <c>true</c>.\n            </value>\n            <remarks>\n            The entire tree node can be selectable if the property is set to true. Otherwise, the node's text section can be selected while select a node.\n            </remarks>     \n        ","Metadata":{"Common.PropertyName":"FullRowSelect"}},{"Kind":"Components.Component","Name":"LoadOnDemand","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether child nodes will be rendered while expand and collapse of parent node instead of loading all the tree nodes initially.\n            </summary>\n            <value>\n            'true' to load the child nodes dynamically on expand a parent node; Otherwise,'false'. The default value is <c>true</c>.\n            </value>\n            <remarks>\n            By default, the load on demand (Lazy load) is set to true. So, all the child nodes are rendered dynamically while expanding a parent node. By disabling this property, all the child nodes are rendered on initial loading itself.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"LoadOnDemand"}},{"Kind":"Components.Component","Name":"SelectedNodes","TypeName":"System.String[]","Documentation":"\n             <summary>\n             Gets or sets the ID of selected nodes in the TreeView component.\n             </summary>\n             <value> \n             Pass the node's ID as string array collection.\n             </value> \n             <remarks> \n             Supports two-way binding. This property returns the selected nodes ID in the TreeView component.\n             </remarks> \n             <example> \n             A TreeView with expanded nodes.\n             <code><![CDATA[ \n             <SfTreeView TValue=\"MusicAlbum\" @bind-SelectedNodes=\"@SelectedNodes\">\n             <TreeViewFieldsSettings TValue=\"MusicAlbum\" Id=\"Id\" DataSource=\"@Albums\" Text=\"Name\" ParentID=\"ParentId\" HasChildren=\"HasChild\" Expanded=\"Expanded\" IsChecked=\"IsChecked\"></TreeViewFieldsSettings>\n            </SfTreeView>\n             \n               @code{\n                public class MusicAlbum\n                {\n                    public int Id { get; set; }\n                    public int? ParentId { get; set; }\n                    public string Name { get; set; }\n                    public bool Expanded { get; set; }\n                    public bool? IsChecked { get; set; }\n                    public bool HasChild { get; set; }\n                }\n                SfTreeView<MusicAlbum> tree;\n                string[] SelectedNodes = new string[] { \"16\",\"18\" };\n                List<MusicAlbum> Albums = new List<MusicAlbum>();\n               protected override void OnInitialized()\n               {\n                    base.OnInitialized();\n                    Albums.Add(new MusicAlbum\n                 {\n                   Id = 14,\n                    HasChild = true,\n                    Name = \"MP3 Albums\"\n                });\n                 Albums.Add(new MusicAlbum\n                {\n                    Id = 15,\n                    ParentId = 14,\n                    Name = \"Rock\"\n                });\n                 Albums.Add(new MusicAlbum\n                {\n                     Id = 16,\n                     Name = \"Gospel\",\n                     ParentId = 14,\n                 });\n                Albums.Add(new MusicAlbum\n                {\n                     Id = 17,\n                     ParentId = 14,\n                     Name = \"Latin Music\"\n                });\n                Albums.Add(new MusicAlbum\n                {\n                    Id = 18,\n                    ParentId = 14,\n                    Name = \"Jazz\"\n                 });\n                }\n             } \n            ]]></code>         \n             </example> \n        ","Metadata":{"Common.PropertyName":"SelectedNodes"}},{"Kind":"Components.Component","Name":"SelectedNodesChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the selected nodes changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectedNodesChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ShowCheckBox","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether show checkboxes in each node of the TreeView.\n            The checkbox displays next to the expand/collapse icon of the node.\n            </summary>\n            <value>\n            'true' to show checkboxes on each tree view nodes; otherwise, 'false'. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            The property used to show or hide the checkboxes in tree node. The checkbox has tri-state behavior such as checked, unchecked, and indeterminate.\n            The check/uncheck action can be performed either through checkbox click or pressing space key.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ShowCheckBox"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.Navigations.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether the nodes are sorted in the ascending or descending order.\n            </summary>\n            <remarks>\n            The available types of sort order are,\n             `None` - The nodes are not sorted.\n             `Ascending` - The nodes are sorted in the ascending order.\n             `Descending` - The nodes are sorted in the descending order.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"SortOrder"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets the HtmlAttributes for TreeView.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets id attribute for the TreeView element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>","Components.GenericTyped":"True"}},{"HashCode":-1141025431,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            The TreeView component is used to represent hierarchical data in a tree like structure with editing, drag and drop, checkboxes, expand and collapse, and more.\n            </summary>\n            <typeparam name=\"TValue\">\"TValue parameter\".</typeparam>\n            <summary>\n            Specifies the TreeView component.\n            </summary>\n            <summary>\n            The TreeView component is used to represent hierarchical data in a tree like structure with editing, drag and drop, checkboxes, expand and collapse, and more.\n            </summary>\n            <summary>\n            The TreeView component is used to represent hierarchical data in a tree like structure with editing, drag and drop, checkboxes, expand and collapse, and more.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfTreeView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.SfTreeView<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the content to display within a TreeView component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"AllowDragAndDrop","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the TreeView allows drag and drop of nodes to reordering the nodes. \n            </summary>\n            <value> \n            <c>true</c>, if drag and drop operation is allowed; otherwise 'false'. The default value is <c>false</c>. \n            </value> \n            <remarks>\n            In desktop device, drag and drop a node using mouse down on the node and drag it to the target node\n            and drop the node by releasing the mouse.\n            In touch device, drag and drop nodes using touch start, touch move and and touch end events.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowDragAndDrop"}},{"Kind":"Components.Component","Name":"AllowEditing","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether allow to edit a node's text by pressing F2 key or double-click on a TreeView node. \n            </summary>\n            <value> \n            <c>true</c>, if editing is allowed; otherwise 'false'. The default value is <c>false</c>. \n            </value> \n            <remarks>\n            When `AllowEditing` property is set to true, the TreeView allows to edit a node\n            by double clicking on the node or by navigating to the node and pressing F2 key. \n            When the property is set to false, the TreeView allows to read the node'text only. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowEditing"}},{"Kind":"Components.Component","Name":"AllowMultiSelection","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable multi-selection of nodes. \n            </summary>\n            <value> \n            <c>true</c>, if multiple nodes can be selected. The default value is <c>false</c>. \n            </value> \n            <remarks>\n            To select multiple nodes, select the nodes by holding down the CTRL key and clicking on the nodes.\n            To select consecutive nodes, select initial node and hold down the SHIFT key and click on the final node .\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowMultiSelection"}},{"Kind":"Components.Component","Name":"AllowTextWrap","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to wrap the node's text in the TreeView. \n            </summary>\n            <value> \n            <c>true</c>, if node's text can be wrapped around a node. The default value is <c>false</c>. \n            </value> \n            <remarks>\n            When the `AllowTextWrap` property is set to true, the TreeView node's text wrap to the next line\n            when its text content exceeds the width of the TreeView node.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AllowTextWrap"}},{"Kind":"Components.Component","Name":"Animation","TypeName":"Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings","Documentation":"\n            <summary>\n            Specifies the type of animation applied on expanding and collapsing the nodes along with duration.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Animation"}},{"Kind":"Components.Component","Name":"AutoCheck","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether allow to update a parent checkbox state based on child's checked state.\n            </summary>\n            <value> \n            'false' if the parent and child node relation is not required. The default value is <c>true</c>. \n            </value> \n            <remarks>\n            This property works when <see cref=\"P:Syncfusion.Blazor.Navigations.SfTreeView`1.ShowCheckBox\" /> is set to true.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"AutoCheck"}},{"Kind":"Components.Component","Name":"CheckedNodes","TypeName":"System.String[]","Documentation":"\n             <summary>\n             Gets or sets the ID of checked nodes in the TreeView component.\n             </summary>\n             <value> \n             Pass the node's ID as string array collection.\n             </value> \n             <remarks> \n             Supports two-way binding. This property returns the checked nodes ID in the TreeView component.\n             </remarks> \n             <example> \n             A TreeView with checked nodes.\n             <code><![CDATA[ \n             <SfTreeView TValue=\"MusicAlbum\" ShowCheckBox=\"true\" @bind-CheckedNodes=\"@CheckedNodes\">\n             <TreeViewFieldsSettings TValue=\"MusicAlbum\" Id=\"Id\" DataSource=\"@Albums\" Text=\"Name\" ParentID=\"ParentId\" HasChildren=\"HasChild\" Expanded=\"Expanded\" IsChecked=\"IsChecked\"></TreeViewFieldsSettings>\n            </SfTreeView>\n             \n               @code{\n                public class MusicAlbum\n                {\n                    public int Id { get; set; }\n                    public int? ParentId { get; set; }\n                    public string Name { get; set; }\n                    public bool Expanded { get; set; }\n                    public bool? IsChecked { get; set; }\n                    public bool HasChild { get; set; }\n                }\n                SfTreeView<MusicAlbum> tree;\n                string[] CheckedNodes = new string[] { \"16\",\"18\" };\n                List<MusicAlbum> Albums = new List<MusicAlbum>();\n               protected override void OnInitialized()\n               {\n                    base.OnInitialized();\n                    Albums.Add(new MusicAlbum\n                 {\n                   Id = 14,\n                    HasChild = true,\n                    Name = \"MP3 Albums\",\n                    Expanded = true\n                });\n                 Albums.Add(new MusicAlbum\n                {\n                    Id = 15,\n                    ParentId = 14,\n                    Name = \"Rock\"\n                });\n                 Albums.Add(new MusicAlbum\n                {\n                     Id = 16,\n                     Name = \"Gospel\",\n                     ParentId = 14,\n                 });\n                Albums.Add(new MusicAlbum\n                {\n                     Id = 17,\n                     ParentId = 14,\n                     Name = \"Latin Music\"\n                });\n                Albums.Add(new MusicAlbum\n                {\n                    Id = 18,\n                    ParentId = 14,\n                    Name = \"Jazz\"\n                 });\n                }\n             } \n            ]]></code>         \n             </example> \n        ","Metadata":{"Common.PropertyName":"CheckedNodes"}},{"Kind":"Components.Component","Name":"CheckedNodesChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the checked nodes changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CheckedNodesChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n             <summary> \n             Gets or sets one or more CSS classes to customize the appearance of TreeView. \n             </summary> \n             <value> \n             Accepts a CSS class string separated by space to customize the appearance of TreeView. The default value is <c>String.Empty</c>. \n             </value> \n             <remarks> \n             Setting styles through CssClass will be reflected in the corresponding TreeView. \n             </remarks>\n             <example> \n             A TreeView with custom class attribute.\n             <code><![CDATA[ \n             <SfTreeView TValue=\"MusicAlbum\" CssClass=\"e-custom e-tree\">\n             <TreeViewFieldsSettings TValue=\"MusicAlbum\" Id=\"Id\" DataSource=\"@Albums\" Text=\"Name\" ParentID=\"ParentId\" HasChildren=\"HasChild\" Expanded=\"Expanded\" IsChecked=\"IsChecked\"></TreeViewFieldsSettings>\n            </SfTreeView>\n             \n               @code{\n                public class MusicAlbum\n                {\n                    public int Id { get; set; }\n                    public int? ParentId { get; set; }\n                    public string Name { get; set; }\n                    public bool Expanded { get; set; }\n                    public bool? IsChecked { get; set; }\n                    public bool HasChild { get; set; }\n                }\n                SfTreeView<MusicAlbum> tree;\n                List<MusicAlbum> Albums = new List<MusicAlbum>();\n               protected override void OnInitialized()\n               {\n                    base.OnInitialized();\n                    Albums.Add(new MusicAlbum\n                 {\n                   Id = 14,\n                    HasChild = true,\n                    Name = \"MP3 Albums\",\n                    Expanded = true\n                });\n                 Albums.Add(new MusicAlbum\n                {\n                    Id = 15,\n                    ParentId = 14,\n                    Name = \"Rock\"\n                });\n                 Albums.Add(new MusicAlbum\n                {\n                     Id = 16,\n                     Name = \"Gospel\",\n                     ParentId = 14,\n                 });\n                Albums.Add(new MusicAlbum\n                {\n                     Id = 17,\n                     ParentId = 14,\n                     Name = \"Latin Music\"\n                });\n                Albums.Add(new MusicAlbum\n                {\n                    Id = 18,\n                    ParentId = 14,\n                    Name = \"Jazz\"\n                 });\n                }\n               }\n                <style>\n                .e-custom .e-tree {\n                  padding: 10px 0;\n                  font-weight: 800;\n                }\n                .custom.e-treeview .e-fullrow {\n                  height: 200px;\n                }\n                </ style >\n            ]]></code>         \n             </example> \n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the TreeView component.\n            </summary>\n            <value> \n            <c>true</c>, if the TreeView component is disabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            When set to true, the user interaction with the TreeView will be prevented. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"DropArea","TypeName":"System.String","Documentation":"\n             <summary>\n             Gets or sets the target in which the draggable element can be moved and dropped.\n             </summary>\n             <remarks> \n             By default, the draggable element movement occurs in the page.\n             </remarks> \n             <example> \n             A TreeView with drop area target attribute.\n             <code><![CDATA[ \n             <div class=\"treeParent\">\n                 <SfTreeView TValue=\"MusicAlbum\" DropArea=\".treeParent\">\n                     <TreeViewFieldsSettings TValue=\"MusicAlbum\" Id=\"Id\" DataSource=\"@Albums\" Text=\"Name\" ParentID=\"ParentId\" HasChildren=\"HasChild\" Expanded=\"Expanded\" IsChecked=\"IsChecked\"></TreeViewFieldsSettings>\n                 </SfTreeView>\n             <div>\n               @code{\n                public class MusicAlbum\n                {\n                    public int Id { get; set; }\n                    public int? ParentId { get; set; }\n                    public string Name { get; set; }\n                    public bool Expanded { get; set; }\n                    public bool? IsChecked { get; set; }\n                    public bool HasChild { get; set; }\n                }\n                SfTreeView<MusicAlbum> tree;\n                List<MusicAlbum> Albums = new List<MusicAlbum>();\n               protected override void OnInitialized()\n               {\n                    base.OnInitialized();\n                    Albums.Add(new MusicAlbum\n                 {\n                   Id = 14,\n                    HasChild = true,\n                    Name = \"MP3 Albums\",\n                    Expanded = true\n                });\n                 Albums.Add(new MusicAlbum\n                {\n                    Id = 15,\n                    ParentId = 14,\n                    Name = \"Rock\"\n                });\n                 Albums.Add(new MusicAlbum\n                {\n                     Id = 16,\n                     Name = \"Gospel\",\n                     ParentId = 14,\n                 });\n                Albums.Add(new MusicAlbum\n                {\n                     Id = 17,\n                     ParentId = 14,\n                     Name = \"Latin Music\"\n                });\n                Albums.Add(new MusicAlbum\n                {\n                    Id = 18,\n                    ParentId = 14,\n                    Name = \"Jazz\"\n                 });\n                }\n               }\n                <style>\n                .treeParent {\n                  height: 200px;\n                  width: 200px;\n                 }   \n                </ style > \n            ]]></code>         \n             </example> \n        ","Metadata":{"Common.PropertyName":"DropArea"}},{"Kind":"Components.Component","Name":"EnableHtmlSanitizer","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to allow the cross-scripting site or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableHtmlSanitizer"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether to persist component's state between page reloads.\n            </summary>\n            <value>\n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            The following component's property will be stored in browser local storage to persist component's state when page reloads.\n            1. `SelectedNodes` - Represents the nodes that are selected in the TreeView component.\n            2. `checkedNodes`  - Represents the nodes that are checked in the TreeView component.\n            3. `expandedNodes` - Represents the nodes that are expanded in the TreeView component.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets whether the right to left direction is enabled for TreeView component.\n            </summary>\n            <value>\n            <c>true</c>, if the right to left direction is enabled for TreeView component. The default value is <c>false</c>.\n            </value>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"ExpandOn","TypeName":"Syncfusion.Blazor.Navigations.ExpandAction","IsEnum":true,"Documentation":"\n             <summary>\n              Gets or sets the value that indicates the action on which the node expands or collapses.\n             </summary> \n             <value>\n             The default value is <c>DblClick</c>.\n             </value>\n             <remarks>\n              The available actions:\n              `Click` - The expand/collapse operation happens when you single-click on the node in desktop.\n              `DblClick` - The expand/collapse operation happens when you double-click on the node in desktop.\n              `None` - The expand/collapse operation will not happen.\n              In mobile devices, the node expand/collapse action happens on single tap.\n             </remarks>\n             <example> \n             A TreeView with ExpandOn attribute. \n             Here ExpandOn attribute is set to single click.\n             <code><![CDATA[ \n             <SfTreeView TValue=\"MusicAlbum\" ExpandOn=\"ExpandAction.Click\">\n                <TreeViewFieldsSettings TValue=\"MusicAlbum\" Id=\"Id\" DataSource=\"@Albums\" Text=\"Name\" ParentID=\"ParentId\" HasChildren=\"HasChild\" Expanded=\"Expanded\" IsChecked=\"IsChecked\"></TreeViewFieldsSettings>\n             </SfTreeView>\n               @code{\n                public class MusicAlbum\n                {\n                    public int Id { get; set; }\n                    public int? ParentId { get; set; }\n                    public string Name { get; set; }\n                    public bool Expanded { get; set; }\n                    public bool? IsChecked { get; set; }\n                    public bool HasChild { get; set; }\n                }\n                SfTreeView<MusicAlbum> tree;\n                List<MusicAlbum> Albums = new List<MusicAlbum>();\n               protected override void OnInitialized()\n               {\n                    base.OnInitialized();\n                    Albums.Add(new MusicAlbum\n                 {\n                   Id = 14,\n                    HasChild = true,\n                    Name = \"MP3 Albums\",\n                    Expanded = true\n                });\n                 Albums.Add(new MusicAlbum\n                {\n                    Id = 15,\n                    ParentId = 14,\n                    Name = \"Rock\"\n                });\n                 Albums.Add(new MusicAlbum\n                {\n                     Id = 16,\n                     Name = \"Gospel\",\n                     ParentId = 14,\n                 });\n                Albums.Add(new MusicAlbum\n                {\n                     Id = 17,\n                     ParentId = 14,\n                     Name = \"Latin Music\"\n                });\n                Albums.Add(new MusicAlbum\n                {\n                    Id = 18,\n                    ParentId = 14,\n                    Name = \"Jazz\"\n                 });\n                }\n              } \n            ]]></code>         \n             </example> \n        ","Metadata":{"Common.PropertyName":"ExpandOn"}},{"Kind":"Components.Component","Name":"ExpandedNodes","TypeName":"System.String[]","Documentation":"\n             <summary>\n             Gets or sets the ID of expanded nodes in the TreeView component.\n             </summary>\n             <value> \n             Pass the node's ID as string array collection.\n             </value> \n             <remarks> \n             Supports two-way binding. This property returns the expanded nodes ID in the TreeView component.\n             </remarks> \n             <example> \n             A TreeView with expanded nodes.\n             <code><![CDATA[ \n             <SfTreeView TValue=\"MusicAlbum\" ShowCheckBox=\"true\" @bind-ExpandedNodes=\"@ExpandedNodes\">\n             <TreeViewFieldsSettings TValue=\"MusicAlbum\" Id=\"Id\" DataSource=\"@Albums\" Text=\"Name\" ParentID=\"ParentId\" HasChildren=\"HasChild\" Expanded=\"Expanded\" IsChecked=\"IsChecked\"></TreeViewFieldsSettings>\n            </SfTreeView>\n             \n               @code{\n                public class MusicAlbum\n                {\n                    public int Id { get; set; }\n                    public int? ParentId { get; set; }\n                    public string Name { get; set; }\n                    public bool Expanded { get; set; }\n                    public bool? IsChecked { get; set; }\n                    public bool HasChild { get; set; }\n                }\n                SfTreeView<MusicAlbum> tree;\n                string[] ExpandedNodes = new string[] { \"16\",\"18\" };\n                List<MusicAlbum> Albums = new List<MusicAlbum>();\n               protected override void OnInitialized()\n               {\n                    base.OnInitialized();\n                    Albums.Add(new MusicAlbum\n                 {\n                   Id = 14,\n                    HasChild = true,\n                    Name = \"MP3 Albums\"\n                });\n                 Albums.Add(new MusicAlbum\n                {\n                    Id = 15,\n                    ParentId = 14,\n                    Name = \"Rock\"\n                });\n                 Albums.Add(new MusicAlbum\n                {\n                     Id = 16,\n                     Name = \"Gospel\",\n                     ParentId = 14,\n                 });\n                Albums.Add(new MusicAlbum\n                {\n                     Id = 17,\n                     ParentId = 14,\n                     Name = \"Latin Music\"\n                });\n                Albums.Add(new MusicAlbum\n                {\n                    Id = 18,\n                    ParentId = 14,\n                    Name = \"Jazz\"\n                 });\n                }\n             } \n            ]]></code>         \n             </example> \n        ","Metadata":{"Common.PropertyName":"ExpandedNodes"}},{"Kind":"Components.Component","Name":"ExpandedNodesChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the expanded nodes changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ExpandedNodesChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Fields","TypeName":"Syncfusion.Blazor.Navigations.TreeViewFieldsSettings<TValue>","Documentation":"\n            <summary>\n            Gets or sets the data source and mapping fields to render TreeView nodes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Fields","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"FullRowNavigable","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the value that indicates whether the entire TreeView node will be navigate-able instead of text element.\n            </summary>\n            <value>\n            'true' to make the entire TreeView node navigate-able; Otherwise 'false'. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            When this property is set to true, the navigation occurs when clicked on any part of the TreeView node. \n            Otherwise the navigation occurs while clicking on the TreeView node's text only.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"FullRowNavigable"}},{"Kind":"Components.Component","Name":"FullRowSelect","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the value that indicates whether the entire row of the TreeView node gets selected by clicking a node.\n            </summary>\n            <value>\n            'true' to select the entire node; otherwise,node's text section only selected. The default value is <c>true</c>.\n            </value>\n            <remarks>\n            The entire tree node can be selectable if the property is set to true. Otherwise, the node's text section can be selected while select a node.\n            </remarks>     \n        ","Metadata":{"Common.PropertyName":"FullRowSelect"}},{"Kind":"Components.Component","Name":"LoadOnDemand","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether child nodes will be rendered while expand and collapse of parent node instead of loading all the tree nodes initially.\n            </summary>\n            <value>\n            'true' to load the child nodes dynamically on expand a parent node; Otherwise,'false'. The default value is <c>true</c>.\n            </value>\n            <remarks>\n            By default, the load on demand (Lazy load) is set to true. So, all the child nodes are rendered dynamically while expanding a parent node. By disabling this property, all the child nodes are rendered on initial loading itself.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"LoadOnDemand"}},{"Kind":"Components.Component","Name":"SelectedNodes","TypeName":"System.String[]","Documentation":"\n             <summary>\n             Gets or sets the ID of selected nodes in the TreeView component.\n             </summary>\n             <value> \n             Pass the node's ID as string array collection.\n             </value> \n             <remarks> \n             Supports two-way binding. This property returns the selected nodes ID in the TreeView component.\n             </remarks> \n             <example> \n             A TreeView with expanded nodes.\n             <code><![CDATA[ \n             <SfTreeView TValue=\"MusicAlbum\" @bind-SelectedNodes=\"@SelectedNodes\">\n             <TreeViewFieldsSettings TValue=\"MusicAlbum\" Id=\"Id\" DataSource=\"@Albums\" Text=\"Name\" ParentID=\"ParentId\" HasChildren=\"HasChild\" Expanded=\"Expanded\" IsChecked=\"IsChecked\"></TreeViewFieldsSettings>\n            </SfTreeView>\n             \n               @code{\n                public class MusicAlbum\n                {\n                    public int Id { get; set; }\n                    public int? ParentId { get; set; }\n                    public string Name { get; set; }\n                    public bool Expanded { get; set; }\n                    public bool? IsChecked { get; set; }\n                    public bool HasChild { get; set; }\n                }\n                SfTreeView<MusicAlbum> tree;\n                string[] SelectedNodes = new string[] { \"16\",\"18\" };\n                List<MusicAlbum> Albums = new List<MusicAlbum>();\n               protected override void OnInitialized()\n               {\n                    base.OnInitialized();\n                    Albums.Add(new MusicAlbum\n                 {\n                   Id = 14,\n                    HasChild = true,\n                    Name = \"MP3 Albums\"\n                });\n                 Albums.Add(new MusicAlbum\n                {\n                    Id = 15,\n                    ParentId = 14,\n                    Name = \"Rock\"\n                });\n                 Albums.Add(new MusicAlbum\n                {\n                     Id = 16,\n                     Name = \"Gospel\",\n                     ParentId = 14,\n                 });\n                Albums.Add(new MusicAlbum\n                {\n                     Id = 17,\n                     ParentId = 14,\n                     Name = \"Latin Music\"\n                });\n                Albums.Add(new MusicAlbum\n                {\n                    Id = 18,\n                    ParentId = 14,\n                    Name = \"Jazz\"\n                 });\n                }\n             } \n            ]]></code>         \n             </example> \n        ","Metadata":{"Common.PropertyName":"SelectedNodes"}},{"Kind":"Components.Component","Name":"SelectedNodesChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the selected nodes changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectedNodesChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ShowCheckBox","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether show checkboxes in each node of the TreeView.\n            The checkbox displays next to the expand/collapse icon of the node.\n            </summary>\n            <value>\n            'true' to show checkboxes on each tree view nodes; otherwise, 'false'. The default value is <c>false</c>.\n            </value>\n            <remarks>\n            The property used to show or hide the checkboxes in tree node. The checkbox has tri-state behavior such as checked, unchecked, and indeterminate.\n            The check/uncheck action can be performed either through checkbox click or pressing space key.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"ShowCheckBox"}},{"Kind":"Components.Component","Name":"SortOrder","TypeName":"Syncfusion.Blazor.Navigations.SortOrder","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether the nodes are sorted in the ascending or descending order.\n            </summary>\n            <remarks>\n            The available types of sort order are,\n             `None` - The nodes are not sorted.\n             `Ascending` - The nodes are sorted in the ascending order.\n             `Descending` - The nodes are sorted in the descending order.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"SortOrder"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets the HtmlAttributes for TreeView.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary>\n            Sets id attribute for the TreeView element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ID"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2010725184,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the content to display within a TreeView component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfTreeView"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":315962471,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the content to display within a TreeView component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.SfTreeView"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-983557156,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TreeViewAnimationCollapse","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the animation to appear while collapsing the TreeView item.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TreeViewAnimationCollapse"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation effect for collapsing the TreeView node.\n            Default animation is given as SlideUp. You can also disable the animation by setting the animation effect as None.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect"}},{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time duration to transform content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the easing effect applied when transforming the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewAnimationCollapse"}},{"HashCode":1262587398,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TreeViewAnimationCollapse","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the animation to appear while collapsing the TreeView item.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.TreeViewAnimationCollapse"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation effect for collapsing the TreeView node.\n            Default animation is given as SlideUp. You can also disable the animation by setting the animation effect as None.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect"}},{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time duration to transform content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the easing effect applied when transforming the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewAnimationCollapse","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-858822941,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TreeViewAnimationExpand","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the animation to appear while expanding the TreeView item.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TreeViewAnimationExpand"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation effect for expanding the TreeView node.\n            Default animation is given as SlideDown. You can also disable the animation by setting the animation effect as None.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect"}},{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time duration to transform content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the easing effect applied when transforming the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewAnimationExpand"}},{"HashCode":930963150,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TreeViewAnimationExpand","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the animation to appear while expanding the TreeView item.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.TreeViewAnimationExpand"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation effect for expanding the TreeView node.\n            Default animation is given as SlideDown. You can also disable the animation by setting the animation effect as None.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect"}},{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time duration to transform content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the easing effect applied when transforming the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewAnimationExpand","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":139499089,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TreeViewEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            The TreeView allows us to control the component by using events.\n            </summary>\n            <typeparam name=\"TValue\">\"Tvalue paramter\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TreeViewEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.TreeViewEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.FailureEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised while any TreeView action failed to fetch the desired results.\n            </summary>\n            <remarks>\n            You can capture this failure and throw error message for users in required cases.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.ActionEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the TreeView component is created successfully.\n            </summary>\n            <remarks>\n            You can perform required actions during this component creation.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"DataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.DataBoundEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when data source is populated in the TreeView.\n            </summary>\n            <remarks>\n            The data can be modified or updated at this time when the component is updated with data source.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DataBound","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DataSourceChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.DataSourceChangedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when data source is changed in the TreeView. The data source will be changed after performing some operation like\n            drag and drop, node editing, adding and removing node.\n            </summary>\n            <remarks>\n            The data source change can be detected and the updated data can be fetched or stored in required cases.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DataSourceChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.ActionEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the TreeView control is destroyed successfully.\n            </summary>\n            <remarks>\n             Required actions can be performed once the component is destroyed.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnNodeRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeRenderEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before the TreeView node is appended to the TreeView element.\n            </summary>\n            <remarks>\n             A specific node can be customized at the time of rendering using this event.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OnNodeRender","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnKeyPress","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeKeyPressEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when key press is successful. \n            </summary>\n            <remarks>\n             Helps to customize the operations at key press.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OnKeyPress","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeChecked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeCheckEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the TreeView node is checked/unchecked successfully.\n            </summary>\n            <remarks>\n             The details of checked/unchecked node can be fetched and required actions can be performed using this event.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"NodeChecked","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeChecking","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeCheckEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before the TreeView node is to be checked/unchecked.\n            </summary>\n            <remarks>\n            Check/uncheck action can be prevented for specific nodes in required cases.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"NodeChecking","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeClicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeClickEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the TreeView node is clicked successfully.\n            </summary>\n            <remarks>\n            Required actions can be performed on node click using this event.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"NodeClicked","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeCollapsed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeExpandEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the TreeView node collapses successfully.\n            </summary>\n            <remarks>\n            Helps to identify that a node is collapsed and the collapsed node details can be fetched in this event.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"NodeCollapsed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeCollapsing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeExpandEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before the TreeView node collapses.\n            </summary>\n            <remarks>\n            Collapse action can be prevented for specific nodes in required cases.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"NodeCollapsing","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnNodeDragStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.DragAndDropEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the TreeView node drag (move) starts.\n            </summary>\n            <remarks>\n            Helps to identify the dragged node details.Dragging can be prevented for specific node in required cases.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OnNodeDragStart","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnNodeDragStop","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.DragAndDropEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the TreeView node dragging (move) stops.\n            </summary>\n            <remarks>\n            Helps to identify the node drag stop action.Dropped target can be fetched and used to perform required actions.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OnNodeDragStop","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnNodeDragged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.DragAndDropEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the TreeView node is dragged.\n            </summary>\n            <remarks>\n            Helps to identify the node drag action.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OnNodeDragged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeDropped","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.DragAndDropEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the TreeView node is dropped on target element successfully.\n            </summary>\n            <remarks>\n            Helps to identify the node drop action and the dropped index/target can be fetched to perform required actions.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"NodeDropped","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeEdited","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeEditEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the TreeView node is renamed successfully.\n            </summary>\n            <remarks>\n            Helps to identify that the node is edited successfully and the new edited text can be obtained here.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"NodeEdited","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeEditing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeEditEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before the TreeView node is renamed.\n            </summary>\n            <remarks>\n            Node editing can be prevented for specific nodes using this event.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"NodeEditing","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeExpanded","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeExpandEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the TreeView node expands successfully.\n            </summary>\n            <remarks>\n            Helps to identify that a node is expanded and the expanded node details can be fetched using this event.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"NodeExpanded","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeExpanding","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeExpandEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before the TreeView node is to be expanded.\n            </summary>\n            <remarks>\n            Expand action can be prevented for specific nodes in required cases using this event.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"NodeExpanding","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeSelectEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the TreeView node is selected/unselected successfully.\n            </summary>\n            <remarks>\n            Selected node details can be obtained here and updated to required places using this event.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"NodeSelected","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeSelecting","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeSelectEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before the TreeView node is selected/unselected.\n            </summary>\n            <remarks>\n            A specific node selection can be prevented using this event.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"NodeSelecting","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewEvents<TValue>","Components.GenericTyped":"True"}},{"HashCode":796863178,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TreeViewEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            The TreeView allows us to control the component by using events.\n            </summary>\n            <typeparam name=\"TValue\">\"Tvalue paramter\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.TreeViewEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.TreeViewEvents<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnActionFailure","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.FailureEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised while any TreeView action failed to fetch the desired results.\n            </summary>\n            <remarks>\n            You can capture this failure and throw error message for users in required cases.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OnActionFailure","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.ActionEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the TreeView component is created successfully.\n            </summary>\n            <remarks>\n            You can perform required actions during this component creation.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"DataBound","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.DataBoundEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when data source is populated in the TreeView.\n            </summary>\n            <remarks>\n            The data can be modified or updated at this time when the component is updated with data source.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DataBound","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"DataSourceChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.DataSourceChangedEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when data source is changed in the TreeView. The data source will be changed after performing some operation like\n            drag and drop, node editing, adding and removing node.\n            </summary>\n            <remarks>\n            The data source change can be detected and the updated data can be fetched or stored in required cases.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"DataSourceChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.ActionEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the TreeView control is destroyed successfully.\n            </summary>\n            <remarks>\n             Required actions can be performed once the component is destroyed.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnNodeRender","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeRenderEventArgs<TValue>>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before the TreeView node is appended to the TreeView element.\n            </summary>\n            <remarks>\n             A specific node can be customized at the time of rendering using this event.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OnNodeRender","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"OnKeyPress","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeKeyPressEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when key press is successful. \n            </summary>\n            <remarks>\n             Helps to customize the operations at key press.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OnKeyPress","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeChecked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeCheckEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the TreeView node is checked/unchecked successfully.\n            </summary>\n            <remarks>\n             The details of checked/unchecked node can be fetched and required actions can be performed using this event.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"NodeChecked","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeChecking","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeCheckEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before the TreeView node is to be checked/unchecked.\n            </summary>\n            <remarks>\n            Check/uncheck action can be prevented for specific nodes in required cases.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"NodeChecking","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeClicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeClickEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the TreeView node is clicked successfully.\n            </summary>\n            <remarks>\n            Required actions can be performed on node click using this event.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"NodeClicked","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeCollapsed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeExpandEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the TreeView node collapses successfully.\n            </summary>\n            <remarks>\n            Helps to identify that a node is collapsed and the collapsed node details can be fetched in this event.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"NodeCollapsed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeCollapsing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeExpandEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before the TreeView node collapses.\n            </summary>\n            <remarks>\n            Collapse action can be prevented for specific nodes in required cases.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"NodeCollapsing","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnNodeDragStart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.DragAndDropEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the TreeView node drag (move) starts.\n            </summary>\n            <remarks>\n            Helps to identify the dragged node details.Dragging can be prevented for specific node in required cases.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OnNodeDragStart","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnNodeDragStop","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.DragAndDropEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the TreeView node dragging (move) stops.\n            </summary>\n            <remarks>\n            Helps to identify the node drag stop action.Dropped target can be fetched and used to perform required actions.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OnNodeDragStop","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnNodeDragged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.DragAndDropEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the TreeView node is dragged.\n            </summary>\n            <remarks>\n            Helps to identify the node drag action.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"OnNodeDragged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeDropped","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.DragAndDropEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the TreeView node is dropped on target element successfully.\n            </summary>\n            <remarks>\n            Helps to identify the node drop action and the dropped index/target can be fetched to perform required actions.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"NodeDropped","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeEdited","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeEditEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the TreeView node is renamed successfully.\n            </summary>\n            <remarks>\n            Helps to identify that the node is edited successfully and the new edited text can be obtained here.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"NodeEdited","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeEditing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeEditEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before the TreeView node is renamed.\n            </summary>\n            <remarks>\n            Node editing can be prevented for specific nodes using this event.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"NodeEditing","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeExpanded","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeExpandEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the TreeView node expands successfully.\n            </summary>\n            <remarks>\n            Helps to identify that a node is expanded and the expanded node details can be fetched using this event.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"NodeExpanded","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeExpanding","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeExpandEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before the TreeView node is to be expanded.\n            </summary>\n            <remarks>\n            Expand action can be prevented for specific nodes in required cases using this event.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"NodeExpanding","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeSelected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeSelectEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the TreeView node is selected/unselected successfully.\n            </summary>\n            <remarks>\n            Selected node details can be obtained here and updated to required places using this event.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"NodeSelected","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"NodeSelecting","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.NodeSelectEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised before the TreeView node is selected/unselected.\n            </summary>\n            <remarks>\n            A specific node selection can be prevented using this event.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"NodeSelecting","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewEvents<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2126530450,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TreeViewFieldChild<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n             A class used for configuring the TreeView child element fields properties.\n            </summary>\n            <typeparam name=\"TValue\">\"Specifies the Tvalue paramater\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TreeViewFieldChild"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.TreeViewFieldChild<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the Treeview child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Child","TypeName":"System.String","Documentation":"\n            <summary>\n            Binds the field settings for child nodes or mapping field for nested nodes objects that contain array of JSON objects.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Child"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Specifies the array of JavaScript objects or instance of DataManager to populate the nodes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Expanded","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for expand state of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Expanded"}},{"Kind":"Components.Component","Name":"HasChildren","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for hasChildren to check whether a node has child nodes or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HasChildren"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for htmlAttributes to be added to the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for icon class of each TreeView node that will be added before the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the ID field mapped in dataSource.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"ImageUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for image URL of each TreeView node where image will be added before the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ImageUrl"}},{"Kind":"Components.Component","Name":"IsChecked","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the field for checked state of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsChecked"}},{"Kind":"Components.Component","Name":"NavigateUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for navigateUrl to be added as hyper-link of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NavigateUrl"}},{"Kind":"Components.Component","Name":"ParentID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the parent ID field mapped in dataSource.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ParentID"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            This paramter will execute along with data processing.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Query"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for selected state of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selected"}},{"Kind":"Components.Component","Name":"TableName","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the table name used to fetch data from a specific table in the server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TableName"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for text displayed as TreeView node's display text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for tooltip that will be displayed as hovering text of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Tooltip"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewFieldChild<TValue>","Components.GenericTyped":"True"}},{"HashCode":767931882,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TreeViewFieldChild<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n             A class used for configuring the TreeView child element fields properties.\n            </summary>\n            <typeparam name=\"TValue\">\"Specifies the Tvalue paramater\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.TreeViewFieldChild"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.TreeViewFieldChild<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the Treeview child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Child","TypeName":"System.String","Documentation":"\n            <summary>\n            Binds the field settings for child nodes or mapping field for nested nodes objects that contain array of JSON objects.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Child"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Specifies the array of JavaScript objects or instance of DataManager to populate the nodes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Expanded","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for expand state of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Expanded"}},{"Kind":"Components.Component","Name":"HasChildren","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for hasChildren to check whether a node has child nodes or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HasChildren"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for htmlAttributes to be added to the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for icon class of each TreeView node that will be added before the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the ID field mapped in dataSource.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"ImageUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for image URL of each TreeView node where image will be added before the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ImageUrl"}},{"Kind":"Components.Component","Name":"IsChecked","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the field for checked state of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsChecked"}},{"Kind":"Components.Component","Name":"NavigateUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for navigateUrl to be added as hyper-link of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NavigateUrl"}},{"Kind":"Components.Component","Name":"ParentID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the parent ID field mapped in dataSource.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ParentID"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            This paramter will execute along with data processing.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Query"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for selected state of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selected"}},{"Kind":"Components.Component","Name":"TableName","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the table name used to fetch data from a specific table in the server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TableName"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for text displayed as TreeView node's display text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for tooltip that will be displayed as hovering text of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Tooltip"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewFieldChild<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":976306058,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.TreeViewFieldChild<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the Treeview child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"TreeViewFieldChild"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewFieldChild<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1072434975,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.TreeViewFieldChild<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the Treeview child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.TreeViewFieldChild"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewFieldChild<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-67504401,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TreeViewFieldsSettings<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n             A class used for configuring the TreeView fields setting properties.\n            </summary>\n            <typeparam name=\"TValue\">\"Specifies the TValue parameter\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TreeViewFieldsSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.TreeViewFieldsSettings<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"DataSourceChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.IEnumerable<TValue>>","Documentation":"\n            <summary>\n            Invokes when data source changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSourceChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Child","TypeName":"System.String","Documentation":"\n            <summary>\n            Binds the field settings for child nodes or mapping field for nested nodes objects that contain array of JSON objects.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Child"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Specifies the array of JavaScript objects or instance of DataManager to populate the nodes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Expanded","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for expand state of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Expanded"}},{"Kind":"Components.Component","Name":"HasChildren","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for hasChildren to check whether a node has child nodes or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HasChildren"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for htmlAttributes to be added to the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for icon class of each TreeView node that will be added before the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the ID field mapped in dataSource.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"ImageUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for image URL of each TreeView node where image will be added before the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ImageUrl"}},{"Kind":"Components.Component","Name":"IsChecked","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the field for checked state of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsChecked"}},{"Kind":"Components.Component","Name":"NavigateUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for navigateUrl to be added as hyper-link of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NavigateUrl"}},{"Kind":"Components.Component","Name":"ParentID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the parent ID field mapped in dataSource.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ParentID"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            This paramter will execute along with data processing.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Query"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for selected state of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selected"}},{"Kind":"Components.Component","Name":"TableName","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the table name used to fetch data from a specific table in the server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TableName"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for text displayed as TreeView node's display text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for tooltip that will be displayed as hovering text of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Tooltip"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewFieldsSettings<TValue>","Components.GenericTyped":"True"}},{"HashCode":2015183455,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TreeViewFieldsSettings<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n             A class used for configuring the TreeView fields setting properties.\n            </summary>\n            <typeparam name=\"TValue\">\"Specifies the TValue parameter\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.TreeViewFieldsSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.TreeViewFieldsSettings<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the child content.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"DataSourceChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.IEnumerable<TValue>>","Documentation":"\n            <summary>\n            Invokes when data source changes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSourceChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Child","TypeName":"System.String","Documentation":"\n            <summary>\n            Binds the field settings for child nodes or mapping field for nested nodes objects that contain array of JSON objects.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Child"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Specifies the array of JavaScript objects or instance of DataManager to populate the nodes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Expanded","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for expand state of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Expanded"}},{"Kind":"Components.Component","Name":"HasChildren","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for hasChildren to check whether a node has child nodes or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HasChildren"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for htmlAttributes to be added to the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for icon class of each TreeView node that will be added before the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the ID field mapped in dataSource.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"ImageUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for image URL of each TreeView node where image will be added before the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ImageUrl"}},{"Kind":"Components.Component","Name":"IsChecked","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the field for checked state of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsChecked"}},{"Kind":"Components.Component","Name":"NavigateUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for navigateUrl to be added as hyper-link of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NavigateUrl"}},{"Kind":"Components.Component","Name":"ParentID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the parent ID field mapped in dataSource.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ParentID"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            This paramter will execute along with data processing.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Query"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for selected state of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selected"}},{"Kind":"Components.Component","Name":"TableName","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the table name used to fetch data from a specific table in the server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TableName"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for text displayed as TreeView node's display text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for tooltip that will be displayed as hovering text of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Tooltip"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewFieldsSettings<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2114752370,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.TreeViewFieldsSettings<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"TreeViewFieldsSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewFieldsSettings<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":811098127,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.TreeViewFieldsSettings<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the child content.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.TreeViewFieldsSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewFieldsSettings<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1662952535,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A class used for configuring the TreeView animation properties.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TreeViewNodeAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Child Content for the Treeview Animation Settings.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Collapse","TypeName":"Syncfusion.Blazor.Navigations.TreeViewAnimationCollapse","Documentation":"\n            <summary>\n            Specifies the animation to appear when collapsing the TreeView item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Collapse"}},{"Kind":"Components.Component","Name":"Expand","TypeName":"Syncfusion.Blazor.Navigations.TreeViewAnimationExpand","Documentation":"\n            <summary>\n            Specifies the animation to appear when expanding the TreeView item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Expand"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings"}},{"HashCode":-2046114665,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            A class used for configuring the TreeView animation properties.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Child Content for the Treeview Animation Settings.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Collapse","TypeName":"Syncfusion.Blazor.Navigations.TreeViewAnimationCollapse","Documentation":"\n            <summary>\n            Specifies the animation to appear when collapsing the TreeView item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Collapse"}},{"Kind":"Components.Component","Name":"Expand","TypeName":"Syncfusion.Blazor.Navigations.TreeViewAnimationExpand","Documentation":"\n            <summary>\n            Specifies the animation to appear when expanding the TreeView item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Expand"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2111398932,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <exclude />\n            <summary>\n            Child Content for the Treeview Animation Settings.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"TreeViewNodeAnimationSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1403904990,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <exclude />\n            <summary>\n            Child Content for the Treeview Animation Settings.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewNodeAnimationSettings.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1011237501,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TreeViewTemplates<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            The TreeView component allows you to customize the look of TreeView nodes using Templates.\n            </summary>\n            <typeparam name=\"TValue\">\"Specifies the Tvalue\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TreeViewTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.TreeViewTemplates<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"NodeTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TValue>","Documentation":"\n            <summary>\n            Specifies the NodeTemplate.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NodeTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewTemplates<TValue>","Components.GenericTyped":"True"}},{"HashCode":-848056893,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.TreeViewTemplates<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            The TreeView component allows you to customize the look of TreeView nodes using Templates.\n            </summary>\n            <typeparam name=\"TValue\">\"Specifies the Tvalue\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.TreeViewTemplates"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.TreeViewTemplates<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"NodeTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<TValue>","Documentation":"\n            <summary>\n            Specifies the NodeTemplate.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NodeTemplate","Components.ChildContent":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewTemplates<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1497068431,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.TreeViewTemplates<TValue>.NodeTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the NodeTemplate.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NodeTemplate","ParentTag":"TreeViewTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'NodeTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewTemplates<TValue>.NodeTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1286533843,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.TreeViewTemplates<TValue>.NodeTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the NodeTemplate.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NodeTemplate","ParentTag":"Syncfusion.Blazor.Navigations.TreeViewTemplates"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'NodeTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewTemplates<TValue>.NodeTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1258473452,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.ToolbarEvents","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ToolbarEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Clicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.ClickEventArgs>","Documentation":"\n            <summary>\n            The event will be fired on clicking the Toolbar elements.\n            </summary>\n            <remarks>\n            You can get the clicked toolbar element details.\n            </remarks>\n            <example>\n            In the below code example, the clicked toolbar element text can be obtained from the <c>Clicked</c> event.\n            <code><![CDATA[\n            <SfToolbar>\n                <ToolbarEvents Clicked=\"ToolbarClicked\"></ToolbarEvents>\n                <ToolbarItems>\n                    <ToolbarItem Text=\"Cut\" TooltipText=\"Cut\"></ToolbarItem>\n                    <ToolbarItem Text=\"Copy\" TooltipText=\"Copy\"></ToolbarItem>\n                    <ToolbarItem Text=\"Paste\" TooltipText=\"Paste\"></ToolbarItem>\n                </ToolbarItems>\n            </SfToolbar>\n            @code {\n                public void ToolbarClicked(ClickEventArgs args)\n                    string clickedText = args.Item.Text;\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Clicked","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            The event will be fired when the control is rendered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            The event will be fired when the control gets destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.ToolbarEvents"}},{"HashCode":-1357030281,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.ToolbarEvents","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.ToolbarEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Clicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.ClickEventArgs>","Documentation":"\n            <summary>\n            The event will be fired on clicking the Toolbar elements.\n            </summary>\n            <remarks>\n            You can get the clicked toolbar element details.\n            </remarks>\n            <example>\n            In the below code example, the clicked toolbar element text can be obtained from the <c>Clicked</c> event.\n            <code><![CDATA[\n            <SfToolbar>\n                <ToolbarEvents Clicked=\"ToolbarClicked\"></ToolbarEvents>\n                <ToolbarItems>\n                    <ToolbarItem Text=\"Cut\" TooltipText=\"Cut\"></ToolbarItem>\n                    <ToolbarItem Text=\"Copy\" TooltipText=\"Copy\"></ToolbarItem>\n                    <ToolbarItem Text=\"Paste\" TooltipText=\"Paste\"></ToolbarItem>\n                </ToolbarItems>\n            </SfToolbar>\n            @code {\n                public void ToolbarClicked(ClickEventArgs args)\n                    string clickedText = args.Item.Text;\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Clicked","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            The event will be fired when the control is rendered.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            The event will be fired when the control gets destroyed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.ToolbarEvents","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1748309645,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations._Imports","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"_Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations._Imports"}},{"HashCode":1598910783,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations._Imports","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations._Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations._Imports","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":176930628,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.AccordionItemRender","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the accordion item renderer.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AccordionItemRender"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Item","TypeName":"Syncfusion.Blazor.Navigations.AccordionItem","Documentation":"\n            <summary>\n            Gets or sets the accordion item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Item"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.AccordionItemRender"}},{"HashCode":-178783178,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.AccordionItemRender","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the accordion item renderer.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.Internal.AccordionItemRender"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Item","TypeName":"Syncfusion.Blazor.Navigations.AccordionItem","Documentation":"\n            <summary>\n            Gets or sets the accordion item.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Item"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.AccordionItemRender","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1603185273,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.SfMenuBase<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfMenuBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.Internal.SfMenuBase<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets the child content for the menu including HTML element. If the child content is not specified, menu is rendered using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <c>SfMenu</c> tag directive is either a string or HTML Element. The menu item is also specified using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets CSS class string to customize the appearance of menu. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of menu. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the right to left direction in menu bar.\n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for menu bar. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<TValue>","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the menu items with its properties which will be rendered as ContextMenu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Items","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ShowItemOnClick","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the mouse click option to show the sub menu. \n            </summary> \n            <value> \n            <c>true</c>, if the sub menu will open only on mouse click. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"ShowItemOnClick"}},{"Kind":"Components.Component","Name":"EnableScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the scrollable option in menu bar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableScrolling"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.SfMenuBase<TValue>","Components.GenericTyped":"True"}},{"HashCode":-1901375679,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.SfMenuBase<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.Internal.SfMenuBase"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.Internal.SfMenuBase<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets the child content for the menu including HTML element. If the child content is not specified, menu is rendered using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <c>SfMenu</c> tag directive is either a string or HTML Element. The menu item is also specified using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets CSS class string to customize the appearance of menu. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of menu. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the right to left direction in menu bar.\n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for menu bar. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<TValue>","Documentation":"\n            <summary>\n            Gets or sets a value that indicates the menu items with its properties which will be rendered as ContextMenu.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Items","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ShowItemOnClick","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the mouse click option to show the sub menu. \n            </summary> \n            <value> \n            <c>true</c>, if the sub menu will open only on mouse click. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"ShowItemOnClick"}},{"Kind":"Components.Component","Name":"EnableScrolling","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the scrollable option in menu bar.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableScrolling"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.SfMenuBase<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2071010613,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.Internal.SfMenuBase<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary> \n            Gets or sets the child content for the menu including HTML element. If the child content is not specified, menu is rendered using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <c>SfMenu</c> tag directive is either a string or HTML Element. The menu item is also specified using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfMenuBase"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.SfMenuBase<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-128783517,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Navigations.Internal.SfMenuBase<TValue>.ChildContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary> \n            Gets or sets the child content for the menu including HTML element. If the child content is not specified, menu is rendered using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <c>SfMenu</c> tag directive is either a string or HTML Element. The menu item is also specified using <see cref=\"P:Syncfusion.Blazor.Navigations.Internal.SfMenuBase`1.Items\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Navigations.Internal.SfMenuBase"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.SfMenuBase<TValue>.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":264026813,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.CreateMenuItems<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CreateMenuItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.Internal.CreateMenuItems<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.Navigations.Internal.CreateMenuItems<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<TItem>","Metadata":{"Common.PropertyName":"Items","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"MenuClass","TypeName":"System.String","Metadata":{"Common.PropertyName":"MenuClass"}},{"Kind":"Components.Component","Name":"ContainerClass","TypeName":"System.String","Metadata":{"Common.PropertyName":"ContainerClass"}},{"Kind":"Components.Component","Name":"Style","TypeName":"System.String","Metadata":{"Common.PropertyName":"Style"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.CreateMenuItems<TValue, TItem>","Components.GenericTyped":"True"}},{"HashCode":-1053176528,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.CreateMenuItems<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.Internal.CreateMenuItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.Internal.CreateMenuItems<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.Navigations.Internal.CreateMenuItems<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<TItem>","Metadata":{"Common.PropertyName":"Items","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"MenuClass","TypeName":"System.String","Metadata":{"Common.PropertyName":"MenuClass"}},{"Kind":"Components.Component","Name":"ContainerClass","TypeName":"System.String","Metadata":{"Common.PropertyName":"ContainerClass"}},{"Kind":"Components.Component","Name":"Style","TypeName":"System.String","Metadata":{"Common.PropertyName":"Style"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.CreateMenuItems<TValue, TItem>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":50312346,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.CreateMenuItem<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CreateMenuItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.Internal.CreateMenuItem<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.Navigations.Internal.CreateMenuItem<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<TItem>","Metadata":{"Common.PropertyName":"Items","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.CreateMenuItem<TValue, TItem>","Components.GenericTyped":"True"}},{"HashCode":1833071695,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.CreateMenuItem<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.Internal.CreateMenuItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.Internal.CreateMenuItem<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TItem","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TItem for the Syncfusion.Blazor.Navigations.Internal.CreateMenuItem<TValue, TItem> component.","Metadata":{"Common.PropertyName":"TItem","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<TItem>","Metadata":{"Common.PropertyName":"Items","Components.GenericTyped":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.CreateMenuItem<TValue, TItem>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-648501028,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.ToolbarContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies toolbar content.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ToolbarContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Item","TypeName":"Syncfusion.Blazor.Navigations.ItemModel","Documentation":"\n            <summary>\n            Defines the toolbar item model.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Item"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Defines toolbar item index.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.ToolbarContent"}},{"HashCode":487308164,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.ToolbarContent","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies toolbar content.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.Internal.ToolbarContent"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Item","TypeName":"Syncfusion.Blazor.Navigations.ItemModel","Documentation":"\n            <summary>\n            Defines the toolbar item model.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Item"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Defines toolbar item index.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.ToolbarContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-824261730,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.ComplexListItems<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the complex list items.\n            </summary>\n            <typeparam name=\"TValue\">\"TypeParam\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ComplexListItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.Internal.ComplexListItems<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TreeOptions","TypeName":"Syncfusion.Blazor.Navigations.Internal.TreeOptions<TValue>","Documentation":"\n            <summary>\n            Specifies the TreeOption field values.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TreeOptions","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"HasChild","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the treeview node has child or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HasChild"}},{"Kind":"Components.Component","Name":"MappedData","TypeName":"Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping<System.Collections.Generic.List<TValue>>","Documentation":"\n            <summary>\n            Specifies the Treeview mapped data values.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MappedData","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"RandomID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the Treeview node data id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RandomID"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the index position of Treeview node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index"}},{"Kind":"Components.Component","Name":"ListModel","TypeName":"Syncfusion.Blazor.Navigations.Internal.ListModel","Documentation":"\n            <summary>\n            Specifies the treeview list base option model.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListModel"}},{"Kind":"Components.Component","Name":"ListData","TypeName":"TValue","Documentation":"\n            <summary>\n            Specifies the datasource of list element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListData","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"TreeNodeLevel","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tree node level of treeview nodes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TreeNodeLevel"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.ComplexListItems<TValue>","Components.GenericTyped":"True"}},{"HashCode":-615504692,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.ComplexListItems<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the complex list items.\n            </summary>\n            <typeparam name=\"TValue\">\"TypeParam\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.Internal.ComplexListItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.Internal.ComplexListItems<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"TreeOptions","TypeName":"Syncfusion.Blazor.Navigations.Internal.TreeOptions<TValue>","Documentation":"\n            <summary>\n            Specifies the TreeOption field values.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TreeOptions","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"HasChild","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies the treeview node has child or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HasChild"}},{"Kind":"Components.Component","Name":"MappedData","TypeName":"Syncfusion.Blazor.Navigations.Internal.FieldsValueMapping<System.Collections.Generic.List<TValue>>","Documentation":"\n            <summary>\n            Specifies the Treeview mapped data values.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"MappedData","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"RandomID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the Treeview node data id.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"RandomID"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the index position of Treeview node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index"}},{"Kind":"Components.Component","Name":"ListModel","TypeName":"Syncfusion.Blazor.Navigations.Internal.ListModel","Documentation":"\n            <summary>\n            Specifies the treeview list base option model.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListModel"}},{"Kind":"Components.Component","Name":"ListData","TypeName":"TValue","Documentation":"\n            <summary>\n            Specifies the datasource of list element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListData","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"TreeNodeLevel","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tree node level of treeview nodes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TreeNodeLevel"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.ComplexListItems<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1809312303,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the ComplexCreateList.\n            </summary>\n            <typeparam name=\"TValue\">\"TypeParam\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CreateListFromComplex"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ListData","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Specifies the datasource of list element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListData","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"TreeOptions","TypeName":"Syncfusion.Blazor.Navigations.Internal.TreeOptions<TValue>","Documentation":"\n            <summary>\n            Specifies the TreeOption field values.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TreeOptions","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"TreeItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Navigations.Internal.TreeItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the TreeItemCreating event.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TreeItemCreating","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"TreeNodeLevel","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tree node level of treeview nodes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TreeNodeLevel"}},{"Kind":"Components.Component","Name":"ListModel","TypeName":"Syncfusion.Blazor.Navigations.Internal.ListModel","Documentation":"\n            <summary>\n            Specifies the treeview list base option model.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListModel"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex<TValue>","Components.GenericTyped":"True"}},{"HashCode":-1529893541,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the ComplexCreateList.\n            </summary>\n            <typeparam name=\"TValue\">\"TypeParam\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ListData","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Specifies the datasource of list element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListData","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"TreeOptions","TypeName":"Syncfusion.Blazor.Navigations.Internal.TreeOptions<TValue>","Documentation":"\n            <summary>\n            Specifies the TreeOption field values.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TreeOptions","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"TreeItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Navigations.Internal.TreeItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the TreeItemCreating event.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TreeItemCreating","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"TreeNodeLevel","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tree node level of treeview nodes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TreeNodeLevel"}},{"Kind":"Components.Component","Name":"ListModel","TypeName":"Syncfusion.Blazor.Navigations.Internal.ListModel","Documentation":"\n            <summary>\n            Specifies the treeview list base option model.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListModel"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.CreateListFromComplex<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-865899599,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.TreeViewListItems<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <exclude />\n            <summary>\n            Specifies the TreeViewListItems class.\n            </summary>\n            <typeparam name=\"TValue\">\"TypeParam\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TreeViewListItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.Internal.TreeViewListItems<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.TreeViewListItems<TValue>","Components.GenericTyped":"True"}},{"HashCode":515545351,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.TreeViewListItems<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <exclude />\n            <summary>\n            Specifies the TreeViewListItems class.\n            </summary>\n            <typeparam name=\"TValue\">\"TypeParam\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.Internal.TreeViewListItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.Internal.TreeViewListItems<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.TreeViewListItems<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-826010296,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.AnimationSettingsModel","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies class for expand / collapse animation settings.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AnimationSettingsModel"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time duration to transform content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the easing effect applied when transforming the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.AnimationSettingsModel"}},{"HashCode":-1153841585,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.AnimationSettingsModel","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies class for expand / collapse animation settings.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.Internal.AnimationSettingsModel"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time duration to transform content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the easing effect applied when transforming the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.AnimationSettingsModel","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1064087300,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.AnimationExpandModel","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the class for expand animation settings.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AnimationExpandModel"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation effect for expanding the TreeView node.\n            Default animation is given as SlideDown. You can also disable the animation by setting the animation effect as None.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect"}},{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time duration to transform content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the easing effect applied when transforming the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.AnimationExpandModel"}},{"HashCode":188453428,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.AnimationExpandModel","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the class for expand animation settings.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.Internal.AnimationExpandModel"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation effect for expanding the TreeView node.\n            Default animation is given as SlideDown. You can also disable the animation by setting the animation effect as None.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect"}},{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time duration to transform content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the easing effect applied when transforming the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.AnimationExpandModel","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1383627569,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.AnimationCollapseModel","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the class for collapse animation settings.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AnimationCollapseModel"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation effect for collapsing the TreeView node.\n            Default animation is given as SlideUp. You can also disable the animation by setting the animation effect as None.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect"}},{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time duration to transform content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the easing effect applied when transforming the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.AnimationCollapseModel"}},{"HashCode":1521305496,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.AnimationCollapseModel","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            Specifies the class for collapse animation settings.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.Internal.AnimationCollapseModel"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.AnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Specifies the animation effect for collapsing the TreeView node.\n            Default animation is given as SlideUp. You can also disable the animation by setting the animation effect as None.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Effect"}},{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the time duration to transform content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Duration"}},{"Kind":"Components.Component","Name":"Easing","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the easing effect applied when transforming the content.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Easing"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.AnimationCollapseModel","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2007252049,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.ListGeneration<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            List generation of TreeView component.\n            </summary>\n            <typeparam name=\"TValue\">\"TValue paramater\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ListGeneration"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.Internal.ListGeneration<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ListData","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Specifies the datasource of list element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListData","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"TreeOptions","TypeName":"Syncfusion.Blazor.Navigations.Internal.TreeOptions<TValue>","Documentation":"\n            <summary>\n            Specifies the TreeOption field values.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TreeOptions","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"TreeItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Navigations.Internal.TreeItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the TreeItemCreating event.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TreeItemCreating","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"TreeNodeLevel","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tree node level of treeview nodes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TreeNodeLevel"}},{"Kind":"Components.Component","Name":"ListModel","TypeName":"Syncfusion.Blazor.Navigations.Internal.ListModel","Documentation":"\n            <summary>\n            Specifies the treeview list base option model.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListModel"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.ListGeneration<TValue>","Components.GenericTyped":"True"}},{"HashCode":-1938590874,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.ListGeneration<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n            List generation of TreeView component.\n            </summary>\n            <typeparam name=\"TValue\">\"TValue paramater\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.Internal.ListGeneration"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.Internal.ListGeneration<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"ListData","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Specifies the datasource of list element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListData","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"TreeOptions","TypeName":"Syncfusion.Blazor.Navigations.Internal.TreeOptions<TValue>","Documentation":"\n            <summary>\n            Specifies the TreeOption field values.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TreeOptions","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"TreeItemCreating","TypeName":"System.Action<Syncfusion.Blazor.Navigations.Internal.TreeItemCreatedArgs<TValue>>","Documentation":"\n            <summary>\n            Specifies the TreeItemCreating event.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TreeItemCreating","Components.DelegateSignature":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"TreeNodeLevel","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Specifies the tree node level of treeview nodes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TreeNodeLevel"}},{"Kind":"Components.Component","Name":"ListModel","TypeName":"Syncfusion.Blazor.Navigations.Internal.ListModel","Documentation":"\n            <summary>\n            Specifies the treeview list base option model.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ListModel"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.ListGeneration<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1140924841,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n             A class used for configuring the TreeView fields setting properties.\n            </summary>\n            <typeparam name=\"TValue\">\"Specifies the Tvalue parameter\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TreeViewCommonFieldsSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Child","TypeName":"System.String","Documentation":"\n            <summary>\n            Binds the field settings for child nodes or mapping field for nested nodes objects that contain array of JSON objects.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Child"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Specifies the array of JavaScript objects or instance of DataManager to populate the nodes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Expanded","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for expand state of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Expanded"}},{"Kind":"Components.Component","Name":"HasChildren","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for hasChildren to check whether a node has child nodes or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HasChildren"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for htmlAttributes to be added to the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for icon class of each TreeView node that will be added before the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the ID field mapped in dataSource.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"ImageUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for image URL of each TreeView node where image will be added before the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ImageUrl"}},{"Kind":"Components.Component","Name":"IsChecked","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the field for checked state of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsChecked"}},{"Kind":"Components.Component","Name":"NavigateUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for navigateUrl to be added as hyper-link of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NavigateUrl"}},{"Kind":"Components.Component","Name":"ParentID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the parent ID field mapped in dataSource.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ParentID"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            This paramter will execute along with data processing.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Query"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for selected state of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selected"}},{"Kind":"Components.Component","Name":"TableName","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the table name used to fetch data from a specific table in the server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TableName"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for text displayed as TreeView node's display text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for tooltip that will be displayed as hovering text of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Tooltip"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings<TValue>","Components.GenericTyped":"True"}},{"HashCode":-2060961519,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"\n            <summary>\n             A class used for configuring the TreeView fields setting properties.\n            </summary>\n            <typeparam name=\"TValue\">\"Specifies the Tvalue parameter\".</typeparam>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TValue","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TValue for the Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings<TValue> component.","Metadata":{"Common.PropertyName":"TValue","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Child","TypeName":"System.String","Documentation":"\n            <summary>\n            Binds the field settings for child nodes or mapping field for nested nodes objects that contain array of JSON objects.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Child"}},{"Kind":"Components.Component","Name":"DataSource","TypeName":"System.Collections.Generic.IEnumerable<TValue>","Documentation":"\n            <summary>\n            Specifies the array of JavaScript objects or instance of DataManager to populate the nodes.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"DataSource","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Expanded","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for expand state of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Expanded"}},{"Kind":"Components.Component","Name":"HasChildren","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for hasChildren to check whether a node has child nodes or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HasChildren"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for htmlAttributes to be added to the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for icon class of each TreeView node that will be added before the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"Id","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the ID field mapped in dataSource.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Id"}},{"Kind":"Components.Component","Name":"ImageUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for image URL of each TreeView node where image will be added before the text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ImageUrl"}},{"Kind":"Components.Component","Name":"IsChecked","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the field for checked state of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"IsChecked"}},{"Kind":"Components.Component","Name":"NavigateUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for navigateUrl to be added as hyper-link of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"NavigateUrl"}},{"Kind":"Components.Component","Name":"ParentID","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the parent ID field mapped in dataSource.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ParentID"}},{"Kind":"Components.Component","Name":"Query","TypeName":"Syncfusion.Blazor.Data.Query","Documentation":"\n            <summary>\n            This paramter will execute along with data processing.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Query"}},{"Kind":"Components.Component","Name":"Selected","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for selected state of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selected"}},{"Kind":"Components.Component","Name":"TableName","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the table name used to fetch data from a specific table in the server.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TableName"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for text displayed as TreeView node's display text.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Tooltip","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the mapping field for tooltip that will be displayed as hovering text of the TreeView node.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Tooltip"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.TreeViewCommonFieldsSettings<TValue>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1642073725,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.BreadcrumbSeparator","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"BreadcrumbSeparator"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"PreviousIndex","TypeName":"System.Int32","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the index of Breadcrumb's item which is rendered before the separator.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PreviousIndex"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.BreadcrumbSeparator"}},{"HashCode":1713443538,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.BreadcrumbSeparator","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.Internal.BreadcrumbSeparator"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"PreviousIndex","TypeName":"System.Int32","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the index of Breadcrumb's item which is rendered before the separator.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"PreviousIndex"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.BreadcrumbSeparator","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2010613788,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.CreateBreadcrumbItem","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CreateBreadcrumbItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Item","TypeName":"Syncfusion.Blazor.Navigations.BreadcrumbItem","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the item in the list of Breadcrumb items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Item"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the index of the item in the list of Breadcrumb items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.CreateBreadcrumbItem"}},{"HashCode":1550730027,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.CreateBreadcrumbItem","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.Internal.CreateBreadcrumbItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Item","TypeName":"Syncfusion.Blazor.Navigations.BreadcrumbItem","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the item in the list of Breadcrumb items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Item"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the index of the item in the list of Breadcrumb items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Index"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.CreateBreadcrumbItem","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1288705621,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.CreateBreadcrumbItems","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CreateBreadcrumbItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Navigations.BreadcrumbItem>","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the list of Breadcrumb items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Items"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.CreateBreadcrumbItems"}},{"HashCode":-1140758017,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.CreateBreadcrumbItems","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.Internal.CreateBreadcrumbItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Items","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Navigations.BreadcrumbItem>","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the list of Breadcrumb items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Items"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.CreateBreadcrumbItems","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":461575924,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.TabHeaderTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TabHeaderTemplate"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Item","TypeName":"Syncfusion.Blazor.Navigations.TabItem","Metadata":{"Common.PropertyName":"Item"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.TabHeaderTemplate"}},{"HashCode":204619670,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.TabHeaderTemplate","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.Internal.TabHeaderTemplate"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Item","TypeName":"Syncfusion.Blazor.Navigations.TabItem","Metadata":{"Common.PropertyName":"Item"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.TabHeaderTemplate","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1789705155,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.EventRegister","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"EventRegister"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Metadata":{"Common.PropertyName":"Name"}},{"Kind":"Components.Component","Name":"Handler","TypeName":"System.Action<Syncfusion.Blazor.Navigations.Internal.ToolbarEventArgs>","Metadata":{"Common.PropertyName":"Handler","Components.DelegateSignature":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.EventRegister"}},{"HashCode":126539381,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Navigations.Internal.EventRegister","AssemblyName":"Syncfusion.Blazor.Navigations","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.Internal.EventRegister"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Metadata":{"Common.PropertyName":"Name"}},{"Kind":"Components.Component","Name":"Handler","TypeName":"System.Action<Syncfusion.Blazor.Navigations.Internal.ToolbarEventArgs>","Metadata":{"Common.PropertyName":"Handler","Components.DelegateSignature":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Navigations.Internal.EventRegister","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-258039580,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfButton","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Button is a graphical user interface that helps to triggers an event on its click action. \n            It can contain a text, an icon, svg or both. \n            </summary> \n            <remarks> \n            Button content is either by specifying <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property or by specifying content within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive. \n            </remarks> \n            <example> \n            In the below code example, a basic button is initialized with <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            <code><![CDATA[ \n            <SfButton Content=\"Click\"> \n            </SfButton> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the Button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of Button component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive, to render as HTML content. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Content"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of button. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the button. \n            </summary> \n            <value> \n            <c>true</c>, if the button component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction for button. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to include an icon or image for the button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.IconPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconPosition.Left\" /> \n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the button. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the button. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the button. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"IconPosition"}},{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the primary style for button. \n            </summary> \n            <value> \n            <c>true</c>, if the primary style is enabled for button component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsPrimary"}},{"Kind":"Components.Component","Name":"IsToggle","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the toggle option for button component. \n            </summary> \n            <value> \n            <c>true</c>, if the toggle option is enabled for button component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsToggle"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive. \n            <code><![CDATA[ \n            <SfButton style=\"width:200px\"> \n            </SfButton> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> is clicked.  \n            </summary> \n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfButton OnClick=\"@Clicked\"> \n            </SfButton> \n            @code { \n                private void Clicked(MouseEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClick","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> rendering is completed.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfButton"}},{"HashCode":2032411387,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfButton","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Button is a graphical user interface that helps to triggers an event on its click action. \n            It can contain a text, an icon, svg or both. \n            </summary> \n            <remarks> \n            Button content is either by specifying <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property or by specifying content within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive. \n            </remarks> \n            <example> \n            In the below code example, a basic button is initialized with <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            <code><![CDATA[ \n            <SfButton Content=\"Click\"> \n            </SfButton> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the Button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of Button component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive, to render as HTML content. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Content"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of button. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the button. \n            </summary> \n            <value> \n            <c>true</c>, if the button component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction for button. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to include an icon or image for the button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.IconPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconPosition.Left\" /> \n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the button. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the button. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the button. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"IconPosition"}},{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the primary style for button. \n            </summary> \n            <value> \n            <c>true</c>, if the primary style is enabled for button component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsPrimary"}},{"Kind":"Components.Component","Name":"IsToggle","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the toggle option for button component. \n            </summary> \n            <value> \n            <c>true</c>, if the toggle option is enabled for button component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsToggle"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive. \n            <code><![CDATA[ \n            <SfButton style=\"width:200px\"> \n            </SfButton> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> is clicked.  \n            </summary> \n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfButton OnClick=\"@Clicked\"> \n            </SfButton> \n            @code { \n                private void Clicked(MouseEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClick","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> rendering is completed.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfButton","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-819257196,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfButton.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the Button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfButton.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1853057798,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfButton.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the Button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.SfButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfButton.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-603317155,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            CheckBox is a graphical user interface element that allows you to select one or more options from the choices. \n            It has checked, unchecked, and indeterminate states. \n            </summary> \n            <example> \n            In the below code example, a basic checkbox is initialized with <c>Checked</c> property. \n            <code><![CDATA[ \n            <SfCheckBox Checked=\"true\"> \n            </SfCheckBox> \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfCheckBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TChecked","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TChecked for the Syncfusion.Blazor.Buttons.SfCheckBox<TChecked> component.","Metadata":{"Common.PropertyName":"TChecked","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the label of checkbox. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelPosition","TypeName":"Syncfusion.Blazor.Buttons.LabelPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display label in the checkbox. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.Buttons.SfCheckBox`1.LabelPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.LabelPosition.Before\" /> \n            </value> \n            <remarks> \n            If the <c>LabelPosition</c> is <c>Before</c>, the label will be placed to the left side of the CheckBox. \n            If the <c>LabelPosition</c> is <c>After</c>, the icon will be placed to the right side of the CheckBox. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"LabelPosition"}},{"Kind":"Components.Component","Name":"Indeterminate","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable indeterminate state in the checkbox. \n            </summary> \n            <value> \n            <c>true</c>, if the checkbox is in indeterminate state. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfCheckBox`1.Indeterminate\" /> property overrides this <c>Checked</c> property in initial rendering of Checkbox. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Indeterminate"}},{"Kind":"Components.Component","Name":"IndeterminateChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IndeterminateChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"EnableTriState","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the tristate in the checkbox. \n            </summary> \n            <value> \n            <c>true</c>, if the checkbox is rendered with tristate. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfCheckBox`1.EnableTriState\" /> property is working based on <c>Checked</c> and <see cref=\"P:Syncfusion.Blazor.Buttons.SfCheckBox`1.Indeterminate\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"EnableTriState"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChangeEventArgs<TChecked>>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the checkbox state is changed.  \n            </summary> \n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfCheckBox ValueChange=\"@Changed\"> \n            </SfCheckBox> \n            @code { \n                private void Changed(ChangeEventArgs<TChecked> args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates CSS class string to customize the appearance of the component. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of the component. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the name of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Name\" /> property is used to set the name attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Name"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the value of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Value\" /> property is used to set the value attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"Checked","TypeName":"TChecked","Documentation":"\n            <summary> \n            Gets or sets whether to check or uncheck the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is checked. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Checked","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TChecked>>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction option for the component. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for the component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property is persisted. \n            </summary> \n            <value> \n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            Component's <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property will be stored in browser local storage to persist component's state when page reloads. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the component rendering is completed.  \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","Components.GenericTyped":"True"}},{"HashCode":663161610,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            CheckBox is a graphical user interface element that allows you to select one or more options from the choices. \n            It has checked, unchecked, and indeterminate states. \n            </summary> \n            <example> \n            In the below code example, a basic checkbox is initialized with <c>Checked</c> property. \n            <code><![CDATA[ \n            <SfCheckBox Checked=\"true\"> \n            </SfCheckBox> \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfCheckBox"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TChecked","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TChecked for the Syncfusion.Blazor.Buttons.SfCheckBox<TChecked> component.","Metadata":{"Common.PropertyName":"TChecked","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the label of checkbox. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelPosition","TypeName":"Syncfusion.Blazor.Buttons.LabelPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display label in the checkbox. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.Buttons.SfCheckBox`1.LabelPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.LabelPosition.Before\" /> \n            </value> \n            <remarks> \n            If the <c>LabelPosition</c> is <c>Before</c>, the label will be placed to the left side of the CheckBox. \n            If the <c>LabelPosition</c> is <c>After</c>, the icon will be placed to the right side of the CheckBox. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"LabelPosition"}},{"Kind":"Components.Component","Name":"Indeterminate","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable indeterminate state in the checkbox. \n            </summary> \n            <value> \n            <c>true</c>, if the checkbox is in indeterminate state. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfCheckBox`1.Indeterminate\" /> property overrides this <c>Checked</c> property in initial rendering of Checkbox. \n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Indeterminate"}},{"Kind":"Components.Component","Name":"IndeterminateChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"IndeterminateChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"EnableTriState","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the tristate in the checkbox. \n            </summary> \n            <value> \n            <c>true</c>, if the checkbox is rendered with tristate. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfCheckBox`1.EnableTriState\" /> property is working based on <c>Checked</c> and <see cref=\"P:Syncfusion.Blazor.Buttons.SfCheckBox`1.Indeterminate\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"EnableTriState"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChangeEventArgs<TChecked>>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the checkbox state is changed.  \n            </summary> \n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfCheckBox ValueChange=\"@Changed\"> \n            </SfCheckBox> \n            @code { \n                private void Changed(ChangeEventArgs<TChecked> args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates CSS class string to customize the appearance of the component. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of the component. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the name of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Name\" /> property is used to set the name attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Name"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the value of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Value\" /> property is used to set the value attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"Checked","TypeName":"TChecked","Documentation":"\n            <summary> \n            Gets or sets whether to check or uncheck the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is checked. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Checked","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TChecked>>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction option for the component. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for the component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property is persisted. \n            </summary> \n            <value> \n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            Component's <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property will be stored in browser local storage to persist component's state when page reloads. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the component rendering is completed.  \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2098939319,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfCheckBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1709579532,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.SfCheckBox"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1273011522,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.ChipEvents","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Configure handlers to handle the events with the Chip component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnBeforeClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChipEventArgs>","Documentation":"\n            <summary>\n            This click event will get triggered once the chip is before click.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBeforeClick","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChipEventArgs>","Documentation":"\n            <summary>\n            This click event will get triggered once the chip is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClick","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            This created event will get triggered once the component rendering is completed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            This created event will get triggered once the component successfuly disposed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnDelete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChipEventArgs>","Documentation":"\n            <summary>\n            This delete event will get triggered before removing the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnDelete","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Deleted","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChipDeletedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the chip item is deleted.\n            </summary>\n            <remarks>\n            You can get the deleted chip details.\n            </remarks>\n            <example>\n            In the below code example, the deleted chip value can be obtained from the <c>Deleted</c> event.\n            <code><![CDATA[\n            <SfChip Selection=\"SelectionType.Multiple\" EnableDelete=true>\n                <ChipEvents Deleted=\"@onDeleted\"></ChipEvents>\n                <ChipItems>\n                    <ChipItem Text = \"Small\"></ChipItem>\n                    <ChipItem Text = \"Medium\"></ChipItem>\n                    <ChipItem Text = \"Large\"></ChipItem>\n                    <ChipItem Text = \"Extra Large\"></ChipItem>\n                </ChipItems>\n            </SfChip>\n            @code {\n                private void onDeleted(ChipDeletedEventArgs args) {\n                    string deletedValue = args.Value;\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Deleted","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"SelectionChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SelectionChangedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the selected chips are changed.\n            </summary>\n            <remarks>\n            You can get the updated SelectedChips value.\n            </remarks>\n            <example>\n            In the below code example, the SelectedChips value can be obtained from the <see cref=\"!:SfChip.SelectionChanged\" /> event.\n            <code><![CDATA[\n            <SfChip Selection=\"SelectionType.Multiple\">\n                <ChipItems>\n                    <ChipItem Text = \"Small\"></ChipItem>\n                    <ChipItem Text = \"Medium\"></ChipItem>\n                    <ChipItem Text = \"Large\"></ChipItem>\n                    <ChipItem Text = \"Extra Large\"></ChipItem>\n                </ChipItems>\n             <ChipEvents SelectionChanged=\"SelectedChipsChanged\" ></ChipEvents>\n            </SfChip>\n            @code {\n                private void SelectedChipsChanged(SelectionChangedEventArgs args) {\n                    var selectedChipItems = args.AddedItems;\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"SelectionChanged","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipEvents"}},{"HashCode":660275632,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.ChipEvents","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Configure handlers to handle the events with the Chip component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.ChipEvents"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"OnBeforeClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChipEventArgs>","Documentation":"\n            <summary>\n            This click event will get triggered once the chip is before click.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnBeforeClick","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChipEventArgs>","Documentation":"\n            <summary>\n            This click event will get triggered once the chip is clicked.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnClick","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            This created event will get triggered once the component rendering is completed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Destroyed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary>\n            This created event will get triggered once the component successfuly disposed.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Destroyed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"OnDelete","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChipEventArgs>","Documentation":"\n            <summary>\n            This delete event will get triggered before removing the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"OnDelete","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Deleted","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChipDeletedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the chip item is deleted.\n            </summary>\n            <remarks>\n            You can get the deleted chip details.\n            </remarks>\n            <example>\n            In the below code example, the deleted chip value can be obtained from the <c>Deleted</c> event.\n            <code><![CDATA[\n            <SfChip Selection=\"SelectionType.Multiple\" EnableDelete=true>\n                <ChipEvents Deleted=\"@onDeleted\"></ChipEvents>\n                <ChipItems>\n                    <ChipItem Text = \"Small\"></ChipItem>\n                    <ChipItem Text = \"Medium\"></ChipItem>\n                    <ChipItem Text = \"Large\"></ChipItem>\n                    <ChipItem Text = \"Extra Large\"></ChipItem>\n                </ChipItems>\n            </SfChip>\n            @code {\n                private void onDeleted(ChipDeletedEventArgs args) {\n                    string deletedValue = args.Value;\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Deleted","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"SelectionChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SelectionChangedEventArgs>","Documentation":"\n            <summary>\n            Gets or sets an event callback that is raised when the selected chips are changed.\n            </summary>\n            <remarks>\n            You can get the updated SelectedChips value.\n            </remarks>\n            <example>\n            In the below code example, the SelectedChips value can be obtained from the <see cref=\"!:SfChip.SelectionChanged\" /> event.\n            <code><![CDATA[\n            <SfChip Selection=\"SelectionType.Multiple\">\n                <ChipItems>\n                    <ChipItem Text = \"Small\"></ChipItem>\n                    <ChipItem Text = \"Medium\"></ChipItem>\n                    <ChipItem Text = \"Large\"></ChipItem>\n                    <ChipItem Text = \"Extra Large\"></ChipItem>\n                </ChipItems>\n             <ChipEvents SelectionChanged=\"SelectedChipsChanged\" ></ChipEvents>\n            </SfChip>\n            @code {\n                private void SelectedChipsChanged(SelectionChangedEventArgs args) {\n                    var selectedChipItems = args.AddedItems;\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"SelectionChanged","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipEvents","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1304786403,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.ChipItem","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            A Chip is a small block of essential information that contains the text, image, or both and mostly used in contacts, mails, or filter tags.\n            </summary>\n            <summary>\n            Partial Class ChipItem.\n            </summary>\n            <summary>\n            Partial Class ChipItem.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the custom classes to be added to the chip element used to customize the Chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a value that indicates whether the chip component is enabled or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"LeadingIconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the leading icon CSS class for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LeadingIconCss"}},{"Kind":"Components.Component","Name":"LeadingIconUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the leading icon url for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LeadingIconUrl"}},{"Kind":"Components.Component","Name":"LeadingText","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the customized text value for the avatar in the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LeadingText"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text content for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"TrailingIconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the trailing icon CSS class for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TrailingIconCss"}},{"Kind":"Components.Component","Name":"TrailingIconUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the leading icon url for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TrailingIconUrl"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            This value property helps to store the chip component values.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as title to the each chip element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipItem"}},{"HashCode":650114004,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.ChipItem","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            A Chip is a small block of essential information that contains the text, image, or both and mostly used in contacts, mails, or filter tags.\n            </summary>\n            <summary>\n            Partial Class ChipItem.\n            </summary>\n            <summary>\n            Partial Class ChipItem.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.ChipItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the custom classes to be added to the chip element used to customize the Chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Specifies a value that indicates whether the chip component is enabled or not.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"LeadingIconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the leading icon CSS class for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LeadingIconCss"}},{"Kind":"Components.Component","Name":"LeadingIconUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the leading icon url for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LeadingIconUrl"}},{"Kind":"Components.Component","Name":"LeadingText","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the customized text value for the avatar in the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"LeadingText"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the text content for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"TrailingIconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the trailing icon CSS class for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TrailingIconCss"}},{"Kind":"Components.Component","Name":"TrailingIconUrl","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the leading icon url for the chip.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"TrailingIconUrl"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary>\n            This value property helps to store the chip component values.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as title to the each chip element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipItem","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-692779745,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.ChipItem.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"ChipItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipItem.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1206945560,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.ChipItem.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.ChipItem"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipItem.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1661410653,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.ChipItems","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Configures the collection of chipitem.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChipItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Indicates the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipItems"}},{"HashCode":-140139727,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.ChipItems","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Configures the collection of chipitem.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.ChipItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Indicates the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipItems","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-911155546,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.ChipItems.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Indicates the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"ChipItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipItems.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-190112130,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.ChipItems.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Indicates the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.ChipItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.ChipItems.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-967927538,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfChip","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            The SfChip component displays a list of chip each of which contains a block of essential information that triggers an event on click action.\n            </summary>\n            <summary>\n            Partial Class SfChip.\n            </summary>\n            <summary>\n            Specifies the Partial class SfChip.\n            </summary>\n            <summary>\n            Partial Class SfChip.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfChip"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the custom classes to be added to the chip element used to customize the chip component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Chips","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Buttons.ChipItem>","Documentation":"\n            <summary>\n            This chips property helps to render chipitem component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Chips"}},{"Kind":"Components.Component","Name":"EnableDelete","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            This enableDelete property helps to enable delete functionality.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableDelete"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            This enabled property helps to enable/disable chipitem component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"SelectedChips","TypeName":"System.String[]","Documentation":"\n            <summary>\n            This selectedChips property helps to select chip items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectedChips"}},{"Kind":"Components.Component","Name":"SelectedChipsChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the selected chips changes.\n            </summary>\n            <remarks>\n            You can get the updated SelectedChips value.\n            </remarks>\n            <example>\n            In the below code example, the SelectedChips value can be obtained from the <c>SelectedChipsChanged</c> event.\n            <code><![CDATA[\n            <SfChip Selection=\"SelectionType.Multiple\" SelectedChipsChanged=\"SelectedChipsChanged\">\n                <ChipItems>\n                    <ChipItem Text = \"Small\"></ChipItem>\n                    <ChipItem Text = \"Medium\"></ChipItem>\n                    <ChipItem Text = \"Large\"></ChipItem>\n                    <ChipItem Text = \"Extra Large\"></ChipItem>\n                </ChipItems>\n            </SfChip>\n            @code {\n                private void SelectedChipsChanged(string[] args) {\n                    string[] selectedChipItem = args;\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"SelectedChipsChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Selection","TypeName":"Syncfusion.Blazor.Buttons.SelectionType","IsEnum":true,"Documentation":"\n            <summary>\n            This selection property enables chip selection type.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selection"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as title, native events etc., to the wrapper element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfChip"}},{"HashCode":586521084,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfChip","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            The SfChip component displays a list of chip each of which contains a block of essential information that triggers an event on click action.\n            </summary>\n            <summary>\n            Partial Class SfChip.\n            </summary>\n            <summary>\n            Specifies the Partial class SfChip.\n            </summary>\n            <summary>\n            Partial Class SfChip.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfChip"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary>\n            Specifies the custom classes to be added to the chip element used to customize the chip component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Chips","TypeName":"System.Collections.Generic.List<Syncfusion.Blazor.Buttons.ChipItem>","Documentation":"\n            <summary>\n            This chips property helps to render chipitem component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Chips"}},{"Kind":"Components.Component","Name":"EnableDelete","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            This enableDelete property helps to enable delete functionality.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableDelete"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Enable or disable rendering component in right to left direction.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"Enabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            This enabled property helps to enable/disable chipitem component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Enabled"}},{"Kind":"Components.Component","Name":"SelectedChips","TypeName":"System.String[]","Documentation":"\n            <summary>\n            This selectedChips property helps to select chip items.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"SelectedChips"}},{"Kind":"Components.Component","Name":"SelectedChipsChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"\n            <summary>\n            Specifies the callback to trigger when the selected chips changes.\n            </summary>\n            <remarks>\n            You can get the updated SelectedChips value.\n            </remarks>\n            <example>\n            In the below code example, the SelectedChips value can be obtained from the <c>SelectedChipsChanged</c> event.\n            <code><![CDATA[\n            <SfChip Selection=\"SelectionType.Multiple\" SelectedChipsChanged=\"SelectedChipsChanged\">\n                <ChipItems>\n                    <ChipItem Text = \"Small\"></ChipItem>\n                    <ChipItem Text = \"Medium\"></ChipItem>\n                    <ChipItem Text = \"Large\"></ChipItem>\n                    <ChipItem Text = \"Extra Large\"></ChipItem>\n                </ChipItems>\n            </SfChip>\n            @code {\n                private void SelectedChipsChanged(string[] args) {\n                    string[] selectedChipItem = args;\n                }\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"SelectedChipsChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Selection","TypeName":"Syncfusion.Blazor.Buttons.SelectionType","IsEnum":true,"Documentation":"\n            <summary>\n            This selection property enables chip selection type.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"Selection"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            You can add the additional html attributes such as title, native events etc., to the wrapper element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfChip","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1932990944,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfChip.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfChip"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfChip.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-887525433,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfChip.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Specifies the ChildContent.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.SfChip"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfChip.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1028396880,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfFab","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            The Blazor FAB Component (Floating Action Button) is an extension of <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> that appears in front of all the contents of the page and performs the primary action.\n            </summary> \n            <example> \n            A simple FAB with text content.\n            <code><![CDATA[ \n            <SfFab Content=\"Click\"/>\n            ]]></code> \n            FAB with icon.\n            <code><![CDATA[ \n            <SfFab IconCss=\"e-icons e-search\"/> \n            ]]></code> \n            FAB with icon and text.\n            <code><![CDATA[ \n            <SfFab IconCss=\"e-icons e-search\" Content=\"Search\"/>\n            ]]></code> \n            FAB with info button style.\n            <code><![CDATA[ \n            <SfFab CssClass=\"e-info\" IconCss=\"e-icons e-search\"/>\n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfFab"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to apply primary style for FAB. \n            </summary> \n            <value> \n            <c>true</c>, if the primary style is applied for FAB component. The default value is <c>true</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsPrimary"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the selector that points to an element in which the FAB will be positioned. \n            </summary> \n            <value> \n            The default value is <c>null</c> where FAB is positioned based on viewport of browser.\n            </value> \n            <remarks>\n            The target element must have relative position, else FAB will get positioned based on the closest element which has relative position.\n            </remarks>\n            <example> \n            Simple FAB with target.\n            <code><![CDATA[ \n            <div id=\"target_element\" style=\"position:relative;\"></div>\n            <SfFab Content=\"Click\" Target=\"#target_element\"/>\n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Target"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether the FAB is visible or hidden. \n            </summary> \n            <value> \n            <c>true</c>, if the FAB is visible. The default value is <c>true</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Visible"}},{"Kind":"Components.Component","Name":"Position","TypeName":"Syncfusion.Blazor.Buttons.FabPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets the value that indicates the position of the FAB relative to <see cref=\"P:Syncfusion.Blazor.Buttons.SfFab.Target\" />. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.FabPosition\" /> enumeration that specifies the position of FAB. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.FabPosition.BottomRight\" />.\n            </value> \n            <remarks>\n            To refresh the position of FAB on <see cref=\"P:Syncfusion.Blazor.Buttons.SfFab.Target\" /> resized, use <see cref=\"M:Syncfusion.Blazor.Buttons.SfFab.RefreshPositionAsync\" /> method. \n            The position will be refreshed automatically when browser resized.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Position"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the Button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of Button component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive, to render as HTML content. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Content"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of button. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the button. \n            </summary> \n            <value> \n            <c>true</c>, if the button component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction for button. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to include an icon or image for the button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.IconPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconPosition.Left\" /> \n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the button. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the button. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the button. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"IconPosition"}},{"Kind":"Components.Component","Name":"IsToggle","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the toggle option for button component. \n            </summary> \n            <value> \n            <c>true</c>, if the toggle option is enabled for button component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsToggle"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive. \n            <code><![CDATA[ \n            <SfButton style=\"width:200px\"> \n            </SfButton> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> is clicked.  \n            </summary> \n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfButton OnClick=\"@Clicked\"> \n            </SfButton> \n            @code { \n                private void Clicked(MouseEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClick","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> rendering is completed.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfFab"}},{"HashCode":-242423739,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfFab","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            The Blazor FAB Component (Floating Action Button) is an extension of <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> that appears in front of all the contents of the page and performs the primary action.\n            </summary> \n            <example> \n            A simple FAB with text content.\n            <code><![CDATA[ \n            <SfFab Content=\"Click\"/>\n            ]]></code> \n            FAB with icon.\n            <code><![CDATA[ \n            <SfFab IconCss=\"e-icons e-search\"/> \n            ]]></code> \n            FAB with icon and text.\n            <code><![CDATA[ \n            <SfFab IconCss=\"e-icons e-search\" Content=\"Search\"/>\n            ]]></code> \n            FAB with info button style.\n            <code><![CDATA[ \n            <SfFab CssClass=\"e-info\" IconCss=\"e-icons e-search\"/>\n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfFab"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"IsPrimary","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to apply primary style for FAB. \n            </summary> \n            <value> \n            <c>true</c>, if the primary style is applied for FAB component. The default value is <c>true</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsPrimary"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the selector that points to an element in which the FAB will be positioned. \n            </summary> \n            <value> \n            The default value is <c>null</c> where FAB is positioned based on viewport of browser.\n            </value> \n            <remarks>\n            The target element must have relative position, else FAB will get positioned based on the closest element which has relative position.\n            </remarks>\n            <example> \n            Simple FAB with target.\n            <code><![CDATA[ \n            <div id=\"target_element\" style=\"position:relative;\"></div>\n            <SfFab Content=\"Click\" Target=\"#target_element\"/>\n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Target"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether the FAB is visible or hidden. \n            </summary> \n            <value> \n            <c>true</c>, if the FAB is visible. The default value is <c>true</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Visible"}},{"Kind":"Components.Component","Name":"Position","TypeName":"Syncfusion.Blazor.Buttons.FabPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets the value that indicates the position of the FAB relative to <see cref=\"P:Syncfusion.Blazor.Buttons.SfFab.Target\" />. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.FabPosition\" /> enumeration that specifies the position of FAB. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.FabPosition.BottomRight\" />.\n            </value> \n            <remarks>\n            To refresh the position of FAB on <see cref=\"P:Syncfusion.Blazor.Buttons.SfFab.Target\" /> resized, use <see cref=\"M:Syncfusion.Blazor.Buttons.SfFab.RefreshPositionAsync\" /> method. \n            The position will be refreshed automatically when browser resized.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Position"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the Button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the content of Button component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            Set child content within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive, to render as HTML content. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Content"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to customize the appearance of button. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the button. \n            </summary> \n            <value> \n            <c>true</c>, if the button component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction for button. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for button. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the CSS class string to include an icon or image for the button.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display icons in the button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.IconPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconPosition.Left\" /> \n            </value> \n            <remarks> \n            If the <c>IconPosition</c> is <c>Left</c>, the icon will be placed left to the content of the button. \n            If the <c>IconPosition</c> is <c>Right</c>, the icon will be placed right to the content of the button. \n            If the <c>IconPosition</c> is <c>Top</c>, the icon will be placed above the content of the button. \n            If the <c>IconPosition</c> is <c>Bottom</c>, the icon will be placed below the content of the button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"IconPosition"}},{"Kind":"Components.Component","Name":"IsToggle","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the toggle option for button component. \n            </summary> \n            <value> \n            <c>true</c>, if the toggle option is enabled for button component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IsToggle"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive. \n            <code><![CDATA[ \n            <SfButton style=\"width:200px\"> \n            </SfButton> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"OnClick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> is clicked.  \n            </summary> \n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfButton OnClick=\"@Clicked\"> \n            </SfButton> \n            @code { \n                private void Clicked(MouseEventArgs args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"OnClick","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> rendering is completed.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfFab","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2035267305,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfFab.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the Button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfFab"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfFab.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1096713702,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfFab.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the Button including HTML element. If the child content is not specified, button is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfButton\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfButton.Content\" /> property. \n            </remarks> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.SfFab"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfFab.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1571280292,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfIcon","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            SfIcon component used to render the predefined syncfusion icons using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.Name\" /> property or custom font icons using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.IconCss\" /> property.\n            </summary>\n            <example>\n            The below example shows loading syncfusion icon using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.Name\" /> property.\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Italic\" Title=\"Italic\"></SfIcon>\n            ]]></code>\n            The below example shows loading syncfusion icon using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.IconCss\" /> property.\n            <code><![CDATA[\n            <SfIcon IconCss=\"e-icons e-bold\" Title=\"Bold\"></SfIcon>\n            ]]></code>\n            The below example shows loading third party icon using <see cref=\"T:Syncfusion.Blazor.Buttons.SfIcon\" /> component.\n            Plus icon were loaded from open iconic, by defining the open iconic font CSS.\n            <code><![CDATA[\n            <SfIcon IconCss=\"oi oi-plus\" Title=\"Plus\"></SfIcon>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfIcon"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content for Icon component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to icon element.\n            </summary>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            In the below code example, font size of the icon customized using <c>@attributes</c> directive.\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Copy\" @attributes=\"customAttribute\"></SfIcon>\n            @code{\n               Dictionary<string, object> customAttribute = new Dictionary<string, object>()\n               {\n                   { \"style\", \"font-size: 20px\" }\n               };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string which can be used to provide custom icon or custom style for icons.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to provide custom icon or custom style for icons. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            IconCss property used to append custom class to the predefined icons. This property will also render the customized icons like font-awesome icons.\n            </remarks>\n            <example>\n            In the below example custom icon is loaded using <c>IconCss</c> property.\n            <code><![CDATA[\n            <SfIcon IconCss=\"oi oi-home\"></SfIcon>\n            ]]></code>\n            In the below example icon color is customized using <c>IconCss</c> property.\n            <code><![CDATA[\n            <SfIcon IconCss=\"oi oi-plus color-red\"></SfIcon>\n            <style>\n                .color-red {\n                   color: red; \n                }\n            </style>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"Name","TypeName":"Syncfusion.Blazor.Buttons.IconName","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the name of the built-in syncfusion icons to render. \n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.IconName\" /> enumeration.\n            </value>\n            <remarks>\n            This property is used to render icons from predefined <see cref=\"T:Syncfusion.Blazor.Buttons.IconName\" /> options. You can use <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.IconCss\" /> to load custom icons.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Bold\"></SfIcon>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Name"}},{"Kind":"Components.Component","Name":"Size","TypeName":"Syncfusion.Blazor.Buttons.IconSize","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the size of the icon.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.IconSize\" /> enumeration that specifies the size of the icon. \n            The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconSize.Medium\" />\n            </value>\n            <remarks>\n            The Size property used to set font size for icons. This property will considered only when icons are rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.Name\" /> property.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Paste\" Size=\"IconSize.Large\"></SfIcon>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Size"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets title attribute for icon.\n            </summary>\n            <value>\n            Accepts a string. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            Title attribute used to improve accessibility with screen readers and show a tooltip on mouse over the icon.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Cut\" Title=\"Cut\"></SfIcon>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Title"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfIcon"}},{"HashCode":1581944166,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfIcon","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            SfIcon component used to render the predefined syncfusion icons using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.Name\" /> property or custom font icons using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.IconCss\" /> property.\n            </summary>\n            <example>\n            The below example shows loading syncfusion icon using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.Name\" /> property.\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Italic\" Title=\"Italic\"></SfIcon>\n            ]]></code>\n            The below example shows loading syncfusion icon using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.IconCss\" /> property.\n            <code><![CDATA[\n            <SfIcon IconCss=\"e-icons e-bold\" Title=\"Bold\"></SfIcon>\n            ]]></code>\n            The below example shows loading third party icon using <see cref=\"T:Syncfusion.Blazor.Buttons.SfIcon\" /> component.\n            Plus icon were loaded from open iconic, by defining the open iconic font CSS.\n            <code><![CDATA[\n            <SfIcon IconCss=\"oi oi-plus\" Title=\"Plus\"></SfIcon>\n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfIcon"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content for Icon component.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to icon element.\n            </summary>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            In the below code example, font size of the icon customized using <c>@attributes</c> directive.\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Copy\" @attributes=\"customAttribute\"></SfIcon>\n            @code{\n               Dictionary<string, object> customAttribute = new Dictionary<string, object>()\n               {\n                   { \"style\", \"font-size: 20px\" }\n               };\n            }\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets a CSS class string which can be used to provide custom icon or custom style for icons.\n            </summary>\n            <value>\n            Accepts a CSS class string separated by space to provide custom icon or custom style for icons. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            IconCss property used to append custom class to the predefined icons. This property will also render the customized icons like font-awesome icons.\n            </remarks>\n            <example>\n            In the below example custom icon is loaded using <c>IconCss</c> property.\n            <code><![CDATA[\n            <SfIcon IconCss=\"oi oi-home\"></SfIcon>\n            ]]></code>\n            In the below example icon color is customized using <c>IconCss</c> property.\n            <code><![CDATA[\n            <SfIcon IconCss=\"oi oi-plus color-red\"></SfIcon>\n            <style>\n                .color-red {\n                   color: red; \n                }\n            </style>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"Name","TypeName":"Syncfusion.Blazor.Buttons.IconName","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the name of the built-in syncfusion icons to render. \n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.IconName\" /> enumeration.\n            </value>\n            <remarks>\n            This property is used to render icons from predefined <see cref=\"T:Syncfusion.Blazor.Buttons.IconName\" /> options. You can use <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.IconCss\" /> to load custom icons.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Bold\"></SfIcon>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Name"}},{"Kind":"Components.Component","Name":"Size","TypeName":"Syncfusion.Blazor.Buttons.IconSize","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the size of the icon.\n            </summary>\n            <value>\n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.IconSize\" /> enumeration that specifies the size of the icon. \n            The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconSize.Medium\" />\n            </value>\n            <remarks>\n            The Size property used to set font size for icons. This property will considered only when icons are rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfIcon.Name\" /> property.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Paste\" Size=\"IconSize.Large\"></SfIcon>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Size"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"\n            <summary>\n            Gets or sets title attribute for icon.\n            </summary>\n            <value>\n            Accepts a string. The default value is <c>String.Empty</c>.\n            </value>\n            <remarks>\n            Title attribute used to improve accessibility with screen readers and show a tooltip on mouse over the icon.\n            </remarks>\n            <example>\n            <code><![CDATA[\n            <SfIcon Name=\"IconName.Cut\" Title=\"Cut\"></SfIcon>\n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"Title"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfIcon","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2032346339,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfIcon.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content for Icon component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfIcon"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfIcon.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":18564832,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfIcon.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content for Icon component.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.SfIcon"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfIcon.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":240066662,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            RadioButton is a graphical user interface element that allows you to select one option from the choices. \n            It has checked and unchecked states. \n            </summary> \n            <example> \n            In the below code example, a basic radiobutton is initialized with <c>Checked</c> property. \n            <code><![CDATA[ \n            <SfRadioButton Checked=\"true\"> \n            </SfRadioButton> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfRadioButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TChecked","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TChecked for the Syncfusion.Blazor.Buttons.SfRadioButton<TChecked> component.","Metadata":{"Common.PropertyName":"TChecked","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the label of radio button. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelPosition","TypeName":"Syncfusion.Blazor.Buttons.LabelPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display label in the radio button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.Buttons.SfRadioButton`1.LabelPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.LabelPosition.Before\" /> \n            </value> \n            <remarks> \n            If the <c>LabelPosition</c> is <c>Before</c>, the label will be placed to the left side of the Radio Button. \n            If the <c>LabelPosition</c> is <c>After</c>, the icon will be placed to the right side of the Radio Button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"LabelPosition"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChangeArgs<TChecked>>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the radio button state is changed.  \n            </summary> \n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfRadioButton ValueChange=\"@Changed\"> \n            </SfRadioButton> \n            @code { \n                private void Changed(ChangeEventArgs<TChecked> args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates CSS class string to customize the appearance of the component. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of the component. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the name of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Name\" /> property is used to set the name attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Name"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the value of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Value\" /> property is used to set the value attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"Checked","TypeName":"TChecked","Documentation":"\n            <summary> \n            Gets or sets whether to check or uncheck the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is checked. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Checked","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TChecked>>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction option for the component. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for the component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property is persisted. \n            </summary> \n            <value> \n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            Component's <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property will be stored in browser local storage to persist component's state when page reloads. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the component rendering is completed.  \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>","Components.GenericTyped":"True"}},{"HashCode":-1353687136,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            RadioButton is a graphical user interface element that allows you to select one option from the choices. \n            It has checked and unchecked states. \n            </summary> \n            <example> \n            In the below code example, a basic radiobutton is initialized with <c>Checked</c> property. \n            <code><![CDATA[ \n            <SfRadioButton Checked=\"true\"> \n            </SfRadioButton> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfRadioButton"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TChecked","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TChecked for the Syncfusion.Blazor.Buttons.SfRadioButton<TChecked> component.","Metadata":{"Common.PropertyName":"TChecked","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"Label","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the label of radio button. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Label"}},{"Kind":"Components.Component","Name":"LabelPosition","TypeName":"Syncfusion.Blazor.Buttons.LabelPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets a value that indicates how to display label in the radio button. \n            </summary> \n            <value> \n            One of the <see cref=\"P:Syncfusion.Blazor.Buttons.SfRadioButton`1.LabelPosition\" /> enumeration. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.LabelPosition.Before\" /> \n            </value> \n            <remarks> \n            If the <c>LabelPosition</c> is <c>Before</c>, the label will be placed to the left side of the Radio Button. \n            If the <c>LabelPosition</c> is <c>After</c>, the icon will be placed to the right side of the Radio Button. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"LabelPosition"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChangeArgs<TChecked>>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the radio button state is changed.  \n            </summary> \n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfRadioButton ValueChange=\"@Changed\"> \n            </SfRadioButton> \n            @code { \n                private void Changed(ChangeEventArgs<TChecked> args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates CSS class string to customize the appearance of the component. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of the component. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the name of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Name\" /> property is used to set the name attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Name"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the value of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Value\" /> property is used to set the value attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"Checked","TypeName":"TChecked","Documentation":"\n            <summary> \n            Gets or sets whether to check or uncheck the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is checked. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Checked","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TChecked>>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction option for the component. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for the component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property is persisted. \n            </summary> \n            <value> \n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            Component's <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property will be stored in browser local storage to persist component's state when page reloads. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the component rendering is completed.  \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1470368906,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfRadioButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-1257587902,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.SfRadioButton"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":973365809,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfSpeedDial","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            The Blazor SpeedDial component that appears in front of all the contents of the page and \n            displays list of action buttons on click which is an extended version of FAB.\n            </summary> \n            <remarks>\n            The button of speed dial is positioned in relative to a view port of browser or <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Target\" />.\n            It can display a menu of related actions <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItems\" /> or a custom content <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.PopupTemplate\" />.\n            </remarks>\n            <example> \n            A simple SpeedDial with action items.\n            <code><![CDATA[ \n            <SfSpeedDial Content=\"Edit\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                    <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code> \n            A SpeedDial with popup template.\n            <code><![CDATA[ \n             <SfSpeedDial Content=\"FeedBack\"> \n                <PopupTemplate>\n                    <div class=\"form-content\">\n                        <h4 style = \"text-align:center\" > Feedback Form</h4>\n                        <b>Name</b><br>\n                        <input placeholder=\"Enter Name\"><br>\n                        <b>Leave Your Comments</b>\n                        <textarea placeholder=\"Enter Your Comments\" style=\"width:100%\"></textarea><br>\n                        <button type=\"submit\">Submit</button>\n                        <button>Cancel</button>\n                    </div>\n                </PopupTemplate>\n            </SfSpeedDial> \n            ]]></code> \n            </example> \n            <seealso cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialAnimationSettings\" />\n            <seealso cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItems\" />\n            <seealso cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialRadialSettings\" />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSpeedDial"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"CloseIconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets one or more CSS classes to include an icon or image to denote the speed dial is opened and displaying menu items.\n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the button. The default value is String.Empty.\n            </value> \n            <remarks> \n            If the `CloseIconCss` is <c>String.Empty</c>, then the <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.OpenIconCss\" /> is used when SpeedDial is open as well.\n            </remarks> \n        ","Metadata":{"Common.PropertyName":"CloseIconCss"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the content for the button of SpeedDial. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Content"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets one or more CSS classes to customize the appearance of SpeedDial. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Direction","TypeName":"Syncfusion.Blazor.Buttons.LinearDirection","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the value that indicates the speed dial action items (<see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItems\" />) display direction when <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Mode\" /> is <see cref=\"F:Syncfusion.Blazor.Buttons.SpeedDialMode.Linear\" />. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.LinearDirection\" /> enumeration that specifies the direction of speed dial items in linear mode. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.LinearDirection.Auto\" />\n            </value> \n        ","Metadata":{"Common.PropertyName":"Direction"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the SpeedDial. \n            </summary> \n            <value> \n            <c>true</c>, if the button component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.Buttons.SpeedDialMode","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the value that indicates the display mode (linear and radial mode) of speed dial action items. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialMode\" /> enumeration that specifies how the speed dial items are displayed. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.SpeedDialMode.Linear\" />\n            </value> \n        ","Metadata":{"Common.PropertyName":"Mode"}},{"Kind":"Components.Component","Name":"IsModal","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the value that indicates whether the speeddial popup can be displayed as modal or modal less.\n            </summary>\n            <value> \n            <c>true</c>, if the Speed dial creates an overlay that disables interaction with other elements other than speed dial items. \n            If user clicks anywhere other than speed dial items then popup will get closed.\n            The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"IsModal"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Buttons.SpeedDialItem>","Documentation":"\n             <summary> \n             Gets or sets a template content for the <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" />. The template content is defined as a child content of <b>ItemTemplate</b> tag directive\n             </summary> \n             <value> \n             The template content. The default value is <c>null</c>. \n             </value> \n             <remarks>\n             The `ItemTemplate` used to define custom template for speed dial item. Use the template’s context parameter to access <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" /> properties.\n             </remarks>\n             <example> \n             SpeedDial with item template.\n             <code><![CDATA[ \n             <SfSpeedDial Content=\"Edit\"> \n                <ChildContent>\n                 <SpeedDialItems>\n                     <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                     <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                 </SpeedDialItems>\n                </ChildContent>\n                <ItemTemplate>\n                     <div style = \"border: 1px solid lightgreen; background-color:white;\" >\n                         <span>@context.Text</span>\n                     </div>\n                </ItemTemplate> \n            </SfSpeedDial> \n             ]]></code> \n             </example>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"OpenIconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets one or more CSS classes to include an icon or image for the button of SpeedDial when it's closed.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the SpeedDial. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"OpenIconCss"}},{"Kind":"Components.Component","Name":"OpensOnHover","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to open the popup when the button of SpeedDial is hovered. By default, SpeedDial opens popup on click action.\n            </summary> \n            <value> \n            <c>true</c>, if the SpeedDial opens popup on mouse hover action. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"OpensOnHover"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets the value that indicates the position of icon in the button of speed dial. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.IconPosition\" /> enumeration that specifies the position of icon. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconPosition.Left\" />.\n            </value> \n        ","Metadata":{"Common.PropertyName":"IconPosition"}},{"Kind":"Components.Component","Name":"PopupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a template content for popup of SpeedDial. The template content is defined as a child content of <b>PopupTemplate</b> tag directive\n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <example> \n            SpeedDial with popup template.\n            <code><![CDATA[ \n             <SfSpeedDial Content=\"FeedBack\"> \n                <PopupTemplate>\n                    <div class=\"form-content\">\n                        <h4 style = \"text-align:center\" > Feedback Form</h4>\n                        <b>Name</b><br>\n                        <input placeholder=\"Enter Name\"><br>\n                        <b>Leave Your Comments</b>\n                        <textarea placeholder=\"Enter Your Comments\" style=\"width:100%\"></textarea><br>\n                        <button type=\"submit\">Submit</button>\n                        <button>Cancel</button>\n                    </div>\n                </PopupTemplate>\n            </SfSpeedDial> \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"PopupTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Position","TypeName":"Syncfusion.Blazor.Buttons.FabPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets the value that indicates the position of the button of Speed Dial relative to <see cref=\"P:Syncfusion.Blazor.Buttons.SfFab.Target\" />. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.FabPosition\" /> enumeration that specifies the position of SpeedDial. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.FabPosition.BottomRight\" />.\n            </value> \n            <remarks>\n            To refresh the position of button of speed dial on <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Target\" /> resized, use <see cref=\"M:Syncfusion.Blazor.Buttons.SfSpeedDial.RefreshPositionAsync\" /> method. \n            The position will be refreshed automatically when browser resized.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Position"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the selector that points to the element in which the button of SpeedDial will be positioned. \n            </summary> \n            <value> \n            The default value is <c>null</c> where button is positioned based on viewport of browser.\n            </value> \n            <remarks>\n            The target element must have relative position, else Button will get positioned based on the closest element which has relative position.\n            </remarks>\n            <example> \n            Simple SpeedDial with target.\n            <code><![CDATA[\n            <div id=\"target_element\" style=\"position:relative;\"></div>\n            <SfSpeedDial Content=\"Edit\" Target=\"#arget_element\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                    <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Target"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether the SpeedDial is visible or hidden. \n            </summary> \n            <value> \n            <c>true</c>, if the SpeedDial is visible. The default value is <c>true</c>. \n            </value> \n            <remarks> \n            Supports two-way binding. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Visible"}},{"Kind":"Components.Component","Name":"VisibleChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Visible\" /> property is changed.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"VisibleChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the SpeedDial including HTML element. If the child content is not specified, SpeedDial is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Content\" /> property. \n            </remarks> \n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary> \n            Gets or sets a collection of additional attributes that will applied to the SpeedDial button element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> tag directive. \n            <code><![CDATA[ \n            <SfSpeedDial style=\"width:200px\" Content=\"Edit\" > \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                    <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code> \n            In the below code example, aria-label (accessibility attribute) has been specified as an attribute in <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> tag directive. \n            <code><![CDATA[ \n            <SfSpeedDial aria-label=\"Edit\" OpenIconCss=\"EditIcon\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                    <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n             <summary> \n             Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> rendering is completed.  \n             </summary> \n             <example> \n             <code><![CDATA[ \n             <SfSpeedDial Content=\"Edit\" Created=\"created\"> \n                <ChildContent>\n                 <SpeedDialItems>\n                     <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                     <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                 </SpeedDialItems>\n                </ChildContent>\n            </SfSpeedDial> \n            @code {\n                 private created (){\n                     Console.WriteLine(\"SpeedDial Created\");\n                 }\n            }\n             ]]></code> \n             </example>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemClicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SpeedDialItemEventArgs>","Documentation":"\n             <summary> \n             Gets or sets an event callback that is raised when a speed dial action item is clicked.  \n             </summary> \n             <example> \n             <code><![CDATA[ \n             <SfSpeedDial Content=\"Edit\" ItemClicked=\"itemclicked\"> \n                <ChildContent>\n                 <SpeedDialItems>\n                     <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                     <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                 </SpeedDialItems>\n                </ChildContent>\n            </SfSpeedDial> \n            @code {\n                 private itemclicked(SpeedDialItemEventArgs args){\n                     Console.WriteLine(args.Item.Text + \" is SpeedDial Clicked\");\n                 }\n            }\n             ]]></code> \n             </example> \n        ","Metadata":{"Common.PropertyName":"ItemClicked","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemRendered","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SpeedDialItemEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when a <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" /> is rendered.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"ItemRendered","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SpeedDialOpenCloseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the SpeedDial popup is closed.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"Closed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SpeedDialOpenCloseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the SpeedDial popup is opened.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"Opened","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SpeedDialBeforeOpenCloseEventArgs>","Documentation":"\n             <summary> \n             Gets or sets an event callback that is raised before the speed dial popup is closed.  \n             </summary> \n             <remarks> \n             <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Closing\" /> is a canceable event. To cancel the closing action of SpeedDial Popup, \n             set the <see cref=\"P:Syncfusion.Blazor.Buttons.SpeedDialBeforeOpenCloseEventArgs.Cancel\" /> property as <c>true</c>.\n             </remarks> \n             <example> \n             SpeedDial with `Closing` event.\n             <code><![CDATA[ \n             <SfSpeedDial Content=\"Edit\" Closing=\"closing\"> \n                <ChildContent>\n                 <SpeedDialItems>\n                     <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                     <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                 </SpeedDialItems>\n                </ChildContent>\n            </SfSpeedDial> \n            @code {\n                 private closing(SpeedDialBeforeOpenCloseEventArgs args){\n                     args.Cancel = false; //Set as true to prevent closing of SpeedDial popup.\n                 }\n            }\n             ]]></code> \n             </example> \n        ","Metadata":{"Common.PropertyName":"Closing","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opening","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SpeedDialBeforeOpenCloseEventArgs>","Documentation":"\n             <summary> \n             Gets or sets an event callback that is raised before the speed dial popup is opened.    \n             </summary> \n             <remarks> \n             <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Opening\" /> is a canceable event. To cancel the opening action of SpeedDial Popup , \n             set the <see cref=\"P:Syncfusion.Blazor.Buttons.SpeedDialBeforeOpenCloseEventArgs.Cancel\" /> property as <c>true</c>.\n             </remarks> \n             <example> \n             SpeedDial with Opening event.\n             <code><![CDATA[ \n             <SfSpeedDial Content=\"Edit\" Opening=\"opening\"> \n                <ChildContent>\n                 <SpeedDialItems>\n                     <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                     <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                 </SpeedDialItems>\n                </ChildContent>\n            </SfSpeedDial> \n            @code {\n                 private opening(SpeedDialBeforeOpenCloseEventArgs args){\n                     args.Cancel = false; //Set as true to prevent opening of SpeedDial popup.\n                 }\n            }\n             ]]></code> \n             </example> \n        ","Metadata":{"Common.PropertyName":"Opening","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial"}},{"HashCode":1446433267,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfSpeedDial","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            The Blazor SpeedDial component that appears in front of all the contents of the page and \n            displays list of action buttons on click which is an extended version of FAB.\n            </summary> \n            <remarks>\n            The button of speed dial is positioned in relative to a view port of browser or <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Target\" />.\n            It can display a menu of related actions <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItems\" /> or a custom content <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.PopupTemplate\" />.\n            </remarks>\n            <example> \n            A simple SpeedDial with action items.\n            <code><![CDATA[ \n            <SfSpeedDial Content=\"Edit\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                    <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code> \n            A SpeedDial with popup template.\n            <code><![CDATA[ \n             <SfSpeedDial Content=\"FeedBack\"> \n                <PopupTemplate>\n                    <div class=\"form-content\">\n                        <h4 style = \"text-align:center\" > Feedback Form</h4>\n                        <b>Name</b><br>\n                        <input placeholder=\"Enter Name\"><br>\n                        <b>Leave Your Comments</b>\n                        <textarea placeholder=\"Enter Your Comments\" style=\"width:100%\"></textarea><br>\n                        <button type=\"submit\">Submit</button>\n                        <button>Cancel</button>\n                    </div>\n                </PopupTemplate>\n            </SfSpeedDial> \n            ]]></code> \n            </example> \n            <seealso cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialAnimationSettings\" />\n            <seealso cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItems\" />\n            <seealso cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialRadialSettings\" />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfSpeedDial"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"CloseIconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets one or more CSS classes to include an icon or image to denote the speed dial is opened and displaying menu items.\n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the button. The default value is String.Empty.\n            </value> \n            <remarks> \n            If the `CloseIconCss` is <c>String.Empty</c>, then the <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.OpenIconCss\" /> is used when SpeedDial is open as well.\n            </remarks> \n        ","Metadata":{"Common.PropertyName":"CloseIconCss"}},{"Kind":"Components.Component","Name":"Content","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the content for the button of SpeedDial. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Content"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets one or more CSS classes to customize the appearance of SpeedDial. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of button. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Direction","TypeName":"Syncfusion.Blazor.Buttons.LinearDirection","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the value that indicates the speed dial action items (<see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItems\" />) display direction when <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Mode\" /> is <see cref=\"F:Syncfusion.Blazor.Buttons.SpeedDialMode.Linear\" />. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.LinearDirection\" /> enumeration that specifies the direction of speed dial items in linear mode. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.LinearDirection.Auto\" />\n            </value> \n        ","Metadata":{"Common.PropertyName":"Direction"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the SpeedDial. \n            </summary> \n            <value> \n            <c>true</c>, if the button component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"Mode","TypeName":"Syncfusion.Blazor.Buttons.SpeedDialMode","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the value that indicates the display mode (linear and radial mode) of speed dial action items. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialMode\" /> enumeration that specifies how the speed dial items are displayed. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.SpeedDialMode.Linear\" />\n            </value> \n        ","Metadata":{"Common.PropertyName":"Mode"}},{"Kind":"Components.Component","Name":"IsModal","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets the value that indicates whether the speeddial popup can be displayed as modal or modal less.\n            </summary>\n            <value> \n            <c>true</c>, if the Speed dial creates an overlay that disables interaction with other elements other than speed dial items. \n            If user clicks anywhere other than speed dial items then popup will get closed.\n            The default value is <c>false</c>. \n            </value>\n        ","Metadata":{"Common.PropertyName":"IsModal"}},{"Kind":"Components.Component","Name":"ItemTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment<Syncfusion.Blazor.Buttons.SpeedDialItem>","Documentation":"\n             <summary> \n             Gets or sets a template content for the <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" />. The template content is defined as a child content of <b>ItemTemplate</b> tag directive\n             </summary> \n             <value> \n             The template content. The default value is <c>null</c>. \n             </value> \n             <remarks>\n             The `ItemTemplate` used to define custom template for speed dial item. Use the template’s context parameter to access <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" /> properties.\n             </remarks>\n             <example> \n             SpeedDial with item template.\n             <code><![CDATA[ \n             <SfSpeedDial Content=\"Edit\"> \n                <ChildContent>\n                 <SpeedDialItems>\n                     <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                     <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                 </SpeedDialItems>\n                </ChildContent>\n                <ItemTemplate>\n                     <div style = \"border: 1px solid lightgreen; background-color:white;\" >\n                         <span>@context.Text</span>\n                     </div>\n                </ItemTemplate> \n            </SfSpeedDial> \n             ]]></code> \n             </example>\n        ","Metadata":{"Common.PropertyName":"ItemTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"OpenIconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets one or more CSS classes to include an icon or image for the button of SpeedDial when it's closed.  \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the SpeedDial. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"OpenIconCss"}},{"Kind":"Components.Component","Name":"OpensOnHover","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to open the popup when the button of SpeedDial is hovered. By default, SpeedDial opens popup on click action.\n            </summary> \n            <value> \n            <c>true</c>, if the SpeedDial opens popup on mouse hover action. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"OpensOnHover"}},{"Kind":"Components.Component","Name":"IconPosition","TypeName":"Syncfusion.Blazor.Buttons.IconPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets the value that indicates the position of icon in the button of speed dial. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.IconPosition\" /> enumeration that specifies the position of icon. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.IconPosition.Left\" />.\n            </value> \n        ","Metadata":{"Common.PropertyName":"IconPosition"}},{"Kind":"Components.Component","Name":"PopupTemplate","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a template content for popup of SpeedDial. The template content is defined as a child content of <b>PopupTemplate</b> tag directive\n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <example> \n            SpeedDial with popup template.\n            <code><![CDATA[ \n             <SfSpeedDial Content=\"FeedBack\"> \n                <PopupTemplate>\n                    <div class=\"form-content\">\n                        <h4 style = \"text-align:center\" > Feedback Form</h4>\n                        <b>Name</b><br>\n                        <input placeholder=\"Enter Name\"><br>\n                        <b>Leave Your Comments</b>\n                        <textarea placeholder=\"Enter Your Comments\" style=\"width:100%\"></textarea><br>\n                        <button type=\"submit\">Submit</button>\n                        <button>Cancel</button>\n                    </div>\n                </PopupTemplate>\n            </SfSpeedDial> \n            ]]></code> \n            </example>\n        ","Metadata":{"Common.PropertyName":"PopupTemplate","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"Position","TypeName":"Syncfusion.Blazor.Buttons.FabPosition","IsEnum":true,"Documentation":"\n            <summary> \n            Gets or sets the value that indicates the position of the button of Speed Dial relative to <see cref=\"P:Syncfusion.Blazor.Buttons.SfFab.Target\" />. \n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.FabPosition\" /> enumeration that specifies the position of SpeedDial. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.FabPosition.BottomRight\" />.\n            </value> \n            <remarks>\n            To refresh the position of button of speed dial on <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Target\" /> resized, use <see cref=\"M:Syncfusion.Blazor.Buttons.SfSpeedDial.RefreshPositionAsync\" /> method. \n            The position will be refreshed automatically when browser resized.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Position"}},{"Kind":"Components.Component","Name":"Target","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the selector that points to the element in which the button of SpeedDial will be positioned. \n            </summary> \n            <value> \n            The default value is <c>null</c> where button is positioned based on viewport of browser.\n            </value> \n            <remarks>\n            The target element must have relative position, else Button will get positioned based on the closest element which has relative position.\n            </remarks>\n            <example> \n            Simple SpeedDial with target.\n            <code><![CDATA[\n            <div id=\"target_element\" style=\"position:relative;\"></div>\n            <SfSpeedDial Content=\"Edit\" Target=\"#arget_element\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                    <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"Target"}},{"Kind":"Components.Component","Name":"Visible","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether the SpeedDial is visible or hidden. \n            </summary> \n            <value> \n            <c>true</c>, if the SpeedDial is visible. The default value is <c>true</c>. \n            </value> \n            <remarks> \n            Supports two-way binding. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Visible"}},{"Kind":"Components.Component","Name":"VisibleChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets an event callback that is raised when the <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Visible\" /> property is changed.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"VisibleChanged","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the SpeedDial including HTML element. If the child content is not specified, SpeedDial is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Content\" /> property. \n            </remarks> \n            <exclude />\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary> \n            Gets or sets a collection of additional attributes that will applied to the SpeedDial button element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n            <example> \n            In the below code example, button width has been specified as style attribute in <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> tag directive. \n            <code><![CDATA[ \n            <SfSpeedDial style=\"width:200px\" Content=\"Edit\" > \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                    <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code> \n            In the below code example, aria-label (accessibility attribute) has been specified as an attribute in <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> tag directive. \n            <code><![CDATA[ \n            <SfSpeedDial aria-label=\"Edit\" OpenIconCss=\"EditIcon\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                    <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n             <summary> \n             Gets or sets an event callback that is raised when the <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> rendering is completed.  \n             </summary> \n             <example> \n             <code><![CDATA[ \n             <SfSpeedDial Content=\"Edit\" Created=\"created\"> \n                <ChildContent>\n                 <SpeedDialItems>\n                     <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                     <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                 </SpeedDialItems>\n                </ChildContent>\n            </SfSpeedDial> \n            @code {\n                 private created (){\n                     Console.WriteLine(\"SpeedDial Created\");\n                 }\n            }\n             ]]></code> \n             </example>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemClicked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SpeedDialItemEventArgs>","Documentation":"\n             <summary> \n             Gets or sets an event callback that is raised when a speed dial action item is clicked.  \n             </summary> \n             <example> \n             <code><![CDATA[ \n             <SfSpeedDial Content=\"Edit\" ItemClicked=\"itemclicked\"> \n                <ChildContent>\n                 <SpeedDialItems>\n                     <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                     <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                 </SpeedDialItems>\n                </ChildContent>\n            </SfSpeedDial> \n            @code {\n                 private itemclicked(SpeedDialItemEventArgs args){\n                     Console.WriteLine(args.Item.Text + \" is SpeedDial Clicked\");\n                 }\n            }\n             ]]></code> \n             </example> \n        ","Metadata":{"Common.PropertyName":"ItemClicked","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"ItemRendered","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SpeedDialItemEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when a <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" /> is rendered.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"ItemRendered","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closed","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SpeedDialOpenCloseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the SpeedDial popup is closed.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"Closed","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opened","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SpeedDialOpenCloseEventArgs>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the SpeedDial popup is opened.  \n            </summary> \n        ","Metadata":{"Common.PropertyName":"Opened","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Closing","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SpeedDialBeforeOpenCloseEventArgs>","Documentation":"\n             <summary> \n             Gets or sets an event callback that is raised before the speed dial popup is closed.  \n             </summary> \n             <remarks> \n             <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Closing\" /> is a canceable event. To cancel the closing action of SpeedDial Popup, \n             set the <see cref=\"P:Syncfusion.Blazor.Buttons.SpeedDialBeforeOpenCloseEventArgs.Cancel\" /> property as <c>true</c>.\n             </remarks> \n             <example> \n             SpeedDial with `Closing` event.\n             <code><![CDATA[ \n             <SfSpeedDial Content=\"Edit\" Closing=\"closing\"> \n                <ChildContent>\n                 <SpeedDialItems>\n                     <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                     <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                 </SpeedDialItems>\n                </ChildContent>\n            </SfSpeedDial> \n            @code {\n                 private closing(SpeedDialBeforeOpenCloseEventArgs args){\n                     args.Cancel = false; //Set as true to prevent closing of SpeedDial popup.\n                 }\n            }\n             ]]></code> \n             </example> \n        ","Metadata":{"Common.PropertyName":"Closing","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Opening","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.SpeedDialBeforeOpenCloseEventArgs>","Documentation":"\n             <summary> \n             Gets or sets an event callback that is raised before the speed dial popup is opened.    \n             </summary> \n             <remarks> \n             <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Opening\" /> is a canceable event. To cancel the opening action of SpeedDial Popup , \n             set the <see cref=\"P:Syncfusion.Blazor.Buttons.SpeedDialBeforeOpenCloseEventArgs.Cancel\" /> property as <c>true</c>.\n             </remarks> \n             <example> \n             SpeedDial with Opening event.\n             <code><![CDATA[ \n             <SfSpeedDial Content=\"Edit\" Opening=\"opening\"> \n                <ChildContent>\n                 <SpeedDialItems>\n                     <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                     <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                 </SpeedDialItems>\n                </ChildContent>\n            </SfSpeedDial> \n            @code {\n                 private opening(SpeedDialBeforeOpenCloseEventArgs args){\n                     args.Cancel = false; //Set as true to prevent opening of SpeedDial popup.\n                 }\n            }\n             ]]></code> \n             </example> \n        ","Metadata":{"Common.PropertyName":"Opening","Components.EventCallback":"True"}},{"Kind":"Components.Component","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for all child content expressions.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1372139112,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfSpeedDial.ItemTemplate","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n             <summary> \n             Gets or sets a template content for the <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" />. The template content is defined as a child content of <b>ItemTemplate</b> tag directive\n             </summary> \n             <value> \n             The template content. The default value is <c>null</c>. \n             </value> \n             <remarks>\n             The `ItemTemplate` used to define custom template for speed dial item. Use the template’s context parameter to access <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" /> properties.\n             </remarks>\n             <example> \n             SpeedDial with item template.\n             <code><![CDATA[ \n             <SfSpeedDial Content=\"Edit\"> \n                <ChildContent>\n                 <SpeedDialItems>\n                     <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                     <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                 </SpeedDialItems>\n                </ChildContent>\n                <ItemTemplate>\n                     <div style = \"border: 1px solid lightgreen; background-color:white;\" >\n                         <span>@context.Text</span>\n                     </div>\n                </ItemTemplate> \n            </SfSpeedDial> \n             ]]></code> \n             </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"SfSpeedDial"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial.ItemTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1117881601,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfSpeedDial.ItemTemplate","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n             <summary> \n             Gets or sets a template content for the <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" />. The template content is defined as a child content of <b>ItemTemplate</b> tag directive\n             </summary> \n             <value> \n             The template content. The default value is <c>null</c>. \n             </value> \n             <remarks>\n             The `ItemTemplate` used to define custom template for speed dial item. Use the template’s context parameter to access <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" /> properties.\n             </remarks>\n             <example> \n             SpeedDial with item template.\n             <code><![CDATA[ \n             <SfSpeedDial Content=\"Edit\"> \n                <ChildContent>\n                 <SpeedDialItems>\n                     <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                     <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                     <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                 </SpeedDialItems>\n                </ChildContent>\n                <ItemTemplate>\n                     <div style = \"border: 1px solid lightgreen; background-color:white;\" >\n                         <span>@context.Text</span>\n                     </div>\n                </ItemTemplate> \n            </SfSpeedDial> \n             ]]></code> \n             </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ItemTemplate","ParentTag":"Syncfusion.Blazor.Buttons.SfSpeedDial"}],"BoundAttributes":[{"Kind":"Components.ChildContent","Name":"Context","TypeName":"System.String","Documentation":"Specifies the parameter name for the 'ItemTemplate' child content expression.","Metadata":{"Components.ChildContentParameterName":"True","Common.PropertyName":"Context"}}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial.ItemTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1264511577,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfSpeedDial.PopupTemplate","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Gets or sets a template content for popup of SpeedDial. The template content is defined as a child content of <b>PopupTemplate</b> tag directive\n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <example> \n            SpeedDial with popup template.\n            <code><![CDATA[ \n             <SfSpeedDial Content=\"FeedBack\"> \n                <PopupTemplate>\n                    <div class=\"form-content\">\n                        <h4 style = \"text-align:center\" > Feedback Form</h4>\n                        <b>Name</b><br>\n                        <input placeholder=\"Enter Name\"><br>\n                        <b>Leave Your Comments</b>\n                        <textarea placeholder=\"Enter Your Comments\" style=\"width:100%\"></textarea><br>\n                        <button type=\"submit\">Submit</button>\n                        <button>Cancel</button>\n                    </div>\n                </PopupTemplate>\n            </SfSpeedDial> \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PopupTemplate","ParentTag":"SfSpeedDial"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial.PopupTemplate","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":2116171464,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfSpeedDial.PopupTemplate","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Gets or sets a template content for popup of SpeedDial. The template content is defined as a child content of <b>PopupTemplate</b> tag directive\n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <example> \n            SpeedDial with popup template.\n            <code><![CDATA[ \n             <SfSpeedDial Content=\"FeedBack\"> \n                <PopupTemplate>\n                    <div class=\"form-content\">\n                        <h4 style = \"text-align:center\" > Feedback Form</h4>\n                        <b>Name</b><br>\n                        <input placeholder=\"Enter Name\"><br>\n                        <b>Leave Your Comments</b>\n                        <textarea placeholder=\"Enter Your Comments\" style=\"width:100%\"></textarea><br>\n                        <button type=\"submit\">Submit</button>\n                        <button>Cancel</button>\n                    </div>\n                </PopupTemplate>\n            </SfSpeedDial> \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"PopupTemplate","ParentTag":"Syncfusion.Blazor.Buttons.SfSpeedDial"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial.PopupTemplate","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1202000003,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfSpeedDial.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the SpeedDial including HTML element. If the child content is not specified, SpeedDial is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Content\" /> property. \n            </remarks> \n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfSpeedDial"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":332367904,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfSpeedDial.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the child content for the SpeedDial including HTML element. If the child content is not specified, SpeedDial is rendered using <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Content\" /> property. \n            </summary> \n            <value> \n            The template content. The default value is <c>null</c>. \n            </value> \n            <remarks> \n            The child content which is specified within <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> tag directive is either a string or HTML Element. The string content is also specified using <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Content\" /> property. \n            </remarks> \n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.SfSpeedDial"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":442043727,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SpeedDialAnimationSettings","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Provides options to customize the animation applied while opening and closing the popup of <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" />.\n            </summary> \n            <example> \n            A simple SpeedDial with animation settings.\n            <code><![CDATA[ \n            <SfSpeedDial Content=\"Edit\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                    <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n                <SpeedDialAnimationSettings Effect=SpeedDialAnimationEffect.Zoom/>\n            </SfSpeedDial> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SpeedDialAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the duration in milliseconds that the animation takes to open or close the popup.\n            </summary> \n            <value> \n            Accepts an integer value. The default value is <c>400</c>.\n            </value> \n        ","Metadata":{"Common.PropertyName":"Duration"}},{"Kind":"Components.Component","Name":"Delay","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the value that indicates the delay before starting the animation.  \n            </summary> \n            <value> \n            Accepts an integer value. The default value is <c>0</c>.\n            </value> \n        ","Metadata":{"Common.PropertyName":"Delay"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.Buttons.SpeedDialAnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the value that indicates the type of animation effect used for opening and closing of the Speed Dial items.\n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialAnimationEffect\" /> enumeration that specifies the animation effect. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.SpeedDialAnimationEffect.Fade\" />\n            </value> \n        ","Metadata":{"Common.PropertyName":"Effect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SpeedDialAnimationSettings"}},{"HashCode":1312916257,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SpeedDialAnimationSettings","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Provides options to customize the animation applied while opening and closing the popup of <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" />.\n            </summary> \n            <example> \n            A simple SpeedDial with animation settings.\n            <code><![CDATA[ \n            <SfSpeedDial Content=\"Edit\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                    <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n                <SpeedDialAnimationSettings Effect=SpeedDialAnimationEffect.Zoom/>\n            </SfSpeedDial> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SpeedDialAnimationSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Duration","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the duration in milliseconds that the animation takes to open or close the popup.\n            </summary> \n            <value> \n            Accepts an integer value. The default value is <c>400</c>.\n            </value> \n        ","Metadata":{"Common.PropertyName":"Duration"}},{"Kind":"Components.Component","Name":"Delay","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the value that indicates the delay before starting the animation.  \n            </summary> \n            <value> \n            Accepts an integer value. The default value is <c>0</c>.\n            </value> \n        ","Metadata":{"Common.PropertyName":"Delay"}},{"Kind":"Components.Component","Name":"Effect","TypeName":"Syncfusion.Blazor.Buttons.SpeedDialAnimationEffect","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the value that indicates the type of animation effect used for opening and closing of the Speed Dial items.\n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialAnimationEffect\" /> enumeration that specifies the animation effect. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.SpeedDialAnimationEffect.Fade\" />\n            </value> \n        ","Metadata":{"Common.PropertyName":"Effect"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SpeedDialAnimationSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1487091766,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SpeedDialItem","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            A class that represents action item of <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> component.\n            </summary>\n            <remarks>\n            You can render icon only, text only, icon and text speeddial action item by specifying value to corresponding property.\n            </remarks>\n            <example>\n            In the below code example, a basic SpeedDial item has been added using <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" /> tag directive.\n            <code><![CDATA[\n            <SfSpeedDial Content=\"Edit\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\" IconCss=\"e-icons e-cut\"></SpeedDialItem\n                    <SpeedDialItem IconCss=\"e-icons e-copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SpeedDialItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets one or more CSS classes to include an icon or image in speed dial item.   \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the SpeedDial item. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the `SpeedDialItem`. \n            </summary>\n            <value> \n            <c>true</c>, if the item is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the text content of `SpeedDialItem`. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks>\n            Text won't be displayed when <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Mode\" /> is `Radial`.\n            Also, in `Linear` mode text won't be displayed when <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Direction\" /> is `Left` or `Right`.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the title of `SpeedDialItem` to display tooltip. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Title"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a unique value for the `SpeedDialItem` which can be used to identify the item in event args. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the breadcrumb item element.\n            </summary>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            In the below code example, title attribute added as inline in <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" /> tag directive.\n            <code><![CDATA[\n            <SfSpeedDial Content=\"Edit\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\" IconCss=\"e-icons e-cut\" style=\"color:red;\"></SpeedDialItem\n                    <SpeedDialItem IconCss=\"e-icons e-copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SpeedDialItem"}},{"HashCode":-1085814755,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SpeedDialItem","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            A class that represents action item of <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> component.\n            </summary>\n            <remarks>\n            You can render icon only, text only, icon and text speeddial action item by specifying value to corresponding property.\n            </remarks>\n            <example>\n            In the below code example, a basic SpeedDial item has been added using <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" /> tag directive.\n            <code><![CDATA[\n            <SfSpeedDial Content=\"Edit\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\" IconCss=\"e-icons e-cut\"></SpeedDialItem\n                    <SpeedDialItem IconCss=\"e-icons e-copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SpeedDialItem"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"IconCss","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets one or more CSS classes to include an icon or image in speed dial item.   \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to include an icon or image for the SpeedDial item. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"IconCss"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary>\n            Gets or sets a value that indicates whether to enable or disable the `SpeedDialItem`. \n            </summary>\n            <value> \n            <c>true</c>, if the item is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"Text","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the text content of `SpeedDialItem`. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks>\n            Text won't be displayed when <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Mode\" /> is `Radial`.\n            Also, in `Linear` mode text won't be displayed when <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Direction\" /> is `Left` or `Right`.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"Text"}},{"Kind":"Components.Component","Name":"Title","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the title of `SpeedDialItem` to display tooltip. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Title"}},{"Kind":"Components.Component","Name":"ID","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a unique value for the `SpeedDialItem` which can be used to identify the item in event args. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"ID"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <summary>\n            Gets or sets a collection of additional attributes that will be applied to the breadcrumb item element.\n            </summary>\n            <remarks>\n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive.\n            </remarks>\n            <example>\n            In the below code example, title attribute added as inline in <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" /> tag directive.\n            <code><![CDATA[\n            <SfSpeedDial Content=\"Edit\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\" IconCss=\"e-icons e-cut\" style=\"color:red;\"></SpeedDialItem\n                    <SpeedDialItem IconCss=\"e-icons e-copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code>\n            </example>\n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SpeedDialItem","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-949659606,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SpeedDialItems","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Represents a collection of <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" />.\n            </summary>\n            <remarks>\n            To generate dynamic <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" /> based on collection, use <c>@foreach</c> within <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItems\" /> tag directive.\n            </remarks>\n            <example>\n            In the below code example, a basic SpeedDial has been rendered using <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItems\" /> tag directive.\n            <code><![CDATA[\n            <SfSpeedDial Content=\"Edit\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                    <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SpeedDialItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content for the SpeedDialItem (Child) from the SpeedDial(Parent) .\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SpeedDialItems"}},{"HashCode":72905981,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SpeedDialItems","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Represents a collection of <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" />.\n            </summary>\n            <remarks>\n            To generate dynamic <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItem\" /> based on collection, use <c>@foreach</c> within <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItems\" /> tag directive.\n            </remarks>\n            <example>\n            In the below code example, a basic SpeedDial has been rendered using <see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItems\" /> tag directive.\n            <code><![CDATA[\n            <SfSpeedDial Content=\"Edit\"> \n                <SpeedDialItems>\n                    <SpeedDialItem Text=\"Cut\"></SpeedDialItem\n                    <SpeedDialItem Text=\"Copy\"></SpeedDialItem>\n                    <SpeedDialItem Text=\"Paste\"></SpeedDialItem>\n                </SpeedDialItems>\n            </SfSpeedDial> \n            ]]></code>\n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SpeedDialItems"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content for the SpeedDialItem (Child) from the SpeedDial(Parent) .\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SpeedDialItems","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-994880828,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SpeedDialItems.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content for the SpeedDialItem (Child) from the SpeedDial(Parent) .\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SpeedDialItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SpeedDialItems.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":-72029890,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SpeedDialItems.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets the child content for the SpeedDialItem (Child) from the SpeedDial(Parent) .\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.SpeedDialItems"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SpeedDialItems.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2054788129,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SpeedDialRadialSettings","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Provides the options to customize the speed dial action buttons when `Mode` of <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> is <see cref=\"F:Syncfusion.Blazor.Buttons.SpeedDialMode.Radial\" />.\n            </summary> \n            <example> \n            A simple SpeedDial with animation settings.\n            <code><![CDATA[ \n            <SfSpeedDial Content=\"Edit\" Mode=SpeedDialMode.Radial > \n                <SpeedDialItems>\n                    <SpeedDialItem IconCss=\"e-icons e-cut\"></SpeedDialItem\n                    <SpeedDialItem IconCss=\"e-icons e-paste\"></SpeedDialItem>\n                    <SpeedDialItem IconCss=\"e-icons e-copy\"></SpeedDialItem>\n                </SpeedDialItems>\n               <SpeedDialRadialSettings OffSet = \"150px\" ></ SpeedDialRadialSettings >\n            </SfSpeedDial> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SpeedDialRadialSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"EndAngle","TypeName":"System.Int32","Documentation":"\n            <summary> \n            Gets or sets the value that indicates the end angle of speed dial items placement.\n            </summary> \n            <value> \n            Accepts the values between 0 and 360. The default value is <c>-1</c>&gt;.\n            </value> \n            <remarks>\n            When a value outside the accepted value range, then the provided value is ignored, and the angle is calculated based on <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Position\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EndAngle"}},{"Kind":"Components.Component","Name":"StartAngle","TypeName":"System.Int32","Documentation":"\n            <summary> \n            Gets or sets the value that indicates the start angle of speeddial items placement.\n            </summary> \n            <value> \n            Accepts the values between 0 and 360. The default value is <c>-1</c>&gt;.\n            </value> \n            <remarks>\n            When a value outside the accepted value range, then the provided value is ignored, and the angle is calculated based on <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Position\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"StartAngle"}},{"Kind":"Components.Component","Name":"OffSet","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the offset distance of speed dial items placement from the button of Speed Dial. \n            </summary> \n            <value> \n            Accepts the string values. The default value is <c>100px</c>&gt;.\n            </value> \n        ","Metadata":{"Common.PropertyName":"OffSet"}},{"Kind":"Components.Component","Name":"Direction","TypeName":"Syncfusion.Blazor.Buttons.RadialDirection","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the speed dial action items (<see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItems\" />) placement order.\n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.RadialDirection\" /> enumeration that specifies the direction. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.RadialDirection.Auto\" />\n            </value> \n        ","Metadata":{"Common.PropertyName":"Direction"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SpeedDialRadialSettings"}},{"HashCode":751367783,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SpeedDialRadialSettings","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Provides the options to customize the speed dial action buttons when `Mode` of <see cref=\"T:Syncfusion.Blazor.Buttons.SfSpeedDial\" /> is <see cref=\"F:Syncfusion.Blazor.Buttons.SpeedDialMode.Radial\" />.\n            </summary> \n            <example> \n            A simple SpeedDial with animation settings.\n            <code><![CDATA[ \n            <SfSpeedDial Content=\"Edit\" Mode=SpeedDialMode.Radial > \n                <SpeedDialItems>\n                    <SpeedDialItem IconCss=\"e-icons e-cut\"></SpeedDialItem\n                    <SpeedDialItem IconCss=\"e-icons e-paste\"></SpeedDialItem>\n                    <SpeedDialItem IconCss=\"e-icons e-copy\"></SpeedDialItem>\n                </SpeedDialItems>\n               <SpeedDialRadialSettings OffSet = \"150px\" ></ SpeedDialRadialSettings >\n            </SfSpeedDial> \n            ]]></code> \n            </example> \n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SpeedDialRadialSettings"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"EndAngle","TypeName":"System.Int32","Documentation":"\n            <summary> \n            Gets or sets the value that indicates the end angle of speed dial items placement.\n            </summary> \n            <value> \n            Accepts the values between 0 and 360. The default value is <c>-1</c>&gt;.\n            </value> \n            <remarks>\n            When a value outside the accepted value range, then the provided value is ignored, and the angle is calculated based on <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Position\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"EndAngle"}},{"Kind":"Components.Component","Name":"StartAngle","TypeName":"System.Int32","Documentation":"\n            <summary> \n            Gets or sets the value that indicates the start angle of speeddial items placement.\n            </summary> \n            <value> \n            Accepts the values between 0 and 360. The default value is <c>-1</c>&gt;.\n            </value> \n            <remarks>\n            When a value outside the accepted value range, then the provided value is ignored, and the angle is calculated based on <see cref=\"P:Syncfusion.Blazor.Buttons.SfSpeedDial.Position\" />.\n            </remarks>\n        ","Metadata":{"Common.PropertyName":"StartAngle"}},{"Kind":"Components.Component","Name":"OffSet","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets the offset distance of speed dial items placement from the button of Speed Dial. \n            </summary> \n            <value> \n            Accepts the string values. The default value is <c>100px</c>&gt;.\n            </value> \n        ","Metadata":{"Common.PropertyName":"OffSet"}},{"Kind":"Components.Component","Name":"Direction","TypeName":"Syncfusion.Blazor.Buttons.RadialDirection","IsEnum":true,"Documentation":"\n            <summary>\n            Gets or sets the speed dial action items (<see cref=\"T:Syncfusion.Blazor.Buttons.SpeedDialItems\" />) placement order.\n            </summary> \n            <value> \n            One of the <see cref=\"T:Syncfusion.Blazor.Buttons.RadialDirection\" /> enumeration that specifies the direction. The default value is <see cref=\"F:Syncfusion.Blazor.Buttons.RadialDirection.Auto\" />\n            </value> \n        ","Metadata":{"Common.PropertyName":"Direction"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SpeedDialRadialSettings","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1272723038,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Switch is a graphical user interface element that allows you to toggle between checked and unchecked state. \n            It has checked and unchecked states. \n            </summary> \n            <example> \n            In the below code example, a basic switch is initialized with <c>Checked</c> property. \n            <code><![CDATA[ \n            <SfSwitch Checked=\"true\"> \n            </SfSwitch> \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSwitch"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TChecked","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TChecked for the Syncfusion.Blazor.Buttons.SfSwitch<TChecked> component.","Metadata":{"Common.PropertyName":"TChecked","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnLabel","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the label for ON state of Switch component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"OnLabel"}},{"Kind":"Components.Component","Name":"OffLabel","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the label for ON state of Switch component.\n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"OffLabel"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChangeEventArgs<TChecked>>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the switch state is changed.  \n            </summary> \n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSwitch ValueChange=\"@Changed\"> \n            </SfSwitch> \n            @code { \n                private void Changed(ChangeEventArgs<TChecked> args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates CSS class string to customize the appearance of the component. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of the component. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the name of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Name\" /> property is used to set the name attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Name"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the value of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Value\" /> property is used to set the value attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"Checked","TypeName":"TChecked","Documentation":"\n            <summary> \n            Gets or sets whether to check or uncheck the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is checked. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Checked","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TChecked>>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction option for the component. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for the component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property is persisted. \n            </summary> \n            <value> \n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            Component's <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property will be stored in browser local storage to persist component's state when page reloads. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the component rendering is completed.  \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>","Components.GenericTyped":"True"}},{"HashCode":477388980,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary> \n            Switch is a graphical user interface element that allows you to toggle between checked and unchecked state. \n            It has checked and unchecked states. \n            </summary> \n            <example> \n            In the below code example, a basic switch is initialized with <c>Checked</c> property. \n            <code><![CDATA[ \n            <SfSwitch Checked=\"true\"> \n            </SfSwitch> \n            ]]></code> \n            </example>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfSwitch"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"TChecked","TypeName":"System.Type","Documentation":"Specifies the type of the type parameter TChecked for the Syncfusion.Blazor.Buttons.SfSwitch<TChecked> component.","Metadata":{"Common.PropertyName":"TChecked","Components.TypeParameter":"True","Components.TypeParameterIsCascading":"False"}},{"Kind":"Components.Component","Name":"OnLabel","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the label for ON state of Switch component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"OnLabel"}},{"Kind":"Components.Component","Name":"OffLabel","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the label for ON state of Switch component.\n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"OffLabel"}},{"Kind":"Components.Component","Name":"ValueChange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Buttons.ChangeEventArgs<TChecked>>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the switch state is changed.  \n            </summary> \n            <remarks> \n            The event is raised for UI based click only. \n            </remarks> \n            <example> \n            <code><![CDATA[ \n            <SfSwitch ValueChange=\"@Changed\"> \n            </SfSwitch> \n            @code { \n                private void Changed(ChangeEventArgs<TChecked> args) { \n                    // Write your code here. \n                } \n            } \n            ]]></code> \n            </example> \n        ","Metadata":{"Common.PropertyName":"ValueChange","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"ChildContent","TypeName":"Microsoft.AspNetCore.Components.RenderFragment","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","Metadata":{"Common.PropertyName":"ChildContent","Components.ChildContent":"True"}},{"Kind":"Components.Component","Name":"CssClass","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates CSS class string to customize the appearance of the component. \n            </summary> \n            <value> \n            Accepts a CSS class string separated by space to customize the appearance of the component. The default value is <c>String.Empty</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"CssClass"}},{"Kind":"Components.Component","Name":"Name","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the name of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Name\" /> property is used to set the name attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Name"}},{"Kind":"Components.Component","Name":"Value","TypeName":"System.String","Documentation":"\n            <summary> \n            Gets or sets a value that indicates the value of the component. \n            </summary> \n            <value> \n            Accepts a string value. The default value is <c>String.Empty</c>. \n            </value> \n            <remarks> \n            The <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Value\" /> property is used to set the value attribute of input element. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"Value"}},{"Kind":"Components.Component","Name":"Checked","TypeName":"TChecked","Documentation":"\n            <summary> \n            Gets or sets whether to check or uncheck the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is checked. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Checked","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedChanged","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedChanged","Components.EventCallback":"True","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"CheckedExpression","TypeName":"System.Linq.Expressions.Expression<System.Func<TChecked>>","Documentation":"\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"CheckedExpression","Components.GenericTyped":"True"}},{"Kind":"Components.Component","Name":"Disabled","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the component. \n            </summary> \n            <value> \n            <c>true</c>, if the component is disabled. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"Disabled"}},{"Kind":"Components.Component","Name":"EnableRtl","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to enable or disable the right to left direction option for the component. \n            </summary> \n            <value> \n            <c>true</c>, if the right to left direction is enabled for the component. The default value is <c>false</c>. \n            </value> \n        ","Metadata":{"Common.PropertyName":"EnableRtl"}},{"Kind":"Components.Component","Name":"EnablePersistence","TypeName":"System.Boolean","Documentation":"\n            <summary> \n            Gets or sets a value that indicates whether to persist component's state between page reloads. When set to <c>true</c>, the <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property is persisted. \n            </summary> \n            <value> \n            <c>true</c>, if the component's state persistence is enabled. The default value is <c>false</c>. \n            </value> \n            <remarks> \n            Component's <see cref=\"P:Syncfusion.Blazor.Buttons.SfInputBase`1.Checked\" /> property will be stored in browser local storage to persist component's state when page reloads. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"EnablePersistence"}},{"Kind":"Components.Component","Name":"HtmlAttributes","TypeName":"System.Collections.Generic.Dictionary<System.String, System.Object>","Documentation":"\n            <exclude />\n            <summary> \n            Gets or sets a a value that indicates the collection of additional attributes that will applied to the button container element. \n            </summary> \n            <remarks> \n            Additional attributes can be added by specifying as inline attributes or by specifying <c>@attributes</c> directive. \n            </remarks> \n        ","Metadata":{"Common.PropertyName":"HtmlAttributes"}},{"Kind":"Components.Component","Name":"Created","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Object>","Documentation":"\n            <summary> \n            Gets or sets an event callback that is raised when the component rendering is completed.  \n            </summary>\n        ","Metadata":{"Common.PropertyName":"Created","Components.EventCallback":"True"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>","Components.GenericTyped":"True","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1990487461,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"SfSwitch"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>.ChildContent","Components.IsSpecialKind":"Components.ChildContent"}},{"HashCode":1425060030,"Kind":"Components.ChildContent","Name":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>.ChildContent","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <exclude />\n            <summary>\n            Gets or sets a value that indictes the child content for the component including HTML element.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ChildContent","ParentTag":"Syncfusion.Blazor.Buttons.SfSwitch"}],"Metadata":{"Runtime.Name":"Components.None","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>.ChildContent","Components.IsSpecialKind":"Components.ChildContent","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1638313354,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons._Imports","AssemblyName":"Syncfusion.Blazor.Buttons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"_Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons._Imports"}},{"HashCode":1776552270,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons._Imports","AssemblyName":"Syncfusion.Blazor.Buttons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons._Imports"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons._Imports","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":833116508,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.Internal.SpeedDialItemView","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Provides the view for  rendering of speeddial items.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SpeedDialItemView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Parent","TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial","Documentation":"\n            <summary>\n            Gets or sets the SpeedDial (Parent) instance.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Parent"}},{"Kind":"Components.Component","Name":"Item","TypeName":"Syncfusion.Blazor.Buttons.SpeedDialItem","Documentation":"\n            <summary>\n            Gets or sets the SpeedDial item value.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Item"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the SpeedDial item index.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Index"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.Internal.SpeedDialItemView"}},{"HashCode":2067422733,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.Internal.SpeedDialItemView","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"\n            <summary>\n            Provides the view for  rendering of speeddial items.\n            </summary>\n            <exclude />\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.Internal.SpeedDialItemView"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Parent","TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial","Documentation":"\n            <summary>\n            Gets or sets the SpeedDial (Parent) instance.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Parent"}},{"Kind":"Components.Component","Name":"Item","TypeName":"Syncfusion.Blazor.Buttons.SpeedDialItem","Documentation":"\n            <summary>\n            Gets or sets the SpeedDial item value.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Item"}},{"Kind":"Components.Component","Name":"Index","TypeName":"System.Int32","Documentation":"\n            <summary>\n            Gets or sets the SpeedDial item index.\n            </summary>\n            <exclude />\n        ","Metadata":{"Common.PropertyName":"Index"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.Internal.SpeedDialItemView","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1392400533,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.Internal.SpeedDialPopup","AssemblyName":"Syncfusion.Blazor.Buttons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SpeedDialPopup"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Parent","TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial","Metadata":{"Common.PropertyName":"Parent"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.Internal.SpeedDialPopup"}},{"HashCode":1199680210,"Kind":"Components.Component","Name":"Syncfusion.Blazor.Buttons.Internal.SpeedDialPopup","AssemblyName":"Syncfusion.Blazor.Buttons","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.Internal.SpeedDialPopup"}],"BoundAttributes":[{"Kind":"Components.Component","Name":"Parent","TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial","Metadata":{"Common.PropertyName":"Parent"}}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Syncfusion.Blazor.Buttons.Internal.SpeedDialPopup","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1570376398,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator","AssemblyName":"Microsoft.AspNetCore.Components.Forms","Documentation":"\n            <summary>\n            Adds Data Annotations validation support to an <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"DataAnnotationsValidator"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator"}},{"HashCode":-1317134907,"Kind":"Components.Component","Name":"Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator","AssemblyName":"Microsoft.AspNetCore.Components.Forms","Documentation":"\n            <summary>\n            Adds Data Annotations validation support to an <see cref=\"T:Microsoft.AspNetCore.Components.Forms.EditContext\" />.\n            </summary>\n        ","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator"}],"Metadata":{"Runtime.Name":"Components.IComponent","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.DataAnnotationsValidator","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":469224975,"Kind":"Components.EventHandler","Name":"onfocus","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onfocus' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onfocus","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfocus:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfocus:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onfocus","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"Sets the '@onfocus' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onfocus"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfocus' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onfocus' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.FocusEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":636009819,"Kind":"Components.EventHandler","Name":"onblur","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onblur' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onblur","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onblur:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onblur:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onblur","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"Sets the '@onblur' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onblur"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onblur' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onblur' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.FocusEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":546575177,"Kind":"Components.EventHandler","Name":"onfocusin","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onfocusin' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onfocusin","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfocusin:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfocusin:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onfocusin","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"Sets the '@onfocusin' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onfocusin"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfocusin' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onfocusin' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.FocusEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-2114769399,"Kind":"Components.EventHandler","Name":"onfocusout","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onfocusout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onfocusout","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfocusout:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfocusout:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onfocusout","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.FocusEventArgs>","Documentation":"Sets the '@onfocusout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.FocusEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onfocusout"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfocusout' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onfocusout' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.FocusEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-1550772779,"Kind":"Components.EventHandler","Name":"onmouseover","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onmouseover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onmouseover","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmouseover:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmouseover:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onmouseover","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@onmouseover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onmouseover"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmouseover' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onmouseover' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":612198687,"Kind":"Components.EventHandler","Name":"onmouseout","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onmouseout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onmouseout","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmouseout:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmouseout:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onmouseout","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@onmouseout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onmouseout"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmouseout' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onmouseout' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-2060463747,"Kind":"Components.EventHandler","Name":"onmousemove","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onmousemove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onmousemove","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmousemove:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmousemove:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onmousemove","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@onmousemove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onmousemove"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmousemove' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onmousemove' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-1326584478,"Kind":"Components.EventHandler","Name":"onmousedown","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onmousedown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onmousedown","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmousedown:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmousedown:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onmousedown","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@onmousedown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onmousedown"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmousedown' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onmousedown' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-395655512,"Kind":"Components.EventHandler","Name":"onmouseup","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onmouseup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onmouseup","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmouseup:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmouseup:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onmouseup","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@onmouseup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onmouseup"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmouseup' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onmouseup' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-1580936022,"Kind":"Components.EventHandler","Name":"onclick","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onclick' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onclick","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onclick:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onclick:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onclick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@onclick' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onclick"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onclick' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onclick' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-543923158,"Kind":"Components.EventHandler","Name":"ondblclick","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondblclick' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondblclick","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondblclick:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondblclick:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondblclick","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@ondblclick' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondblclick"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondblclick' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondblclick' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":660330704,"Kind":"Components.EventHandler","Name":"onwheel","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onwheel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.WheelEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onwheel","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onwheel:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onwheel:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onwheel","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.WheelEventArgs>","Documentation":"Sets the '@onwheel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.WheelEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onwheel"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onwheel' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onwheel' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.WheelEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-834393148,"Kind":"Components.EventHandler","Name":"onmousewheel","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onmousewheel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.WheelEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onmousewheel","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmousewheel:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onmousewheel:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onmousewheel","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.WheelEventArgs>","Documentation":"Sets the '@onmousewheel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.WheelEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onmousewheel"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onmousewheel' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onmousewheel' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.WheelEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":320548796,"Kind":"Components.EventHandler","Name":"oncontextmenu","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oncontextmenu' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oncontextmenu","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncontextmenu:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncontextmenu:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oncontextmenu","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs>","Documentation":"Sets the '@oncontextmenu' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.MouseEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oncontextmenu"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncontextmenu' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oncontextmenu' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.MouseEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":74517637,"Kind":"Components.EventHandler","Name":"ondrag","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondrag' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondrag","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondrag:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondrag:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondrag","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>","Documentation":"Sets the '@ondrag' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondrag"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondrag' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondrag' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.DragEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":879601327,"Kind":"Components.EventHandler","Name":"ondragend","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondragend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondragend","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragend:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragend:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondragend","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>","Documentation":"Sets the '@ondragend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondragend"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragend' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondragend' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.DragEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-318285175,"Kind":"Components.EventHandler","Name":"ondragenter","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondragenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondragenter","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragenter:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragenter:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondragenter","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>","Documentation":"Sets the '@ondragenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondragenter"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragenter' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondragenter' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.DragEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-1419540319,"Kind":"Components.EventHandler","Name":"ondragleave","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondragleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondragleave","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragleave:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragleave:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondragleave","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>","Documentation":"Sets the '@ondragleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondragleave"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragleave' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondragleave' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.DragEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":409020797,"Kind":"Components.EventHandler","Name":"ondragover","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondragover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondragover","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragover:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragover:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondragover","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>","Documentation":"Sets the '@ondragover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondragover"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragover' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondragover' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.DragEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-1324656409,"Kind":"Components.EventHandler","Name":"ondragstart","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondragstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondragstart","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragstart:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondragstart:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondragstart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>","Documentation":"Sets the '@ondragstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondragstart"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondragstart' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondragstart' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.DragEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-1401153931,"Kind":"Components.EventHandler","Name":"ondrop","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondrop' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondrop","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondrop:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondrop:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondrop","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.DragEventArgs>","Documentation":"Sets the '@ondrop' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.DragEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondrop"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondrop' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondrop' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.DragEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":1104389462,"Kind":"Components.EventHandler","Name":"onkeydown","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onkeydown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onkeydown","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onkeydown:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onkeydown:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onkeydown","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Documentation":"Sets the '@onkeydown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onkeydown"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onkeydown' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onkeydown' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.KeyboardEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":120046139,"Kind":"Components.EventHandler","Name":"onkeyup","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onkeyup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onkeyup","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onkeyup:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onkeyup:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onkeyup","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Documentation":"Sets the '@onkeyup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onkeyup"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onkeyup' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onkeyup' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.KeyboardEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":240557118,"Kind":"Components.EventHandler","Name":"onkeypress","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onkeypress' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onkeypress","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onkeypress:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onkeypress:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onkeypress","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.KeyboardEventArgs>","Documentation":"Sets the '@onkeypress' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.KeyboardEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onkeypress"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onkeypress' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onkeypress' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.KeyboardEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-798535488,"Kind":"Components.EventHandler","Name":"onchange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onchange' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.ChangeEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onchange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onchange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onchange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onchange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"Sets the '@onchange' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.ChangeEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onchange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onchange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onchange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.ChangeEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-148825719,"Kind":"Components.EventHandler","Name":"oninput","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oninput' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.ChangeEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oninput","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oninput:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oninput:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oninput","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.ChangeEventArgs>","Documentation":"Sets the '@oninput' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.ChangeEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oninput"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oninput' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oninput' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.ChangeEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":1657218375,"Kind":"Components.EventHandler","Name":"oninvalid","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oninvalid' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oninvalid","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oninvalid:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oninvalid:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oninvalid","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@oninvalid' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oninvalid"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oninvalid' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oninvalid' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":1575359467,"Kind":"Components.EventHandler","Name":"onreset","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onreset' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onreset","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onreset:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onreset:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onreset","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onreset' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onreset"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onreset' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onreset' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":1832139381,"Kind":"Components.EventHandler","Name":"onselect","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onselect' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onselect","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onselect:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onselect:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onselect","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onselect' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onselect"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onselect' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onselect' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":314395922,"Kind":"Components.EventHandler","Name":"onselectstart","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onselectstart' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onselectstart","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onselectstart:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onselectstart:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onselectstart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onselectstart' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onselectstart"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onselectstart' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onselectstart' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":466631769,"Kind":"Components.EventHandler","Name":"onselectionchange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onselectionchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onselectionchange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onselectionchange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onselectionchange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onselectionchange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onselectionchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onselectionchange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onselectionchange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onselectionchange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-620654161,"Kind":"Components.EventHandler","Name":"onsubmit","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onsubmit' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onsubmit","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onsubmit:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onsubmit:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onsubmit","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onsubmit' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onsubmit"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onsubmit' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onsubmit' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":395294726,"Kind":"Components.EventHandler","Name":"onbeforecopy","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onbeforecopy' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onbeforecopy","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforecopy:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforecopy:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onbeforecopy","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onbeforecopy' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onbeforecopy"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforecopy' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onbeforecopy' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-196963757,"Kind":"Components.EventHandler","Name":"onbeforecut","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onbeforecut' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onbeforecut","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforecut:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforecut:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onbeforecut","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onbeforecut' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onbeforecut"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforecut' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onbeforecut' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":133350078,"Kind":"Components.EventHandler","Name":"onbeforepaste","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onbeforepaste' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onbeforepaste","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforepaste:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforepaste:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onbeforepaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onbeforepaste' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onbeforepaste"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforepaste' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onbeforepaste' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-1632911159,"Kind":"Components.EventHandler","Name":"oncopy","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oncopy' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oncopy","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncopy:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncopy:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oncopy","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"Sets the '@oncopy' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oncopy"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncopy' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oncopy' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ClipboardEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":1992045051,"Kind":"Components.EventHandler","Name":"oncut","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oncut' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oncut","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncut:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncut:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oncut","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"Sets the '@oncut' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oncut"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncut' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oncut' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ClipboardEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":434043723,"Kind":"Components.EventHandler","Name":"onpaste","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpaste' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpaste","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpaste:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpaste:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpaste","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ClipboardEventArgs>","Documentation":"Sets the '@onpaste' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ClipboardEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpaste"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpaste' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpaste' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ClipboardEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":772720459,"Kind":"Components.EventHandler","Name":"ontouchcancel","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontouchcancel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontouchcancel","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchcancel:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchcancel:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontouchcancel","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"Sets the '@ontouchcancel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontouchcancel"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchcancel' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontouchcancel' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.TouchEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-1330823382,"Kind":"Components.EventHandler","Name":"ontouchend","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontouchend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontouchend","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchend:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchend:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontouchend","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"Sets the '@ontouchend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontouchend"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchend' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontouchend' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.TouchEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":817317830,"Kind":"Components.EventHandler","Name":"ontouchmove","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontouchmove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontouchmove","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchmove:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchmove:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontouchmove","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"Sets the '@ontouchmove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontouchmove"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchmove' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontouchmove' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.TouchEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-438970647,"Kind":"Components.EventHandler","Name":"ontouchstart","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontouchstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontouchstart","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchstart:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchstart:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontouchstart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"Sets the '@ontouchstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontouchstart"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchstart' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontouchstart' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.TouchEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-1779680239,"Kind":"Components.EventHandler","Name":"ontouchenter","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontouchenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontouchenter","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchenter:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchenter:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontouchenter","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"Sets the '@ontouchenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontouchenter"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchenter' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontouchenter' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.TouchEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":1488654964,"Kind":"Components.EventHandler","Name":"ontouchleave","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontouchleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontouchleave","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchleave:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontouchleave:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontouchleave","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.TouchEventArgs>","Documentation":"Sets the '@ontouchleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.TouchEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontouchleave"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontouchleave' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontouchleave' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.TouchEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-1871753312,"Kind":"Components.EventHandler","Name":"ongotpointercapture","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ongotpointercapture' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ongotpointercapture","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ongotpointercapture:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ongotpointercapture:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ongotpointercapture","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@ongotpointercapture' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ongotpointercapture"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ongotpointercapture' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ongotpointercapture' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":583309410,"Kind":"Components.EventHandler","Name":"onlostpointercapture","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onlostpointercapture' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onlostpointercapture","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onlostpointercapture:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onlostpointercapture:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onlostpointercapture","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onlostpointercapture' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onlostpointercapture"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onlostpointercapture' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onlostpointercapture' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":751792818,"Kind":"Components.EventHandler","Name":"onpointercancel","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointercancel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointercancel","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointercancel:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointercancel:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointercancel","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointercancel' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointercancel"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointercancel' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointercancel' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-699986234,"Kind":"Components.EventHandler","Name":"onpointerdown","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerdown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerdown","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerdown:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerdown:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerdown","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointerdown' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerdown"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerdown' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerdown' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":52762667,"Kind":"Components.EventHandler","Name":"onpointerenter","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerenter","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerenter:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerenter:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerenter","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointerenter' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerenter"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerenter' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerenter' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-2132332790,"Kind":"Components.EventHandler","Name":"onpointerleave","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerleave","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerleave:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerleave:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerleave","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointerleave' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerleave"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerleave' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerleave' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":1915518260,"Kind":"Components.EventHandler","Name":"onpointermove","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointermove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointermove","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointermove:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointermove:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointermove","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointermove' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointermove"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointermove' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointermove' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":1632728403,"Kind":"Components.EventHandler","Name":"onpointerout","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerout","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerout:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerout:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerout","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointerout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerout"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerout' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerout' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":1007967319,"Kind":"Components.EventHandler","Name":"onpointerover","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerover","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerover:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerover:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerover","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointerover' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerover"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerover' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerover' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":326400237,"Kind":"Components.EventHandler","Name":"onpointerup","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerup","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerup:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerup:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerup","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.PointerEventArgs>","Documentation":"Sets the '@onpointerup' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.PointerEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerup"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerup' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerup' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.PointerEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-1538588348,"Kind":"Components.EventHandler","Name":"oncanplay","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oncanplay' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oncanplay","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncanplay:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncanplay:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oncanplay","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@oncanplay' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oncanplay"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncanplay' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oncanplay' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":481427772,"Kind":"Components.EventHandler","Name":"oncanplaythrough","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oncanplaythrough' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oncanplaythrough","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncanplaythrough:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncanplaythrough:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oncanplaythrough","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@oncanplaythrough' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oncanplaythrough"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncanplaythrough' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oncanplaythrough' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":1941393997,"Kind":"Components.EventHandler","Name":"oncuechange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@oncuechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@oncuechange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncuechange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@oncuechange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@oncuechange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@oncuechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"oncuechange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@oncuechange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@oncuechange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":145174147,"Kind":"Components.EventHandler","Name":"ondurationchange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondurationchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondurationchange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondurationchange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondurationchange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondurationchange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@ondurationchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondurationchange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondurationchange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondurationchange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":1616493707,"Kind":"Components.EventHandler","Name":"onemptied","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onemptied' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onemptied","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onemptied:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onemptied:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onemptied","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onemptied' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onemptied"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onemptied' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onemptied' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":2049924970,"Kind":"Components.EventHandler","Name":"onpause","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpause' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpause","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpause:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpause:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpause","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onpause' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpause"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpause' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpause' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-499411268,"Kind":"Components.EventHandler","Name":"onplay","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onplay' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onplay","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onplay:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onplay:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onplay","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onplay' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onplay"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onplay' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onplay' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-467955947,"Kind":"Components.EventHandler","Name":"onplaying","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onplaying' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onplaying","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onplaying:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onplaying:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onplaying","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onplaying' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onplaying"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onplaying' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onplaying' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-646455659,"Kind":"Components.EventHandler","Name":"onratechange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onratechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onratechange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onratechange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onratechange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onratechange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onratechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onratechange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onratechange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onratechange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-1318909817,"Kind":"Components.EventHandler","Name":"onseeked","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onseeked' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onseeked","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onseeked:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onseeked:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onseeked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onseeked' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onseeked"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onseeked' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onseeked' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-566190700,"Kind":"Components.EventHandler","Name":"onseeking","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onseeking' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onseeking","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onseeking:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onseeking:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onseeking","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onseeking' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onseeking"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onseeking' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onseeking' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-1370031643,"Kind":"Components.EventHandler","Name":"onstalled","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onstalled' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onstalled","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onstalled:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onstalled:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onstalled","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onstalled' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onstalled"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onstalled' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onstalled' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":1396958713,"Kind":"Components.EventHandler","Name":"onstop","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onstop' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onstop","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onstop:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onstop:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onstop","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onstop' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onstop"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onstop' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onstop' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-584687426,"Kind":"Components.EventHandler","Name":"onsuspend","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onsuspend' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onsuspend","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onsuspend:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onsuspend:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onsuspend","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onsuspend' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onsuspend"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onsuspend' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onsuspend' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":1507174455,"Kind":"Components.EventHandler","Name":"ontimeupdate","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontimeupdate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontimeupdate","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontimeupdate:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontimeupdate:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontimeupdate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@ontimeupdate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontimeupdate"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontimeupdate' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontimeupdate' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-1480061990,"Kind":"Components.EventHandler","Name":"onvolumechange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onvolumechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onvolumechange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onvolumechange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onvolumechange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onvolumechange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onvolumechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onvolumechange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onvolumechange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onvolumechange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":395230637,"Kind":"Components.EventHandler","Name":"onwaiting","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onwaiting' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onwaiting","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onwaiting:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onwaiting:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onwaiting","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onwaiting' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onwaiting"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onwaiting' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onwaiting' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":749652276,"Kind":"Components.EventHandler","Name":"onloadstart","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onloadstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onloadstart","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadstart:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadstart:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onloadstart","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>","Documentation":"Sets the '@onloadstart' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onloadstart"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onloadstart' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onloadstart' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ProgressEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":1279740321,"Kind":"Components.EventHandler","Name":"ontimeout","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontimeout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontimeout","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontimeout:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontimeout:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontimeout","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>","Documentation":"Sets the '@ontimeout' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontimeout"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontimeout' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontimeout' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ProgressEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":2011637847,"Kind":"Components.EventHandler","Name":"onabort","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onabort' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onabort","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onabort:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onabort:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onabort","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>","Documentation":"Sets the '@onabort' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onabort"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onabort' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onabort' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ProgressEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-921956754,"Kind":"Components.EventHandler","Name":"onload","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onload' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onload","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onload:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onload:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onload","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>","Documentation":"Sets the '@onload' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onload"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onload' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onload' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ProgressEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-1440136766,"Kind":"Components.EventHandler","Name":"onloadend","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onloadend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onloadend","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadend:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadend:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onloadend","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>","Documentation":"Sets the '@onloadend' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onloadend"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onloadend' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onloadend' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ProgressEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":257822301,"Kind":"Components.EventHandler","Name":"onprogress","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onprogress' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onprogress","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onprogress:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onprogress:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onprogress","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ProgressEventArgs>","Documentation":"Sets the '@onprogress' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ProgressEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onprogress"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onprogress' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onprogress' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ProgressEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-1058047039,"Kind":"Components.EventHandler","Name":"onerror","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onerror' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ErrorEventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onerror","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onerror:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onerror:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onerror","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Microsoft.AspNetCore.Components.Web.ErrorEventArgs>","Documentation":"Sets the '@onerror' attribute to the provided string or delegate value. A delegate value should be of type 'Microsoft.AspNetCore.Components.Web.ErrorEventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onerror"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onerror' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onerror' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"Microsoft.AspNetCore.Components.Web.ErrorEventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":104249782,"Kind":"Components.EventHandler","Name":"onactivate","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onactivate","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onactivate:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onactivate:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onactivate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onactivate"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onactivate' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onactivate' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-386211422,"Kind":"Components.EventHandler","Name":"onbeforeactivate","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onbeforeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onbeforeactivate","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforeactivate:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforeactivate:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onbeforeactivate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onbeforeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onbeforeactivate"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforeactivate' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onbeforeactivate' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":832686668,"Kind":"Components.EventHandler","Name":"onbeforedeactivate","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onbeforedeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onbeforedeactivate","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforedeactivate:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onbeforedeactivate:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onbeforedeactivate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onbeforedeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onbeforedeactivate"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onbeforedeactivate' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onbeforedeactivate' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-279644017,"Kind":"Components.EventHandler","Name":"ondeactivate","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ondeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ondeactivate","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondeactivate:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ondeactivate:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ondeactivate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@ondeactivate' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ondeactivate"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ondeactivate' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ondeactivate' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":891414409,"Kind":"Components.EventHandler","Name":"onended","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onended' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onended","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onended:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onended:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onended","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onended' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onended"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onended' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onended' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":2123884659,"Kind":"Components.EventHandler","Name":"onfullscreenchange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onfullscreenchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onfullscreenchange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfullscreenchange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfullscreenchange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onfullscreenchange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onfullscreenchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onfullscreenchange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfullscreenchange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onfullscreenchange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-463806918,"Kind":"Components.EventHandler","Name":"onfullscreenerror","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onfullscreenerror' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onfullscreenerror","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfullscreenerror:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onfullscreenerror:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onfullscreenerror","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onfullscreenerror' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onfullscreenerror"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onfullscreenerror' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onfullscreenerror' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-884469555,"Kind":"Components.EventHandler","Name":"onloadeddata","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onloadeddata' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onloadeddata","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadeddata:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadeddata:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onloadeddata","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onloadeddata' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onloadeddata"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onloadeddata' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onloadeddata' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":671319647,"Kind":"Components.EventHandler","Name":"onloadedmetadata","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onloadedmetadata' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onloadedmetadata","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadedmetadata:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onloadedmetadata:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onloadedmetadata","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onloadedmetadata' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onloadedmetadata"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onloadedmetadata' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onloadedmetadata' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":74752683,"Kind":"Components.EventHandler","Name":"onpointerlockchange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerlockchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerlockchange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerlockchange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerlockchange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerlockchange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onpointerlockchange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerlockchange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerlockchange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerlockchange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-1986906860,"Kind":"Components.EventHandler","Name":"onpointerlockerror","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onpointerlockerror' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onpointerlockerror","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerlockerror:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onpointerlockerror:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onpointerlockerror","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onpointerlockerror' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onpointerlockerror"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onpointerlockerror' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onpointerlockerror' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":738238011,"Kind":"Components.EventHandler","Name":"onreadystatechange","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onreadystatechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onreadystatechange","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onreadystatechange:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onreadystatechange:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onreadystatechange","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onreadystatechange' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onreadystatechange"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onreadystatechange' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onreadystatechange' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":1984892155,"Kind":"Components.EventHandler","Name":"onscroll","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@onscroll' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@onscroll","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onscroll:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@onscroll:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@onscroll","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@onscroll' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"onscroll"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@onscroll' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@onscroll' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":-1259166588,"Kind":"Components.EventHandler","Name":"ontoggle","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Sets the '@ontoggle' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ontoggle","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontoggle:preventDefault","Metadata":{"Common.DirectiveAttribute":"True"}}]},{"TagName":"*","Attributes":[{"Name":"@ontoggle:stopPropagation","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.EventHandler","Name":"@ontoggle","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.EventArgs>","Documentation":"Sets the '@ontoggle' attribute to the provided string or delegate value. A delegate value should be of type 'System.EventArgs'.","Metadata":{"Components.IsWeaklyTyped":"True","Common.DirectiveAttribute":"True","Common.PropertyName":"ontoggle"},"BoundAttributeParameters":[{"Name":"preventDefault","TypeName":"System.Boolean","Documentation":"Specifies whether to cancel (if cancelable) the default action that belongs to the '@ontoggle' event.","Metadata":{"Common.PropertyName":"PreventDefault"}},{"Name":"stopPropagation","TypeName":"System.Boolean","Documentation":"Specifies whether to prevent further propagation of the '@ontoggle' event in the capturing and bubbling phases.","Metadata":{"Common.PropertyName":"StopPropagation"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.EventHandler","Components.EventHandler.EventArgs":"System.EventArgs","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Web.EventHandlers"}},{"HashCode":1270112777,"Kind":"Components.Splat","Name":"Attributes","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Merges a collection of attributes into the current element or component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@attributes","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Splat","Name":"@attributes","TypeName":"System.Object","Documentation":"Merges a collection of attributes into the current element or component.","Metadata":{"Common.PropertyName":"Attributes","Common.DirectiveAttribute":"True"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Splat","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Attributes"}},{"HashCode":999350350,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to an attribute and a change event, based on the naming of the bind attribute. For example: <code>@bind-value=\"...\"</code> and <code>@bind-value:event=\"onchange\"</code> will assign the current value of the expression to the 'value' attribute, and assign a delegate that attempts to set the value to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@bind-","NameComparison":1,"Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-...","TypeName":"System.Collections.Generic.Dictionary<string, object>","IndexerNamePrefix":"@bind-","IndexerTypeName":"System.Object","Documentation":"Binds the provided expression to an attribute and a change event, based on the naming of the bind attribute. For example: <code>@bind-value=\"...\"</code> and <code>@bind-value:event=\"onchange\"</code> will assign the current value of the expression to the 'value' attribute, and assign a delegate that attempts to set the value to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the corresponding bind attribute. For example: <code>@bind-value:format=\"...\"</code> will apply a format string to the value specified in <code>@bind-value=\"...\"</code>. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind-...' attribute.","Metadata":{"Common.PropertyName":"Event"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.Fallback":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Bind"}},{"HashCode":-1874581601,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"False","Components.Bind.Format":null,"Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes"}},{"HashCode":688756199,"Kind":"Components.Bind","Name":"Bind_value","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"@bind-value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-value","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind_value"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"False","Components.Bind.Format":null,"Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes"}},{"HashCode":1525564843,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'checked' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"checkbox","ValueComparison":1},{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'checked' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_checked"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_checked"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-checked","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_checked"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"checked","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"False","Components.Bind.Format":null,"Components.Bind.TypeAttribute":"checkbox","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes"}},{"HashCode":-2050403530,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"text","ValueComparison":1},{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"False","Components.Bind.Format":null,"Components.Bind.TypeAttribute":"text","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes"}},{"HashCode":1758301023,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"number","ValueComparison":1},{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":null,"Components.Bind.TypeAttribute":"number","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes"}},{"HashCode":2003827684,"Kind":"Components.Bind","Name":"Bind_value","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"number","ValueComparison":1},{"Name":"@bind-value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-value","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind_value"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":null,"Components.Bind.TypeAttribute":"number","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes"}},{"HashCode":-259225247,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"date","ValueComparison":1},{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":"yyyy-MM-dd","Components.Bind.TypeAttribute":"date","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes"}},{"HashCode":-570582221,"Kind":"Components.Bind","Name":"Bind_value","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"date","ValueComparison":1},{"Name":"@bind-value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-value","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind_value"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":"yyyy-MM-dd","Components.Bind.TypeAttribute":"date","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes"}},{"HashCode":564364738,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"datetime-local","ValueComparison":1},{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":"yyyy-MM-ddTHH:mm:ss","Components.Bind.TypeAttribute":"datetime-local","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes"}},{"HashCode":1169474289,"Kind":"Components.Bind","Name":"Bind_value","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"datetime-local","ValueComparison":1},{"Name":"@bind-value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-value","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind_value"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":"yyyy-MM-ddTHH:mm:ss","Components.Bind.TypeAttribute":"datetime-local","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes"}},{"HashCode":871231720,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"month","ValueComparison":1},{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":"yyyy-MM","Components.Bind.TypeAttribute":"month","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes"}},{"HashCode":-1515522350,"Kind":"Components.Bind","Name":"Bind_value","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"month","ValueComparison":1},{"Name":"@bind-value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-value","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind_value"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":"yyyy-MM","Components.Bind.TypeAttribute":"month","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes"}},{"HashCode":-1647736512,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"time","ValueComparison":1},{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":"HH:mm:ss","Components.Bind.TypeAttribute":"time","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes"}},{"HashCode":1296198824,"Kind":"Components.Bind","Name":"Bind_value","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"input","Attributes":[{"Name":"type","Value":"time","ValueComparison":1},{"Name":"@bind-value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-value","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind_value"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind-value' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind-value' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"True","Components.Bind.Format":"HH:mm:ss","Components.Bind.TypeAttribute":"time","Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes"}},{"HashCode":-1488907878,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"select","Attributes":[{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"False","Components.Bind.Format":null,"Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes"}},{"HashCode":-596367609,"Kind":"Components.Bind","Name":"Bind","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"textarea","Attributes":[{"Name":"@bind","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind","TypeName":"System.Object","Documentation":"Binds the provided expression to the 'value' attribute and a change event delegate to the 'onchange' attribute.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Bind"},"BoundAttributeParameters":[{"Name":"format","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}},{"Name":"event","TypeName":"System.String","Documentation":"Specifies the event handler name to attach for change notifications for the value provided by the '@bind' attribute.","Metadata":{"Common.PropertyName":"Event_value"}},{"Name":"culture","TypeName":"System.Globalization.CultureInfo","Documentation":"Specifies the culture to use for conversions.","Metadata":{"Common.PropertyName":"Culture"}}]},{"Kind":"Components.Bind","Name":"format-value","TypeName":"System.String","Documentation":"Specifies a format to convert the value specified by the '@bind' attribute. The format string can currently only be used with expressions of type <code>DateTime</code>.","Metadata":{"Common.PropertyName":"Format_value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Common.ClassifyAttributesOnly":"True","Components.Bind.ValueAttribute":"value","Components.Bind.ChangeAttribute":"onchange","Components.Bind.IsInvariantCulture":"False","Components.Bind.Format":null,"Common.TypeName":"Microsoft.AspNetCore.Components.Web.BindAttributes"}},{"HashCode":270576108,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"Binds the provided expression to the 'Selected' property and a change event delegate to the 'SelectedChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"ButtonGroupButton","Attributes":[{"Name":"@bind-Selected","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Selected' property and a change event delegate to the 'SelectedChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Selected"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Selected","Components.Bind.ChangeAttribute":"SelectedChanged","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton"}},{"HashCode":-1747178657,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton","AssemblyName":"Syncfusion.Blazor.SplitButtons","Documentation":"Binds the provided expression to the 'Selected' property and a change event delegate to the 'SelectedChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton","Attributes":[{"Name":"@bind-Selected","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Selected","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Selected' property and a change event delegate to the 'SelectedChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Selected"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Selected","Components.Bind.ChangeAttribute":"SelectedChanged","Common.TypeName":"Syncfusion.Blazor.SplitButtons.ButtonGroupButton","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1896023762,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Popups.SfDialog","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDialog","Attributes":[{"Name":"@bind-Visible","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Visible","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Visible"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Visible","Components.Bind.ChangeAttribute":"VisibleChanged","Common.TypeName":"Syncfusion.Blazor.Popups.SfDialog"}},{"HashCode":-645260013,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Popups.SfDialog","AssemblyName":"Syncfusion.Blazor.Popups","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Popups.SfDialog","Attributes":[{"Name":"@bind-Visible","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Visible","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Visible"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Visible","Components.Bind.ChangeAttribute":"VisibleChanged","Common.TypeName":"Syncfusion.Blazor.Popups.SfDialog","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1663366611,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.CalendarBase<T>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CalendarBase","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<T>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.CalendarBase<T>"}},{"HashCode":377027087,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.CalendarBase<T>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.CalendarBase","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<T>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.CalendarBase<T>","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1990531596,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Values' property and a change event delegate to the 'ValuesChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfCalendar","Attributes":[{"Name":"@bind-Values","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Values","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.DateTime[]>","Documentation":"Binds the provided expression to the 'Values' property and a change event delegate to the 'ValuesChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Values"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Values","Components.Bind.ChangeAttribute":"ValuesChanged","Components.Bind.ExpressionAttribute":"ValuesExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>"}},{"HashCode":-1542669330,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfCalendar","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>"}},{"HashCode":1369201743,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Values' property and a change event delegate to the 'ValuesChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.SfCalendar","Attributes":[{"Name":"@bind-Values","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Values","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.DateTime[]>","Documentation":"Binds the provided expression to the 'Values' property and a change event delegate to the 'ValuesChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Values"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Values","Components.Bind.ChangeAttribute":"ValuesChanged","Components.Bind.ExpressionAttribute":"ValuesExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-182928755,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.SfCalendar","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfCalendar<TValue>","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":435349412,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfDatePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDatePicker","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDatePicker<TValue>"}},{"HashCode":40075188,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfDatePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.SfDatePicker","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDatePicker<TValue>","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2055026210,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'EndDate' property and a change event delegate to the 'EndDateChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDateRangePicker","Attributes":[{"Name":"@bind-EndDate","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-EndDate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'EndDate' property and a change event delegate to the 'EndDateChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"EndDate"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"EndDate","Components.Bind.ChangeAttribute":"EndDateChanged","Components.Bind.ExpressionAttribute":"EndDateExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>"}},{"HashCode":455368538,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'StartDate' property and a change event delegate to the 'StartDateChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDateRangePicker","Attributes":[{"Name":"@bind-StartDate","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-StartDate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'StartDate' property and a change event delegate to the 'StartDateChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"StartDate"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"StartDate","Components.Bind.ChangeAttribute":"StartDateChanged","Components.Bind.ExpressionAttribute":"StartDateExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>"}},{"HashCode":-1694737240,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'EndDate' property and a change event delegate to the 'EndDateChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.SfDateRangePicker","Attributes":[{"Name":"@bind-EndDate","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-EndDate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'EndDate' property and a change event delegate to the 'EndDateChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"EndDate"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"EndDate","Components.Bind.ChangeAttribute":"EndDateChanged","Components.Bind.ExpressionAttribute":"EndDateExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1522405689,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'StartDate' property and a change event delegate to the 'StartDateChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.SfDateRangePicker","Attributes":[{"Name":"@bind-StartDate","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-StartDate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'StartDate' property and a change event delegate to the 'StartDateChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"StartDate"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"StartDate","Components.Bind.ChangeAttribute":"StartDateChanged","Components.Bind.ExpressionAttribute":"StartDateExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateRangePicker<TValue>","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-509517566,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDateTimePicker","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue>"}},{"HashCode":-1019097640,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.SfDateTimePicker","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfDateTimePicker<TValue>","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1998155395,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfTimePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfTimePicker","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfTimePicker<TValue>"}},{"HashCode":800786726,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.SfTimePicker<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.SfTimePicker","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.SfTimePicker<TValue>","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-809718773,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'MultiValues' property and a change event delegate to the 'MultiValuesChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CalendarBaseRender","Attributes":[{"Name":"@bind-MultiValues","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-MultiValues","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.DateTime[]>","Documentation":"Binds the provided expression to the 'MultiValues' property and a change event delegate to the 'MultiValuesChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"MultiValues"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"MultiValues","Components.Bind.ChangeAttribute":"MultiValuesChanged","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue>"}},{"HashCode":1719132224,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CalendarBaseRender","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue>"}},{"HashCode":-1680680878,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'MultiValues' property and a change event delegate to the 'MultiValuesChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender","Attributes":[{"Name":"@bind-MultiValues","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-MultiValues","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.DateTime[]>","Documentation":"Binds the provided expression to the 'MultiValues' property and a change event delegate to the 'MultiValuesChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"MultiValues"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"MultiValues","Components.Bind.ChangeAttribute":"MultiValuesChanged","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue>","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-929181055,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarBaseRender<TValue>","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1510890792,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarDayCell<TCalendarCell>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CalendarDayCell","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TCalendarCell>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarDayCell<TCalendarCell>"}},{"HashCode":-1639826804,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarDayCell<TCalendarCell>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.Internal.CalendarDayCell","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TCalendarCell>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarDayCell<TCalendarCell>","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1458085056,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarTableHeader<TCalendarHeader>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"CalendarTableHeader","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TCalendarHeader>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarTableHeader<TCalendarHeader>"}},{"HashCode":-984522266,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Calendars.Internal.CalendarTableHeader<TCalendarHeader>","AssemblyName":"Syncfusion.Blazor.Calendars","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Calendars.Internal.CalendarTableHeader","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TCalendarHeader>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Calendars.Internal.CalendarTableHeader<TCalendarHeader>","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-820520594,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.SfColorPicker","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfColorPicker","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.SfColorPicker"}},{"HashCode":2030670275,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.SfColorPicker","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfColorPicker","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.SfColorPicker","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1650819490,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.SfMaskedTextBox","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfMaskedTextBox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.SfMaskedTextBox"}},{"HashCode":1081310225,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.SfMaskedTextBox","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfMaskedTextBox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.SfMaskedTextBox","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1819293944,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfNumericTextBox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue>"}},{"HashCode":312920309,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfNumericTextBox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.SfNumericTextBox<TValue>","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":875258527,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.NumericTextBoxEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"NumericTextBoxEvents","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.NumericTextBoxEvents<TValue>"}},{"HashCode":-1313672227,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.NumericTextBoxEvents<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.NumericTextBoxEvents","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.NumericTextBoxEvents<TValue>","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1782634635,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.SfRating","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfRating","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Double>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeName":"Syncfusion.Blazor.Inputs.SfRating"}},{"HashCode":1315751037,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.SfRating","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfRating","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Double>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Common.TypeName":"Syncfusion.Blazor.Inputs.SfRating","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":823422581,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.SfSlider<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSlider","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.SfSlider<TValue>"}},{"HashCode":762206337,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.SfSlider<TValue>","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfSlider","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.SfSlider<TValue>","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1171690516,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.SfTextBox","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfTextBox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.SfTextBox"}},{"HashCode":-72562644,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.SfTextBox","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.SfTextBox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.SfTextBox","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":957966243,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.Internal.SfInputBase","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfInputBase","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.SfInputBase"}},{"HashCode":-2036903555,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Inputs.Internal.SfInputBase","AssemblyName":"Syncfusion.Blazor.Inputs","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Inputs.Internal.SfInputBase","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.Inputs.Internal.SfInputBase","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1864122447,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputCheckbox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputCheckbox"}},{"HashCode":490191036,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputCheckbox","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":877686389,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputDate","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>"}},{"HashCode":899488481,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputDate","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputDate<TValue>","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-543982663,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputNumber","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>"}},{"HashCode":184745786,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputNumber","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputNumber<TValue>","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2088536480,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputRadioGroup","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>"}},{"HashCode":622693140,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputRadioGroup<TValue>","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-796020349,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputSelect","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>"}},{"HashCode":646250911,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputSelect","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputSelect<TValue>","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1614905710,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputText","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputText","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputText"}},{"HashCode":789494904,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputText","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputText","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputText","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":282414888,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputTextArea","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"InputTextArea","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputTextArea"}},{"HashCode":-1742066353,"Kind":"Components.Bind","Name":"Microsoft.AspNetCore.Components.Forms.InputTextArea","AssemblyName":"Microsoft.AspNetCore.Components.Web","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Microsoft.AspNetCore.Components.Forms.InputTextArea","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Microsoft.AspNetCore.Components.Forms.InputTextArea","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1945734748,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.SfMediaQuery","AssemblyName":"Syncfusion.Blazor.Core","Documentation":"Binds the provided expression to the 'ActiveBreakpoint' property and a change event delegate to the 'ActiveBreakpointChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfMediaQuery","Attributes":[{"Name":"@bind-ActiveBreakpoint","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-ActiveBreakpoint","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'ActiveBreakpoint' property and a change event delegate to the 'ActiveBreakpointChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"ActiveBreakpoint"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"ActiveBreakpoint","Components.Bind.ChangeAttribute":"ActiveBreakpointChanged","Common.TypeName":"Syncfusion.Blazor.SfMediaQuery"}},{"HashCode":-497674593,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.SfMediaQuery","AssemblyName":"Syncfusion.Blazor.Core","Documentation":"Binds the provided expression to the 'ActiveBreakpoint' property and a change event delegate to the 'ActiveBreakpointChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.SfMediaQuery","Attributes":[{"Name":"@bind-ActiveBreakpoint","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-ActiveBreakpoint","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'ActiveBreakpoint' property and a change event delegate to the 'ActiveBreakpointChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"ActiveBreakpoint"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"ActiveBreakpoint","Components.Bind.ChangeAttribute":"ActiveBreakpointChanged","Common.TypeName":"Syncfusion.Blazor.SfMediaQuery","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1436662692,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Spinner.SfSpinner","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSpinner","Attributes":[{"Name":"@bind-Visible","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Visible","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Visible"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Visible","Components.Bind.ChangeAttribute":"VisibleChanged","Common.TypeName":"Syncfusion.Blazor.Spinner.SfSpinner"}},{"HashCode":1149847587,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Spinner.SfSpinner","AssemblyName":"Syncfusion.Blazor.Spinner","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Spinner.SfSpinner","Attributes":[{"Name":"@bind-Visible","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Visible","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Visible"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Visible","Components.Bind.ChangeAttribute":"VisibleChanged","Common.TypeName":"Syncfusion.Blazor.Spinner.SfSpinner","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":20050400,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Index' property and a change event delegate to the 'IndexChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfAutoComplete","Attributes":[{"Name":"@bind-Index","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Index","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32?>","Documentation":"Binds the provided expression to the 'Index' property and a change event delegate to the 'IndexChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Index"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Index","Components.Bind.ChangeAttribute":"IndexChanged","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>"}},{"HashCode":-246002343,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfAutoComplete","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>"}},{"HashCode":-1479561296,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Index' property and a change event delegate to the 'IndexChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfAutoComplete","Attributes":[{"Name":"@bind-Index","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Index","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32?>","Documentation":"Binds the provided expression to the 'Index' property and a change event delegate to the 'IndexChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Index"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Index","Components.Bind.ChangeAttribute":"IndexChanged","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1476623554,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfAutoComplete","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfAutoComplete<TValue, TItem>","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":391654118,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Index' property and a change event delegate to the 'IndexChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfComboBox","Attributes":[{"Name":"@bind-Index","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Index","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32?>","Documentation":"Binds the provided expression to the 'Index' property and a change event delegate to the 'IndexChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Index"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Index","Components.Bind.ChangeAttribute":"IndexChanged","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>"}},{"HashCode":-1758745245,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfComboBox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>"}},{"HashCode":-840165089,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Index' property and a change event delegate to the 'IndexChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfComboBox","Attributes":[{"Name":"@bind-Index","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Index","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32?>","Documentation":"Binds the provided expression to the 'Index' property and a change event delegate to the 'IndexChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Index"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Index","Components.Bind.ChangeAttribute":"IndexChanged","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1542007644,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfComboBox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfComboBox<TValue, TItem>","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1282104181,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Index' property and a change event delegate to the 'IndexChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDropDownList","Attributes":[{"Name":"@bind-Index","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Index","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32?>","Documentation":"Binds the provided expression to the 'Index' property and a change event delegate to the 'IndexChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Index"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Index","Components.Bind.ChangeAttribute":"IndexChanged","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>"}},{"HashCode":-1649944248,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfDropDownList","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>"}},{"HashCode":-970434217,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Index' property and a change event delegate to the 'IndexChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfDropDownList","Attributes":[{"Name":"@bind-Index","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Index","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32?>","Documentation":"Binds the provided expression to the 'Index' property and a change event delegate to the 'IndexChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Index"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Index","Components.Bind.ChangeAttribute":"IndexChanged","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1887739869,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfDropDownList","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfDropDownList<TValue, TItem>","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":632623059,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfListBox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>"}},{"HashCode":-230826262,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfListBox","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfListBox<TValue, TItem>","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":510705577,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfMultiSelect","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>"}},{"HashCode":-1485997673,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>","AssemblyName":"Syncfusion.Blazor.DropDowns","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.DropDowns.SfMultiSelect","Attributes":[{"Name":"@bind-Value","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Value","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TValue>","Documentation":"Binds the provided expression to the 'Value' property and a change event delegate to the 'ValueChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Value"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Value","Components.Bind.ChangeAttribute":"ValueChanged","Components.Bind.ExpressionAttribute":"ValueExpression","Common.TypeName":"Syncfusion.Blazor.DropDowns.SfMultiSelect<TValue, TItem>","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":429227174,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Grids.SfGrid<TValue>","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"Binds the provided expression to the 'DataSource' property and a change event delegate to the 'DataSourceChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfGrid","Attributes":[{"Name":"@bind-DataSource","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-DataSource","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.IEnumerable<TValue>>","Documentation":"Binds the provided expression to the 'DataSource' property and a change event delegate to the 'DataSourceChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"DataSource"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"DataSource","Components.Bind.ChangeAttribute":"DataSourceChanged","Common.TypeName":"Syncfusion.Blazor.Grids.SfGrid<TValue>"}},{"HashCode":-1669175177,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Grids.SfGrid<TValue>","AssemblyName":"Syncfusion.Blazor.Grids","Documentation":"Binds the provided expression to the 'DataSource' property and a change event delegate to the 'DataSourceChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Grids.SfGrid","Attributes":[{"Name":"@bind-DataSource","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-DataSource","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.IEnumerable<TValue>>","Documentation":"Binds the provided expression to the 'DataSource' property and a change event delegate to the 'DataSourceChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"DataSource"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"DataSource","Components.Bind.ChangeAttribute":"DataSourceChanged","Common.TypeName":"Syncfusion.Blazor.Grids.SfGrid<TValue>","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-296305465,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.AccordionItem","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'Expanded' property and a change event delegate to the 'ExpandedChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"AccordionItem","Attributes":[{"Name":"@bind-Expanded","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Expanded","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Expanded' property and a change event delegate to the 'ExpandedChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Expanded"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Expanded","Components.Bind.ChangeAttribute":"ExpandedChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionItem"}},{"HashCode":1220375404,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.AccordionItem","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'Expanded' property and a change event delegate to the 'ExpandedChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.AccordionItem","Attributes":[{"Name":"@bind-Expanded","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Expanded","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Expanded' property and a change event delegate to the 'ExpandedChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Expanded"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Expanded","Components.Bind.ChangeAttribute":"ExpandedChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.AccordionItem","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":318768078,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.SfAccordion","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'ExpandedIndices' property and a change event delegate to the 'ExpandedIndicesChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfAccordion","Attributes":[{"Name":"@bind-ExpandedIndices","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-ExpandedIndices","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32[]>","Documentation":"Binds the provided expression to the 'ExpandedIndices' property and a change event delegate to the 'ExpandedIndicesChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"ExpandedIndices"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"ExpandedIndices","Components.Bind.ChangeAttribute":"ExpandedIndicesChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.SfAccordion"}},{"HashCode":-1756484926,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.SfAccordion","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'ExpandedIndices' property and a change event delegate to the 'ExpandedIndicesChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfAccordion","Attributes":[{"Name":"@bind-ExpandedIndices","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-ExpandedIndices","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32[]>","Documentation":"Binds the provided expression to the 'ExpandedIndices' property and a change event delegate to the 'ExpandedIndicesChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"ExpandedIndices"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"ExpandedIndices","Components.Bind.ChangeAttribute":"ExpandedIndicesChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.SfAccordion","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":2039802855,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.SfBreadcrumb","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'ActiveItem' property and a change event delegate to the 'ActiveItemChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfBreadcrumb","Attributes":[{"Name":"@bind-ActiveItem","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-ActiveItem","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'ActiveItem' property and a change event delegate to the 'ActiveItemChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"ActiveItem"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"ActiveItem","Components.Bind.ChangeAttribute":"ActiveItemChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.SfBreadcrumb"}},{"HashCode":-620353332,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.SfBreadcrumb","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'ActiveItem' property and a change event delegate to the 'ActiveItemChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfBreadcrumb","Attributes":[{"Name":"@bind-ActiveItem","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-ActiveItem","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String>","Documentation":"Binds the provided expression to the 'ActiveItem' property and a change event delegate to the 'ActiveItemChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"ActiveItem"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"ActiveItem","Components.Bind.ChangeAttribute":"ActiveItemChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.SfBreadcrumb","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-2104050104,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.SfCarousel","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfCarousel","Attributes":[{"Name":"@bind-SelectedIndex","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-SelectedIndex","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32>","Documentation":"Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"SelectedIndex"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"SelectedIndex","Components.Bind.ChangeAttribute":"SelectedIndexChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.SfCarousel"}},{"HashCode":1790835934,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.SfCarousel","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfCarousel","Attributes":[{"Name":"@bind-SelectedIndex","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-SelectedIndex","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32>","Documentation":"Binds the provided expression to the 'SelectedIndex' property and a change event delegate to the 'SelectedIndexChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"SelectedIndex"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"SelectedIndex","Components.Bind.ChangeAttribute":"SelectedIndexChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.SfCarousel","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1497872501,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.SfPager","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'PageSize' property and a change event delegate to the 'PageSizeChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfPager","Attributes":[{"Name":"@bind-PageSize","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-PageSize","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.PageSizeChangedArgs>","Documentation":"Binds the provided expression to the 'PageSize' property and a change event delegate to the 'PageSizeChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"PageSize"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"PageSize","Components.Bind.ChangeAttribute":"PageSizeChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.SfPager"}},{"HashCode":1047292908,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.SfPager","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'PageSize' property and a change event delegate to the 'PageSizeChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfPager","Attributes":[{"Name":"@bind-PageSize","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-PageSize","TypeName":"Microsoft.AspNetCore.Components.EventCallback<Syncfusion.Blazor.Navigations.PageSizeChangedArgs>","Documentation":"Binds the provided expression to the 'PageSize' property and a change event delegate to the 'PageSizeChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"PageSize"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"PageSize","Components.Bind.ChangeAttribute":"PageSizeChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.SfPager","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-150731109,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.SfSidebar","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'IsOpen' property and a change event delegate to the 'IsOpenChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSidebar","Attributes":[{"Name":"@bind-IsOpen","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-IsOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'IsOpen' property and a change event delegate to the 'IsOpenChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"IsOpen"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"IsOpen","Components.Bind.ChangeAttribute":"IsOpenChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.SfSidebar"}},{"HashCode":-1352765887,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.SfSidebar","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'IsOpen' property and a change event delegate to the 'IsOpenChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfSidebar","Attributes":[{"Name":"@bind-IsOpen","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-IsOpen","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'IsOpen' property and a change event delegate to the 'IsOpenChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"IsOpen"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"IsOpen","Components.Bind.ChangeAttribute":"IsOpenChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.SfSidebar","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-223672501,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.SfTab","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'SelectedItem' property and a change event delegate to the 'SelectedItemChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfTab","Attributes":[{"Name":"@bind-SelectedItem","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-SelectedItem","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32>","Documentation":"Binds the provided expression to the 'SelectedItem' property and a change event delegate to the 'SelectedItemChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"SelectedItem"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"SelectedItem","Components.Bind.ChangeAttribute":"SelectedItemChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.SfTab"}},{"HashCode":771278086,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.SfTab","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'SelectedItem' property and a change event delegate to the 'SelectedItemChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfTab","Attributes":[{"Name":"@bind-SelectedItem","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-SelectedItem","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Int32>","Documentation":"Binds the provided expression to the 'SelectedItem' property and a change event delegate to the 'SelectedItemChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"SelectedItem"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"SelectedItem","Components.Bind.ChangeAttribute":"SelectedItemChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.SfTab","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-1927831382,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'CheckedNodes' property and a change event delegate to the 'CheckedNodesChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfTreeView","Attributes":[{"Name":"@bind-CheckedNodes","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-CheckedNodes","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"Binds the provided expression to the 'CheckedNodes' property and a change event delegate to the 'CheckedNodesChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"CheckedNodes"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"CheckedNodes","Components.Bind.ChangeAttribute":"CheckedNodesChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>"}},{"HashCode":287511084,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'ExpandedNodes' property and a change event delegate to the 'ExpandedNodesChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfTreeView","Attributes":[{"Name":"@bind-ExpandedNodes","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-ExpandedNodes","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"Binds the provided expression to the 'ExpandedNodes' property and a change event delegate to the 'ExpandedNodesChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"ExpandedNodes"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"ExpandedNodes","Components.Bind.ChangeAttribute":"ExpandedNodesChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>"}},{"HashCode":-315043930,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'SelectedNodes' property and a change event delegate to the 'SelectedNodesChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfTreeView","Attributes":[{"Name":"@bind-SelectedNodes","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-SelectedNodes","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"Binds the provided expression to the 'SelectedNodes' property and a change event delegate to the 'SelectedNodesChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"SelectedNodes"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"SelectedNodes","Components.Bind.ChangeAttribute":"SelectedNodesChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>"}},{"HashCode":68022096,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'CheckedNodes' property and a change event delegate to the 'CheckedNodesChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfTreeView","Attributes":[{"Name":"@bind-CheckedNodes","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-CheckedNodes","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"Binds the provided expression to the 'CheckedNodes' property and a change event delegate to the 'CheckedNodesChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"CheckedNodes"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"CheckedNodes","Components.Bind.ChangeAttribute":"CheckedNodesChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":875364941,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'ExpandedNodes' property and a change event delegate to the 'ExpandedNodesChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfTreeView","Attributes":[{"Name":"@bind-ExpandedNodes","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-ExpandedNodes","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"Binds the provided expression to the 'ExpandedNodes' property and a change event delegate to the 'ExpandedNodesChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"ExpandedNodes"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"ExpandedNodes","Components.Bind.ChangeAttribute":"ExpandedNodesChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-938606446,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'SelectedNodes' property and a change event delegate to the 'SelectedNodesChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.SfTreeView","Attributes":[{"Name":"@bind-SelectedNodes","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-SelectedNodes","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"Binds the provided expression to the 'SelectedNodes' property and a change event delegate to the 'SelectedNodesChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"SelectedNodes"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"SelectedNodes","Components.Bind.ChangeAttribute":"SelectedNodesChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.SfTreeView<TValue>","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1964885,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.TreeViewFieldsSettings<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'DataSource' property and a change event delegate to the 'DataSourceChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"TreeViewFieldsSettings","Attributes":[{"Name":"@bind-DataSource","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-DataSource","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.IEnumerable<TValue>>","Documentation":"Binds the provided expression to the 'DataSource' property and a change event delegate to the 'DataSourceChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"DataSource"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"DataSource","Components.Bind.ChangeAttribute":"DataSourceChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewFieldsSettings<TValue>"}},{"HashCode":2075289180,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Navigations.TreeViewFieldsSettings<TValue>","AssemblyName":"Syncfusion.Blazor.Navigations","Documentation":"Binds the provided expression to the 'DataSource' property and a change event delegate to the 'DataSourceChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Navigations.TreeViewFieldsSettings","Attributes":[{"Name":"@bind-DataSource","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-DataSource","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Collections.Generic.IEnumerable<TValue>>","Documentation":"Binds the provided expression to the 'DataSource' property and a change event delegate to the 'DataSourceChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"DataSource"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"DataSource","Components.Bind.ChangeAttribute":"DataSourceChanged","Common.TypeName":"Syncfusion.Blazor.Navigations.TreeViewFieldsSettings<TValue>","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1756782586,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Indeterminate' property and a change event delegate to the 'IndeterminateChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfCheckBox","Attributes":[{"Name":"@bind-Indeterminate","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Indeterminate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Indeterminate' property and a change event delegate to the 'IndeterminateChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Indeterminate"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Indeterminate","Components.Bind.ChangeAttribute":"IndeterminateChanged","Common.TypeName":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>"}},{"HashCode":1072923475,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfCheckBox","Attributes":[{"Name":"@bind-Checked","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Checked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Checked"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Checked","Components.Bind.ChangeAttribute":"CheckedChanged","Components.Bind.ExpressionAttribute":"CheckedExpression","Common.TypeName":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>"}},{"HashCode":559819551,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Indeterminate' property and a change event delegate to the 'IndeterminateChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfCheckBox","Attributes":[{"Name":"@bind-Indeterminate","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Indeterminate","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Indeterminate' property and a change event delegate to the 'IndeterminateChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Indeterminate"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Indeterminate","Components.Bind.ChangeAttribute":"IndeterminateChanged","Common.TypeName":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1398760137,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfCheckBox","Attributes":[{"Name":"@bind-Checked","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Checked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Checked"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Checked","Components.Bind.ChangeAttribute":"CheckedChanged","Components.Bind.ExpressionAttribute":"CheckedExpression","Common.TypeName":"Syncfusion.Blazor.Buttons.SfCheckBox<TChecked>","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":776025600,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfChip","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'SelectedChips' property and a change event delegate to the 'SelectedChipsChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfChip","Attributes":[{"Name":"@bind-SelectedChips","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-SelectedChips","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"Binds the provided expression to the 'SelectedChips' property and a change event delegate to the 'SelectedChipsChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"SelectedChips"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"SelectedChips","Components.Bind.ChangeAttribute":"SelectedChipsChanged","Common.TypeName":"Syncfusion.Blazor.Buttons.SfChip"}},{"HashCode":-94634487,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfChip","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'SelectedChips' property and a change event delegate to the 'SelectedChipsChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfChip","Attributes":[{"Name":"@bind-SelectedChips","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-SelectedChips","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.String[]>","Documentation":"Binds the provided expression to the 'SelectedChips' property and a change event delegate to the 'SelectedChipsChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"SelectedChips"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"SelectedChips","Components.Bind.ChangeAttribute":"SelectedChipsChanged","Common.TypeName":"Syncfusion.Blazor.Buttons.SfChip","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":-876337493,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfRadioButton","Attributes":[{"Name":"@bind-Checked","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Checked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Checked"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Checked","Components.Bind.ChangeAttribute":"CheckedChanged","Components.Bind.ExpressionAttribute":"CheckedExpression","Common.TypeName":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>"}},{"HashCode":360060867,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfRadioButton","Attributes":[{"Name":"@bind-Checked","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Checked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Checked"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Checked","Components.Bind.ChangeAttribute":"CheckedChanged","Components.Bind.ExpressionAttribute":"CheckedExpression","Common.TypeName":"Syncfusion.Blazor.Buttons.SfRadioButton<TChecked>","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1015549937,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfSpeedDial","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSpeedDial","Attributes":[{"Name":"@bind-Visible","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Visible","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Visible"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Visible","Components.Bind.ChangeAttribute":"VisibleChanged","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial"}},{"HashCode":-1386227698,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfSpeedDial","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfSpeedDial","Attributes":[{"Name":"@bind-Visible","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Visible","TypeName":"Microsoft.AspNetCore.Components.EventCallback<System.Boolean>","Documentation":"Binds the provided expression to the 'Visible' property and a change event delegate to the 'VisibleChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Visible"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Visible","Components.Bind.ChangeAttribute":"VisibleChanged","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSpeedDial","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":1675440890,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"SfSwitch","Attributes":[{"Name":"@bind-Checked","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Checked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Checked"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Checked","Components.Bind.ChangeAttribute":"CheckedChanged","Components.Bind.ExpressionAttribute":"CheckedExpression","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>"}},{"HashCode":-310925140,"Kind":"Components.Bind","Name":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>","AssemblyName":"Syncfusion.Blazor.Buttons","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"Syncfusion.Blazor.Buttons.SfSwitch","Attributes":[{"Name":"@bind-Checked","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Bind","Name":"@bind-Checked","TypeName":"Microsoft.AspNetCore.Components.EventCallback<TChecked>","Documentation":"Binds the provided expression to the 'Checked' property and a change event delegate to the 'CheckedChanged' property of the component.","Metadata":{"Common.DirectiveAttribute":"True","Common.PropertyName":"Checked"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Bind","Components.Bind.ValueAttribute":"Checked","Components.Bind.ChangeAttribute":"CheckedChanged","Components.Bind.ExpressionAttribute":"CheckedExpression","Common.TypeName":"Syncfusion.Blazor.Buttons.SfSwitch<TChecked>","Components.NameMatch":"Components.FullyQualifiedNameMatch"}},{"HashCode":93715084,"Kind":"Components.Ref","Name":"Ref","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Populates the specified field or property with a reference to the element or component.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@ref","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Ref","Name":"@ref","TypeName":"System.Object","Documentation":"Populates the specified field or property with a reference to the element or component.","Metadata":{"Common.PropertyName":"Ref","Common.DirectiveAttribute":"True"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Ref","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Ref"}},{"HashCode":-115576540,"Kind":"Components.Key","Name":"Key","AssemblyName":"Microsoft.AspNetCore.Components","Documentation":"Ensures that the component or element will be preserved across renders if (and only if) the supplied key value matches.","CaseSensitive":true,"TagMatchingRules":[{"TagName":"*","Attributes":[{"Name":"@key","Metadata":{"Common.DirectiveAttribute":"True"}}]}],"BoundAttributes":[{"Kind":"Components.Key","Name":"@key","TypeName":"System.Object","Documentation":"Ensures that the component or element will be preserved across renders if (and only if) the supplied key value matches.","Metadata":{"Common.PropertyName":"Key","Common.DirectiveAttribute":"True"}}],"Metadata":{"Runtime.Name":"Components.None","Components.IsSpecialKind":"Components.Key","Common.ClassifyAttributesOnly":"True","Common.TypeName":"Microsoft.AspNetCore.Components.Key"}}],"CSharpLanguageVersion":1000},"RootNamespace":"BlazorWeb.Client","Documents":[{"FilePath":"C:\\Users\\MONSTER\\source\\repos\\BlazorWeb\\BlazorWeb\\Client\\Shared\\NavMenu.razor","TargetPath":"Shared\\NavMenu.razor","FileKind":"component"},{"FilePath":"C:\\Users\\MONSTER\\source\\repos\\BlazorWeb\\BlazorWeb\\Client\\Pages\\Index.razor","TargetPath":"Pages\\Index.razor","FileKind":"component"},{"FilePath":"C:\\Users\\MONSTER\\source\\repos\\BlazorWeb\\BlazorWeb\\Client\\Shared\\SurveyPrompt.razor","TargetPath":"Shared\\SurveyPrompt.razor","FileKind":"component"},{"FilePath":"C:\\Users\\MONSTER\\source\\repos\\BlazorWeb\\BlazorWeb\\Client\\Pages\\FetchData.razor","TargetPath":"Pages\\FetchData.razor","FileKind":"component"},{"FilePath":"C:\\Users\\MONSTER\\source\\repos\\BlazorWeb\\BlazorWeb\\Client\\Pages\\Counter.razor","TargetPath":"Pages\\Counter.razor","FileKind":"component"},{"FilePath":"C:\\Users\\MONSTER\\source\\repos\\BlazorWeb\\BlazorWeb\\Client\\Shared\\MainLayout.razor","TargetPath":"Shared\\MainLayout.razor","FileKind":"component"},{"FilePath":"C:\\Users\\MONSTER\\source\\repos\\BlazorWeb\\BlazorWeb\\Client\\App.razor","TargetPath":"App.razor","FileKind":"component"},{"FilePath":"C:\\Users\\MONSTER\\source\\repos\\BlazorWeb\\BlazorWeb\\Client\\_Imports.razor","TargetPath":"_Imports.razor","FileKind":"componentImport"}],"SerializationFormat":"0.3"}